/*[system-bundles-config]*/
System.bundles = {};
/*npm-utils*/
define('npm-utils', function (require, exports, module) {
    (function (global, require, exports, module) {
        var slice = Array.prototype.slice;
        var npmModuleRegEx = /.+@.+\..+\..+#.+/;
        var conditionalModuleRegEx = /#\{[^\}]+\}|#\?.+$/;
        var gitUrlEx = /(git|http(s?)):\/\//;
        var supportsSet = typeof Set === 'function';
        var utils = {
            extend: function (d, s, deep, existingSet) {
                var val;
                var set = existingSet;
                if (deep) {
                    if (!set) {
                        if (supportsSet) {
                            set = new Set();
                        } else {
                            set = [];
                        }
                    }
                    if (supportsSet) {
                        if (set.has(s)) {
                            return s;
                        } else {
                            set.add(s);
                        }
                    } else {
                        if (set.indexOf(s) !== -1) {
                            return s;
                        } else {
                            set.push(s);
                        }
                    }
                }
                for (var prop in s) {
                    val = s[prop];
                    if (deep) {
                        if (utils.isArray(val)) {
                            d[prop] = slice.call(val);
                        } else if (utils.isPlainObject(val)) {
                            d[prop] = utils.extend({}, val, deep, set);
                        } else {
                            d[prop] = s[prop];
                        }
                    } else {
                        d[prop] = s[prop];
                    }
                }
                return d;
            },
            map: function (arr, fn) {
                var i = 0, len = arr.length, out = [];
                for (; i < len; i++) {
                    out.push(fn.call(arr, arr[i]));
                }
                return out;
            },
            filter: function (arr, fn) {
                var i = 0, len = arr.length, out = [], res;
                for (; i < len; i++) {
                    res = fn.call(arr, arr[i]);
                    if (res) {
                        out.push(arr[i]);
                    }
                }
                return out;
            },
            forEach: function (arr, fn) {
                var i = 0, len = arr.length;
                for (; i < len; i++) {
                    fn.call(arr, arr[i], i);
                }
            },
            flow: function (fns) {
                return function () {
                    var res = fns[0].apply(this, arguments);
                    for (var i = 1; i < fns.length; i++) {
                        res = fns[i].call(this, res);
                    }
                    return res;
                };
            },
            isObject: function (obj) {
                return typeof obj === 'object';
            },
            isPlainObject: function (obj) {
                return utils.isObject(obj) && (!obj || obj.__proto__ === Object.prototype);
            },
            isArray: Array.isArray || function (arr) {
                return Object.prototype.toString.call(arr) === '[object Array]';
            },
            isEnv: function (name) {
                return this.isEnv ? this.isEnv(name) : this.env === name;
            },
            isGitUrl: function (str) {
                return gitUrlEx.test(str);
            },
            warnOnce: function (msg) {
                var w = this._warnings = this._warnings || {};
                if (w[msg])
                    return;
                w[msg] = true;
                this.warn(msg);
            },
            warn: function (msg) {
                if (typeof steal !== 'undefined' && typeof console !== 'undefined' && console.warn) {
                    steal.done().then(function () {
                        if (steal.dev && steal.dev.warn) {
                            steal.dev.warn(msg);
                        } else if (console.warn) {
                            console.warn('steal.js WARNING: ' + msg);
                        } else {
                            console.log(msg);
                        }
                    });
                }
            },
            relativeURI: function (baseURL, url) {
                return typeof steal !== 'undefined' ? steal.relativeURI(baseURL, url) : url;
            },
            moduleName: {
                create: function (descriptor, standard) {
                    if (standard) {
                        return descriptor.moduleName;
                    } else {
                        if (descriptor === '@empty') {
                            return descriptor;
                        }
                        var modulePath;
                        if (descriptor.modulePath) {
                            modulePath = descriptor.modulePath.substr(0, 2) === './' ? descriptor.modulePath.substr(2) : descriptor.modulePath;
                        }
                        var version = descriptor.version;
                        if (version && version[0] !== '^') {
                            version = encodeURIComponent(decodeURIComponent(version));
                        }
                        return descriptor.packageName + (version ? '@' + version : '') + (modulePath ? '#' + modulePath : '') + (descriptor.plugin ? descriptor.plugin : '');
                    }
                },
                isNpm: function (moduleName) {
                    return npmModuleRegEx.test(moduleName);
                },
                isConditional: function (moduleName) {
                    return conditionalModuleRegEx.test(moduleName);
                },
                isFullyConvertedNpm: function (parsedModuleName) {
                    return !!(parsedModuleName.packageName && parsedModuleName.version && parsedModuleName.modulePath);
                },
                isScoped: function (moduleName) {
                    return moduleName[0] === '@';
                },
                parse: function (moduleName, currentPackageName, global, context) {
                    var pluginParts = moduleName.split('!');
                    var modulePathParts = pluginParts[0].split('#');
                    var versionParts = modulePathParts[0].split('@');
                    if (!modulePathParts[1] && !versionParts[0]) {
                        versionParts = ['@' + versionParts[1]];
                    }
                    if (versionParts.length === 3 && utils.moduleName.isScoped(moduleName)) {
                        versionParts.splice(0, 1);
                        versionParts[0] = '@' + versionParts[0];
                    }
                    var packageName, modulePath;
                    if (currentPackageName && utils.path.isRelative(moduleName)) {
                        packageName = currentPackageName;
                        modulePath = versionParts[0];
                    } else if (currentPackageName && utils.path.isInHomeDir(moduleName, context)) {
                        packageName = currentPackageName;
                        modulePath = versionParts[0].split('/').slice(1).join('/');
                    } else {
                        if (modulePathParts[1]) {
                            packageName = versionParts[0];
                            modulePath = modulePathParts[1];
                        } else {
                            var folderParts = versionParts[0].split('/');
                            if (folderParts.length && folderParts[0][0] === '@') {
                                packageName = folderParts.splice(0, 2).join('/');
                            } else {
                                packageName = folderParts.shift();
                            }
                            modulePath = folderParts.join('/');
                        }
                    }
                    modulePath = utils.path.removeJS(modulePath);
                    return {
                        plugin: pluginParts.length === 2 ? '!' + pluginParts[1] : undefined,
                        version: versionParts[1],
                        modulePath: modulePath,
                        packageName: packageName,
                        moduleName: moduleName,
                        isGlobal: global
                    };
                },
                parseFromPackage: function (loader, refPkg, name, parentName) {
                    var packageName = utils.pkg.name(refPkg), parsedModuleName = utils.moduleName.parse(name, packageName, undefined, { loader: loader }), isRelative = utils.path.isRelative(parsedModuleName.modulePath);
                    if (isRelative && !parentName) {
                        throw new Error('Cannot resolve a relative module identifier ' + 'with no parent module:', name);
                    }
                    if (isRelative) {
                        var parentParsed = utils.moduleName.parse(parentName, packageName);
                        if (parentParsed.packageName === parsedModuleName.packageName && parentParsed.modulePath) {
                            var makePathRelative = true;
                            if (name === '../' || name === './' || name === '..') {
                                var relativePath = utils.path.relativeTo(parentParsed.modulePath, name);
                                var isInRoot = utils.path.isPackageRootDir(relativePath);
                                if (isInRoot) {
                                    parsedModuleName.modulePath = utils.pkg.main(refPkg);
                                    makePathRelative = false;
                                } else {
                                    parsedModuleName.modulePath = name + (utils.path.endsWithSlash(name) ? '' : '/') + 'index';
                                }
                            }
                            if (makePathRelative) {
                                parsedModuleName.modulePath = utils.path.makeRelative(utils.path.joinURIs(parentParsed.modulePath, parsedModuleName.modulePath));
                            }
                        }
                    }
                    var mapName = utils.moduleName.create(parsedModuleName), refSteal = utils.pkg.config(refPkg), mappedName;
                    if (refPkg.browser && typeof refPkg.browser !== 'string' && mapName in refPkg.browser && (!refSteal || !refSteal.ignoreBrowser)) {
                        mappedName = refPkg.browser[mapName] === false ? '@empty' : refPkg.browser[mapName];
                    }
                    var global = loader && loader.globalBrowser && loader.globalBrowser[mapName];
                    if (global) {
                        mappedName = global.moduleName === false ? '@empty' : global.moduleName;
                    }
                    if (mappedName) {
                        return utils.moduleName.parse(mappedName, packageName, !!global);
                    } else {
                        return parsedModuleName;
                    }
                },
                nameAndVersion: function (parsedModuleName) {
                    return parsedModuleName.packageName + '@' + parsedModuleName.version;
                },
                isBareIdentifier: function (identifier) {
                    return identifier && identifier[0] !== '.' && identifier[0] !== '@';
                }
            },
            pkg: {
                name: function (pkg) {
                    var steal = utils.pkg.config(pkg);
                    return steal && steal.name || pkg.name;
                },
                main: function (pkg) {
                    var main;
                    var steal = utils.pkg.config(pkg);
                    if (steal && steal.main) {
                        main = steal.main;
                    } else if (typeof pkg.browser === 'string') {
                        if (utils.path.endsWithSlash(pkg.browser)) {
                            main = pkg.browser + 'index';
                        } else {
                            main = pkg.browser;
                        }
                    } else if (typeof pkg.jam === 'object' && pkg.jam.main) {
                        main = pkg.jam.main;
                    } else if (pkg.main) {
                        main = pkg.main;
                    } else {
                        main = 'index';
                    }
                    return utils.path.removeJS(utils.path.removeDotSlash(main));
                },
                rootDir: function (pkg, isRoot) {
                    var root = isRoot ? utils.path.removePackage(pkg.fileUrl) : utils.path.pkgDir(pkg.fileUrl);
                    var lib = utils.pkg.directoriesLib(pkg);
                    if (lib) {
                        root = utils.path.joinURIs(utils.path.addEndingSlash(root), lib);
                    }
                    return root;
                },
                isRoot: function (loader, pkg) {
                    var root = utils.pkg.getDefault(loader);
                    return pkg && pkg.name === root.name && pkg.version === root.version;
                },
                homeAlias: function (context) {
                    return context && context.loader && context.loader.homeAlias || '~';
                },
                getDefault: function (loader) {
                    return loader.npmPaths.__default;
                },
                findByModuleNameOrAddress: function (loader, moduleName, moduleAddress) {
                    if (loader.npm) {
                        if (moduleName) {
                            var parsed = utils.moduleName.parse(moduleName);
                            if (parsed.version && parsed.packageName) {
                                var name = parsed.packageName + '@' + parsed.version;
                                if (name in loader.npm) {
                                    return loader.npm[name];
                                }
                            }
                        }
                        if (moduleAddress) {
                            var startingAddress = utils.relativeURI(loader.baseURL, moduleAddress);
                            var packageFolder = utils.pkg.folderAddress(startingAddress);
                            return packageFolder ? loader.npmPaths[packageFolder] : utils.pkg.getDefault(loader);
                        } else {
                            return utils.pkg.getDefault(loader);
                        }
                    }
                },
                folderAddress: function (address) {
                    var nodeModules = '/node_modules/', nodeModulesIndex = address.lastIndexOf(nodeModules), nextSlash = address.indexOf('/', nodeModulesIndex + nodeModules.length);
                    if (nodeModulesIndex >= 0) {
                        return nextSlash >= 0 ? address.substr(0, nextSlash) : address;
                    }
                },
                findDep: function (loader, refPkg, name) {
                    if (loader.npm && refPkg && !utils.path.startsWithDotSlash(name)) {
                        var nameAndVersion = name + '@' + refPkg.resolutions[name];
                        var pkg = loader.npm[nameAndVersion];
                        return pkg;
                    }
                },
                findDepWalking: function (loader, refPackage, name) {
                    if (loader.npm && refPackage && !utils.path.startsWithDotSlash(name)) {
                        var curPackage = utils.path.depPackageDir(refPackage.fileUrl, name);
                        while (curPackage) {
                            var pkg = loader.npmPaths[curPackage];
                            if (pkg) {
                                return pkg;
                            }
                            var parentAddress = utils.path.parentNodeModuleAddress(curPackage);
                            if (!parentAddress) {
                                return;
                            }
                            curPackage = parentAddress + '/' + name;
                        }
                    }
                },
                findByName: function (loader, name) {
                    if (loader.npm && !utils.path.startsWithDotSlash(name)) {
                        return loader.npm[name];
                    }
                },
                findByNameAndVersion: function (loader, name, version) {
                    if (loader.npm && !utils.path.startsWithDotSlash(name)) {
                        var nameAndVersion = name + '@' + version;
                        return loader.npm[nameAndVersion];
                    }
                },
                findByUrl: function (loader, url) {
                    if (loader.npm) {
                        var fullUrl = utils.pkg.folderAddress(url);
                        return loader.npmPaths[fullUrl];
                    }
                },
                directoriesLib: function (pkg) {
                    var steal = utils.pkg.config(pkg);
                    var lib = steal && steal.directories && steal.directories.lib;
                    var ignores = [
                            '.',
                            '/'
                        ], ignore;
                    if (!lib)
                        return undefined;
                    while (!!(ignore = ignores.shift())) {
                        if (lib[0] === ignore) {
                            lib = lib.substr(1);
                        }
                    }
                    return lib;
                },
                hasDirectoriesLib: function (pkg) {
                    var steal = utils.pkg.config(pkg);
                    return steal && steal.directories && !!steal.directories.lib;
                },
                findPackageInfo: function (context, pkg) {
                    var pkgInfo = context.pkgInfo;
                    if (pkgInfo) {
                        var out;
                        utils.forEach(pkgInfo, function (p) {
                            if (pkg.name === p.name && pkg.version === p.version) {
                                out = p;
                            }
                        });
                        return out;
                    }
                },
                saveResolution: function (context, refPkg, pkg) {
                    var npmPkg = utils.pkg.findPackageInfo(context, refPkg);
                    npmPkg.resolutions[pkg.name] = refPkg.resolutions[pkg.name] = pkg.version;
                },
                config: function (pkg) {
                    return pkg.steal || pkg.system;
                }
            },
            path: {
                makeRelative: function (path) {
                    if (utils.path.isRelative(path) && path.substr(0, 1) !== '/') {
                        return path;
                    } else {
                        return './' + path;
                    }
                },
                removeJS: function (path) {
                    return path.replace(/\.js(!|$)/, function (whole, part) {
                        return part;
                    });
                },
                removePackage: function (path) {
                    return path.replace(/\/package\.json.*/, '');
                },
                addJS: function (path) {
                    if (/\.js(on)?$/.test(path)) {
                        return path;
                    } else {
                        return path + '.js';
                    }
                },
                isRelative: function (path) {
                    return path.substr(0, 1) === '.';
                },
                isInHomeDir: function (path, context) {
                    return path.substr(0, 2) === utils.pkg.homeAlias(context) + '/';
                },
                joinURIs: function (baseUri, rel) {
                    function removeDotSegments(input) {
                        var output = [];
                        input.replace(/^(\.\.?(\/|$))+/, '').replace(/\/(\.(\/|$))+/g, '/').replace(/\/\.\.$/, '/../').replace(/\/?[^\/]*/g, function (p) {
                            if (p === '/..') {
                                output.pop();
                            } else {
                                output.push(p);
                            }
                        });
                        return output.join('').replace(/^\//, input.charAt(0) === '/' ? '/' : '');
                    }
                    var href = parseURI(rel || '');
                    var base = parseURI(baseUri || '');
                    return !href || !base ? null : (href.protocol || base.protocol) + (href.protocol || href.authority ? href.authority : base.authority) + removeDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === '/' ? href.pathname : href.pathname ? (base.authority && !base.pathname ? '/' : '') + base.pathname.slice(0, base.pathname.lastIndexOf('/') + 1) + href.pathname : base.pathname) + (href.protocol || href.authority || href.pathname ? href.search : href.search || base.search) + href.hash;
                },
                startsWithDotSlash: function (path) {
                    return path.substr(0, 2) === './';
                },
                removeDotSlash: function (path) {
                    return utils.path.startsWithDotSlash(path) ? path.substr(2) : path;
                },
                endsWithSlash: function (path) {
                    return path[path.length - 1] === '/';
                },
                addEndingSlash: function (path) {
                    return utils.path.endsWithSlash(path) ? path : path + '/';
                },
                depPackage: function (parentPackageAddress, childName) {
                    var packageFolderName = parentPackageAddress.replace(/\/package\.json.*/, '');
                    return (packageFolderName ? packageFolderName + '/' : '') + 'node_modules/' + childName + '/package.json';
                },
                peerPackage: function (parentPackageAddress, childName) {
                    var packageFolderName = parentPackageAddress.replace(/\/package\.json.*/, '');
                    return packageFolderName.substr(0, packageFolderName.lastIndexOf('/')) + '/' + childName + '/package.json';
                },
                depPackageDir: function (parentPackageAddress, childName) {
                    return utils.path.depPackage(parentPackageAddress, childName).replace(/\/package\.json.*/, '');
                },
                peerNodeModuleAddress: function (address) {
                    var nodeModules = '/node_modules/', nodeModulesIndex = address.lastIndexOf(nodeModules);
                    if (nodeModulesIndex >= 0) {
                        return address.substr(0, nodeModulesIndex + nodeModules.length - 1);
                    }
                },
                parentNodeModuleAddress: function (address) {
                    var nodeModules = '/node_modules/', nodeModulesIndex = address.lastIndexOf(nodeModules), prevModulesIndex = address.lastIndexOf(nodeModules, nodeModulesIndex - 1);
                    if (prevModulesIndex >= 0) {
                        return address.substr(0, prevModulesIndex + nodeModules.length - 1);
                    }
                },
                pkgDir: function (address) {
                    var nodeModules = '/node_modules/', nodeModulesIndex = address.lastIndexOf(nodeModules), nextSlash = address.indexOf('/', nodeModulesIndex + nodeModules.length);
                    if (address[nodeModulesIndex + nodeModules.length] === '@') {
                        nextSlash = address.indexOf('/', nextSlash + 1);
                    }
                    if (nodeModulesIndex >= 0) {
                        return nextSlash >= 0 ? address.substr(0, nextSlash) : address;
                    }
                },
                basename: function (address) {
                    var parts = address.split('/');
                    return parts[parts.length - 1];
                },
                relativeTo: function (modulePath, rel) {
                    var parts = modulePath.split('/');
                    var idx = 1;
                    while (rel[idx] === '.') {
                        parts.pop();
                        idx++;
                    }
                    return parts.join('/');
                },
                isPackageRootDir: function (pth) {
                    return pth.indexOf('/') === -1;
                }
            },
            json: {
                transform: function (loader, load, data) {
                    data.steal = utils.pkg.config(data);
                    var fn = loader.jsonOptions && loader.jsonOptions.transform;
                    if (!fn)
                        return data;
                    return fn.call(loader, load, data);
                }
            },
            includeInBuild: true
        };
        function parseURI(url) {
            var m = String(url).replace(/^\s+|\s+$/g, '').match(/^([^:\/?#]+:)?(\/\/(?:[^:@\/]*(?::[^:@\/]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);
            return m ? {
                href: m[0] || '',
                protocol: m[1] || '',
                authority: m[2] || '',
                host: m[3] || '',
                hostname: m[4] || '',
                port: m[5] || '',
                pathname: m[6] || '',
                search: m[7] || '',
                hash: m[8] || ''
            } : null;
        }
        module.exports = utils;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*npm-extension*/
define('npm-extension', [
    'require',
    'exports',
    'module',
    '@steal',
    './npm-utils'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'format cjs';
        var steal = require('@steal');
        var utils = require('./npm-utils');
        exports.includeInBuild = true;
        var isNode = typeof process === 'object' && {}.toString.call(process) === '[object process]';
        var isWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;
        var isBrowser = typeof window !== 'undefined' && !isNode && !isWorker;
        exports.addExtension = function (System) {
            if (System._extensions) {
                System._extensions.push(exports.addExtension);
            }
            var oldNormalize = System.normalize;
            System.normalize = function (identifier, parentModuleName, parentAddress, pluginNormalize) {
                var name = identifier;
                var parentName = parentModuleName;
                if (parentName && this.npmParentMap && this.npmParentMap[parentName]) {
                    parentName = this.npmParentMap[parentName];
                }
                var hasNoParent = !parentName;
                var nameIsRelative = utils.path.isRelative(name);
                var parentIsNpmModule = utils.moduleName.isNpm(parentName);
                var identifierEndsWithSlash = utils.path.endsWithSlash(name);
                if (parentName && nameIsRelative && !parentIsNpmModule) {
                    return oldNormalize.call(this, name, parentName, parentAddress, pluginNormalize);
                }
                if (utils.moduleName.isConditional(name)) {
                    return oldNormalize.call(this, name, parentName, parentAddress, pluginNormalize);
                }
                var hasContextualMap = typeof this.map[parentName] === 'object' && this.map[parentName][name];
                if (hasContextualMap) {
                    return oldNormalize.call(this, name, parentName, parentAddress, pluginNormalize);
                }
                var refPkg = utils.pkg.findByModuleNameOrAddress(this, parentName, parentAddress);
                if (!refPkg) {
                    return oldNormalize.call(this, name, parentName, parentAddress, pluginNormalize);
                }
                var isPointingAtParentFolder = name === '../' || name === './';
                if (parentIsNpmModule && isPointingAtParentFolder) {
                    var parsedParentModuleName = utils.moduleName.parse(parentName);
                    var parentModulePath = parsedParentModuleName.modulePath || '';
                    var relativePath = utils.path.relativeTo(parentModulePath, name);
                    var isInRoot = utils.path.isPackageRootDir(relativePath);
                    if (isInRoot) {
                        name = refPkg.name + '#' + utils.path.removeJS(refPkg.main);
                    } else {
                        name = name + 'index';
                    }
                }
                var parsedModuleName = utils.moduleName.parseFromPackage(this, refPkg, name, parentName);
                var isRoot = utils.pkg.isRoot(this, refPkg);
                var parsedPackageNameIsReferringPackage = parsedModuleName.packageName === refPkg.name;
                var isRelativeToParentNpmModule = parentIsNpmModule && nameIsRelative && parsedPackageNameIsReferringPackage;
                var depPkg, wantedPkg;
                if (isRelativeToParentNpmModule) {
                    depPkg = refPkg;
                }
                var context = this.npmContext;
                var crawl = context && context.crawl;
                var isDev = !!crawl;
                if (!depPkg) {
                    if (crawl) {
                        var parentPkg = nameIsRelative ? null : crawl.matchedVersion(context, refPkg.name, refPkg.version);
                        if (parentPkg) {
                            var depMap = crawl.getFullDependencyMap(this, parentPkg, isRoot);
                            wantedPkg = depMap[parsedModuleName.packageName];
                            if (wantedPkg) {
                                var wantedVersion = refPkg.resolutions && refPkg.resolutions[wantedPkg.name] || wantedPkg.version;
                                var foundPkg = crawl.matchedVersion(this.npmContext, wantedPkg.name, wantedVersion);
                                if (foundPkg) {
                                    depPkg = utils.pkg.findByUrl(this, foundPkg.fileUrl);
                                }
                            }
                        }
                    } else {
                        if (isRoot) {
                            depPkg = utils.pkg.findDepWalking(this, refPkg, parsedModuleName.packageName);
                        } else {
                            depPkg = utils.pkg.findDep(this, refPkg, parsedModuleName.packageName);
                        }
                    }
                }
                if (parsedPackageNameIsReferringPackage) {
                    depPkg = utils.pkg.findByNameAndVersion(this, parsedModuleName.packageName, refPkg.version);
                }
                var lookupByName = parsedModuleName.isGlobal || hasNoParent;
                if (!depPkg) {
                    depPkg = utils.pkg.findByName(this, parsedModuleName.packageName);
                }
                var isThePackageWeWant = !isDev || !depPkg || (wantedPkg ? crawl.pkgSatisfies(depPkg, wantedPkg.version) : true);
                if (!isThePackageWeWant) {
                    depPkg = undefined;
                } else if (isDev && depPkg) {
                    utils.pkg.saveResolution(context, refPkg, depPkg);
                }
                if (!depPkg) {
                    var browserPackageName = this.globalBrowser[parsedModuleName.packageName];
                    if (browserPackageName) {
                        parsedModuleName.packageName = browserPackageName.moduleName;
                        depPkg = utils.pkg.findByName(this, parsedModuleName.packageName);
                    }
                }
                if (!depPkg && isRoot && name === refPkg.main && utils.pkg.hasDirectoriesLib(refPkg)) {
                    parsedModuleName.version = refPkg.version;
                    parsedModuleName.packageName = refPkg.name;
                    parsedModuleName.modulePath = utils.pkg.main(refPkg);
                    return oldNormalize.call(this, utils.moduleName.create(parsedModuleName), parentName, parentAddress, pluginNormalize);
                }
                var loader = this;
                if (!depPkg) {
                    if (crawl) {
                        var parentPkg = crawl.matchedVersion(this.npmContext, refPkg.name, refPkg.version);
                        if (parentPkg) {
                            var depMap = crawl.getFullDependencyMap(this, parentPkg, isRoot);
                            depPkg = depMap[parsedModuleName.packageName];
                            if (!depPkg) {
                                var parents = crawl.findPackageAndParents(this.npmContext, parsedModuleName.packageName);
                                if (parents) {
                                    depPkg = parents.package;
                                }
                            }
                        }
                    }
                    if (!depPkg) {
                        if (refPkg.browser && refPkg.browser[name]) {
                            return oldNormalize.call(this, refPkg.browser[name], parentName, parentAddress, pluginNormalize);
                        }
                        var steal = utils.pkg.config(refPkg);
                        if (steal && steal.map && typeof steal.map[name] === 'string') {
                            var mappedName = steal.map[name];
                            var envConfig = steal.envs && steal.envs[loader.env];
                            if (envConfig && envConfig.map && typeof envConfig.map[name] === 'string') {
                                mappedName = envConfig.map[name];
                            }
                            return loader.normalize(mappedName, parentName, parentAddress, pluginNormalize);
                        } else {
                            return oldNormalize.call(this, name, parentName, parentAddress, pluginNormalize);
                        }
                    }
                    return crawl.dep(this.npmContext, parentPkg, refPkg, depPkg, isRoot).then(createModuleNameAndNormalize);
                } else {
                    return createModuleNameAndNormalize(depPkg);
                }
                function createModuleNameAndNormalize(depPkg) {
                    parsedModuleName.version = depPkg.version;
                    if (!parsedModuleName.modulePath) {
                        parsedModuleName.modulePath = utils.pkg.main(depPkg);
                    }
                    var p = oldNormalize.call(loader, utils.moduleName.create(parsedModuleName), parentName, parentAddress, pluginNormalize);
                    if (identifierEndsWithSlash) {
                        p.then(function (name) {
                            if (context && context.forwardSlashMap) {
                                context.forwardSlashMap[name] = true;
                            }
                        });
                    }
                    return p;
                }
            };
            var oldLocate = System.locate;
            System.locate = function (load) {
                var parsedModuleName = utils.moduleName.parse(load.name), loader = this;
                var pmn = load.metadata.parsedModuleName = parsedModuleName;
                load.metadata.npmPackage = utils.pkg.findByNameAndVersion(this, pmn.packageName, pmn.version);
                if (parsedModuleName.version && this.npm && !loader.paths[load.name]) {
                    var pkg = this.npm[utils.moduleName.nameAndVersion(parsedModuleName)];
                    if (pkg) {
                        return oldLocate.call(this, load).then(function (locatedAddress) {
                            var address = locatedAddress;
                            var expectedAddress = utils.path.joinURIs(System.baseURL, load.name);
                            if (isBrowser) {
                                expectedAddress = expectedAddress.replace(/#/g, '%23');
                            }
                            if (address !== expectedAddress + '.js' && address !== expectedAddress) {
                                return address;
                            }
                            var root = utils.pkg.rootDir(pkg, utils.pkg.isRoot(loader, pkg));
                            if (parsedModuleName.modulePath) {
                                var npmAddress = utils.path.joinURIs(utils.path.addEndingSlash(root), parsedModuleName.plugin ? parsedModuleName.modulePath : utils.path.addJS(parsedModuleName.modulePath));
                                address = typeof steal !== 'undefined' ? utils.path.joinURIs(loader.baseURL, npmAddress) : npmAddress;
                            }
                            return address;
                        });
                    }
                }
                return oldLocate.call(this, load);
            };
            var oldFetch = System.fetch;
            System.fetch = function (load) {
                if (load.metadata.dryRun) {
                    return oldFetch.apply(this, arguments);
                }
                var loader = this;
                var context = loader.npmContext;
                var fetchPromise = Promise.resolve(oldFetch.apply(this, arguments));
                if (utils.moduleName.isNpm(load.name)) {
                    fetchPromise = fetchPromise.then(null, function (err) {
                        if (err.statusCode !== 404) {
                            return Promise.reject(err);
                        }
                        if (!loader.npmContext) {
                            loader.npmContext = { forwardSlashMap: {} };
                        }
                        var types = [].slice.call(retryTypes);
                        return retryAll(types, err).then(null, function (e) {
                            return Promise.reject(err);
                        });
                        function retryAll(types, err) {
                            if (!types.length) {
                                throw err;
                            }
                            var type = types.shift();
                            if (!type.test(load)) {
                                throw err;
                            }
                            return Promise.resolve(retryFetch.call(loader, load, type)).then(null, function (err) {
                                return retryAll(types, err);
                            });
                        }
                    });
                }
                return fetchPromise.catch(function (error) {
                    if (error.statusCode === 404 && utils.moduleName.isBareIdentifier(load.name) && !utils.pkg.isRoot(loader, load.metadata.npmPackage)) {
                        var newError = new Error([
                            'Could not load \'' + load.name + '\'',
                            'Is this an npm module not saved in your package.json?'
                        ].join('\n'));
                        newError.statusCode = error.statusCode;
                        throw newError;
                    } else {
                        throw error;
                    }
                });
            };
            var convertName = function (loader, name) {
                var pkg = utils.pkg.findByName(loader, name.split('/')[0]);
                if (pkg) {
                    var parsed = utils.moduleName.parse(name, pkg.name);
                    parsed.version = pkg.version;
                    if (!parsed.modulePath) {
                        parsed.modulePath = utils.pkg.main(pkg);
                    }
                    return utils.moduleName.create(parsed);
                }
                return name;
            };
            var configSpecial = {
                map: function (map) {
                    var newMap = {}, val;
                    for (var name in map) {
                        val = map[name];
                        newMap[convertName(this, name)] = typeof val === 'object' ? configSpecial.map(val) : convertName(this, val);
                    }
                    return newMap;
                },
                meta: function (map) {
                    var newMap = {};
                    for (var name in map) {
                        newMap[convertName(this, name)] = map[name];
                    }
                    return newMap;
                },
                paths: function (paths) {
                    var newPaths = {};
                    for (var name in paths) {
                        newPaths[convertName(this, name)] = paths[name];
                    }
                    return newPaths;
                }
            };
            var oldConfig = System.config;
            System.config = function (cfg) {
                var loader = this;
                if (loader.npmContext) {
                    var context = loader.npmContext;
                    var pkg = context.versions.__default;
                    var conv = context.convert.steal(context, pkg, cfg, true);
                    context.convert.updateConfigOnPackageLoad(conv, false, true, context.applyBuildConfig);
                    oldConfig.apply(loader, arguments);
                    return;
                }
                for (var name in cfg) {
                    if (configSpecial[name]) {
                        cfg[name] = configSpecial[name].call(loader, cfg[name]);
                    }
                }
                oldConfig.apply(loader, arguments);
            };
            steal.addNpmPackages = function (npmPackages) {
                var packages = npmPackages || [];
                var loader = this.loader;
                for (var i = 0; i < packages.length; i += 1) {
                    var pkg = packages[i];
                    var path = pkg && pkg.fileUrl;
                    if (path) {
                        loader.npmContext.paths[path] = pkg;
                    }
                }
            };
            steal.getNpmPackages = function () {
                var context = this.loader.npmContext;
                return context ? context.packages || [] : [];
            };
            function retryFetch(load, type) {
                var loader = this;
                var moduleName = typeof type.name === 'function' ? type.name(loader, load) : load.name + type.name;
                var local = utils.extend({}, load);
                local.name = moduleName;
                local.metadata = { dryRun: true };
                return Promise.resolve(loader.locate(local)).then(function (address) {
                    local.address = address;
                    return loader.fetch(local);
                }).then(function (source) {
                    load.metadata.address = local.address;
                    loader.npmParentMap[load.name] = local.name;
                    var npmLoad = loader.npmContext && loader.npmContext.npmLoad;
                    if (npmLoad) {
                        npmLoad.saveLoadIfNeeded(loader.npmContext);
                        if (!isNode) {
                            utils.warnOnce('Some 404s were encountered ' + 'while loading. Don\'t panic! ' + 'These will only happen in dev ' + 'and are harmless.');
                        }
                    }
                    return source;
                });
            }
            var retryTypes = [
                {
                    name: function (loader, load) {
                        var context = loader.npmContext;
                        if (context.forwardSlashMap[load.name]) {
                            var parts = load.name.split('/');
                            parts.pop();
                            return parts.concat(['index']).join('/');
                        }
                        return load.name + '/index';
                    },
                    test: function () {
                        return true;
                    }
                },
                {
                    name: '.json',
                    test: function (load) {
                        return utils.moduleName.isNpm(load.name) && utils.path.basename(load.address) === 'package.js';
                    }
                }
            ];
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*npm-load*/
define('npm-load', [], function(){ return {}; });
/*semver*/
define('semver', [], function(){ return {}; });
/*npm-crawl*/
define('npm-crawl', [], function(){ return {}; });
/*npm-convert*/
define('npm-convert', [], function(){ return {}; });
/*npm*/
define('npm', [], function(){ return {}; });
/*package.json!npm*/
define('package.json!npm', [
    '@loader',
    'npm-extension',
    'module'
], function (loader, npmExtension, module) {
    npmExtension.addExtension(loader);
    if (!loader.main) {
        loader.main = 'passbolt-appjs@2.10.0#passbolt';
    }
    loader._npmExtensions = [].slice.call(arguments, 2);
    (function (loader, packages, options) {
        var g = loader.global;
        if (!g.process) {
            g.process = {
                argv: [],
                cwd: function () {
                    var baseURL = loader.baseURL;
                    return baseURL;
                },
                browser: true,
                env: { NODE_ENV: loader.env },
                version: '',
                platform: navigator && navigator.userAgent && /Windows/.test(navigator.userAgent) ? 'win' : ''
            };
        }
        if (!loader.npm) {
            loader.npm = {};
            loader.npmPaths = {};
            loader.globalBrowser = {};
        }
        if (!loader.npmParentMap) {
            loader.npmParentMap = options.npmParentMap || {};
        }
        var rootPkg = loader.npmPaths.__default = packages[0];
        var rootConfig = rootPkg.steal || rootPkg.system;
        var lib = rootConfig && rootConfig.directories && rootConfig.directories.lib;
        var setGlobalBrowser = function (globals, pkg) {
            for (var name in globals) {
                loader.globalBrowser[name] = {
                    pkg: pkg,
                    moduleName: globals[name]
                };
            }
        };
        var setInNpm = function (name, pkg) {
            if (!loader.npm[name]) {
                loader.npm[name] = pkg;
            }
            loader.npm[name + '@' + pkg.version] = pkg;
        };
        var forEach = function (arr, fn) {
            var i = 0, len = arr.length;
            for (; i < len; i++) {
                res = fn.call(arr, arr[i], i);
                if (res === false)
                    break;
            }
        };
        var setupLiveReload = function () {
            if (loader.liveReloadInstalled) {
                loader['import']('live-reload', { name: module.id }).then(function (reload) {
                    reload.dispose(function () {
                        var pkgInfo = loader.npmContext.pkgInfo;
                        delete pkgInfo[rootPkg.name + '@' + rootPkg.version];
                        var idx = -1;
                        forEach(pkgInfo, function (pkg, i) {
                            if (pkg.name === rootPkg.name && pkg.version === rootPkg.version) {
                                idx = i;
                                return false;
                            }
                        });
                        pkgInfo.splice(idx, 1);
                    });
                });
            }
        };
        var ignoredConfig = [
            'bundle',
            'configDependencies',
            'transpiler'
        ];
        packages.reverse();
        forEach(packages, function (pkg) {
            var steal = pkg.steal || pkg.system;
            if (steal) {
                var main = steal.main;
                delete steal.main;
                var configDeps = steal.configDependencies;
                if (pkg !== rootPkg) {
                    forEach(ignoredConfig, function (name) {
                        delete steal[name];
                    });
                }
                loader.config(steal);
                if (pkg === rootPkg) {
                    steal.configDependencies = configDeps;
                }
                steal.main = main;
            }
            if (pkg.globalBrowser) {
                var doNotApplyGlobalBrowser = pkg.name === 'steal' && rootConfig.builtins === false;
                if (!doNotApplyGlobalBrowser) {
                    setGlobalBrowser(pkg.globalBrowser, pkg);
                }
            }
            var systemName = steal && steal.name;
            if (systemName) {
                setInNpm(systemName, pkg);
            } else {
                setInNpm(pkg.name, pkg);
            }
            if (!loader.npm[pkg.name]) {
                loader.npm[pkg.name] = pkg;
            }
            loader.npm[pkg.name + '@' + pkg.version] = pkg;
            var pkgAddress = pkg.fileUrl.replace(/\/package\.json.*/, '');
            loader.npmPaths[pkgAddress] = pkg;
        });
        setupLiveReload();
        forEach(loader._npmExtensions || [], function (ext) {
            if (ext.systemConfig) {
                loader.config(ext.systemConfig);
            }
        });
    }(loader, [
        {
            'name': 'passbolt-appjs',
            'version': '2.10.0',
            'fileUrl': './package.json',
            'main': 'passbolt',
            'steal': {
                'plugins': ['steal-stache'],
                'meta': {
                    'mocha': {
                        'format': 'global',
                        'exports': 'mocha',
                        'deps': ['passbolt-mad/test/lib/stealMochaAddDom']
                    }
                },
                'paths': {
                    'chai': 'node_modules/chai/chai.js',
                    'mocha': 'node_modules/mocha/mocha.js'
                },
                'npmAlgorithm': 'flat'
            },
            'resolutions': {
                'passbolt-appjs': '2.10.0',
                'jquery': '3.4.0',
                'browser-cookies': '1.2.0',
                'passbolt-mad': '2.10.0',
                'steal-stache': '4.1.2',
                'can-define': '2.7.12',
                'can-route': '4.3.0',
                'can-route-pushstate': '5.0.2',
                'can-connect': '2.1.0',
                'uuid': '3.3.2',
                'can-string': '1.0.0',
                'can-util': '3.12.0',
                'can-dom-data': '1.0.1',
                'can-dom-events': '1.3.0',
                'urijs': '1.19.1',
                'chosen-js': '1.8.7',
                'can-stache': '4.9.0',
                'can-view-import': '4.1.0',
                'can-stache-bindings': '4.3.0'
            }
        },
        {
            'name': 'steal-stache',
            'version': '4.1.2',
            'fileUrl': './node_modules/steal-stache/package.json',
            'main': 'steal-stache.js',
            'steal': {
                'main': 'steal-stache',
                'configDependencies': ['live-reload'],
                'npmIgnore': {
                    'documentjs': true,
                    'testee': true,
                    'steal-tools': true
                },
                'npmAlgorithm': 'flat',
                'ext': { 'stache': 'steal-stache' }
            },
            'resolutions': {
                'can-stache-bindings': '4.3.0',
                'can-view-import': '4.1.0'
            }
        },
        {
            'name': 'steal',
            'version': '2.2.1',
            'fileUrl': './node_modules/steal/package.json',
            'main': 'main',
            'steal': {
                'npmDependencies': {
                    'console-browserify': true,
                    'constants-browserify': true,
                    'crypto-browserify': true,
                    'http-browserify': true,
                    'buffer': true,
                    'os-browserify': true,
                    'vm-browserify': true,
                    'zlib-browserify': true,
                    'assert': true,
                    'domain-browser': true,
                    'events': true,
                    'https-browserify': true,
                    'path-browserify': true,
                    'string_decoder': true,
                    'tty-browserify': true,
                    'process': true,
                    'punycode': true
                }
            },
            'globalBrowser': {
                'console': 'console-browserify',
                'constants': 'constants-browserify',
                'crypto': 'crypto-browserify',
                'http': 'http-browserify',
                'buffer': 'buffer',
                'os': 'os-browserify',
                'vm': 'vm-browserify',
                'zlib': 'zlib-browserify',
                'assert': 'assert',
                'child_process': 'steal#ext/builtin/child_process',
                'cluster': 'steal#ext/builtin/cluster',
                'dgram': 'steal#ext/builtin/dgram',
                'dns': 'steal#ext/builtin/dns',
                'domain': 'domain-browser',
                'events': 'events',
                'fs': 'steal#ext/builtin/fs',
                'https': 'https-browserify',
                'module': 'steal#ext/builtin/module',
                'net': 'steal#ext/builtin/net',
                'path': 'path-browserify',
                'process': 'process',
                'querystring': 'steal#ext/builtin/querystring',
                'readline': 'steal#ext/builtin/readline',
                'repl': 'steal#ext/builtin/repl',
                'stream': 'steal#ext/builtin/stream',
                'string_decoder': 'string_decoder',
                'sys': 'steal#ext/builtin/sys',
                'timers': 'steal#ext/builtin/timers',
                'tls': 'steal#ext/builtin/tls',
                'tty': 'tty-browserify',
                'url': 'steal#ext/builtin/url',
                'util': 'steal#ext/builtin/util',
                '_stream_readable': 'steal#ext/builtin/_stream_readable',
                '_stream_writable': 'steal#ext/builtin/_stream_writable',
                '_stream_duplex': 'steal#ext/builtin/_stream_duplex',
                '_stream_transform': 'steal#ext/builtin/_stream_transform',
                '_stream_passthrough': 'steal#ext/builtin/_stream_passthrough'
            },
            'resolutions': {}
        },
        {
            'name': 'assert',
            'version': '1.4.1',
            'fileUrl': './node_modules/assert/package.json',
            'main': './assert.js',
            'resolutions': {}
        },
        {
            'name': 'buffer',
            'version': '5.0.8',
            'fileUrl': './node_modules/buffer/package.json',
            'main': 'index.js',
            'jspm': {},
            'resolutions': {}
        },
        {
            'name': 'constants-browserify',
            'version': '1.0.0',
            'fileUrl': './node_modules/constants-browserify/package.json',
            'main': 'constants.json',
            'resolutions': {}
        },
        {
            'name': 'console-browserify',
            'version': '1.1.0',
            'fileUrl': './node_modules/console-browserify/package.json',
            'main': 'index',
            'resolutions': {}
        },
        {
            'name': 'crypto-browserify',
            'version': '3.11.1',
            'fileUrl': './node_modules/crypto-browserify/package.json',
            'browser': { 'crypto': '@empty' },
            'resolutions': {}
        },
        {
            'name': 'domain-browser',
            'version': '1.1.7',
            'fileUrl': './node_modules/domain-browser/package.json',
            'main': './index.js',
            'jspm': {},
            'resolutions': {}
        },
        {
            'name': 'events',
            'version': '1.1.1',
            'fileUrl': './node_modules/events/package.json',
            'main': './events.js',
            'resolutions': {}
        },
        {
            'name': 'http-browserify',
            'version': '1.7.0',
            'fileUrl': './node_modules/http-browserify/package.json',
            'main': 'index.js',
            'browser': 'index.js',
            'resolutions': {}
        },
        {
            'name': 'https-browserify',
            'version': '1.0.0',
            'fileUrl': './node_modules/https-browserify/package.json',
            'main': 'index.js',
            'resolutions': {}
        },
        {
            'name': 'os-browserify',
            'version': '0.3.0',
            'fileUrl': './node_modules/os-browserify/package.json',
            'main': 'main.js',
            'browser': 'browser.js',
            'jspm': {},
            'resolutions': {}
        },
        {
            'name': 'path-browserify',
            'version': '0.0.1',
            'fileUrl': './node_modules/path-browserify/package.json',
            'main': 'index.js',
            'resolutions': {}
        },
        {
            'name': 'process',
            'version': '0.11.10',
            'fileUrl': './node_modules/process/package.json',
            'main': './index.js',
            'browser': './browser.js',
            'resolutions': {}
        },
        {
            'name': 'punycode',
            'version': '2.0.1',
            'fileUrl': './node_modules/punycode/package.json',
            'main': 'punycode.js',
            'jspm': {},
            'resolutions': {}
        },
        {
            'name': 'string_decoder',
            'version': '1.1.1',
            'fileUrl': './node_modules/string_decoder/package.json',
            'main': 'lib/string_decoder.js',
            'resolutions': {}
        },
        {
            'name': 'tty-browserify',
            'version': '0.0.1',
            'fileUrl': './node_modules/tty-browserify/package.json',
            'main': 'index.js',
            'resolutions': {}
        },
        {
            'name': 'vm-browserify',
            'version': '0.0.4',
            'fileUrl': './node_modules/vm-browserify/package.json',
            'main': 'index.js',
            'resolutions': {}
        },
        {
            'name': 'zlib-browserify',
            'version': '0.0.3',
            'fileUrl': './node_modules/zlib-browserify/package.json',
            'main': 'index.js',
            'resolutions': {}
        },
        {
            'name': 'string_decoder',
            'version': '1.0.3',
            'fileUrl': './node_modules/steal/node_modules/string_decoder/package.json',
            'main': 'lib/string_decoder.js',
            'resolutions': {}
        },
        {
            'name': 'jquery',
            'version': '3.4.0',
            'fileUrl': './node_modules/jquery/package.json',
            'main': 'dist/jquery.js',
            'resolutions': {}
        },
        {
            'name': 'browser-cookies',
            'version': '1.2.0',
            'fileUrl': './node_modules/browser-cookies/package.json',
            'main': 'src/browser-cookies.js',
            'resolutions': {}
        },
        {
            'name': 'passbolt-mad',
            'version': '2.10.0',
            'fileUrl': './node_modules/passbolt-mad/package.json',
            'main': 'passbolt-mad',
            'steal': {
                'meta': {
                    'mocha': {
                        'format': 'global',
                        'exports': 'mocha',
                        'deps': ['steal-mocha/add-dom']
                    }
                },
                'paths': {
                    'chai': 'node_modules/chai/chai.js',
                    'mocha': 'node_modules/mocha/mocha.js',
                    'steal-mocha': 'node_modules/steal-mocha/steal-mocha.js',
                    'steal-mocha/*': 'node_modules/steal-mocha/*.js'
                },
                'plugins': ['steal-stache']
            },
            'resolutions': {
                'passbolt-mad': '2.10.0',
                'jquery': '3.4.0',
                'steal-stache': '4.1.2',
                'can-construct': '3.3.1',
                'can-util': '3.12.0',
                'can-dom-events': '1.3.0',
                'can-ajax': '2.0.0',
                'uuid': '3.3.2',
                'can-define': '2.4.0',
                'can-control': '4.2.0',
                'can-construct-super': '3.2.0',
                'can-dom-data': '1.0.1',
                'can-stache': '4.9.0',
                'string-hash': '1.1.3',
                'xregexp': '3.2.0',
                'moment': '2.24.0',
                'moment-timezone': '0.5.23',
                'can-view-import': '4.1.0',
                'can-stache-bindings': '4.3.0'
            }
        },
        {
            'name': 'can-define',
            'version': '2.7.12',
            'fileUrl': './node_modules/can-define/package.json',
            'main': 'can-define.js',
            'resolutions': {
                'can-define': '2.7.12',
                'can-namespace': '1.0.0',
                'can-queues': '1.1.2',
                'can-log': '1.0.0',
                'can-reflect': '1.17.0',
                'can-observation-recorder': '1.2.0',
                'can-construct': '3.5.4',
                'can-event-queue': '1.1.0',
                'can-symbol': '1.6.1',
                'can-observation': '4.1.0',
                'can-assign': '1.2.0',
                'can-string-to-any': '1.2.0',
                'can-define-lazy-value': '1.1.0',
                'can-simple-observable': '2.4.1',
                'can-data-types': '1.2.0'
            }
        },
        {
            'name': 'can-route',
            'version': '4.3.0',
            'fileUrl': './node_modules/can-route/package.json',
            'main': 'can-route',
            'resolutions': {
                'can-route': '4.3.0',
                'can-observation': '4.1.0',
                'can-bind': '1.0.0',
                'can-queues': '1.1.2',
                'can-log': '1.0.0',
                'can-symbol': '1.6.1',
                'can-reflect': '1.17.0',
                'can-globals': '1.2.0',
                'can-simple-map': '4.2.0',
                'can-route-hash': '1.0.1',
                'can-simple-observable': '2.2.0',
                'can-namespace': '1.0.0',
                'can-diff': '1.4.4',
                'can-param': '1.1.0',
                'can-string': '1.0.0',
                'can-deparam': '1.2.0'
            }
        },
        {
            'name': 'can-route-pushstate',
            'version': '5.0.2',
            'fileUrl': './node_modules/can-route-pushstate/package.json',
            'main': 'can-route-pushstate',
            'resolutions': {
                'can-route': '4.3.0',
                'can-dom-events': '1.3.0',
                'can-reflect': '1.17.0',
                'can-key-tree': '1.2.0',
                'can-observation-recorder': '1.2.0',
                'can-diff': '1.4.4',
                'can-queues': '1.1.2',
                'can-simple-observable': '2.2.0',
                'can-globals': '1.2.0'
            }
        },
        {
            'name': 'can-connect',
            'version': '2.1.0',
            'fileUrl': './node_modules/can-connect/package.json',
            'main': 'can-connect.js',
            'steal': {
                'plugins': [
                    'steal-stache',
                    'steal-css'
                ]
            },
            'resolutions': {
                'can-connect': '2.1.0',
                'can-util': '3.12.0',
                'can-namespace': '1.0.0',
                'can-symbol': '1.6.1',
                'can-reflect': '1.17.0',
                'can-observation-recorder': '1.2.0',
                'can-make-rest': '0.1.3',
                'can-event-queue': '1.1.0',
                'can-ajax': '1.4.0',
                'can-types': '1.2.0',
                'can-queues': '1.1.2',
                'can-validate-interface': '1.0.2'
            }
        },
        {
            'name': 'can-construct',
            'version': '3.3.1',
            'fileUrl': './node_modules/can-construct/package.json',
            'main': 'can-construct',
            'steal': {},
            'resolutions': {
                'can-util': '3.12.0',
                'can-namespace': '1.0.0'
            }
        },
        {
            'name': 'uuid',
            'version': '3.3.2',
            'fileUrl': './node_modules/uuid/package.json',
            'browser': {
                'uuid#lib/rng': 'uuid#lib/rng-browser',
                'uuid#lib/sha1': 'uuid#lib/sha1-browser',
                'uuid#lib/md5': 'uuid#lib/md5-browser'
            },
            'resolutions': { 'uuid': '3.3.2' }
        },
        {
            'name': 'can-util',
            'version': '3.12.0',
            'fileUrl': './node_modules/can-util/package.json',
            'main': 'can-util',
            'resolutions': {
                'can-util': '3.12.0',
                'can-namespace': '1.0.0',
                'can-log': '1.0.0',
                'can-symbol': '1.6.1',
                'can-assign': '1.2.0',
                'can-reflect': '1.17.0'
            }
        },
        {
            'name': 'can-string',
            'version': '1.0.0',
            'fileUrl': './node_modules/can-string/package.json',
            'main': 'can-string',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'plugins': [
                    'steal-less',
                    'steal-stache'
                ]
            },
            'resolutions': {}
        },
        {
            'name': 'can-dom-events',
            'version': '1.3.0',
            'fileUrl': './node_modules/can-dom-events/package.json',
            'main': 'can-dom-events',
            'resolutions': {
                'can-dom-events': '1.3.0',
                'can-namespace': '1.0.0',
                'can-key-tree': '1.2.0',
                'can-reflect': '1.17.0',
                'can-globals': '1.2.0'
            }
        },
        {
            'name': 'can-ajax',
            'version': '2.0.0',
            'fileUrl': './node_modules/can-ajax/package.json',
            'main': 'dist/cjs/can-ajax',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'steal-tools': true
                },
                'main': 'can-ajax'
            },
            'resolutions': {
                'can-reflect': '1.17.0',
                'can-parse-uri': '1.2.0',
                'can-param': '1.1.0',
                'can-globals': '1.2.0',
                'can-namespace': '1.0.0'
            }
        },
        {
            'name': 'can-stache-ast',
            'version': '1.1.0',
            'fileUrl': './node_modules/can-stache-ast/package.json',
            'main': 'can-stache-ast.js',
            'resolutions': {
                'can-stache-ast': '1.1.0',
                'can-view-parser': '4.1.0'
            }
        },
        {
            'name': 'steal-config-utils',
            'version': '1.0.0',
            'fileUrl': './node_modules/steal-config-utils/package.json',
            'main': 'main.js',
            'resolutions': {}
        },
        {
            'name': 'can-define',
            'version': '2.4.0',
            'fileUrl': './node_modules/passbolt-mad/node_modules/can-define/package.json',
            'main': 'can-define.js',
            'resolutions': {
                'can-construct': '3.3.1',
                'can-define': '2.4.0',
                'can-observation-recorder': '1.2.0',
                'can-namespace': '1.0.0',
                'can-log': '1.0.0',
                'can-reflect': '1.17.0',
                'can-symbol': '1.6.1',
                'can-queues': '1.1.2',
                'can-event-queue': '1.1.0',
                'can-assign': '1.2.0',
                'can-diff': '1.4.4',
                'can-observation': '4.1.0',
                'can-simple-observable': '2.2.0',
                'can-string-to-any': '1.2.0',
                'can-define-lazy-value': '1.1.0',
                'can-data-types': '1.2.0',
                'can-single-reference': '1.2.0'
            }
        },
        {
            'name': 'can-namespace',
            'version': '1.0.0',
            'fileUrl': './node_modules/can-namespace/package.json',
            'main': 'can-namespace',
            'steal': { 'npmAlgorithm': 'flat' },
            'resolutions': {}
        },
        {
            'name': 'can-observation',
            'version': '4.1.0',
            'fileUrl': './node_modules/can-observation/package.json',
            'main': 'can-observation',
            'steal': { 'npmAlgorithm': 'flat' },
            'resolutions': {
                'can-namespace': '1.0.0',
                'can-reflect': '1.17.0',
                'can-queues': '1.1.2',
                'can-observation-recorder': '1.2.0',
                'can-symbol': '1.6.1',
                'can-log': '1.0.0',
                'can-event-queue': '1.1.0',
                'can-observation': '4.1.0'
            }
        },
        {
            'name': 'can-bind',
            'version': '1.0.0',
            'fileUrl': './node_modules/can-bind/package.json',
            'main': 'can-bind',
            'steal': {
                'npmIgnore': {
                    'steal-tools': true,
                    'testee': true
                },
                'main': 'can-bind'
            },
            'resolutions': {
                'can-reflect': '1.17.0',
                'can-symbol': '1.6.1',
                'can-namespace': '1.0.0',
                'can-queues': '1.1.2',
                'can-log': '1.0.0',
                'can-reflect-dependencies': '1.1.0'
            }
        },
        {
            'name': 'can-queues',
            'version': '1.1.2',
            'fileUrl': './node_modules/can-queues/package.json',
            'main': './can-queues.js',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'main': 'can-queues'
            },
            'resolutions': {
                'can-log': '1.0.0',
                'can-queues': '1.1.2',
                'can-namespace': '1.0.0',
                'can-assign': '1.2.0'
            }
        },
        {
            'name': 'can-log',
            'version': '1.0.0',
            'fileUrl': './node_modules/can-log/package.json',
            'main': 'dist/cjs/can-log',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'main': 'can-log'
            },
            'resolutions': { 'can-log': '1.0.0' }
        },
        {
            'name': 'can-symbol',
            'version': '1.6.1',
            'fileUrl': './node_modules/can-symbol/package.json',
            'main': 'can-symbol',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'main': 'can-symbol'
            },
            'resolutions': { 'can-namespace': '1.0.0' }
        },
        {
            'name': 'can-reflect',
            'version': '1.17.0',
            'fileUrl': './node_modules/can-reflect/package.json',
            'main': 'can-reflect',
            'resolutions': {
                'can-reflect': '1.17.0',
                'can-namespace': '1.0.0',
                'can-symbol': '1.6.1'
            }
        },
        {
            'name': 'can-globals',
            'version': '1.2.0',
            'fileUrl': './node_modules/can-globals/package.json',
            'main': 'can-globals.js',
            'resolutions': {
                'can-globals': '1.2.0',
                'can-namespace': '1.0.0',
                'can-reflect': '1.17.0'
            }
        },
        {
            'name': 'can-simple-map',
            'version': '4.2.0',
            'fileUrl': './node_modules/can-simple-map/package.json',
            'main': 'can-simple-map',
            'steal': {
                'npmIgnore': {
                    'documentjs': true,
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'main': 'can-simple-map'
            },
            'resolutions': {
                'can-construct': '3.3.1',
                'can-event-queue': '1.1.0',
                'can-queues': '1.1.2',
                'can-observation-recorder': '1.2.0',
                'can-reflect': '1.17.0',
                'can-log': '1.0.0',
                'can-symbol': '1.6.1'
            }
        },
        {
            'name': 'can-route-hash',
            'version': '1.0.1',
            'fileUrl': './node_modules/can-route-hash/package.json',
            'main': './can-route-hash.js',
            'resolutions': {
                'can-globals': '1.2.0',
                'can-reflect': '1.17.0',
                'can-observation-recorder': '1.2.0',
                'can-queues': '1.1.2',
                'can-key-tree': '1.2.0',
                'can-simple-observable': '2.2.0',
                'can-dom-events': '1.3.0'
            }
        },
        {
            'name': 'can-simple-observable',
            'version': '2.2.0',
            'fileUrl': './node_modules/can-simple-observable/package.json',
            'main': 'can-simple-observable',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'steal-tools': true
                }
            },
            'resolutions': {
                'can-reflect': '1.17.0',
                'can-simple-observable': '2.2.0',
                'can-namespace': '1.0.0',
                'can-symbol': '1.6.1',
                'can-observation-recorder': '1.2.0',
                'can-event-queue': '1.1.0',
                'can-log': '1.0.0',
                'can-observation': '4.1.0',
                'can-queues': '1.1.2'
            }
        },
        {
            'name': 'can-key-tree',
            'version': '1.2.0',
            'fileUrl': './node_modules/can-key-tree/package.json',
            'main': 'dist/cjs/can-key-tree',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'plugins': [
                    'steal-less',
                    'steal-stache'
                ],
                'main': 'can-key-tree'
            },
            'resolutions': { 'can-reflect': '1.17.0' }
        },
        {
            'name': 'can-observation-recorder',
            'version': '1.2.0',
            'fileUrl': './node_modules/can-observation-recorder/package.json',
            'main': './can-observation-recorder.js',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                }
            },
            'resolutions': {
                'can-namespace': '1.0.0',
                'can-symbol': '1.6.1'
            }
        },
        {
            'name': 'can-make-rest',
            'version': '0.1.3',
            'fileUrl': './node_modules/can-make-rest/package.json',
            'main': './can-make-rest.js',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'plugins': [
                    'steal-less',
                    'steal-stache'
                ],
                'main': 'can-make-rest'
            },
            'browser': {},
            'resolutions': { 'can-util': '3.12.0' }
        },
        {
            'name': 'can-construct',
            'version': '3.5.4',
            'fileUrl': './node_modules/can-define/node_modules/can-construct/package.json',
            'main': 'can-construct',
            'steal': {},
            'resolutions': {
                'can-reflect': '1.17.0',
                'can-log': '1.0.0',
                'can-namespace': '1.0.0',
                'can-string': '1.0.0',
                'can-symbol': '1.6.4'
            }
        },
        {
            'name': 'can-event-queue',
            'version': '1.1.0',
            'fileUrl': './node_modules/can-event-queue/package.json',
            'main': './can-event-queue.js',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'plugins': [
                    'steal-less',
                    'steal-stache'
                ]
            },
            'resolutions': {
                'can-reflect': '1.17.0',
                'can-symbol': '1.6.1',
                'can-key-tree': '1.2.0',
                'can-queues': '1.1.2',
                'can-event-queue': '1.1.0',
                'can-log': '1.0.0',
                'can-dom-events': '1.3.0',
                'can-define-lazy-value': '1.1.0'
            }
        },
        {
            'name': 'can-diff',
            'version': '1.4.4',
            'fileUrl': './node_modules/can-diff/package.json',
            'main': 'can-diff',
            'steal': { 'main': 'can-diff' },
            'resolutions': {
                'can-reflect': '1.17.0',
                'can-key-tree': '1.2.0',
                'can-symbol': '1.6.1',
                'can-diff': '1.4.4',
                'can-queues': '1.1.2'
            }
        },
        {
            'name': 'can-ajax',
            'version': '1.4.0',
            'fileUrl': './node_modules/can-connect/node_modules/can-ajax/package.json',
            'main': 'dist/cjs/can-ajax',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'main': 'can-ajax'
            },
            'resolutions': {
                'can-globals': '1.2.0',
                'can-reflect': '1.17.0',
                'can-namespace': '1.0.0',
                'can-parse-uri': '1.2.0',
                'can-param': '1.1.0'
            }
        },
        {
            'name': 'can-dom-data',
            'version': '1.0.1',
            'fileUrl': './node_modules/can-dom-data/package.json',
            'main': 'can-dom-data.js',
            'steal': {
                'npmIgnore': {
                    'steal-tools': true,
                    'testee': true
                },
                'main': 'can-dom-data'
            },
            'resolutions': { 'can-namespace': '1.0.0' }
        },
        {
            'name': 'can-types',
            'version': '1.2.0',
            'fileUrl': './node_modules/can-types/package.json',
            'main': 'can-types',
            'resolutions': {
                'can-namespace': '1.0.0',
                'can-reflect': '1.17.0',
                'can-symbol': '1.6.1',
                'can-log': '1.0.0'
            }
        },
        {
            'name': 'can-control',
            'version': '4.2.0',
            'fileUrl': './node_modules/can-control/package.json',
            'main': 'can-control',
            'resolutions': {
                'can-construct': '3.3.1',
                'can-namespace': '1.0.0',
                'can-assign': '1.2.0',
                'can-reflect': '1.17.0',
                'can-observation': '4.1.0',
                'can-event-queue': '1.1.0',
                'can-log': '1.0.0',
                'can-string': '1.0.0',
                'can-stache-key': '1.4.0',
                'can-dom-mutate': '1.1.0',
                'can-key': '1.0.0'
            }
        },
        {
            'name': 'can-construct-super',
            'version': '3.2.0',
            'fileUrl': './node_modules/can-construct-super/package.json',
            'main': 'can-construct-super',
            'steal': {
                'npmIgnore': {
                    'documentjs': true,
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'main': 'can-construct-super'
            },
            'resolutions': {
                'can-reflect': '1.17.0',
                'can-construct': '3.3.1'
            }
        },
        {
            'name': 'can-parse-uri',
            'version': '1.2.0',
            'fileUrl': './node_modules/can-parse-uri/package.json',
            'main': 'can-parse-uri',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'main': 'can-parse-uri'
            },
            'resolutions': { 'can-namespace': '1.0.0' }
        },
        {
            'name': 'can-param',
            'version': '1.1.0',
            'fileUrl': './node_modules/can-param/package.json',
            'main': 'can-param',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                }
            },
            'resolutions': { 'can-namespace': '1.0.0' }
        },
        {
            'name': 'can-assign',
            'version': '1.2.0',
            'fileUrl': './node_modules/can-assign/package.json',
            'main': 'dist/cjs/can-assign',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'main': 'can-assign'
            },
            'resolutions': { 'can-namespace': '1.0.0' }
        },
        {
            'name': 'urijs',
            'version': '1.19.1',
            'fileUrl': './node_modules/urijs/package.json',
            'main': './src/URI',
            'resolutions': { 'urijs': '1.19.1' }
        },
        {
            'name': 'can-stache',
            'version': '4.9.0',
            'fileUrl': './node_modules/can-stache/package.json',
            'main': 'can-stache',
            'resolutions': {
                'can-stache': '4.9.0',
                'can-log': '1.0.0',
                'can-namespace': '1.0.0',
                'can-globals': '1.2.0',
                'can-assign': '1.2.0',
                'can-reflect': '1.17.0',
                'can-view-parser': '4.1.0',
                'can-stache-ast': '1.1.0',
                'can-import-module': '1.2.0',
                'can-view-callbacks': '4.3.0',
                'can-view-target': '4.1.0',
                'can-attribute-encoder': '1.1.0',
                'can-view-nodelist': '4.3.0',
                'can-dom-mutate': '1.1.0',
                'can-observation': '4.1.0',
                'can-observation-recorder': '1.2.0',
                'can-stache-key': '1.4.0',
                'can-dom-data': '1.0.1',
                'can-symbol': '1.6.1',
                'can-define-lazy-value': '1.1.0',
                'can-view-live': '4.2.0',
                'can-view-scope': '4.5.0',
                'can-dom-data-state': '1.0.1',
                'can-fragment': '1.3.0',
                'can-stache-helpers': '1.2.0',
                'can-join-uris': '1.2.0',
                'can-simple-observable': '2.2.0'
            }
        },
        {
            'name': 'can-view-parser',
            'version': '4.1.0',
            'fileUrl': './node_modules/can-view-parser/package.json',
            'main': 'can-view-parser',
            'resolutions': {
                'can-namespace': '1.0.0',
                'can-log': '1.0.0',
                'can-attribute-encoder': '1.1.0'
            }
        },
        {
            'name': 'string-hash',
            'version': '1.1.3',
            'fileUrl': './node_modules/string-hash/package.json',
            'main': './index',
            'resolutions': {}
        },
        {
            'name': 'can-deparam',
            'version': '1.2.0',
            'fileUrl': './node_modules/can-deparam/package.json',
            'main': 'can-deparam',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                }
            },
            'resolutions': { 'can-namespace': '1.0.0' }
        },
        {
            'name': 'can-validate-interface',
            'version': '1.0.2',
            'fileUrl': './node_modules/can-validate-interface/package.json',
            'main': 'index.js',
            'resolutions': {}
        },
        {
            'name': 'can-reflect-dependencies',
            'version': '1.1.0',
            'fileUrl': './node_modules/can-reflect-dependencies/package.json',
            'main': 'can-reflect-dependencies.js',
            'resolutions': {
                'can-reflect-dependencies': '1.1.0',
                'can-reflect': '1.17.0',
                'can-symbol': '1.6.1'
            }
        },
        {
            'name': 'xregexp',
            'version': '3.2.0',
            'fileUrl': './node_modules/xregexp/package.json',
            'main': 'xregexp-all.js',
            'resolutions': {}
        },
        {
            'name': 'chosen-js',
            'version': '1.8.7',
            'fileUrl': './node_modules/chosen-js/package.json',
            'main': 'chosen.jquery.js',
            'resolutions': {}
        },
        {
            'name': 'can-symbol',
            'version': '1.6.4',
            'fileUrl': './node_modules/can-define/node_modules/can-construct/node_modules/can-symbol/package.json',
            'main': 'can-symbol',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'main': 'can-symbol'
            },
            'resolutions': { 'can-namespace': '1.0.0' }
        },
        {
            'name': 'can-string-to-any',
            'version': '1.2.0',
            'fileUrl': './node_modules/can-string-to-any/package.json',
            'main': 'can-string-to-any',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'main': 'can-string-to-any'
            },
            'resolutions': {}
        },
        {
            'name': 'can-define-lazy-value',
            'version': '1.1.0',
            'fileUrl': './node_modules/can-define-lazy-value/package.json',
            'main': 'define-lazy-value',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'steal-tools': true
                }
            },
            'resolutions': {}
        },
        {
            'name': 'can-simple-observable',
            'version': '2.4.1',
            'fileUrl': './node_modules/can-define/node_modules/can-simple-observable/package.json',
            'main': 'can-simple-observable',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'steal-tools': true
                }
            },
            'resolutions': {
                'can-simple-observable': '2.4.1',
                'can-observation': '4.1.0',
                'can-queues': '1.1.2',
                'can-reflect': '1.17.0',
                'can-observation-recorder': '1.2.0',
                'can-event-queue': '1.1.0',
                'can-symbol': '1.6.1',
                'can-namespace': '1.0.0',
                'can-log': '1.0.0'
            }
        },
        {
            'name': 'can-data-types',
            'version': '1.2.0',
            'fileUrl': './node_modules/can-data-types/package.json',
            'main': 'can-data-types',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'main': 'can-data-types'
            },
            'resolutions': { 'can-reflect': '1.17.0' }
        },
        {
            'name': 'moment',
            'version': '2.24.0',
            'fileUrl': './node_modules/moment/package.json',
            'main': './moment.js',
            'jspm': {},
            'resolutions': {}
        },
        {
            'name': 'moment-timezone',
            'version': '0.5.23',
            'fileUrl': './node_modules/moment-timezone/package.json',
            'main': './index.js',
            'jspm': { 'main': 'builds/moment-timezone-with-data' },
            'resolutions': { 'moment': '2.24.0' }
        },
        {
            'name': 'can-stache-key',
            'version': '1.4.0',
            'fileUrl': './node_modules/can-stache-key/package.json',
            'main': 'can-stache-key',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'main': 'can-stache-key'
            },
            'resolutions': {
                'can-observation-recorder': '1.2.0',
                'can-log': '1.0.0',
                'can-symbol': '1.6.1',
                'can-reflect': '1.17.0',
                'can-reflect-promise': '2.1.0'
            }
        },
        {
            'name': 'can-dom-mutate',
            'version': '1.1.0',
            'fileUrl': './node_modules/can-dom-mutate/package.json',
            'main': 'can-dom-mutate',
            'steal': { 'main': 'can-dom-mutate' },
            'resolutions': {
                'can-globals': '1.2.0',
                'can-dom-mutate': '1.1.0'
            }
        },
        {
            'name': 'can-key',
            'version': '1.0.0',
            'fileUrl': './node_modules/can-key/package.json',
            'main': 'can-key',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'plugins': [
                    'steal-less',
                    'steal-stache'
                ],
                'main': 'can-key'
            },
            'resolutions': {
                'can-reflect': '1.17.0',
                'can-key': '1.0.0'
            }
        },
        {
            'name': 'can-single-reference',
            'version': '1.2.0',
            'fileUrl': './node_modules/can-single-reference/package.json',
            'main': 'can-single-reference',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                }
            },
            'resolutions': { 'can-cid': '1.3.0' }
        },
        {
            'name': 'can-import-module',
            'version': '1.2.0',
            'fileUrl': './node_modules/can-import-module/package.json',
            'main': 'can-import-module.js',
            'resolutions': {
                'can-globals': '1.2.0',
                'can-namespace': '1.0.0'
            }
        },
        {
            'name': 'can-view-callbacks',
            'version': '4.3.0',
            'fileUrl': './node_modules/can-view-callbacks/package.json',
            'main': 'can-view-callbacks',
            'resolutions': {
                'can-observation-recorder': '1.2.0',
                'can-log': '1.0.0',
                'can-globals': '1.2.0',
                'can-dom-mutate': '1.1.0',
                'can-namespace': '1.0.0',
                'can-view-nodelist': '4.3.0',
                'can-symbol': '1.6.1',
                'can-reflect': '1.17.0',
                'can-fragment': '1.3.0'
            }
        },
        {
            'name': 'can-view-target',
            'version': '4.1.0',
            'fileUrl': './node_modules/can-view-target/package.json',
            'main': 'can-view-target',
            'resolutions': {
                'can-globals': '1.2.0',
                'can-dom-mutate': '1.1.0',
                'can-namespace': '1.0.0'
            }
        },
        {
            'name': 'can-attribute-encoder',
            'version': '1.1.0',
            'fileUrl': './node_modules/can-attribute-encoder/package.json',
            'main': 'can-attribute-encoder',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'steal-tools': true
                },
                'main': 'can-attribute-encoder'
            },
            'resolutions': {
                'can-namespace': '1.0.0',
                'can-log': '1.0.0'
            }
        },
        {
            'name': 'can-view-nodelist',
            'version': '4.3.0',
            'fileUrl': './node_modules/can-view-nodelist/package.json',
            'main': 'can-view-nodelist',
            'resolutions': {
                'can-namespace': '1.0.0',
                'can-dom-mutate': '1.1.0'
            }
        },
        {
            'name': 'can-cid',
            'version': '1.3.0',
            'fileUrl': './node_modules/can-cid/package.json',
            'main': 'can-cid',
            'resolutions': { 'can-namespace': '1.0.0' }
        },
        {
            'name': 'can-reflect-promise',
            'version': '2.1.0',
            'fileUrl': './node_modules/can-reflect-promise/package.json',
            'main': 'can-reflect-promise',
            'steal': { 'npmAlgorithm': 'flat' },
            'resolutions': {
                'can-reflect': '1.17.0',
                'can-symbol': '1.6.1',
                'can-observation-recorder': '1.2.0',
                'can-queues': '1.1.2',
                'can-key-tree': '1.2.0',
                'can-log': '1.0.0'
            }
        },
        {
            'name': 'can-view-live',
            'version': '4.2.0',
            'fileUrl': './node_modules/can-view-live/package.json',
            'main': 'can-view-live',
            'steal': {
                'npmIgnore': {
                    'documentjs': true,
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'main': 'can-view-live'
            },
            'resolutions': {
                'can-view-live': '4.2.0',
                'can-reflect': '1.17.0',
                'can-queues': '1.1.2',
                'can-view-callbacks': '4.3.0',
                'can-dom-mutate': '1.1.0',
                'can-reflect-dependencies': '1.1.0',
                'can-view-parser': '4.1.0',
                'can-view-nodelist': '4.3.0',
                'can-fragment': '1.3.0',
                'can-symbol': '1.6.1',
                'can-child-nodes': '1.2.0',
                'can-simple-observable': '2.2.0',
                'can-diff': '1.4.4',
                'can-attribute-observable': '1.0.0'
            }
        },
        {
            'name': 'can-view-scope',
            'version': '4.5.0',
            'fileUrl': './node_modules/can-view-scope/package.json',
            'main': 'can-view-scope',
            'resolutions': {
                'can-stache-key': '1.4.0',
                'can-observation-recorder': '1.2.0',
                'can-view-scope': '4.5.0',
                'can-assign': '1.2.0',
                'can-namespace': '1.0.0',
                'can-reflect': '1.17.0',
                'can-log': '1.0.0',
                'can-define-lazy-value': '1.1.0',
                'can-stache-helpers': '1.2.0',
                'can-simple-map': '4.2.0',
                'can-observation': '4.1.0',
                'can-symbol': '1.6.1',
                'can-reflect-dependencies': '1.1.0',
                'can-event-queue': '1.1.0',
                'can-single-reference': '1.2.0'
            }
        },
        {
            'name': 'can-dom-data-state',
            'version': '1.0.1',
            'fileUrl': './node_modules/can-dom-data-state/package.json',
            'main': 'can-dom-data-state.js',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                },
                'main': 'can-dom-data-state'
            },
            'resolutions': {
                'can-namespace': '1.0.0',
                'can-dom-mutate': '1.1.0',
                'can-cid': '1.3.0'
            }
        },
        {
            'name': 'can-fragment',
            'version': '1.3.0',
            'fileUrl': './node_modules/can-fragment/package.json',
            'main': 'can-fragment',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                }
            },
            'resolutions': {
                'can-globals': '1.2.0',
                'can-namespace': '1.0.0',
                'can-reflect': '1.17.0',
                'can-symbol': '1.6.1',
                'can-child-nodes': '1.2.0'
            }
        },
        {
            'name': 'can-stache-helpers',
            'version': '1.2.0',
            'fileUrl': './node_modules/can-stache-helpers/package.json',
            'main': 'can-stache-helpers',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                }
            },
            'resolutions': { 'can-namespace': '1.0.0' }
        },
        {
            'name': 'can-join-uris',
            'version': '1.2.0',
            'fileUrl': './node_modules/can-join-uris/package.json',
            'main': 'can-join-uris',
            'steal': {},
            'resolutions': {
                'can-namespace': '1.0.0',
                'can-parse-uri': '1.2.0'
            }
        },
        {
            'name': 'can-stache-bindings',
            'version': '4.3.0',
            'fileUrl': './node_modules/can-stache-bindings/package.json',
            'main': 'can-stache-bindings',
            'steal': { 'main': 'can-stache-bindings' },
            'resolutions': {
                'can-bind': '1.0.0',
                'can-stache': '4.9.0',
                'can-view-callbacks': '4.3.0',
                'can-stache-key': '1.4.0',
                'can-observation-recorder': '1.2.0',
                'can-simple-observable': '2.2.0',
                'can-assign': '1.2.0',
                'can-log': '1.0.0',
                'can-dom-mutate': '1.1.0',
                'can-dom-data-state': '1.0.1',
                'can-symbol': '1.6.1',
                'can-reflect': '1.17.0',
                'can-reflect-dependencies': '1.1.0',
                'can-attribute-encoder': '1.1.0',
                'can-queues': '1.1.2',
                'can-attribute-observable': '1.0.0',
                'can-view-scope': '4.5.0',
                'can-view-nodelist': '4.3.0',
                'can-view-model': '4.0.1'
            }
        },
        {
            'name': 'can-view-import',
            'version': '4.1.0',
            'fileUrl': './node_modules/can-view-import/package.json',
            'main': 'can-view-import',
            'resolutions': {
                'can-assign': '1.2.0',
                'can-dom-data-state': '1.0.1',
                'can-symbol': '1.6.1',
                'can-globals': '1.2.0',
                'can-child-nodes': '1.2.0',
                'can-import-module': '1.2.0',
                'can-dom-mutate': '1.1.0',
                'can-view-nodelist': '4.3.0',
                'can-view-callbacks': '4.3.0',
                'can-log': '1.0.0'
            }
        },
        {
            'name': 'can-child-nodes',
            'version': '1.2.0',
            'fileUrl': './node_modules/can-child-nodes/package.json',
            'main': 'can-child-nodes',
            'steal': {
                'npmIgnore': {
                    'testee': true,
                    'generator-donejs': true,
                    'donejs-cli': true,
                    'steal-tools': true
                }
            },
            'resolutions': { 'can-namespace': '1.0.0' }
        },
        {
            'name': 'can-attribute-observable',
            'version': '1.0.0',
            'fileUrl': './node_modules/can-attribute-observable/package.json',
            'main': 'can-attribute-observable',
            'resolutions': {
                'can-globals': '1.2.0',
                'can-dom-data-state': '1.0.1',
                'can-dom-events': '1.3.0',
                'can-dom-mutate': '1.1.0',
                'can-diff': '1.4.4',
                'can-queues': '1.1.2',
                'can-attribute-observable': '1.0.0',
                'can-reflect': '1.17.0',
                'can-observation': '4.1.0',
                'can-reflect-dependencies': '1.1.0',
                'can-observation-recorder': '1.2.0',
                'can-simple-observable': '2.2.0',
                'can-event-dom-radiochange': '2.2.0'
            }
        },
        {
            'name': 'can-view-model',
            'version': '4.0.1',
            'fileUrl': './node_modules/can-view-model/package.json',
            'main': 'can-view-model',
            'resolutions': {
                'can-simple-map': '4.2.0',
                'can-namespace': '1.0.0',
                'can-globals': '1.2.0',
                'can-reflect': '1.17.0',
                'can-symbol': '1.6.1'
            }
        },
        {
            'name': 'can-event-dom-radiochange',
            'version': '2.2.0',
            'fileUrl': './node_modules/can-event-dom-radiochange/package.json',
            'main': 'can-event-dom-radiochange',
            'steal': {
                'main': 'can-event-dom-radiochange',
                'npmIgnore': {
                    'testee': true,
                    'steal-tools': true
                }
            },
            'resolutions': {}
        }
    ], { 'npmParentMap': {} }));
});
/*can-namespace@1.0.0#can-namespace*/
define('can-namespace@1.0.0#can-namespace', function (require, exports, module) {
    module.exports = {};
});
/*can-symbol@1.6.1#can-symbol*/
define('can-symbol@1.6.1#can-symbol', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        var namespace = require('can-namespace');
        var CanSymbol;
        if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
            CanSymbol = Symbol;
        } else {
            var symbolNum = 0;
            CanSymbol = function CanSymbolPolyfill(description) {
                var symbolValue = '@@symbol' + symbolNum++ + description;
                var symbol = {};
                Object.defineProperties(symbol, {
                    toString: {
                        value: function () {
                            return symbolValue;
                        }
                    }
                });
                return symbol;
            };
            var descriptionToSymbol = {};
            var symbolToDescription = {};
            CanSymbol.for = function (description) {
                var symbol = descriptionToSymbol[description];
                if (!symbol) {
                    symbol = descriptionToSymbol[description] = CanSymbol(description);
                    symbolToDescription[symbol] = description;
                }
                return symbol;
            };
            CanSymbol.keyFor = function (symbol) {
                return symbolToDescription[symbol];
            };
            [
                'hasInstance',
                'isConcatSpreadable',
                'iterator',
                'match',
                'prototype',
                'replace',
                'search',
                'species',
                'split',
                'toPrimitive',
                'toStringTag',
                'unscopables'
            ].forEach(function (name) {
                CanSymbol[name] = CanSymbol('Symbol.' + name);
            });
        }
        [
            'isMapLike',
            'isListLike',
            'isValueLike',
            'isFunctionLike',
            'getOwnKeys',
            'getOwnKeyDescriptor',
            'proto',
            'getOwnEnumerableKeys',
            'hasOwnKey',
            'hasKey',
            'size',
            'getName',
            'getIdentity',
            'assignDeep',
            'updateDeep',
            'getValue',
            'setValue',
            'getKeyValue',
            'setKeyValue',
            'updateValues',
            'addValue',
            'removeValues',
            'apply',
            'new',
            'onValue',
            'offValue',
            'onKeyValue',
            'offKeyValue',
            'getKeyDependencies',
            'getValueDependencies',
            'keyHasDependencies',
            'valueHasDependencies',
            'onKeys',
            'onKeysAdded',
            'onKeysRemoved',
            'onPatches'
        ].forEach(function (name) {
            CanSymbol.for('can.' + name);
        });
        module.exports = namespace.Symbol = CanSymbol;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-reflect@1.17.0#reflections/helpers*/
define('can-reflect@1.17.0#reflections/helpers', [
    'require',
    'exports',
    'module',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    module.exports = {
        makeGetFirstSymbolValue: function (symbolNames) {
            var symbols = symbolNames.map(function (name) {
                return canSymbol.for(name);
            });
            var length = symbols.length;
            return function getFirstSymbol(obj) {
                var index = -1;
                while (++index < length) {
                    if (obj[symbols[index]] !== undefined) {
                        return obj[symbols[index]];
                    }
                }
            };
        },
        hasLength: function (list) {
            var type = typeof list;
            if (type === 'string' || Array.isArray(list)) {
                return true;
            }
            var length = list && (type !== 'boolean' && type !== 'number' && 'length' in list) && list.length;
            return typeof list !== 'function' && (length === 0 || typeof length === 'number' && length > 0 && length - 1 in list);
        }
    };
});
/*can-reflect@1.17.0#reflections/type/type*/
define('can-reflect@1.17.0#reflections/type/type', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../helpers'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var helpers = require('../helpers');
    var plainFunctionPrototypePropertyNames = Object.getOwnPropertyNames(function () {
    }.prototype);
    var plainFunctionPrototypeProto = Object.getPrototypeOf(function () {
    }.prototype);
    function isConstructorLike(func) {
        var value = func[canSymbol.for('can.new')];
        if (value !== undefined) {
            return value;
        }
        if (typeof func !== 'function') {
            return false;
        }
        var prototype = func.prototype;
        if (!prototype) {
            return false;
        }
        if (plainFunctionPrototypeProto !== Object.getPrototypeOf(prototype)) {
            return true;
        }
        var propertyNames = Object.getOwnPropertyNames(prototype);
        if (propertyNames.length === plainFunctionPrototypePropertyNames.length) {
            for (var i = 0, len = propertyNames.length; i < len; i++) {
                if (propertyNames[i] !== plainFunctionPrototypePropertyNames[i]) {
                    return true;
                }
            }
            return false;
        } else {
            return true;
        }
    }
    var getNewOrApply = helpers.makeGetFirstSymbolValue([
        'can.new',
        'can.apply'
    ]);
    function isFunctionLike(obj) {
        var result, symbolValue = obj[canSymbol.for('can.isFunctionLike')];
        if (symbolValue !== undefined) {
            return symbolValue;
        }
        result = getNewOrApply(obj);
        if (result !== undefined) {
            return !!result;
        }
        return typeof obj === 'function';
    }
    function isPrimitive(obj) {
        var type = typeof obj;
        if (obj == null || type !== 'function' && type !== 'object') {
            return true;
        } else {
            return false;
        }
    }
    function isBuiltIn(obj) {
        if (isPrimitive(obj) || Array.isArray(obj) || isPlainObject(obj) || Object.prototype.toString.call(obj) !== '[object Object]' && Object.prototype.toString.call(obj).indexOf('[object ') !== -1) {
            return true;
        } else {
            return false;
        }
    }
    function isValueLike(obj) {
        var symbolValue;
        if (isPrimitive(obj)) {
            return true;
        }
        symbolValue = obj[canSymbol.for('can.isValueLike')];
        if (typeof symbolValue !== 'undefined') {
            return symbolValue;
        }
        var value = obj[canSymbol.for('can.getValue')];
        if (value !== undefined) {
            return !!value;
        }
    }
    function isMapLike(obj) {
        if (isPrimitive(obj)) {
            return false;
        }
        var isMapLike = obj[canSymbol.for('can.isMapLike')];
        if (typeof isMapLike !== 'undefined') {
            return !!isMapLike;
        }
        var value = obj[canSymbol.for('can.getKeyValue')];
        if (value !== undefined) {
            return !!value;
        }
        return true;
    }
    var onValueSymbol = canSymbol.for('can.onValue'), onKeyValueSymbol = canSymbol.for('can.onKeyValue'), onPatchesSymbol = canSymbol.for('can.onPatches');
    function isObservableLike(obj) {
        if (isPrimitive(obj)) {
            return false;
        }
        return Boolean(obj[onValueSymbol] || obj[onKeyValueSymbol] || obj[onPatchesSymbol]);
    }
    function isListLike(list) {
        var symbolValue, type = typeof list;
        if (type === 'string') {
            return true;
        }
        if (isPrimitive(list)) {
            return false;
        }
        symbolValue = list[canSymbol.for('can.isListLike')];
        if (typeof symbolValue !== 'undefined') {
            return symbolValue;
        }
        var value = list[canSymbol.iterator];
        if (value !== undefined) {
            return !!value;
        }
        if (Array.isArray(list)) {
            return true;
        }
        return helpers.hasLength(list);
    }
    var supportsSymbols = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function';
    var isSymbolLike;
    if (supportsSymbols) {
        isSymbolLike = function (symbol) {
            return typeof symbol === 'symbol';
        };
    } else {
        var symbolStart = '@@symbol';
        isSymbolLike = function (symbol) {
            if (typeof symbol === 'object' && !Array.isArray(symbol)) {
                return symbol.toString().substr(0, symbolStart.length) === symbolStart;
            } else {
                return false;
            }
        };
    }
    var coreHasOwn = Object.prototype.hasOwnProperty;
    var funcToString = Function.prototype.toString;
    var objectCtorString = funcToString.call(Object);
    function isPlainObject(obj) {
        if (!obj || typeof obj !== 'object') {
            return false;
        }
        var proto = Object.getPrototypeOf(obj);
        if (proto === Object.prototype || proto === null) {
            return true;
        }
        var Constructor = coreHasOwn.call(proto, 'constructor') && proto.constructor;
        return typeof Constructor === 'function' && Constructor instanceof Constructor && funcToString.call(Constructor) === objectCtorString;
    }
    module.exports = {
        isConstructorLike: isConstructorLike,
        isFunctionLike: isFunctionLike,
        isListLike: isListLike,
        isMapLike: isMapLike,
        isObservableLike: isObservableLike,
        isPrimitive: isPrimitive,
        isBuiltIn: isBuiltIn,
        isValueLike: isValueLike,
        isSymbolLike: isSymbolLike,
        isMoreListLikeThanMapLike: function (obj) {
            if (Array.isArray(obj)) {
                return true;
            }
            if (obj instanceof Array) {
                return true;
            }
            if (obj == null) {
                return false;
            }
            var value = obj[canSymbol.for('can.isMoreListLikeThanMapLike')];
            if (value !== undefined) {
                return value;
            }
            var isListLike = this.isListLike(obj), isMapLike = this.isMapLike(obj);
            if (isListLike && !isMapLike) {
                return true;
            } else if (!isListLike && isMapLike) {
                return false;
            }
        },
        isIteratorLike: function (obj) {
            return obj && typeof obj === 'object' && typeof obj.next === 'function' && obj.next.length === 0;
        },
        isPromise: function (obj) {
            return obj instanceof Promise || Object.prototype.toString.call(obj) === '[object Promise]';
        },
        isPlainObject: isPlainObject
    };
});
/*can-reflect@1.17.0#reflections/call/call*/
define('can-reflect@1.17.0#reflections/call/call', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../type/type'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var typeReflections = require('../type/type');
    module.exports = {
        call: function (func, context) {
            var args = [].slice.call(arguments, 2);
            var apply = func[canSymbol.for('can.apply')];
            if (apply) {
                return apply.call(func, context, args);
            } else {
                return func.apply(context, args);
            }
        },
        apply: function (func, context, args) {
            var apply = func[canSymbol.for('can.apply')];
            if (apply) {
                return apply.call(func, context, args);
            } else {
                return func.apply(context, args);
            }
        },
        'new': function (func) {
            var args = [].slice.call(arguments, 1);
            var makeNew = func[canSymbol.for('can.new')];
            if (makeNew) {
                return makeNew.apply(func, args);
            } else {
                var context = Object.create(func.prototype);
                var ret = func.apply(context, args);
                if (typeReflections.isPrimitive(ret)) {
                    return context;
                } else {
                    return ret;
                }
            }
        }
    };
});
/*can-reflect@1.17.0#reflections/get-set/get-set*/
define('can-reflect@1.17.0#reflections/get-set/get-set', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../type/type'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var typeReflections = require('../type/type');
    var setKeyValueSymbol = canSymbol.for('can.setKeyValue'), getKeyValueSymbol = canSymbol.for('can.getKeyValue'), getValueSymbol = canSymbol.for('can.getValue'), setValueSymbol = canSymbol.for('can.setValue');
    var reflections = {
        setKeyValue: function (obj, key, value) {
            if (typeReflections.isSymbolLike(key)) {
                if (typeof key === 'symbol') {
                    obj[key] = value;
                } else {
                    Object.defineProperty(obj, key, {
                        enumerable: false,
                        configurable: true,
                        value: value,
                        writable: true
                    });
                }
                return;
            }
            var setKeyValue = obj[setKeyValueSymbol];
            if (setKeyValue !== undefined) {
                return setKeyValue.call(obj, key, value);
            } else {
                obj[key] = value;
            }
        },
        getKeyValue: function (obj, key) {
            var getKeyValue = obj[getKeyValueSymbol];
            if (getKeyValue) {
                return getKeyValue.call(obj, key);
            }
            return obj[key];
        },
        deleteKeyValue: function (obj, key) {
            var deleteKeyValue = obj[canSymbol.for('can.deleteKeyValue')];
            if (deleteKeyValue) {
                return deleteKeyValue.call(obj, key);
            }
            delete obj[key];
        },
        getValue: function (value) {
            if (typeReflections.isPrimitive(value)) {
                return value;
            }
            var getValue = value[getValueSymbol];
            if (getValue) {
                return getValue.call(value);
            }
            return value;
        },
        setValue: function (item, value) {
            var setValue = item && item[setValueSymbol];
            if (setValue) {
                return setValue.call(item, value);
            } else {
                throw new Error('can-reflect.setValue - Can not set value.');
            }
        },
        splice: function (obj, index, removing, adding) {
            var howMany;
            if (typeof removing !== 'number') {
                var updateValues = obj[canSymbol.for('can.updateValues')];
                if (updateValues) {
                    return updateValues.call(obj, index, removing, adding);
                }
                howMany = removing.length;
            } else {
                howMany = removing;
            }
            if (arguments.length <= 3) {
                adding = [];
            }
            var splice = obj[canSymbol.for('can.splice')];
            if (splice) {
                return splice.call(obj, index, howMany, adding);
            }
            return [].splice.apply(obj, [
                index,
                howMany
            ].concat(adding));
        },
        addValues: function (obj, adding, index) {
            var add = obj[canSymbol.for('can.addValues')];
            if (add) {
                return add.call(obj, adding, index);
            }
            if (Array.isArray(obj) && index === undefined) {
                return obj.push.apply(obj, adding);
            }
            return reflections.splice(obj, index, [], adding);
        },
        removeValues: function (obj, removing, index) {
            var removeValues = obj[canSymbol.for('can.removeValues')];
            if (removeValues) {
                return removeValues.call(obj, removing, index);
            }
            if (Array.isArray(obj) && index === undefined) {
                removing.forEach(function (item) {
                    var index = obj.indexOf(item);
                    if (index >= 0) {
                        obj.splice(index, 1);
                    }
                });
                return;
            }
            return reflections.splice(obj, index, removing, []);
        }
    };
    reflections.get = reflections.getKeyValue;
    reflections.set = reflections.setKeyValue;
    reflections['delete'] = reflections.deleteKeyValue;
    module.exports = reflections;
});
/*can-reflect@1.17.0#reflections/observe/observe*/
define('can-reflect@1.17.0#reflections/observe/observe', [
    'require',
    'exports',
    'module',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var slice = [].slice;
    function makeFallback(symbolName, fallbackName) {
        return function (obj, event, handler, queueName) {
            var method = obj[canSymbol.for(symbolName)];
            if (method !== undefined) {
                return method.call(obj, event, handler, queueName);
            }
            return this[fallbackName].apply(this, arguments);
        };
    }
    function makeErrorIfMissing(symbolName, errorMessage) {
        return function (obj) {
            var method = obj[canSymbol.for(symbolName)];
            if (method !== undefined) {
                var args = slice.call(arguments, 1);
                return method.apply(obj, args);
            }
            throw new Error(errorMessage);
        };
    }
    module.exports = {
        onKeyValue: makeFallback('can.onKeyValue', 'onEvent'),
        offKeyValue: makeFallback('can.offKeyValue', 'offEvent'),
        onKeys: makeErrorIfMissing('can.onKeys', 'can-reflect: can not observe an onKeys event'),
        onKeysAdded: makeErrorIfMissing('can.onKeysAdded', 'can-reflect: can not observe an onKeysAdded event'),
        onKeysRemoved: makeErrorIfMissing('can.onKeysRemoved', 'can-reflect: can not unobserve an onKeysRemoved event'),
        getKeyDependencies: makeErrorIfMissing('can.getKeyDependencies', 'can-reflect: can not determine dependencies'),
        getWhatIChange: makeErrorIfMissing('can.getWhatIChange', 'can-reflect: can not determine dependencies'),
        getChangesDependencyRecord: function getChangesDependencyRecord(handler) {
            var fn = handler[canSymbol.for('can.getChangesDependencyRecord')];
            if (typeof fn === 'function') {
                return fn();
            }
        },
        keyHasDependencies: makeErrorIfMissing('can.keyHasDependencies', 'can-reflect: can not determine if this has key dependencies'),
        onValue: makeErrorIfMissing('can.onValue', 'can-reflect: can not observe value change'),
        offValue: makeErrorIfMissing('can.offValue', 'can-reflect: can not unobserve value change'),
        getValueDependencies: makeErrorIfMissing('can.getValueDependencies', 'can-reflect: can not determine dependencies'),
        valueHasDependencies: makeErrorIfMissing('can.valueHasDependencies', 'can-reflect: can not determine if value has dependencies'),
        onPatches: makeErrorIfMissing('can.onPatches', 'can-reflect: can not observe patches on object'),
        offPatches: makeErrorIfMissing('can.offPatches', 'can-reflect: can not unobserve patches on object'),
        onInstancePatches: makeErrorIfMissing('can.onInstancePatches', 'can-reflect: can not observe onInstancePatches on Type'),
        offInstancePatches: makeErrorIfMissing('can.offInstancePatches', 'can-reflect: can not unobserve onInstancePatches on Type'),
        onInstanceBoundChange: makeErrorIfMissing('can.onInstanceBoundChange', 'can-reflect: can not observe bound state change in instances.'),
        offInstanceBoundChange: makeErrorIfMissing('can.offInstanceBoundChange', 'can-reflect: can not unobserve bound state change'),
        isBound: makeErrorIfMissing('can.isBound', 'can-reflect: cannot determine if object is bound'),
        onEvent: function (obj, eventName, callback, queue) {
            if (obj) {
                var onEvent = obj[canSymbol.for('can.onEvent')];
                if (onEvent !== undefined) {
                    return onEvent.call(obj, eventName, callback, queue);
                } else if (obj.addEventListener) {
                    obj.addEventListener(eventName, callback, queue);
                }
            }
        },
        offEvent: function (obj, eventName, callback, queue) {
            if (obj) {
                var offEvent = obj[canSymbol.for('can.offEvent')];
                if (offEvent !== undefined) {
                    return offEvent.call(obj, eventName, callback, queue);
                } else if (obj.removeEventListener) {
                    obj.removeEventListener(eventName, callback, queue);
                }
            }
        },
        setPriority: function (obj, priority) {
            if (obj) {
                var setPriority = obj[canSymbol.for('can.setPriority')];
                if (setPriority !== undefined) {
                    setPriority.call(obj, priority);
                    return true;
                }
            }
            return false;
        },
        getPriority: function (obj) {
            if (obj) {
                var getPriority = obj[canSymbol.for('can.getPriority')];
                if (getPriority !== undefined) {
                    return getPriority.call(obj);
                }
            }
            return undefined;
        }
    };
});
/*can-reflect@1.17.0#reflections/shape/shape*/
define('can-reflect@1.17.0#reflections/shape/shape', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../get-set/get-set',
    '../type/type',
    '../helpers'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var getSetReflections = require('../get-set/get-set');
    var typeReflections = require('../type/type');
    var helpers = require('../helpers');
    var getPrototypeOfWorksWithPrimitives = true;
    try {
        Object.getPrototypeOf(1);
    } catch (e) {
        getPrototypeOfWorksWithPrimitives = false;
    }
    var ArrayMap;
    if (typeof Map === 'function') {
        ArrayMap = Map;
    } else {
        function isEven(num) {
            return !(num % 2);
        }
        ArrayMap = function () {
            this.contents = [];
        };
        ArrayMap.prototype = {
            _getIndex: function (key) {
                var idx;
                do {
                    idx = this.contents.indexOf(key, idx);
                } while (idx !== -1 && !isEven(idx));
                return idx;
            },
            has: function (key) {
                return this._getIndex(key) !== -1;
            },
            get: function (key) {
                var idx = this._getIndex(key);
                if (idx !== -1) {
                    return this.contents[idx + 1];
                }
            },
            set: function (key, value) {
                var idx = this._getIndex(key);
                if (idx !== -1) {
                    this.contents[idx + 1] = value;
                } else {
                    this.contents.push(key);
                    this.contents.push(value);
                }
            },
            'delete': function (key) {
                var idx = this._getIndex(key);
                if (idx !== -1) {
                    this.contents.splice(idx, 2);
                }
            }
        };
    }
    var shapeReflections;
    var shiftFirstArgumentToThis = function (func) {
        return function () {
            var args = [this];
            args.push.apply(args, arguments);
            return func.apply(null, args);
        };
    };
    var getKeyValueSymbol = canSymbol.for('can.getKeyValue');
    var shiftedGetKeyValue = shiftFirstArgumentToThis(getSetReflections.getKeyValue);
    var setKeyValueSymbol = canSymbol.for('can.setKeyValue');
    var shiftedSetKeyValue = shiftFirstArgumentToThis(getSetReflections.setKeyValue);
    var sizeSymbol = canSymbol.for('can.size');
    var hasUpdateSymbol = helpers.makeGetFirstSymbolValue([
        'can.updateDeep',
        'can.assignDeep',
        'can.setKeyValue'
    ]);
    var shouldUpdateOrAssign = function (obj) {
        return typeReflections.isPlainObject(obj) || Array.isArray(obj) || !!hasUpdateSymbol(obj);
    };
    function isSerializedHelper(obj) {
        if (typeReflections.isPrimitive(obj)) {
            return true;
        }
        if (hasUpdateSymbol(obj)) {
            return false;
        }
        return typeReflections.isBuiltIn(obj) && !typeReflections.isPlainObject(obj) && !Array.isArray(obj);
    }
    var Object_Keys;
    try {
        Object.keys(1);
        Object_Keys = Object.keys;
    } catch (e) {
        Object_Keys = function (obj) {
            if (typeReflections.isPrimitive(obj)) {
                return [];
            } else {
                return Object.keys(obj);
            }
        };
    }
    function makeSerializer(methodName, symbolsToCheck) {
        var serializeMap = null;
        function SerializeOperation(MapType) {
            this.first = !serializeMap;
            if (this.first) {
                serializeMap = createSerializeMap(MapType);
            }
            this.map = serializeMap;
            this.result = null;
        }
        SerializeOperation.prototype.end = function () {
            if (this.first) {
                serializeMap = null;
            }
            return this.result;
        };
        function createSerializeMap(Type) {
            var MapType = Type || ArrayMap;
            return {
                unwrap: new MapType(),
                serialize: new MapType(),
                isSerializing: {
                    unwrap: new MapType(),
                    serialize: new MapType()
                },
                circularReferenceIsSerializing: {
                    unwrap: new MapType(),
                    serialize: new MapType()
                }
            };
        }
        return function serializer(value, MapType) {
            if (isSerializedHelper(value)) {
                return value;
            }
            var operation = new SerializeOperation(MapType);
            if (typeReflections.isValueLike(value)) {
                operation.result = this[methodName](getSetReflections.getValue(value));
            } else {
                var isListLike = typeReflections.isIteratorLike(value) || typeReflections.isMoreListLikeThanMapLike(value);
                operation.result = isListLike ? [] : {};
                if (operation.map[methodName].has(value)) {
                    if (operation.map.isSerializing[methodName].has(value)) {
                        operation.map.circularReferenceIsSerializing[methodName].set(value, true);
                    }
                    return operation.map[methodName].get(value);
                } else {
                    operation.map[methodName].set(value, operation.result);
                }
                for (var i = 0, len = symbolsToCheck.length; i < len; i++) {
                    var serializer = value[symbolsToCheck[i]];
                    if (serializer) {
                        operation.map.isSerializing[methodName].set(value, true);
                        var oldResult = operation.result;
                        operation.result = serializer.call(value, oldResult);
                        operation.map.isSerializing[methodName].delete(value);
                        if (operation.result !== oldResult) {
                            if (operation.map.circularReferenceIsSerializing[methodName].has(value)) {
                                operation.end();
                                throw new Error('Cannot serialize cirular reference!');
                            }
                            operation.map[methodName].set(value, operation.result);
                        }
                        return operation.end();
                    }
                }
                if (typeof obj === 'function') {
                    operation.map[methodName].set(value, value);
                    operation.result = value;
                } else if (isListLike) {
                    this.eachIndex(value, function (childValue, index) {
                        operation.result[index] = this[methodName](childValue);
                    }, this);
                } else {
                    this.eachKey(value, function (childValue, prop) {
                        operation.result[prop] = this[methodName](childValue);
                    }, this);
                }
            }
            return operation.end();
        };
    }
    var makeMap;
    if (typeof Map !== 'undefined') {
        makeMap = function (keys) {
            var map = new Map();
            shapeReflections.eachIndex(keys, function (key) {
                map.set(key, true);
            });
            return map;
        };
    } else {
        makeMap = function (keys) {
            var map = {};
            keys.forEach(function (key) {
                map[key] = true;
            });
            return {
                get: function (key) {
                    return map[key];
                },
                set: function (key, value) {
                    map[key] = value;
                },
                keys: function () {
                    return keys;
                }
            };
        };
    }
    var fastHasOwnKey = function (obj) {
        var hasOwnKey = obj[canSymbol.for('can.hasOwnKey')];
        if (hasOwnKey) {
            return hasOwnKey.bind(obj);
        } else {
            var map = makeMap(shapeReflections.getOwnEnumerableKeys(obj));
            return function (key) {
                return map.get(key);
            };
        }
    };
    function addPatch(patches, patch) {
        var lastPatch = patches[patches.length - 1];
        if (lastPatch) {
            if (lastPatch.deleteCount === lastPatch.insert.length && patch.index - lastPatch.index === lastPatch.deleteCount) {
                lastPatch.insert.push.apply(lastPatch.insert, patch.insert);
                lastPatch.deleteCount += patch.deleteCount;
                return;
            }
        }
        patches.push(patch);
    }
    function updateDeepList(target, source, isAssign) {
        var sourceArray = this.toArray(source);
        var patches = [], lastIndex = -1;
        this.eachIndex(target, function (curVal, index) {
            lastIndex = index;
            if (index >= sourceArray.length) {
                if (!isAssign) {
                    addPatch(patches, {
                        index: index,
                        deleteCount: target.length - index + 1,
                        insert: []
                    });
                }
                return false;
            }
            var newVal = sourceArray[index];
            if (typeReflections.isPrimitive(curVal) || typeReflections.isPrimitive(newVal) || shouldUpdateOrAssign(curVal) === false) {
                addPatch(patches, {
                    index: index,
                    deleteCount: 1,
                    insert: [newVal]
                });
            } else {
                this.updateDeep(curVal, newVal);
            }
        }, this);
        if (sourceArray.length > lastIndex) {
            addPatch(patches, {
                index: lastIndex + 1,
                deleteCount: 0,
                insert: sourceArray.slice(lastIndex + 1)
            });
        }
        for (var i = 0, patchLen = patches.length; i < patchLen; i++) {
            var patch = patches[i];
            getSetReflections.splice(target, patch.index, patch.deleteCount, patch.insert);
        }
        return target;
    }
    shapeReflections = {
        each: function (obj, callback, context) {
            if (typeReflections.isIteratorLike(obj) || typeReflections.isMoreListLikeThanMapLike(obj)) {
                return shapeReflections.eachIndex(obj, callback, context);
            } else {
                return shapeReflections.eachKey(obj, callback, context);
            }
        },
        eachIndex: function (list, callback, context) {
            if (Array.isArray(list)) {
                return shapeReflections.eachListLike(list, callback, context);
            } else {
                var iter, iterator = list[canSymbol.iterator];
                if (typeReflections.isIteratorLike(list)) {
                    iter = list;
                } else if (iterator) {
                    iter = iterator.call(list);
                }
                if (iter) {
                    var res, index = 0;
                    while (!(res = iter.next()).done) {
                        if (callback.call(context || list, res.value, index++, list) === false) {
                            break;
                        }
                    }
                } else {
                    shapeReflections.eachListLike(list, callback, context);
                }
            }
            return list;
        },
        eachListLike: function (list, callback, context) {
            var index = -1;
            var length = list.length;
            if (length === undefined) {
                var size = list[sizeSymbol];
                if (size) {
                    length = size.call(list);
                } else {
                    throw new Error('can-reflect: unable to iterate.');
                }
            }
            while (++index < length) {
                var item = list[index];
                if (callback.call(context || item, item, index, list) === false) {
                    break;
                }
            }
            return list;
        },
        toArray: function (obj) {
            var arr = [];
            shapeReflections.each(obj, function (value) {
                arr.push(value);
            });
            return arr;
        },
        eachKey: function (obj, callback, context) {
            if (obj) {
                var enumerableKeys = shapeReflections.getOwnEnumerableKeys(obj);
                var getKeyValue = obj[getKeyValueSymbol] || shiftedGetKeyValue;
                return shapeReflections.eachIndex(enumerableKeys, function (key) {
                    var value = getKeyValue.call(obj, key);
                    return callback.call(context || obj, value, key, obj);
                });
            }
            return obj;
        },
        'hasOwnKey': function (obj, key) {
            var hasOwnKey = obj[canSymbol.for('can.hasOwnKey')];
            if (hasOwnKey) {
                return hasOwnKey.call(obj, key);
            }
            var getOwnKeys = obj[canSymbol.for('can.getOwnKeys')];
            if (getOwnKeys) {
                var found = false;
                shapeReflections.eachIndex(getOwnKeys.call(obj), function (objKey) {
                    if (objKey === key) {
                        found = true;
                        return false;
                    }
                });
                return found;
            }
            return obj.hasOwnProperty(key);
        },
        getOwnEnumerableKeys: function (obj) {
            var getOwnEnumerableKeys = obj[canSymbol.for('can.getOwnEnumerableKeys')];
            if (getOwnEnumerableKeys) {
                return getOwnEnumerableKeys.call(obj);
            }
            if (obj[canSymbol.for('can.getOwnKeys')] && obj[canSymbol.for('can.getOwnKeyDescriptor')]) {
                var keys = [];
                shapeReflections.eachIndex(shapeReflections.getOwnKeys(obj), function (key) {
                    var descriptor = shapeReflections.getOwnKeyDescriptor(obj, key);
                    if (descriptor.enumerable) {
                        keys.push(key);
                    }
                }, this);
                return keys;
            } else {
                return Object_Keys(obj);
            }
        },
        getOwnKeys: function (obj) {
            var getOwnKeys = obj[canSymbol.for('can.getOwnKeys')];
            if (getOwnKeys) {
                return getOwnKeys.call(obj);
            } else {
                return Object.getOwnPropertyNames(obj);
            }
        },
        getOwnKeyDescriptor: function (obj, key) {
            var getOwnKeyDescriptor = obj[canSymbol.for('can.getOwnKeyDescriptor')];
            if (getOwnKeyDescriptor) {
                return getOwnKeyDescriptor.call(obj, key);
            } else {
                return Object.getOwnPropertyDescriptor(obj, key);
            }
        },
        unwrap: makeSerializer('unwrap', [canSymbol.for('can.unwrap')]),
        serialize: makeSerializer('serialize', [
            canSymbol.for('can.serialize'),
            canSymbol.for('can.unwrap')
        ]),
        assignMap: function (target, source) {
            var hasOwnKey = fastHasOwnKey(target);
            var getKeyValue = target[getKeyValueSymbol] || shiftedGetKeyValue;
            var setKeyValue = target[setKeyValueSymbol] || shiftedSetKeyValue;
            shapeReflections.eachKey(source, function (value, key) {
                if (!hasOwnKey(key) || getKeyValue.call(target, key) !== value) {
                    setKeyValue.call(target, key, value);
                }
            });
            return target;
        },
        assignList: function (target, source) {
            var inserting = shapeReflections.toArray(source);
            getSetReflections.splice(target, 0, inserting, inserting);
            return target;
        },
        assign: function (target, source) {
            if (typeReflections.isIteratorLike(source) || typeReflections.isMoreListLikeThanMapLike(source)) {
                shapeReflections.assignList(target, source);
            } else {
                shapeReflections.assignMap(target, source);
            }
            return target;
        },
        assignDeepMap: function (target, source) {
            var hasOwnKey = fastHasOwnKey(target);
            var getKeyValue = target[getKeyValueSymbol] || shiftedGetKeyValue;
            var setKeyValue = target[setKeyValueSymbol] || shiftedSetKeyValue;
            shapeReflections.eachKey(source, function (newVal, key) {
                if (!hasOwnKey(key)) {
                    getSetReflections.setKeyValue(target, key, newVal);
                } else {
                    var curVal = getKeyValue.call(target, key);
                    if (newVal === curVal) {
                    } else if (typeReflections.isPrimitive(curVal) || typeReflections.isPrimitive(newVal) || shouldUpdateOrAssign(curVal) === false) {
                        setKeyValue.call(target, key, newVal);
                    } else {
                        shapeReflections.assignDeep(curVal, newVal);
                    }
                }
            }, this);
            return target;
        },
        assignDeepList: function (target, source) {
            return updateDeepList.call(this, target, source, true);
        },
        assignDeep: function (target, source) {
            var assignDeep = target[canSymbol.for('can.assignDeep')];
            if (assignDeep) {
                assignDeep.call(target, source);
            } else if (typeReflections.isMoreListLikeThanMapLike(source)) {
                shapeReflections.assignDeepList(target, source);
            } else {
                shapeReflections.assignDeepMap(target, source);
            }
            return target;
        },
        updateMap: function (target, source) {
            var sourceKeyMap = makeMap(shapeReflections.getOwnEnumerableKeys(source));
            var sourceGetKeyValue = source[getKeyValueSymbol] || shiftedGetKeyValue;
            var targetSetKeyValue = target[setKeyValueSymbol] || shiftedSetKeyValue;
            shapeReflections.eachKey(target, function (curVal, key) {
                if (!sourceKeyMap.get(key)) {
                    getSetReflections.deleteKeyValue(target, key);
                    return;
                }
                sourceKeyMap.set(key, false);
                var newVal = sourceGetKeyValue.call(source, key);
                if (newVal !== curVal) {
                    targetSetKeyValue.call(target, key, newVal);
                }
            }, this);
            shapeReflections.eachIndex(sourceKeyMap.keys(), function (key) {
                if (sourceKeyMap.get(key)) {
                    targetSetKeyValue.call(target, key, sourceGetKeyValue.call(source, key));
                }
            });
            return target;
        },
        updateList: function (target, source) {
            var inserting = shapeReflections.toArray(source);
            getSetReflections.splice(target, 0, target, inserting);
            return target;
        },
        update: function (target, source) {
            if (typeReflections.isIteratorLike(source) || typeReflections.isMoreListLikeThanMapLike(source)) {
                shapeReflections.updateList(target, source);
            } else {
                shapeReflections.updateMap(target, source);
            }
            return target;
        },
        updateDeepMap: function (target, source) {
            var sourceKeyMap = makeMap(shapeReflections.getOwnEnumerableKeys(source));
            var sourceGetKeyValue = source[getKeyValueSymbol] || shiftedGetKeyValue;
            var targetSetKeyValue = target[setKeyValueSymbol] || shiftedSetKeyValue;
            shapeReflections.eachKey(target, function (curVal, key) {
                if (!sourceKeyMap.get(key)) {
                    getSetReflections.deleteKeyValue(target, key);
                    return;
                }
                sourceKeyMap.set(key, false);
                var newVal = sourceGetKeyValue.call(source, key);
                if (typeReflections.isPrimitive(curVal) || typeReflections.isPrimitive(newVal) || shouldUpdateOrAssign(curVal) === false) {
                    targetSetKeyValue.call(target, key, newVal);
                } else {
                    shapeReflections.updateDeep(curVal, newVal);
                }
            }, this);
            shapeReflections.eachIndex(sourceKeyMap.keys(), function (key) {
                if (sourceKeyMap.get(key)) {
                    targetSetKeyValue.call(target, key, sourceGetKeyValue.call(source, key));
                }
            });
            return target;
        },
        updateDeepList: function (target, source) {
            return updateDeepList.call(this, target, source);
        },
        updateDeep: function (target, source) {
            var updateDeep = target[canSymbol.for('can.updateDeep')];
            if (updateDeep) {
                updateDeep.call(target, source);
            } else if (typeReflections.isMoreListLikeThanMapLike(source)) {
                shapeReflections.updateDeepList(target, source);
            } else {
                shapeReflections.updateDeepMap(target, source);
            }
            return target;
        },
        hasKey: function (obj, key) {
            if (obj == null) {
                return false;
            }
            if (typeReflections.isPrimitive(obj)) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    return true;
                } else {
                    var proto;
                    if (getPrototypeOfWorksWithPrimitives) {
                        proto = Object.getPrototypeOf(obj);
                    } else {
                        proto = obj.__proto__;
                    }
                    ;
                    if (proto !== undefined) {
                        return key in proto;
                    } else {
                        return obj[key] !== undefined;
                    }
                }
            }
            var hasKey = obj[canSymbol.for('can.hasKey')];
            if (hasKey) {
                return hasKey.call(obj, key);
            }
            var found = shapeReflections.hasOwnKey(obj, key);
            return found || key in obj;
        },
        getAllEnumerableKeys: function () {
        },
        getAllKeys: function () {
        },
        assignSymbols: function (target, source) {
            shapeReflections.eachKey(source, function (value, key) {
                var symbol = typeReflections.isSymbolLike(canSymbol[key]) ? canSymbol[key] : canSymbol.for(key);
                getSetReflections.setKeyValue(target, symbol, value);
            });
            return target;
        },
        isSerialized: isSerializedHelper,
        size: function (obj) {
            if (obj == null) {
                return 0;
            }
            var size = obj[sizeSymbol];
            var count = 0;
            if (size) {
                return size.call(obj);
            } else if (helpers.hasLength(obj)) {
                return obj.length;
            } else if (typeReflections.isListLike(obj)) {
                shapeReflections.eachIndex(obj, function () {
                    count++;
                });
                return count;
            } else if (obj) {
                return shapeReflections.getOwnEnumerableKeys(obj).length;
            } else {
                return undefined;
            }
        },
        defineInstanceKey: function (cls, key, properties) {
            var defineInstanceKey = cls[canSymbol.for('can.defineInstanceKey')];
            if (defineInstanceKey) {
                return defineInstanceKey.call(cls, key, properties);
            }
            var proto = cls.prototype;
            defineInstanceKey = proto[canSymbol.for('can.defineInstanceKey')];
            if (defineInstanceKey) {
                defineInstanceKey.call(proto, key, properties);
            } else {
                Object.defineProperty(proto, key, shapeReflections.assign({
                    configurable: true,
                    enumerable: !typeReflections.isSymbolLike(key),
                    writable: true
                }, properties));
            }
        }
    };
    shapeReflections.isSerializable = shapeReflections.isSerialized;
    shapeReflections.keys = shapeReflections.getOwnEnumerableKeys;
    module.exports = shapeReflections;
});
/*can-reflect@1.17.0#reflections/shape/schema/schema*/
define('can-reflect@1.17.0#reflections/shape/schema/schema', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../../type/type',
    '../../get-set/get-set',
    '../shape'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var typeReflections = require('../../type/type');
    var getSetReflections = require('../../get-set/get-set');
    var shapeReflections = require('../shape');
    var getSchemaSymbol = canSymbol.for('can.getSchema'), isMemberSymbol = canSymbol.for('can.isMember'), newSymbol = canSymbol.for('can.new');
    function comparator(a, b) {
        return a.localeCompare(b);
    }
    function sort(obj) {
        if (typeReflections.isPrimitive(obj)) {
            return obj;
        }
        var out;
        if (typeReflections.isListLike(obj)) {
            out = [];
            shapeReflections.eachKey(obj, function (item) {
                out.push(sort(item));
            });
            return out;
        }
        if (typeReflections.isMapLike(obj)) {
            out = {};
            shapeReflections.getOwnKeys(obj).sort(comparator).forEach(function (key) {
                out[key] = sort(getSetReflections.getKeyValue(obj, key));
            });
            return out;
        }
        return obj;
    }
    function isPrimitiveConverter(Type) {
        return Type === Number || Type === String || Type === Boolean;
    }
    var schemaReflections = {
        getSchema: function (type) {
            if (type === undefined) {
                return undefined;
            }
            var getSchema = type[getSchemaSymbol];
            if (getSchema === undefined) {
                type = type.constructor;
                getSchema = type && type[getSchemaSymbol];
            }
            return getSchema !== undefined ? getSchema.call(type) : undefined;
        },
        getIdentity: function (value, schema) {
            schema = schema || schemaReflections.getSchema(value);
            if (schema === undefined) {
                throw new Error('can-reflect.getIdentity - Unable to find a schema for the given value.');
            }
            var identity = schema.identity;
            if (!identity || identity.length === 0) {
                throw new Error('can-reflect.getIdentity - Provided schema lacks an identity property.');
            } else if (identity.length === 1) {
                return getSetReflections.getKeyValue(value, identity[0]);
            } else {
                var id = {};
                identity.forEach(function (key) {
                    id[key] = getSetReflections.getKeyValue(value, key);
                });
                return JSON.stringify(schemaReflections.cloneKeySort(id));
            }
        },
        cloneKeySort: function (obj) {
            return sort(obj);
        },
        convert: function (value, Type) {
            if (isPrimitiveConverter(Type)) {
                return Type(value);
            }
            var isMemberTest = Type[isMemberSymbol], isMember = false, type = typeof Type, createNew = Type[newSymbol];
            if (isMemberTest !== undefined) {
                isMember = isMemberTest.call(Type, value);
            } else if (type === 'function') {
                if (typeReflections.isConstructorLike(Type)) {
                    isMember = value instanceof Type;
                }
            }
            if (isMember) {
                return value;
            }
            if (createNew !== undefined) {
                return createNew.call(Type, value);
            } else if (type === 'function') {
                if (typeReflections.isConstructorLike(Type)) {
                    return new Type(value);
                } else {
                    return Type(value);
                }
            } else {
                throw new Error('can-reflect: Can not convert values into type. Type must provide `can.new` symbol.');
            }
        }
    };
    module.exports = schemaReflections;
});
/*can-reflect@1.17.0#reflections/get-name/get-name*/
define('can-reflect@1.17.0#reflections/get-name/get-name', [
    'require',
    'exports',
    'module',
    'can-symbol',
    '../type/type'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var typeReflections = require('../type/type');
    var getNameSymbol = canSymbol.for('can.getName');
    function setName(obj, nameGetter) {
        if (typeof nameGetter !== 'function') {
            var value = nameGetter;
            nameGetter = function () {
                return value;
            };
        }
        Object.defineProperty(obj, getNameSymbol, { value: nameGetter });
    }
    function getName(obj) {
        var type = typeof obj;
        if (obj === null || type !== 'object' && type !== 'function') {
            return '' + obj;
        }
        var nameGetter = obj[getNameSymbol];
        if (nameGetter) {
            return nameGetter.call(obj);
        }
        if (type === 'function') {
            return obj.name;
        }
        if (obj.constructor && obj !== obj.constructor) {
            var parent = getName(obj.constructor);
            if (parent) {
                if (typeReflections.isValueLike(obj)) {
                    return parent + '<>';
                }
                if (typeReflections.isMoreListLikeThanMapLike(obj)) {
                    return parent + '[]';
                }
                if (typeReflections.isMapLike(obj)) {
                    return parent + '{}';
                }
            }
        }
        return undefined;
    }
    module.exports = {
        setName: setName,
        getName: getName
    };
});
/*can-reflect@1.17.0#types/map*/
define('can-reflect@1.17.0#types/map', [
    'require',
    'exports',
    'module',
    '../reflections/shape/shape',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var shape = require('../reflections/shape/shape');
    var CanSymbol = require('can-symbol');
    function keysPolyfill() {
        var keys = [];
        var currentIndex = 0;
        this.forEach(function (val, key) {
            keys.push(key);
        });
        return {
            next: function () {
                return {
                    value: keys[currentIndex],
                    done: currentIndex++ === keys.length
                };
            }
        };
    }
    if (typeof Map !== 'undefined') {
        shape.assignSymbols(Map.prototype, {
            'can.getOwnEnumerableKeys': Map.prototype.keys,
            'can.setKeyValue': Map.prototype.set,
            'can.getKeyValue': Map.prototype.get,
            'can.deleteKeyValue': Map.prototype['delete'],
            'can.hasOwnKey': Map.prototype.has
        });
        if (typeof Map.prototype.keys !== 'function') {
            Map.prototype.keys = Map.prototype[CanSymbol.for('can.getOwnEnumerableKeys')] = keysPolyfill;
        }
    }
    if (typeof WeakMap !== 'undefined') {
        shape.assignSymbols(WeakMap.prototype, {
            'can.getOwnEnumerableKeys': function () {
                throw new Error('can-reflect: WeakMaps do not have enumerable keys.');
            },
            'can.setKeyValue': WeakMap.prototype.set,
            'can.getKeyValue': WeakMap.prototype.get,
            'can.deleteKeyValue': WeakMap.prototype['delete'],
            'can.hasOwnKey': WeakMap.prototype.has
        });
    }
});
/*can-reflect@1.17.0#types/set*/
define('can-reflect@1.17.0#types/set', [
    'require',
    'exports',
    'module',
    '../reflections/shape/shape',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var shape = require('../reflections/shape/shape');
    var CanSymbol = require('can-symbol');
    if (typeof Set !== 'undefined') {
        shape.assignSymbols(Set.prototype, {
            'can.isMoreListLikeThanMapLike': true,
            'can.updateValues': function (index, removing, adding) {
                if (removing !== adding) {
                    shape.each(removing, function (value) {
                        this.delete(value);
                    }, this);
                }
                shape.each(adding, function (value) {
                    this.add(value);
                }, this);
            },
            'can.size': function () {
                return this.size;
            }
        });
        if (typeof Set.prototype[CanSymbol.iterator] !== 'function') {
            Set.prototype[CanSymbol.iterator] = function () {
                var arr = [];
                var currentIndex = 0;
                this.forEach(function (val) {
                    arr.push(val);
                });
                return {
                    next: function () {
                        return {
                            value: arr[currentIndex],
                            done: currentIndex++ === arr.length
                        };
                    }
                };
            };
        }
    }
    if (typeof WeakSet !== 'undefined') {
        shape.assignSymbols(WeakSet.prototype, {
            'can.isListLike': true,
            'can.isMoreListLikeThanMapLike': true,
            'can.updateValues': function (index, removing, adding) {
                if (removing !== adding) {
                    shape.each(removing, function (value) {
                        this.delete(value);
                    }, this);
                }
                shape.each(adding, function (value) {
                    this.add(value);
                }, this);
            },
            'can.size': function () {
                throw new Error('can-reflect: WeakSets do not have enumerable keys.');
            }
        });
    }
});
/*can-reflect@1.17.0#can-reflect*/
define('can-reflect@1.17.0#can-reflect', [
    'require',
    'exports',
    'module',
    './reflections/call/call',
    './reflections/get-set/get-set',
    './reflections/observe/observe',
    './reflections/shape/shape',
    './reflections/shape/schema/schema',
    './reflections/type/type',
    './reflections/get-name/get-name',
    'can-namespace',
    './types/map',
    './types/set'
], function (require, exports, module) {
    'use strict';
    var functionReflections = require('./reflections/call/call');
    var getSet = require('./reflections/get-set/get-set');
    var observe = require('./reflections/observe/observe');
    var shape = require('./reflections/shape/shape');
    var schema = require('./reflections/shape/schema/schema');
    var type = require('./reflections/type/type');
    var getName = require('./reflections/get-name/get-name');
    var namespace = require('can-namespace');
    var reflect = {};
    [
        functionReflections,
        getSet,
        observe,
        shape,
        type,
        getName,
        schema
    ].forEach(function (reflections) {
        for (var prop in reflections) {
            reflect[prop] = reflections[prop];
        }
    });
    require('./types/map');
    require('./types/set');
    module.exports = namespace.Reflect = reflect;
});
/*can-log@1.0.0#can-log*/
define('can-log@1.0.0#can-log', function (require, exports, module) {
    'use strict';
    exports.warnTimeout = 5000;
    exports.logLevel = 0;
    exports.warn = function () {
        var ll = this.logLevel;
        if (ll < 2) {
            if (typeof console !== 'undefined' && console.warn) {
                this._logger('warn', Array.prototype.slice.call(arguments));
            } else if (typeof console !== 'undefined' && console.log) {
                this._logger('log', Array.prototype.slice.call(arguments));
            }
        }
    };
    exports.log = function () {
        var ll = this.logLevel;
        if (ll < 1) {
            if (typeof console !== 'undefined' && console.log) {
                this._logger('log', Array.prototype.slice.call(arguments));
            }
        }
    };
    exports.error = function () {
        var ll = this.logLevel;
        if (ll < 1) {
            if (typeof console !== 'undefined' && console.error) {
                this._logger('error', Array.prototype.slice.call(arguments));
            }
        }
    };
    exports._logger = function (type, arr) {
        try {
            console[type].apply(console, arr);
        } catch (e) {
            console[type](arr);
        }
    };
});
/*can-log@1.0.0#dev/dev*/
define('can-log@1.0.0#dev/dev', [
    'require',
    'exports',
    'module',
    '../can-log'
], function (require, exports, module) {
    'use strict';
    var canLog = require('../can-log');
    module.exports = {
        warnTimeout: 5000,
        logLevel: 0,
        stringify: function (value) {
            var flagUndefined = function flagUndefined(key, value) {
                return value === undefined ? '/* void(undefined) */' : value;
            };
            return JSON.stringify(value, flagUndefined, '  ').replace(/"\/\* void\(undefined\) \*\/"/g, 'undefined');
        },
        warn: function () {
        },
        log: function () {
        },
        error: function () {
        },
        _logger: canLog._logger
    };
});
/*can-symbol@1.6.4#can-symbol*/
define('can-symbol@1.6.4#can-symbol', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var namespace = require('can-namespace');
        var supportsNativeSymbols = function () {
            var symbolExists = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function';
            if (!symbolExists) {
                return false;
            }
            var symbol = Symbol('a symbol for testing symbols');
            return typeof symbol === 'symbol';
        }();
        var CanSymbol;
        if (supportsNativeSymbols) {
            CanSymbol = Symbol;
        } else {
            var symbolNum = 0;
            CanSymbol = function CanSymbolPolyfill(description) {
                var symbolValue = '@@symbol' + symbolNum++ + description;
                var symbol = {};
                Object.defineProperties(symbol, {
                    toString: {
                        value: function () {
                            return symbolValue;
                        }
                    }
                });
                return symbol;
            };
            var descriptionToSymbol = {};
            var symbolToDescription = {};
            CanSymbol.for = function (description) {
                var symbol = descriptionToSymbol[description];
                if (!symbol) {
                    symbol = descriptionToSymbol[description] = CanSymbol(description);
                    symbolToDescription[symbol] = description;
                }
                return symbol;
            };
            CanSymbol.keyFor = function (symbol) {
                return symbolToDescription[symbol];
            };
            [
                'hasInstance',
                'isConcatSpreadable',
                'iterator',
                'match',
                'prototype',
                'replace',
                'search',
                'species',
                'split',
                'toPrimitive',
                'toStringTag',
                'unscopables'
            ].forEach(function (name) {
                CanSymbol[name] = CanSymbol('Symbol.' + name);
            });
        }
        [
            'isMapLike',
            'isListLike',
            'isValueLike',
            'isFunctionLike',
            'getOwnKeys',
            'getOwnKeyDescriptor',
            'proto',
            'getOwnEnumerableKeys',
            'hasOwnKey',
            'hasKey',
            'size',
            'getName',
            'getIdentity',
            'assignDeep',
            'updateDeep',
            'getValue',
            'setValue',
            'getKeyValue',
            'setKeyValue',
            'updateValues',
            'addValue',
            'removeValues',
            'apply',
            'new',
            'onValue',
            'offValue',
            'onKeyValue',
            'offKeyValue',
            'getKeyDependencies',
            'getValueDependencies',
            'keyHasDependencies',
            'valueHasDependencies',
            'onKeys',
            'onKeysAdded',
            'onKeysRemoved',
            'onPatches'
        ].forEach(function (name) {
            CanSymbol.for('can.' + name);
        });
        module.exports = namespace.Symbol = CanSymbol;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-string@1.0.0#can-string*/
define('can-string@1.0.0#can-string', function (require, exports, module) {
    'use strict';
    var strUndHash = /_|-/, strColons = /\=\=/, strWords = /([A-Z]+)([A-Z][a-z])/g, strLowUp = /([a-z\d])([A-Z])/g, strDash = /([a-z\d])([A-Z])/g, strQuote = /"/g, strSingleQuote = /'/g, strHyphenMatch = /-+(.)?/g, strCamelMatch = /[a-z][A-Z]/g, convertBadValues = function (content) {
            var isInvalid = content === null || content === undefined || isNaN(content) && '' + content === 'NaN';
            return '' + (isInvalid ? '' : content);
        };
    var string = {
        esc: function (content) {
            return convertBadValues(content).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(strQuote, '&#34;').replace(strSingleQuote, '&#39;');
        },
        capitalize: function (s) {
            return s.charAt(0).toUpperCase() + s.slice(1);
        },
        camelize: function (str) {
            return convertBadValues(str).replace(strHyphenMatch, function (match, chr) {
                return chr ? chr.toUpperCase() : '';
            });
        },
        hyphenate: function (str) {
            return convertBadValues(str).replace(strCamelMatch, function (str) {
                return str.charAt(0) + '-' + str.charAt(1).toLowerCase();
            });
        },
        underscore: function (s) {
            return s.replace(strColons, '/').replace(strWords, '$1_$2').replace(strLowUp, '$1_$2').replace(strDash, '_').toLowerCase();
        },
        undHash: strUndHash
    };
    module.exports = string;
});
/*can-construct@3.5.4#can-construct*/
define('can-construct@3.5.4#can-construct', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-log/dev/dev',
    'can-namespace',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var dev = require('can-log/dev/dev');
    var namespace = require('can-namespace');
    var canSymbol = require('can-symbol');
    var inSetupSymbol = canSymbol.for('can.initializing');
    var initializing = 0;
    var Construct = function () {
        if (arguments.length) {
            return Construct.extend.apply(Construct, arguments);
        }
    };
    var canGetDescriptor;
    try {
        Object.getOwnPropertyDescriptor({});
        canGetDescriptor = true;
    } catch (e) {
        canGetDescriptor = false;
    }
    var getDescriptor = function (newProps, name) {
            var descriptor = Object.getOwnPropertyDescriptor(newProps, name);
            if (descriptor && (descriptor.get || descriptor.set)) {
                return descriptor;
            }
            return null;
        }, inheritGetterSetter = function (newProps, oldProps, addTo) {
            addTo = addTo || newProps;
            var descriptor;
            for (var name in newProps) {
                if (descriptor = getDescriptor(newProps, name)) {
                    this._defineProperty(addTo, oldProps, name, descriptor);
                } else {
                    Construct._overwrite(addTo, oldProps, name, newProps[name]);
                }
            }
        }, simpleInherit = function (newProps, oldProps, addTo) {
            addTo = addTo || newProps;
            for (var name in newProps) {
                Construct._overwrite(addTo, oldProps, name, newProps[name]);
            }
        }, defineNonEnumerable = function (obj, prop, value) {
            Object.defineProperty(obj, prop, {
                configurable: true,
                writable: true,
                enumerable: false,
                value: value
            });
        };
    canReflect.assignMap(Construct, {
        constructorExtends: true,
        newInstance: function () {
            var inst = this.instance(), args;
            if (inst.setup) {
                Object.defineProperty(inst, '__inSetup', {
                    configurable: true,
                    enumerable: false,
                    value: true,
                    writable: true
                });
                Object.defineProperty(inst, inSetupSymbol, {
                    configurable: true,
                    enumerable: false,
                    value: true,
                    writable: true
                });
                args = inst.setup.apply(inst, arguments);
                if (args instanceof Construct.ReturnValue) {
                    return args.value;
                }
                inst.__inSetup = false;
                inst[inSetupSymbol] = false;
            }
            if (inst.init) {
                inst.init.apply(inst, args || arguments);
            }
            return inst;
        },
        _inherit: canGetDescriptor ? inheritGetterSetter : simpleInherit,
        _defineProperty: function (what, oldProps, propName, descriptor) {
            Object.defineProperty(what, propName, descriptor);
        },
        _overwrite: function (what, oldProps, propName, val) {
            Object.defineProperty(what, propName, {
                value: val,
                configurable: true,
                enumerable: true,
                writable: true
            });
        },
        setup: function (base) {
            var defaults = canReflect.assignDeepMap({}, base.defaults);
            this.defaults = canReflect.assignDeepMap(defaults, this.defaults);
        },
        instance: function () {
            initializing = 1;
            var inst = new this();
            initializing = 0;
            return inst;
        },
        extend: function (name, staticProperties, instanceProperties) {
            var shortName = name, klass = staticProperties, proto = instanceProperties;
            if (typeof shortName !== 'string') {
                proto = klass;
                klass = shortName;
                shortName = null;
            }
            if (!proto) {
                proto = klass;
                klass = null;
            }
            proto = proto || {};
            var _super_class = this, _super = this.prototype, Constructor, prototype;
            prototype = this.instance();
            Construct._inherit(proto, _super, prototype);
            if (shortName) {
            } else if (klass && klass.shortName) {
                shortName = klass.shortName;
            } else if (this.shortName) {
                shortName = this.shortName;
            }
            function init() {
                if (!initializing) {
                    return (!this || this.constructor !== Constructor) && arguments.length && Constructor.constructorExtends ? Constructor.extend.apply(Constructor, arguments) : Constructor.newInstance.apply(Constructor, arguments);
                }
            }
            Constructor = typeof namedCtor === 'function' ? namedCtor(constructorName, init) : function () {
                return init.apply(this, arguments);
            };
            for (var propName in _super_class) {
                if (_super_class.hasOwnProperty(propName)) {
                    Constructor[propName] = _super_class[propName];
                }
            }
            Construct._inherit(klass, _super_class, Constructor);
            canReflect.assignMap(Constructor, {
                constructor: Constructor,
                prototype: prototype
            });
            if (shortName !== undefined) {
                if (Object.getOwnPropertyDescriptor) {
                    var desc = Object.getOwnPropertyDescriptor(Constructor, 'name');
                    if (!desc || desc.configurable) {
                        Object.defineProperty(Constructor, 'name', {
                            writable: true,
                            value: shortName,
                            configurable: true
                        });
                    }
                }
                Constructor.shortName = shortName;
            }
            defineNonEnumerable(Constructor.prototype, 'constructor', Constructor);
            var t = [_super_class].concat(Array.prototype.slice.call(arguments)), args = Constructor.setup.apply(Constructor, t);
            if (Constructor.init) {
                Constructor.init.apply(Constructor, args || t);
            }
            return Constructor;
        },
        ReturnValue: function (value) {
            this.value = value;
        }
    });
    defineNonEnumerable(Construct.prototype, 'setup', function () {
    });
    defineNonEnumerable(Construct.prototype, 'init', function () {
    });
    module.exports = namespace.Construct = Construct;
});
/*can-queues@1.1.2#queue-state*/
define('can-queues@1.1.2#queue-state', function (require, exports, module) {
    module.exports = { lastTask: null };
});
/*can-assign@1.2.0#can-assign*/
define('can-assign@1.2.0#can-assign', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    var namespace = require('can-namespace');
    module.exports = namespace.assign = function (d, s) {
        for (var prop in s) {
            d[prop] = s[prop];
        }
        return d;
    };
});
/*can-queues@1.1.2#queue*/
define('can-queues@1.1.2#queue', [
    'require',
    'exports',
    'module',
    './queue-state',
    'can-log/dev/dev',
    'can-assign'
], function (require, exports, module) {
    var queueState = require('./queue-state');
    var canDev = require('can-log/dev/dev');
    var assign = require('can-assign');
    function noOperation() {
    }
    var Queue = function (name, callbacks) {
        this.callbacks = assign({
            onFirstTask: noOperation,
            onComplete: function () {
                queueState.lastTask = null;
            }
        }, callbacks || {});
        this.name = name;
        this.index = 0;
        this.tasks = [];
        this._log = false;
    };
    Queue.prototype.constructor = Queue;
    Queue.noop = noOperation;
    Queue.prototype.enqueue = function (fn, context, args, meta) {
        var len = this.tasks.push({
            fn: fn,
            context: context,
            args: args,
            meta: meta || {}
        });
        if (len === 1) {
            this.callbacks.onFirstTask(this);
        }
    };
    Queue.prototype.flush = function () {
        while (this.index < this.tasks.length) {
            var task = this.tasks[this.index++];
            task.fn.apply(task.context, task.args);
        }
        this.index = 0;
        this.tasks = [];
        this.callbacks.onComplete(this);
    };
    Queue.prototype.log = function () {
        this._log = arguments.length ? arguments[0] : true;
    };
    module.exports = Queue;
});
/*can-queues@1.1.2#priority-queue*/
define('can-queues@1.1.2#priority-queue', [
    'require',
    'exports',
    'module',
    './queue'
], function (require, exports, module) {
    var Queue = require('./queue');
    var PriorityQueue = function () {
        Queue.apply(this, arguments);
        this.taskMap = new Map();
        this.taskContainersByPriority = [];
        this.curPriorityIndex = Infinity;
        this.curPriorityMax = 0;
        this.isFlushing = false;
        this.tasksRemaining = 0;
    };
    PriorityQueue.prototype = Object.create(Queue.prototype);
    PriorityQueue.prototype.constructor = PriorityQueue;
    PriorityQueue.prototype.enqueue = function (fn, context, args, meta) {
        if (!this.taskMap.has(fn)) {
            this.tasksRemaining++;
            var isFirst = this.taskContainersByPriority.length === 0;
            var task = {
                fn: fn,
                context: context,
                args: args,
                meta: meta || {}
            };
            var taskContainer = this.getTaskContainerAndUpdateRange(task);
            taskContainer.tasks.push(task);
            this.taskMap.set(fn, task);
            if (isFirst) {
                this.callbacks.onFirstTask(this);
            }
        }
    };
    PriorityQueue.prototype.getTaskContainerAndUpdateRange = function (task) {
        var priority = task.meta.priority || 0;
        if (priority < this.curPriorityIndex) {
            this.curPriorityIndex = priority;
        }
        if (priority > this.curPriorityMax) {
            this.curPriorityMax = priority;
        }
        var tcByPriority = this.taskContainersByPriority;
        var taskContainer = tcByPriority[priority];
        if (!taskContainer) {
            taskContainer = tcByPriority[priority] = {
                tasks: [],
                index: 0
            };
        }
        return taskContainer;
    };
    PriorityQueue.prototype.flush = function () {
        if (this.isFlushing) {
            return;
        }
        this.isFlushing = true;
        while (true) {
            if (this.curPriorityIndex <= this.curPriorityMax) {
                var taskContainer = this.taskContainersByPriority[this.curPriorityIndex];
                if (taskContainer && taskContainer.tasks.length > taskContainer.index) {
                    var task = taskContainer.tasks[taskContainer.index++];
                    this.tasksRemaining--;
                    this.taskMap['delete'](task.fn);
                    task.fn.apply(task.context, task.args);
                } else {
                    this.curPriorityIndex++;
                }
            } else {
                this.taskMap = new Map();
                this.curPriorityIndex = Infinity;
                this.curPriorityMax = 0;
                this.taskContainersByPriority = [];
                this.isFlushing = false;
                this.callbacks.onComplete(this);
                return;
            }
        }
    };
    PriorityQueue.prototype.isEnqueued = function (fn) {
        return this.taskMap.has(fn);
    };
    PriorityQueue.prototype.flushQueuedTask = function (fn) {
        var task = this.dequeue(fn);
        if (task) {
            task.fn.apply(task.context, task.args);
        }
    };
    PriorityQueue.prototype.dequeue = function (fn) {
        var task = this.taskMap.get(fn);
        if (task) {
            var priority = task.meta.priority || 0;
            var taskContainer = this.taskContainersByPriority[priority];
            var index = taskContainer.tasks.indexOf(task, taskContainer.index);
            if (index >= 0) {
                taskContainer.tasks.splice(index, 1);
                this.tasksRemaining--;
                this.taskMap['delete'](task.fn);
                return task;
            } else {
                console.warn('Task', fn, 'has already run');
            }
        }
    };
    PriorityQueue.prototype.tasksRemainingCount = function () {
        return this.tasksRemaining;
    };
    module.exports = PriorityQueue;
});
/*can-queues@1.1.2#completion-queue*/
define('can-queues@1.1.2#completion-queue', [
    'require',
    'exports',
    'module',
    './queue'
], function (require, exports, module) {
    var Queue = require('./queue');
    var CompletionQueue = function () {
        Queue.apply(this, arguments);
        this.flushCount = 0;
    };
    CompletionQueue.prototype = Object.create(Queue.prototype);
    CompletionQueue.prototype.constructor = CompletionQueue;
    CompletionQueue.prototype.flush = function () {
        if (this.flushCount === 0) {
            this.flushCount++;
            while (this.index < this.tasks.length) {
                var task = this.tasks[this.index++];
                task.fn.apply(task.context, task.args);
            }
            this.index = 0;
            this.tasks = [];
            this.flushCount--;
            this.callbacks.onComplete(this);
        }
    };
    module.exports = CompletionQueue;
});
/*can-queues@1.1.2#can-queues*/
define('can-queues@1.1.2#can-queues', [
    'require',
    'exports',
    'module',
    'can-log/dev/dev',
    './queue',
    './priority-queue',
    './queue-state',
    './completion-queue',
    'can-namespace'
], function (require, exports, module) {
    var canDev = require('can-log/dev/dev');
    var Queue = require('./queue');
    var PriorityQueue = require('./priority-queue');
    var queueState = require('./queue-state');
    var CompletionQueue = require('./completion-queue');
    var ns = require('can-namespace');
    var batchStartCounter = 0;
    var addedTask = false;
    var isFlushing = false;
    var batchNum = 0;
    var batchData;
    var queueNames = [
        'notify',
        'derive',
        'domUI',
        'mutate'
    ];
    var NOTIFY_QUEUE, DERIVE_QUEUE, DOM_UI_QUEUE, MUTATE_QUEUE;
    NOTIFY_QUEUE = new Queue('NOTIFY', {
        onComplete: function () {
            DERIVE_QUEUE.flush();
        },
        onFirstTask: function () {
            if (!batchStartCounter) {
                NOTIFY_QUEUE.flush();
            } else {
                addedTask = true;
            }
        }
    });
    DERIVE_QUEUE = new PriorityQueue('DERIVE', {
        onComplete: function () {
            DOM_UI_QUEUE.flush();
        },
        onFirstTask: function () {
            addedTask = true;
        }
    });
    DOM_UI_QUEUE = new CompletionQueue('DOM_UI', {
        onComplete: function () {
            MUTATE_QUEUE.flush();
        },
        onFirstTask: function () {
            addedTask = true;
        }
    });
    MUTATE_QUEUE = new Queue('MUTATE', {
        onComplete: function () {
            queueState.lastTask = null;
            isFlushing = false;
        },
        onFirstTask: function () {
            addedTask = true;
        }
    });
    var queues = {
        Queue: Queue,
        PriorityQueue: PriorityQueue,
        CompletionQueue: CompletionQueue,
        notifyQueue: NOTIFY_QUEUE,
        deriveQueue: DERIVE_QUEUE,
        domUIQueue: DOM_UI_QUEUE,
        mutateQueue: MUTATE_QUEUE,
        batch: {
            start: function () {
                batchStartCounter++;
                if (batchStartCounter === 1) {
                    batchNum++;
                    batchData = { number: batchNum };
                }
            },
            stop: function () {
                batchStartCounter--;
                if (batchStartCounter === 0) {
                    if (addedTask) {
                        addedTask = false;
                        isFlushing = true;
                        NOTIFY_QUEUE.flush();
                    }
                }
            },
            isCollecting: function () {
                return batchStartCounter > 0;
            },
            number: function () {
                return batchNum;
            },
            data: function () {
                return batchData;
            }
        },
        enqueueByQueue: function enqueueByQueue(fnByQueue, context, args, makeMeta, reasonLog) {
            if (fnByQueue) {
                queues.batch.start();
                queueNames.forEach(function (queueName) {
                    var name = queueName + 'Queue';
                    var QUEUE = queues[name];
                    var tasks = fnByQueue[queueName];
                    if (tasks !== undefined) {
                        tasks.forEach(function (fn) {
                            var meta = makeMeta != null ? makeMeta(fn, context, args) : {};
                            meta.reasonLog = reasonLog;
                            QUEUE.enqueue(fn, context, args, meta);
                        });
                    }
                });
                queues.batch.stop();
            }
        },
        stack: function () {
            var current = queueState.lastTask;
            var stack = [];
            while (current) {
                stack.unshift(current);
                current = current.meta.parentTask;
            }
            return stack;
        },
        logStack: function () {
            var stack = this.stack();
            stack.forEach(function (task, i) {
                var meta = task.meta;
                if (i === 0 && meta && meta.reasonLog) {
                    canDev.log.apply(canDev, meta.reasonLog);
                }
                var log = meta && meta.log ? meta.log : [
                    task.fn.name,
                    task
                ];
                canDev.log.apply(canDev, [task.meta.stack.name + ' ran task:'].concat(log));
            });
        },
        taskCount: function () {
            return NOTIFY_QUEUE.tasks.length + DERIVE_QUEUE.tasks.length + DOM_UI_QUEUE.tasks.length + MUTATE_QUEUE.tasks.length;
        },
        flush: function () {
            NOTIFY_QUEUE.flush();
        },
        log: function () {
            NOTIFY_QUEUE.log.apply(NOTIFY_QUEUE, arguments);
            DERIVE_QUEUE.log.apply(DERIVE_QUEUE, arguments);
            DOM_UI_QUEUE.log.apply(DOM_UI_QUEUE, arguments);
            MUTATE_QUEUE.log.apply(MUTATE_QUEUE, arguments);
        }
    };
    if (ns.queues) {
        throw new Error('You can\'t have two versions of can-queues, check your dependencies');
    } else {
        module.exports = ns.queues = queues;
    }
});
/*can-observation-recorder@1.2.0#can-observation-recorder*/
define('can-observation-recorder@1.2.0#can-observation-recorder', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var canSymbol = require('can-symbol');
    var stack = [];
    var addParentSymbol = canSymbol.for('can.addParent');
    var ObservationRecorder = {
        stack: stack,
        start: function () {
            var deps = {
                keyDependencies: new Map(),
                valueDependencies: new Set(),
                childDependencies: new Set(),
                traps: null,
                ignore: 0
            };
            stack.push(deps);
            return deps;
        },
        stop: function () {
            return stack.pop();
        },
        add: function (obj, event) {
            var top = stack[stack.length - 1];
            if (top && top.ignore === 0) {
                if (top.traps) {
                    top.traps.push([
                        obj,
                        event
                    ]);
                } else {
                    if (event === undefined) {
                        top.valueDependencies.add(obj);
                    } else {
                        var eventSet = top.keyDependencies.get(obj);
                        if (!eventSet) {
                            eventSet = new Set();
                            top.keyDependencies.set(obj, eventSet);
                        }
                        eventSet.add(event);
                    }
                }
            }
        },
        addMany: function (observes) {
            var top = stack[stack.length - 1];
            if (top) {
                if (top.traps) {
                    top.traps.push.apply(top.traps, observes);
                } else {
                    for (var i = 0, len = observes.length; i < len; i++) {
                        this.add(observes[i][0], observes[i][1]);
                    }
                }
            }
        },
        created: function (obs) {
            var top = stack[stack.length - 1];
            if (top) {
                top.childDependencies.add(obs);
                if (obs[addParentSymbol]) {
                    obs[addParentSymbol](top);
                }
            }
        },
        ignore: function (fn) {
            return function () {
                if (stack.length) {
                    var top = stack[stack.length - 1];
                    top.ignore++;
                    var res = fn.apply(this, arguments);
                    top.ignore--;
                    return res;
                } else {
                    return fn.apply(this, arguments);
                }
            };
        },
        isRecording: function () {
            var len = stack.length;
            var last = len && stack[len - 1];
            return last && last.ignore === 0 && last;
        },
        makeDependenciesRecord: function () {
            return {
                traps: null,
                keyDependencies: new Map(),
                valueDependencies: new Set(),
                ignore: 0
            };
        },
        makeDependenciesRecorder: function () {
            return ObservationRecorder.makeDependenciesRecord();
        },
        trap: function () {
            if (stack.length) {
                var top = stack[stack.length - 1];
                var oldTraps = top.traps;
                var traps = top.traps = [];
                return function () {
                    top.traps = oldTraps;
                    return traps;
                };
            } else {
                return function () {
                    return [];
                };
            }
        },
        trapsCount: function () {
            if (stack.length) {
                var top = stack[stack.length - 1];
                return top.traps.length;
            } else {
                return 0;
            }
        }
    };
    if (namespace.ObservationRecorder) {
        throw new Error('You can\'t have two versions of can-observation-recorder, check your dependencies');
    } else {
        module.exports = namespace.ObservationRecorder = ObservationRecorder;
    }
});
/*can-key-tree@1.2.0#can-key-tree*/
define('can-key-tree@1.2.0#can-key-tree', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var reflect = require('can-reflect');
    function isBuiltInPrototype(obj) {
        if (obj === Object.prototype) {
            return true;
        }
        var protoString = Object.prototype.toString.call(obj);
        var isNotObjObj = protoString !== '[object Object]';
        var isObjSomething = protoString.indexOf('[object ') !== -1;
        return isNotObjObj && isObjSomething;
    }
    function getDeepSize(root, level) {
        if (level === 0) {
            return reflect.size(root);
        } else if (reflect.size(root) === 0) {
            return 0;
        } else {
            var count = 0;
            reflect.each(root, function (value) {
                count += getDeepSize(value, level - 1);
            });
            return count;
        }
    }
    function getDeep(node, items, depth, maxDepth) {
        if (!node) {
            return;
        }
        if (maxDepth === depth) {
            if (reflect.isMoreListLikeThanMapLike(node)) {
                reflect.addValues(items, reflect.toArray(node));
            } else {
                throw new Error('can-key-tree: Map-type leaf containers are not supported yet.');
            }
        } else {
            reflect.each(node, function (value) {
                getDeep(value, items, depth + 1, maxDepth);
            });
        }
    }
    function clearDeep(node, keys, maxDepth, deleteHandler) {
        if (maxDepth === keys.length) {
            if (reflect.isMoreListLikeThanMapLike(node)) {
                var valuesToRemove = reflect.toArray(node);
                if (deleteHandler) {
                    valuesToRemove.forEach(function (value) {
                        deleteHandler.apply(null, keys.concat(value));
                    });
                }
                reflect.removeValues(node, valuesToRemove);
            } else {
                throw new Error('can-key-tree: Map-type leaf containers are not supported yet.');
            }
        } else {
            reflect.each(node, function (value, key) {
                clearDeep(value, keys.concat(key), maxDepth, deleteHandler);
                reflect.deleteKeyValue(node, key);
            });
        }
    }
    var KeyTree = function (treeStructure, callbacks) {
        var FirstConstructor = treeStructure[0];
        if (reflect.isConstructorLike(FirstConstructor)) {
            this.root = new FirstConstructor();
        } else {
            this.root = FirstConstructor;
        }
        this.callbacks = callbacks || {};
        this.treeStructure = treeStructure;
        this.empty = true;
    };
    reflect.assign(KeyTree.prototype, {
        add: function (keys) {
            if (keys.length > this.treeStructure.length) {
                throw new Error('can-key-tree: Can not add path deeper than tree.');
            }
            var place = this.root;
            var rootWasEmpty = this.empty === true;
            for (var i = 0; i < keys.length - 1; i++) {
                var key = keys[i];
                var childNode = reflect.getKeyValue(place, key);
                if (!childNode) {
                    var Constructor = this.treeStructure[i + 1];
                    if (isBuiltInPrototype(Constructor.prototype)) {
                        childNode = new Constructor();
                    } else {
                        childNode = new Constructor(key);
                    }
                    reflect.setKeyValue(place, key, childNode);
                }
                place = childNode;
            }
            if (reflect.isMoreListLikeThanMapLike(place)) {
                reflect.addValues(place, [keys[keys.length - 1]]);
            } else {
                throw new Error('can-key-tree: Map types are not supported yet.');
            }
            if (rootWasEmpty) {
                this.empty = false;
                if (this.callbacks.onFirst) {
                    this.callbacks.onFirst.call(this);
                }
            }
            return this;
        },
        getNode: function (keys) {
            var node = this.root;
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                node = reflect.getKeyValue(node, key);
                if (!node) {
                    return;
                }
            }
            return node;
        },
        get: function (keys) {
            var node = this.getNode(keys);
            if (this.treeStructure.length === keys.length) {
                return node;
            } else {
                var Type = this.treeStructure[this.treeStructure.length - 1];
                var items = new Type();
                getDeep(node, items, keys.length, this.treeStructure.length - 1);
                return items;
            }
        },
        delete: function (keys, deleteHandler) {
            var parentNode = this.root, path = [this.root], lastKey = keys[keys.length - 1];
            for (var i = 0; i < keys.length - 1; i++) {
                var key = keys[i];
                var childNode = reflect.getKeyValue(parentNode, key);
                if (childNode === undefined) {
                    return false;
                } else {
                    path.push(childNode);
                }
                parentNode = childNode;
            }
            if (!keys.length) {
                clearDeep(parentNode, [], this.treeStructure.length - 1, deleteHandler);
            } else if (keys.length === this.treeStructure.length) {
                if (reflect.isMoreListLikeThanMapLike(parentNode)) {
                    if (deleteHandler) {
                        deleteHandler.apply(null, keys.concat(lastKey));
                    }
                    reflect.removeValues(parentNode, [lastKey]);
                } else {
                    throw new Error('can-key-tree: Map types are not supported yet.');
                }
            } else {
                var nodeToRemove = reflect.getKeyValue(parentNode, lastKey);
                if (nodeToRemove !== undefined) {
                    clearDeep(nodeToRemove, keys, this.treeStructure.length - 1, deleteHandler);
                    reflect.deleteKeyValue(parentNode, lastKey);
                } else {
                    return false;
                }
            }
            for (i = path.length - 2; i >= 0; i--) {
                if (reflect.size(parentNode) === 0) {
                    parentNode = path[i];
                    reflect.deleteKeyValue(parentNode, keys[i]);
                } else {
                    break;
                }
            }
            if (reflect.size(this.root) === 0) {
                this.empty = true;
                if (this.callbacks.onEmpty) {
                    this.callbacks.onEmpty.call(this);
                }
            }
            return true;
        },
        size: function () {
            return getDeepSize(this.root, this.treeStructure.length - 1);
        },
        isEmpty: function () {
            return this.empty;
        }
    });
    module.exports = KeyTree;
});
/*can-define-lazy-value@1.1.0#define-lazy-value*/
define('can-define-lazy-value@1.1.0#define-lazy-value', function (require, exports, module) {
    'use strict';
    module.exports = function defineLazyValue(obj, prop, initializer, writable) {
        Object.defineProperty(obj, prop, {
            configurable: true,
            get: function () {
                Object.defineProperty(this, prop, {
                    value: undefined,
                    writable: true
                });
                var value = initializer.call(this, obj, prop);
                Object.defineProperty(this, prop, {
                    value: value,
                    writable: !!writable
                });
                return value;
            },
            set: function (value) {
                Object.defineProperty(this, prop, {
                    value: value,
                    writable: !!writable
                });
                return value;
            }
        });
    };
});
/*can-event-queue@1.1.0#dependency-record/merge*/
define('can-event-queue@1.1.0#dependency-record/merge', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var mergeValueDependencies = function mergeValueDependencies(obj, source) {
        var sourceValueDeps = source.valueDependencies;
        if (sourceValueDeps) {
            var destValueDeps = obj.valueDependencies;
            if (!destValueDeps) {
                destValueDeps = new Set();
                obj.valueDependencies = destValueDeps;
            }
            canReflect.eachIndex(sourceValueDeps, function (dep) {
                destValueDeps.add(dep);
            });
        }
    };
    var mergeKeyDependencies = function mergeKeyDependencies(obj, source) {
        var sourcekeyDeps = source.keyDependencies;
        if (sourcekeyDeps) {
            var destKeyDeps = obj.keyDependencies;
            if (!destKeyDeps) {
                destKeyDeps = new Map();
                obj.keyDependencies = destKeyDeps;
            }
            canReflect.eachKey(sourcekeyDeps, function (keys, obj) {
                var entry = destKeyDeps.get(obj);
                if (!entry) {
                    entry = new Set();
                    destKeyDeps.set(obj, entry);
                }
                canReflect.eachIndex(keys, function (key) {
                    entry.add(key);
                });
            });
        }
    };
    module.exports = function mergeDependencyRecords(object, source) {
        mergeKeyDependencies(object, source);
        mergeValueDependencies(object, source);
        return object;
    };
});
/*can-event-queue@1.1.0#value/value*/
define('can-event-queue@1.1.0#value/value', [
    'require',
    'exports',
    'module',
    'can-queues',
    'can-key-tree',
    'can-reflect',
    'can-define-lazy-value',
    '../dependency-record/merge'
], function (require, exports, module) {
    'use strict';
    var queues = require('can-queues');
    var KeyTree = require('can-key-tree');
    var canReflect = require('can-reflect');
    var defineLazyValue = require('can-define-lazy-value');
    var mergeDependencyRecords = require('../dependency-record/merge');
    var properties = {
        on: function (handler, queue) {
            this.handlers.add([
                queue || 'mutate',
                handler
            ]);
        },
        off: function (handler, queueName) {
            if (handler === undefined) {
                if (queueName === undefined) {
                    this.handlers.delete([]);
                } else {
                    this.handlers.delete([queueName]);
                }
            } else {
                this.handlers.delete([
                    queueName || 'mutate',
                    handler
                ]);
            }
        }
    };
    var symbols = {
        'can.onValue': properties.on,
        'can.offValue': properties.off,
        'can.dispatch': function (value, old) {
            var queuesArgs = [];
            queuesArgs = [
                this.handlers.getNode([]),
                this,
                [
                    value,
                    old
                ]
            ];
            queues.enqueueByQueue.apply(queues, queuesArgs);
        },
        'can.getWhatIChange': function getWhatIChange() {
        },
        'can.isBound': function isBound() {
            return !this.handlers.isEmpty();
        }
    };
    function defineLazyHandlers() {
        return new KeyTree([
            Object,
            Array
        ], {
            onFirst: this.onBound !== undefined && this.onBound.bind(this),
            onEmpty: this.onUnbound !== undefined && this.onUnbound.bind(this)
        });
    }
    var mixinValueEventBindings = function (obj) {
        canReflect.assign(obj, properties);
        canReflect.assignSymbols(obj, symbols);
        defineLazyValue(obj, 'handlers', defineLazyHandlers, true);
        return obj;
    };
    mixinValueEventBindings.addHandlers = function (obj, callbacks) {
        console.warn('can-event-queue/value: Avoid using addHandlers. Add onBound and onUnbound methods instead.');
        obj.handlers = new KeyTree([
            Object,
            Array
        ], callbacks);
        return obj;
    };
    module.exports = mixinValueEventBindings;
});
/*can-observation@4.1.0#recorder-dependency-helpers*/
define('can-observation@4.1.0#recorder-dependency-helpers', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    function addNewKeyDependenciesIfNotInOld(event) {
        if (this.oldEventSet === undefined || this.oldEventSet['delete'](event) === false) {
            canReflect.onKeyValue(this.observable, event, this.onDependencyChange, 'notify');
        }
    }
    function addObservablesNewKeyDependenciesIfNotInOld(eventSet, observable) {
        eventSet.forEach(addNewKeyDependenciesIfNotInOld, {
            onDependencyChange: this.onDependencyChange,
            observable: observable,
            oldEventSet: this.oldDependencies.keyDependencies.get(observable)
        });
    }
    function removeKeyDependencies(event) {
        canReflect.offKeyValue(this.observable, event, this.onDependencyChange, 'notify');
    }
    function removeObservablesKeyDependencies(oldEventSet, observable) {
        oldEventSet.forEach(removeKeyDependencies, {
            onDependencyChange: this.onDependencyChange,
            observable: observable
        });
    }
    function addValueDependencies(observable) {
        if (this.oldDependencies.valueDependencies.delete(observable) === false) {
            canReflect.onValue(observable, this.onDependencyChange, 'notify');
        }
    }
    function removeValueDependencies(observable) {
        canReflect.offValue(observable, this.onDependencyChange, 'notify');
    }
    module.exports = {
        updateObservations: function (observationData) {
            observationData.newDependencies.keyDependencies.forEach(addObservablesNewKeyDependenciesIfNotInOld, observationData);
            observationData.oldDependencies.keyDependencies.forEach(removeObservablesKeyDependencies, observationData);
            observationData.newDependencies.valueDependencies.forEach(addValueDependencies, observationData);
            observationData.oldDependencies.valueDependencies.forEach(removeValueDependencies, observationData);
        },
        stopObserving: function (observationReciever, onDependencyChange) {
            observationReciever.keyDependencies.forEach(removeObservablesKeyDependencies, { onDependencyChange: onDependencyChange });
            observationReciever.valueDependencies.forEach(removeValueDependencies, { onDependencyChange: onDependencyChange });
        }
    };
});
/*can-observation@4.1.0#temporarily-bind*/
define('can-observation@4.1.0#temporarily-bind', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var temporarilyBoundNoOperation = function () {
    };
    var observables;
    var unbindTemporarilyBoundValue = function () {
        for (var i = 0, len = observables.length; i < len; i++) {
            canReflect.offValue(observables[i], temporarilyBoundNoOperation);
        }
        observables = null;
    };
    function temporarilyBind(compute) {
        var computeInstance = compute.computeInstance || compute;
        canReflect.onValue(computeInstance, temporarilyBoundNoOperation);
        if (!observables) {
            observables = [];
            setTimeout(unbindTemporarilyBoundValue, 10);
        }
        observables.push(computeInstance);
    }
    module.exports = temporarilyBind;
});
/*can-observation@4.1.0#can-observation*/
define('can-observation@4.1.0#can-observation', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-reflect',
    'can-queues',
    'can-observation-recorder',
    'can-symbol',
    'can-log/dev/dev',
    'can-event-queue/value/value',
    './recorder-dependency-helpers',
    './temporarily-bind'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var namespace = require('can-namespace');
        var canReflect = require('can-reflect');
        var queues = require('can-queues');
        var ObservationRecorder = require('can-observation-recorder');
        var canSymbol = require('can-symbol');
        var dev = require('can-log/dev/dev');
        var valueEventBindings = require('can-event-queue/value/value');
        var recorderHelpers = require('./recorder-dependency-helpers');
        var temporarilyBind = require('./temporarily-bind');
        var dispatchSymbol = canSymbol.for('can.dispatch');
        var getChangesSymbol = canSymbol.for('can.getChangesDependencyRecord');
        var getValueDependenciesSymbol = canSymbol.for('can.getValueDependencies');
        function Observation(func, context, options) {
            this.func = func;
            this.context = context;
            this.options = options || {
                priority: 0,
                isObservable: true
            };
            this.bound = false;
            this._value = undefined;
            this.newDependencies = ObservationRecorder.makeDependenciesRecord();
            this.oldDependencies = null;
            var self = this;
            this.onDependencyChange = function (newVal) {
                self.dependencyChange(this, newVal);
            };
            this.update = this.update.bind(this);
        }
        valueEventBindings(Observation.prototype);
        canReflect.assign(Observation.prototype, {
            onBound: function () {
                this.bound = true;
                this.oldDependencies = this.newDependencies;
                ObservationRecorder.start();
                this._value = this.func.call(this.context);
                this.newDependencies = ObservationRecorder.stop();
                recorderHelpers.updateObservations(this);
            },
            dependencyChange: function (context, args) {
                if (this.bound === true) {
                    var queuesArgs = [];
                    queuesArgs = [
                        this.update,
                        this,
                        [],
                        { priority: this.options.priority }
                    ];
                    queues.deriveQueue.enqueue.apply(queues.deriveQueue, queuesArgs);
                }
            },
            update: function () {
                if (this.bound === true) {
                    var oldValue = this._value;
                    this.oldValue = null;
                    this.onBound();
                    if (oldValue !== this._value) {
                        this[dispatchSymbol](this._value, oldValue);
                    }
                }
            },
            onUnbound: function () {
                this.bound = false;
                recorderHelpers.stopObserving(this.newDependencies, this.onDependencyChange);
                this.newDependencies = ObservationRecorder.makeDependenciesRecorder();
            },
            get: function () {
                if (this.options.isObservable && ObservationRecorder.isRecording()) {
                    ObservationRecorder.add(this);
                    if (!this.bound) {
                        Observation.temporarilyBind(this);
                    }
                }
                if (this.bound === true) {
                    if (queues.deriveQueue.tasksRemainingCount() > 0) {
                        Observation.updateChildrenAndSelf(this);
                    }
                    return this._value;
                } else {
                    return this.func.call(this.context);
                }
            },
            hasDependencies: function () {
                var newDependencies = this.newDependencies;
                return this.bound ? newDependencies.valueDependencies.size + newDependencies.keyDependencies.size > 0 : undefined;
            },
            log: function () {
            }
        });
        Object.defineProperty(Observation.prototype, 'value', {
            get: function () {
                return this.get();
            }
        });
        var observationProto = {
            'can.getValue': Observation.prototype.get,
            'can.isValueLike': true,
            'can.isMapLike': false,
            'can.isListLike': false,
            'can.valueHasDependencies': Observation.prototype.hasDependencies,
            'can.getValueDependencies': function () {
                if (this.bound === true) {
                    var deps = this.newDependencies, result = {};
                    if (deps.keyDependencies.size) {
                        result.keyDependencies = deps.keyDependencies;
                    }
                    if (deps.valueDependencies.size) {
                        result.valueDependencies = deps.valueDependencies;
                    }
                    return result;
                }
                return undefined;
            },
            'can.getPriority': function () {
                return this.options.priority;
            },
            'can.setPriority': function (priority) {
                this.options.priority = priority;
            }
        };
        canReflect.assignSymbols(Observation.prototype, observationProto);
        Observation.updateChildrenAndSelf = function (observation) {
            if (observation.update !== undefined && queues.deriveQueue.isEnqueued(observation.update) === true) {
                queues.deriveQueue.flushQueuedTask(observation.update);
                return true;
            }
            if (observation[getValueDependenciesSymbol]) {
                var childHasChanged = false;
                var valueDependencies = observation[getValueDependenciesSymbol]().valueDependencies || [];
                valueDependencies.forEach(function (observable) {
                    if (Observation.updateChildrenAndSelf(observable) === true) {
                        childHasChanged = true;
                    }
                });
                return childHasChanged;
            } else {
                return false;
            }
        };
        var alias = { addAll: 'addMany' };
        [
            'add',
            'addAll',
            'ignore',
            'trap',
            'trapsCount',
            'isRecording'
        ].forEach(function (methodName) {
            Observation[methodName] = function () {
                var name = alias[methodName] ? alias[methodName] : methodName;
                console.warn('can-observation: Call ' + name + '() on can-observation-recorder.');
                return ObservationRecorder[name].apply(this, arguments);
            };
        });
        Observation.prototype.start = function () {
            console.warn('can-observation: Use .on and .off to bind.');
            return this.onBound();
        };
        Observation.prototype.stop = function () {
            console.warn('can-observation: Use .on and .off to bind.');
            return this.onUnbound();
        };
        Observation.temporarilyBind = temporarilyBind;
        module.exports = namespace.Observation = Observation;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-simple-observable@2.4.1#log*/
define('can-simple-observable@2.4.1#log', [
    'require',
    'exports',
    'module',
    'can-log/dev/dev',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var dev = require('can-log/dev/dev');
    var canReflect = require('can-reflect');
    function quoteString(x) {
        return typeof x === 'string' ? JSON.stringify(x) : x;
    }
    module.exports = function log() {
    };
});
/*can-simple-observable@2.4.1#can-simple-observable*/
define('can-simple-observable@2.4.1#can-simple-observable', [
    'require',
    'exports',
    'module',
    './log',
    'can-namespace',
    'can-symbol',
    'can-reflect',
    'can-observation-recorder',
    'can-event-queue/value/value'
], function (require, exports, module) {
    'use strict';
    var log = require('./log');
    var ns = require('can-namespace');
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    var ObservationRecorder = require('can-observation-recorder');
    var valueEventBindings = require('can-event-queue/value/value');
    var dispatchSymbol = canSymbol.for('can.dispatch');
    function SimpleObservable(initialValue) {
        this._value = initialValue;
    }
    valueEventBindings(SimpleObservable.prototype);
    canReflect.assignMap(SimpleObservable.prototype, {
        log: log,
        get: function () {
            ObservationRecorder.add(this);
            return this._value;
        },
        set: function (value) {
            var old = this._value;
            this._value = value;
            this[dispatchSymbol](value, old);
        }
    });
    Object.defineProperty(SimpleObservable.prototype, 'value', {
        set: function (value) {
            return this.set(value);
        },
        get: function () {
            return this.get();
        }
    });
    var simpleObservableProto = {
        'can.getValue': SimpleObservable.prototype.get,
        'can.setValue': SimpleObservable.prototype.set,
        'can.isMapLike': false,
        'can.valueHasDependencies': function () {
            return true;
        }
    };
    canReflect.assignSymbols(SimpleObservable.prototype, simpleObservableProto);
    module.exports = ns.SimpleObservable = SimpleObservable;
});
/*can-simple-observable@2.4.1#settable/settable*/
define('can-simple-observable@2.4.1#settable/settable', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-observation-recorder',
    '../can-simple-observable',
    'can-observation',
    'can-queues',
    '../log',
    'can-event-queue/value/value'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var ObservationRecorder = require('can-observation-recorder');
    var SimpleObservable = require('../can-simple-observable');
    var Observation = require('can-observation');
    var queues = require('can-queues');
    var log = require('../log');
    var valueEventBindings = require('can-event-queue/value/value');
    var peek = ObservationRecorder.ignore(canReflect.getValue.bind(canReflect));
    function SettableObservable(fn, context, initialValue) {
        this.lastSetValue = new SimpleObservable(initialValue);
        function observe() {
            return fn.call(context, this.lastSetValue.get());
        }
        this.handler = this.handler.bind(this);
        this.observation = new Observation(observe, this);
    }
    valueEventBindings(SettableObservable.prototype);
    canReflect.assignMap(SettableObservable.prototype, {
        log: log,
        constructor: SettableObservable,
        handler: function (newVal) {
            var old = this._value, reasonLog;
            this._value = newVal;
            queues.enqueueByQueue(this.handlers.getNode([]), this, [
                newVal,
                old
            ], null, reasonLog);
        },
        onBound: function () {
            if (!this.bound) {
                this.bound = true;
                this.activate();
            }
        },
        activate: function () {
            canReflect.onValue(this.observation, this.handler, 'notify');
            this._value = peek(this.observation);
        },
        onUnbound: function () {
            this.bound = false;
            canReflect.offValue(this.observation, this.handler, 'notify');
        },
        set: function (newVal) {
            var oldVal = this.lastSetValue.get();
            if (canReflect.isObservableLike(oldVal) && canReflect.isValueLike(oldVal) && !canReflect.isObservableLike(newVal)) {
                canReflect.setValue(oldVal, newVal);
            } else {
                if (newVal !== oldVal) {
                    this.lastSetValue.set(newVal);
                }
            }
        },
        get: function () {
            if (ObservationRecorder.isRecording()) {
                ObservationRecorder.add(this);
                if (!this.bound) {
                    this.onBound();
                }
            }
            if (this.bound === true) {
                return this._value;
            } else {
                return this.observation.get();
            }
        },
        hasDependencies: function () {
            return canReflect.valueHasDependencies(this.observation);
        },
        getValueDependencies: function () {
            return canReflect.getValueDependencies(this.observation);
        }
    });
    Object.defineProperty(SettableObservable.prototype, 'value', {
        set: function (value) {
            return this.set(value);
        },
        get: function () {
            return this.get();
        }
    });
    canReflect.assignSymbols(SettableObservable.prototype, {
        'can.getValue': SettableObservable.prototype.get,
        'can.setValue': SettableObservable.prototype.set,
        'can.isMapLike': false,
        'can.getPriority': function () {
            return canReflect.getPriority(this.observation);
        },
        'can.setPriority': function (newPriority) {
            canReflect.setPriority(this.observation, newPriority);
        },
        'can.valueHasDependencies': SettableObservable.prototype.hasDependencies,
        'can.getValueDependencies': SettableObservable.prototype.getValueDependencies
    });
    module.exports = SettableObservable;
});
/*can-simple-observable@2.4.1#async/async*/
define('can-simple-observable@2.4.1#async/async', [
    'require',
    'exports',
    'module',
    '../can-simple-observable',
    'can-observation',
    'can-queues',
    '../settable/settable',
    'can-reflect',
    'can-observation-recorder',
    'can-event-queue/value/value'
], function (require, exports, module) {
    'use strict';
    var SimpleObservable = require('../can-simple-observable');
    var Observation = require('can-observation');
    var queues = require('can-queues');
    var SettableObservable = require('../settable/settable');
    var canReflect = require('can-reflect');
    var ObservationRecorder = require('can-observation-recorder');
    var valueEventBindings = require('can-event-queue/value/value');
    function AsyncObservable(fn, context, initialValue) {
        this.resolve = this.resolve.bind(this);
        this.lastSetValue = new SimpleObservable(initialValue);
        this.handler = this.handler.bind(this);
        function observe() {
            this.resolveCalled = false;
            this.inGetter = true;
            var newVal = fn.call(context, this.lastSetValue.get(), this.bound === true ? this.resolve : undefined);
            this.inGetter = false;
            if (newVal !== undefined) {
                this.resolve(newVal);
            } else if (this.resolveCalled) {
                this.resolve(this._value);
            }
            if (this.bound !== true) {
                return newVal;
            }
        }
        this.observation = new Observation(observe, this);
    }
    AsyncObservable.prototype = Object.create(SettableObservable.prototype);
    AsyncObservable.prototype.constructor = AsyncObservable;
    AsyncObservable.prototype.handler = function (newVal) {
        if (newVal !== undefined) {
            SettableObservable.prototype.handler.apply(this, arguments);
        }
    };
    var peek = ObservationRecorder.ignore(canReflect.getValue.bind(canReflect));
    AsyncObservable.prototype.activate = function () {
        canReflect.onValue(this.observation, this.handler, 'notify');
        if (!this.resolveCalled) {
            this._value = peek(this.observation);
        }
    };
    AsyncObservable.prototype.resolve = function resolve(newVal) {
        this.resolveCalled = true;
        var old = this._value;
        this._value = newVal;
        if (!this.inGetter) {
            var queuesArgs = [
                this.handlers.getNode([]),
                this,
                [
                    newVal,
                    old
                ],
                null
            ];
            queues.enqueueByQueue.apply(queues, queuesArgs);
        }
    };
    module.exports = AsyncObservable;
});
/*can-globals@1.2.0#can-globals-proto*/
define('can-globals@1.2.0#can-globals-proto', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var canReflect = require('can-reflect');
        function dispatch(key) {
            var handlers = this.eventHandlers[key];
            if (handlers) {
                var handlersCopy = handlers.slice();
                var value = this.getKeyValue(key);
                for (var i = 0; i < handlersCopy.length; i++) {
                    handlersCopy[i](value);
                }
            }
        }
        function Globals() {
            this.eventHandlers = {};
            this.properties = {};
        }
        Globals.prototype.define = function (key, value, enableCache) {
            if (enableCache === undefined) {
                enableCache = true;
            }
            if (!this.properties[key]) {
                this.properties[key] = {
                    default: value,
                    value: value,
                    enableCache: enableCache
                };
            }
            return this;
        };
        Globals.prototype.getKeyValue = function (key) {
            var property = this.properties[key];
            if (property) {
                if (typeof property.value === 'function') {
                    if (property.cachedValue) {
                        return property.cachedValue;
                    }
                    if (property.enableCache) {
                        property.cachedValue = property.value();
                        return property.cachedValue;
                    } else {
                        return property.value();
                    }
                }
                return property.value;
            }
        };
        Globals.prototype.makeExport = function (key) {
            return function (value) {
                if (arguments.length === 0) {
                    return this.getKeyValue(key);
                }
                if (typeof value === 'undefined' || value === null) {
                    this.deleteKeyValue(key);
                } else {
                    if (typeof value === 'function') {
                        this.setKeyValue(key, function () {
                            return value;
                        });
                    } else {
                        this.setKeyValue(key, value);
                    }
                    return value;
                }
            }.bind(this);
        };
        Globals.prototype.offKeyValue = function (key, handler) {
            if (this.properties[key]) {
                var handlers = this.eventHandlers[key];
                if (handlers) {
                    var i = handlers.indexOf(handler);
                    handlers.splice(i, 1);
                }
            }
            return this;
        };
        Globals.prototype.onKeyValue = function (key, handler) {
            if (this.properties[key]) {
                if (!this.eventHandlers[key]) {
                    this.eventHandlers[key] = [];
                }
                this.eventHandlers[key].push(handler);
            }
            return this;
        };
        Globals.prototype.deleteKeyValue = function (key) {
            var property = this.properties[key];
            if (property !== undefined) {
                property.value = property.default;
                property.cachedValue = undefined;
                dispatch.call(this, key);
            }
            return this;
        };
        Globals.prototype.setKeyValue = function (key, value) {
            if (!this.properties[key]) {
                return this.define(key, value);
            }
            var property = this.properties[key];
            property.value = value;
            property.cachedValue = undefined;
            dispatch.call(this, key);
            return this;
        };
        Globals.prototype.reset = function () {
            for (var key in this.properties) {
                if (this.properties.hasOwnProperty(key)) {
                    this.properties[key].value = this.properties[key].default;
                    this.properties[key].cachedValue = undefined;
                    dispatch.call(this, key);
                }
            }
            return this;
        };
        canReflect.assignSymbols(Globals.prototype, {
            'can.getKeyValue': Globals.prototype.getKeyValue,
            'can.setKeyValue': Globals.prototype.setKeyValue,
            'can.deleteKeyValue': Globals.prototype.deleteKeyValue,
            'can.onKeyValue': Globals.prototype.onKeyValue,
            'can.offKeyValue': Globals.prototype.offKeyValue
        });
        module.exports = Globals;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.0#can-globals-instance*/
define('can-globals@1.2.0#can-globals-instance', [
    'require',
    'exports',
    'module',
    'can-namespace',
    './can-globals-proto'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var namespace = require('can-namespace');
        var Globals = require('./can-globals-proto');
        var globals = new Globals();
        if (namespace.globals) {
            throw new Error('You can\'t have two versions of can-globals, check your dependencies');
        } else {
            module.exports = namespace.globals = globals;
        }
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.0#global/global*/
define('can-globals@1.2.0#global/global', [
    'require',
    'exports',
    'module',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('can-globals/can-globals-instance');
        globals.define('global', function () {
            return typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope ? self : typeof process === 'object' && {}.toString.call(process) === '[object process]' ? global : window;
        });
        module.exports = globals.makeExport('global');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.0#document/document*/
define('can-globals@1.2.0#document/document', [
    'require',
    'exports',
    'module',
    'can-globals/global/global',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        require('can-globals/global/global');
        var globals = require('can-globals/can-globals-instance');
        globals.define('document', function () {
            return globals.getKeyValue('global').document;
        });
        module.exports = globals.makeExport('document');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.0#is-node/is-node*/
define('can-globals@1.2.0#is-node/is-node', [
    'require',
    'exports',
    'module',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('can-globals/can-globals-instance');
        globals.define('isNode', function () {
            return typeof process === 'object' && {}.toString.call(process) === '[object process]';
        });
        module.exports = globals.makeExport('isNode');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.0#is-browser-window/is-browser-window*/
define('can-globals@1.2.0#is-browser-window/is-browser-window', [
    'require',
    'exports',
    'module',
    'can-globals/can-globals-instance',
    '../is-node/is-node'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('can-globals/can-globals-instance');
        require('../is-node/is-node');
        globals.define('isBrowserWindow', function () {
            var isNode = globals.getKeyValue('isNode');
            return typeof window !== 'undefined' && typeof document !== 'undefined' && isNode === false;
        });
        module.exports = globals.makeExport('isBrowserWindow');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-dom-events@1.3.0#helpers/util*/
define('can-dom-events@1.3.0#helpers/util', [
    'require',
    'exports',
    'module',
    'can-globals/document/document',
    'can-globals/is-browser-window/is-browser-window'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getCurrentDocument = require('can-globals/document/document');
        var isBrowserWindow = require('can-globals/is-browser-window/is-browser-window');
        function getTargetDocument(target) {
            return target.ownerDocument || getCurrentDocument();
        }
        function createEvent(target, eventData, bubbles, cancelable) {
            var doc = getTargetDocument(target);
            var event = doc.createEvent('HTMLEvents');
            var eventType;
            if (typeof eventData === 'string') {
                eventType = eventData;
            } else {
                eventType = eventData.type;
                for (var prop in eventData) {
                    if (event[prop] === undefined) {
                        event[prop] = eventData[prop];
                    }
                }
            }
            if (bubbles === undefined) {
                bubbles = true;
            }
            event.initEvent(eventType, bubbles, cancelable);
            return event;
        }
        function isDomEventTarget(obj) {
            if (!(obj && obj.nodeName)) {
                return obj === window;
            }
            var nodeType = obj.nodeType;
            return nodeType === 1 || nodeType === 9 || nodeType === 11;
        }
        function addDomContext(context, args) {
            if (isDomEventTarget(context)) {
                args = Array.prototype.slice.call(args, 0);
                args.unshift(context);
            }
            return args;
        }
        function removeDomContext(context, args) {
            if (!isDomEventTarget(context)) {
                args = Array.prototype.slice.call(args, 0);
                context = args.shift();
            }
            return {
                context: context,
                args: args
            };
        }
        var fixSyntheticEventsOnDisabled = false;
        (function () {
            if (!isBrowserWindow()) {
                return;
            }
            var testEventName = 'fix_synthetic_events_on_disabled_test';
            var input = document.createElement('input');
            input.disabled = true;
            var timer = setTimeout(function () {
                fixSyntheticEventsOnDisabled = true;
            }, 50);
            var onTest = function onTest() {
                clearTimeout(timer);
                input.removeEventListener(testEventName, onTest);
            };
            input.addEventListener(testEventName, onTest);
            try {
                var event = document.create('HTMLEvents');
                event.initEvent(testEventName, false);
                input.dispatchEvent(event);
            } catch (e) {
                onTest();
                fixSyntheticEventsOnDisabled = true;
            }
        }());
        function isDispatchingOnDisabled(element, event) {
            var eventType = event.type;
            var isInsertedOrRemoved = eventType === 'inserted' || eventType === 'removed';
            var isDisabled = !!element.disabled;
            return isInsertedOrRemoved && isDisabled;
        }
        function forceEnabledForDispatch(element, event) {
            return fixSyntheticEventsOnDisabled && isDispatchingOnDisabled(element, event);
        }
        module.exports = {
            createEvent: createEvent,
            addDomContext: addDomContext,
            removeDomContext: removeDomContext,
            isDomEventTarget: isDomEventTarget,
            getTargetDocument: getTargetDocument,
            forceEnabledForDispatch: forceEnabledForDispatch
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-dom-events@1.3.0#helpers/make-event-registry*/
define('can-dom-events@1.3.0#helpers/make-event-registry', function (require, exports, module) {
    'use strict';
    function EventRegistry() {
        this._registry = {};
    }
    module.exports = function makeEventRegistry() {
        return new EventRegistry();
    };
    EventRegistry.prototype.has = function (eventType) {
        return !!this._registry[eventType];
    };
    EventRegistry.prototype.get = function (eventType) {
        return this._registry[eventType];
    };
    EventRegistry.prototype.add = function (event, eventType) {
        if (!event) {
            throw new Error('An EventDefinition must be provided');
        }
        if (typeof event.addEventListener !== 'function') {
            throw new TypeError('EventDefinition addEventListener must be a function');
        }
        if (typeof event.removeEventListener !== 'function') {
            throw new TypeError('EventDefinition removeEventListener must be a function');
        }
        eventType = eventType || event.defaultEventType;
        if (typeof eventType !== 'string') {
            throw new TypeError('Event type must be a string, not ' + eventType);
        }
        if (this.has(eventType)) {
            throw new Error('Event "' + eventType + '" is already registered');
        }
        this._registry[eventType] = event;
        var self = this;
        return function remove() {
            self._registry[eventType] = undefined;
        };
    };
});
/*can-dom-events@1.3.0#helpers/-make-delegate-event-tree*/
define('can-dom-events@1.3.0#helpers/-make-delegate-event-tree', [
    'require',
    'exports',
    'module',
    'can-key-tree',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var KeyTree = require('can-key-tree');
    var canReflect = require('can-reflect');
    var useCapture = function (eventType) {
        return eventType === 'focus' || eventType === 'blur';
    };
    function makeDelegator(domEvents) {
        var Delegator = function Delegator(parentKey) {
            this.element = parentKey;
            this.events = {};
            this.delegated = {};
        };
        canReflect.assignSymbols(Delegator.prototype, {
            'can.setKeyValue': function (eventType, handlersBySelector) {
                var handler = this.delegated[eventType] = function (ev) {
                    canReflect.each(handlersBySelector, function (handlers, selector) {
                        var cur = ev.target;
                        do {
                            var el = cur === document ? document.documentElement : cur;
                            var matches = el.matches || el.msMatchesSelector;
                            if (matches.call(el, selector)) {
                                handlers.forEach(function (handler) {
                                    handler.call(el, ev);
                                });
                            }
                            cur = cur.parentNode;
                        } while (cur && cur !== ev.currentTarget);
                    });
                };
                this.events[eventType] = handlersBySelector;
                domEvents.addEventListener(this.element, eventType, handler, useCapture(eventType));
            },
            'can.getKeyValue': function (eventType) {
                return this.events[eventType];
            },
            'can.deleteKeyValue': function (eventType) {
                domEvents.removeEventListener(this.element, eventType, this.delegated[eventType], useCapture(eventType));
                delete this.delegated[eventType];
                delete this.events[eventType];
            },
            'can.getOwnEnumerableKeys': function () {
                return Object.keys(this.events);
            }
        });
        return Delegator;
    }
    module.exports = function makeDelegateEventTree(domEvents) {
        var Delegator = makeDelegator(domEvents);
        return new KeyTree([
            Map,
            Delegator,
            Object,
            Array
        ]);
    };
});
/*can-dom-events@1.3.0#can-dom-events*/
define('can-dom-events@1.3.0#can-dom-events', [
    'require',
    'exports',
    'module',
    'can-namespace',
    './helpers/util',
    './helpers/make-event-registry',
    './helpers/-make-delegate-event-tree'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var namespace = require('can-namespace');
        var util = require('./helpers/util');
        var makeEventRegistry = require('./helpers/make-event-registry');
        var makeDelegateEventTree = require('./helpers/-make-delegate-event-tree');
        var domEvents = {
            _eventRegistry: makeEventRegistry(),
            addEvent: function (event, eventType) {
                return this._eventRegistry.add(event, eventType);
            },
            addEventListener: function (target, eventType) {
                var hasCustomEvent = domEvents._eventRegistry.has(eventType);
                if (hasCustomEvent) {
                    var event = domEvents._eventRegistry.get(eventType);
                    return event.addEventListener.apply(domEvents, arguments);
                }
                var eventArgs = Array.prototype.slice.call(arguments, 1);
                return target.addEventListener.apply(target, eventArgs);
            },
            removeEventListener: function (target, eventType) {
                var hasCustomEvent = domEvents._eventRegistry.has(eventType);
                if (hasCustomEvent) {
                    var event = domEvents._eventRegistry.get(eventType);
                    return event.removeEventListener.apply(domEvents, arguments);
                }
                var eventArgs = Array.prototype.slice.call(arguments, 1);
                return target.removeEventListener.apply(target, eventArgs);
            },
            addDelegateListener: function (root, eventType, selector, handler) {
                domEvents._eventTree.add([
                    root,
                    eventType,
                    selector,
                    handler
                ]);
            },
            removeDelegateListener: function (target, eventType, selector, handler) {
                domEvents._eventTree.delete([
                    target,
                    eventType,
                    selector,
                    handler
                ]);
            },
            dispatch: function (target, eventData, bubbles, cancelable) {
                var event = util.createEvent(target, eventData, bubbles, cancelable);
                var enableForDispatch = util.forceEnabledForDispatch(target, event);
                if (enableForDispatch) {
                    target.disabled = false;
                }
                var ret = target.dispatchEvent(event);
                if (enableForDispatch) {
                    target.disabled = true;
                }
                return ret;
            }
        };
        domEvents._eventTree = makeDelegateEventTree(domEvents);
        module.exports = namespace.domEvents = domEvents;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-event-queue@1.1.0#map/map*/
define('can-event-queue@1.1.0#map/map', [
    'require',
    'exports',
    'module',
    'can-log/dev/dev',
    'can-queues',
    'can-reflect',
    'can-symbol',
    'can-key-tree',
    'can-dom-events',
    'can-dom-events/helpers/util',
    '../dependency-record/merge'
], function (require, exports, module) {
    'use strict';
    var canDev = require('can-log/dev/dev');
    var queues = require('can-queues');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var KeyTree = require('can-key-tree');
    var domEvents = require('can-dom-events');
    var isDomEventTarget = require('can-dom-events/helpers/util').isDomEventTarget;
    var mergeDependencyRecords = require('../dependency-record/merge');
    var metaSymbol = canSymbol.for('can.meta'), dispatchBoundChangeSymbol = canSymbol.for('can.dispatchInstanceBoundChange'), dispatchInstanceOnPatchesSymbol = canSymbol.for('can.dispatchInstanceOnPatches'), onKeyValueSymbol = canSymbol.for('can.onKeyValue'), offKeyValueSymbol = canSymbol.for('can.offKeyValue'), onEventSymbol = canSymbol.for('can.onEvent'), offEventSymbol = canSymbol.for('can.offEvent'), onValueSymbol = canSymbol.for('can.onValue'), offValueSymbol = canSymbol.for('can.offValue');
    var legacyMapBindings;
    function addHandlers(obj, meta) {
        if (!meta.handlers) {
            meta.handlers = new KeyTree([
                Object,
                Object,
                Object,
                Array
            ], {
                onFirst: function () {
                    if (obj._eventSetup !== undefined) {
                        obj._eventSetup();
                    }
                    if (obj.constructor[dispatchBoundChangeSymbol]) {
                        obj.constructor[dispatchBoundChangeSymbol](obj, true);
                    }
                },
                onEmpty: function () {
                    if (obj._eventTeardown !== undefined) {
                        obj._eventTeardown();
                    }
                    if (obj.constructor[dispatchBoundChangeSymbol]) {
                        obj.constructor[dispatchBoundChangeSymbol](obj, false);
                    }
                }
            });
        }
        if (!meta.listenHandlers) {
            meta.listenHandlers = new KeyTree([
                Map,
                Map,
                Object,
                Array
            ]);
        }
    }
    var ensureMeta = function ensureMeta(obj) {
        var meta = obj[metaSymbol];
        if (!meta) {
            meta = {};
            canReflect.setKeyValue(obj, metaSymbol, meta);
        }
        addHandlers(obj, meta);
        return meta;
    };
    function stopListeningArgumentsToKeys(bindTarget, event, handler, queueName) {
        if (arguments.length && canReflect.isPrimitive(bindTarget)) {
            queueName = handler;
            handler = event;
            event = bindTarget;
            bindTarget = this.context;
        }
        if (typeof event === 'function') {
            queueName = handler;
            handler = event;
            event = undefined;
        }
        if (typeof handler === 'string') {
            queueName = handler;
            handler = undefined;
        }
        var keys = [];
        if (bindTarget) {
            keys.push(bindTarget);
            if (event || handler || queueName) {
                keys.push(event);
                if (queueName || handler) {
                    keys.push(queueName || this.defaultQueue);
                    if (handler) {
                        keys.push(handler);
                    }
                }
            }
        }
        return keys;
    }
    var props = {
        dispatch: function (event, args) {
            if (!this.__inSetup) {
                if (typeof event === 'string') {
                    event = { type: event };
                }
                var meta = ensureMeta(this);
                var handlers = meta.handlers;
                var handlersByType = event.type !== undefined && handlers.getNode([event.type]);
                var dispatchConstructorPatches = event.patches && this.constructor[dispatchInstanceOnPatchesSymbol];
                var patchesNode = event.patches !== undefined && handlers.getNode([
                    'can.patches',
                    'onKeyValue'
                ]);
                var keysNode = event.keyChanged !== undefined && handlers.getNode([
                    'can.keys',
                    'onKeyValue'
                ]);
                var batch = dispatchConstructorPatches || handlersByType || patchesNode || keysNode;
                if (batch) {
                    queues.batch.start();
                }
                if (handlersByType) {
                    if (handlersByType.onKeyValue) {
                        queues.enqueueByQueue(handlersByType.onKeyValue, this, args, event.makeMeta, event.reasonLog);
                    }
                    if (handlersByType.event) {
                        event.batchNum = queues.batch.number();
                        var eventAndArgs = [event].concat(args);
                        queues.enqueueByQueue(handlersByType.event, this, eventAndArgs, event.makeMeta, event.reasonLog);
                    }
                }
                if (keysNode) {
                    queues.enqueueByQueue(keysNode, this, [event.keyChanged], event.makeMeta, event.reasonLog);
                }
                if (patchesNode) {
                    queues.enqueueByQueue(patchesNode, this, [event.patches], event.makeMeta, event.reasonLog);
                }
                if (dispatchConstructorPatches) {
                    this.constructor[dispatchInstanceOnPatchesSymbol](this, event.patches);
                }
                if (batch) {
                    queues.batch.stop();
                }
            }
            return event;
        },
        addEventListener: function (key, handler, queueName) {
            ensureMeta(this).handlers.add([
                key,
                'event',
                queueName || 'mutate',
                handler
            ]);
            return this;
        },
        removeEventListener: function (key, handler, queueName) {
            if (key === undefined) {
                var handlers = ensureMeta(this).handlers;
                var keyHandlers = handlers.getNode([]);
                Object.keys(keyHandlers).forEach(function (key) {
                    handlers.delete([
                        key,
                        'event'
                    ]);
                });
            } else if (!handler && !queueName) {
                ensureMeta(this).handlers.delete([
                    key,
                    'event'
                ]);
            } else if (!handler) {
                ensureMeta(this).handlers.delete([
                    key,
                    'event',
                    queueName || 'mutate'
                ]);
            } else {
                ensureMeta(this).handlers.delete([
                    key,
                    'event',
                    queueName || 'mutate',
                    handler
                ]);
            }
            return this;
        },
        one: function (event, handler) {
            var one = function () {
                legacyMapBindings.off.call(this, event, one);
                return handler.apply(this, arguments);
            };
            legacyMapBindings.on.call(this, event, one);
            return this;
        },
        listenTo: function (bindTarget, event, handler, queueName) {
            if (canReflect.isPrimitive(bindTarget)) {
                queueName = handler;
                handler = event;
                event = bindTarget;
                bindTarget = this;
            }
            if (typeof event === 'function') {
                queueName = handler;
                handler = event;
                event = undefined;
            }
            ensureMeta(this).listenHandlers.add([
                bindTarget,
                event,
                queueName || 'mutate',
                handler
            ]);
            legacyMapBindings.on.call(bindTarget, event, handler, queueName || 'mutate');
            return this;
        },
        stopListening: function () {
            var keys = stopListeningArgumentsToKeys.apply({
                context: this,
                defaultQueue: 'mutate'
            }, arguments);
            var listenHandlers = ensureMeta(this).listenHandlers;
            function deleteHandler(bindTarget, event, queue, handler) {
                legacyMapBindings.off.call(bindTarget, event, handler, queue);
            }
            listenHandlers.delete(keys, deleteHandler);
            return this;
        },
        on: function (eventName, handler, queue) {
            var listenWithDOM = isDomEventTarget(this);
            if (listenWithDOM) {
                if (typeof handler === 'string') {
                    domEvents.addDelegateListener(this, eventName, handler, queue);
                } else {
                    domEvents.addEventListener(this, eventName, handler, queue);
                }
            } else {
                if ('addEventListener' in this) {
                    this.addEventListener(eventName, handler, queue);
                } else if (this[onKeyValueSymbol]) {
                    canReflect.onKeyValue(this, eventName, handler, queue);
                } else if (this[onEventSymbol]) {
                    this[onEventSymbol](eventName, handler, queue);
                } else {
                    if (!eventName && this[onValueSymbol]) {
                        canReflect.onValue(this, handler, queue);
                    } else {
                        throw new Error('can-event-queue: Unable to bind ' + eventName);
                    }
                }
            }
            return this;
        },
        off: function (eventName, handler, queue) {
            var listenWithDOM = isDomEventTarget(this);
            if (listenWithDOM) {
                if (typeof handler === 'string') {
                    domEvents.removeDelegateListener(this, eventName, handler, queue);
                } else {
                    domEvents.removeEventListener(this, eventName, handler, queue);
                }
            } else {
                if ('removeEventListener' in this) {
                    this.removeEventListener(eventName, handler, queue);
                } else if (this[offKeyValueSymbol]) {
                    canReflect.offKeyValue(this, eventName, handler, queue);
                } else if (this[offEventSymbol]) {
                    this[offEventSymbol](eventName, handler, queue);
                } else {
                    if (!eventName && this[offValueSymbol]) {
                        canReflect.offValue(this, handler, queue);
                    } else {
                        throw new Error('can-event-queue: Unable to unbind ' + eventName);
                    }
                }
            }
            return this;
        }
    };
    var symbols = {
        'can.onKeyValue': function (key, handler, queueName) {
            ensureMeta(this).handlers.add([
                key,
                'onKeyValue',
                queueName || 'mutate',
                handler
            ]);
        },
        'can.offKeyValue': function (key, handler, queueName) {
            ensureMeta(this).handlers.delete([
                key,
                'onKeyValue',
                queueName || 'mutate',
                handler
            ]);
        },
        'can.isBound': function () {
            return !ensureMeta(this).handlers.isEmpty();
        },
        'can.getWhatIChange': function getWhatIChange(key) {
        },
        'can.onPatches': function (handler, queue) {
            var handlers = ensureMeta(this).handlers;
            handlers.add([
                'can.patches',
                'onKeyValue',
                queue || 'notify',
                handler
            ]);
        },
        'can.offPatches': function (handler, queue) {
            var handlers = ensureMeta(this).handlers;
            handlers.delete([
                'can.patches',
                'onKeyValue',
                queue || 'notify',
                handler
            ]);
        }
    };
    function defineNonEnumerable(obj, prop, value) {
        Object.defineProperty(obj, prop, {
            enumerable: false,
            value: value
        });
    }
    legacyMapBindings = function (obj) {
        canReflect.assignMap(obj, props);
        return canReflect.assignSymbols(obj, symbols);
    };
    defineNonEnumerable(legacyMapBindings, 'addHandlers', addHandlers);
    defineNonEnumerable(legacyMapBindings, 'stopListeningArgumentsToKeys', stopListeningArgumentsToKeys);
    props.bind = props.addEventListener;
    props.unbind = props.removeEventListener;
    canReflect.assignMap(legacyMapBindings, props);
    canReflect.assignSymbols(legacyMapBindings, symbols);
    defineNonEnumerable(legacyMapBindings, 'start', function () {
        console.warn('use can-queues.batch.start()');
        queues.batch.start();
    });
    defineNonEnumerable(legacyMapBindings, 'stop', function () {
        console.warn('use can-queues.batch.stop()');
        queues.batch.stop();
    });
    defineNonEnumerable(legacyMapBindings, 'flush', function () {
        console.warn('use can-queues.flush()');
        queues.flush();
    });
    defineNonEnumerable(legacyMapBindings, 'afterPreviousEvents', function (handler) {
        console.warn('don\'t use afterPreviousEvents');
        queues.mutateQueue.enqueue(function afterPreviousEvents() {
            queues.mutateQueue.enqueue(handler);
        });
        queues.flush();
    });
    defineNonEnumerable(legacyMapBindings, 'after', function (handler) {
        console.warn('don\'t use after');
        queues.mutateQueue.enqueue(handler);
        queues.flush();
    });
    module.exports = legacyMapBindings;
});
/*can-simple-observable@2.4.1#resolver/resolver*/
define('can-simple-observable@2.4.1#resolver/resolver', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-symbol',
    'can-observation-recorder',
    'can-observation',
    'can-queues',
    'can-event-queue/map/map',
    '../settable/settable',
    '../can-simple-observable'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var ObservationRecorder = require('can-observation-recorder');
    var Observation = require('can-observation');
    var queues = require('can-queues');
    var mapEventBindings = require('can-event-queue/map/map');
    var SettableObservable = require('../settable/settable');
    var SimpleObservable = require('../can-simple-observable');
    var getChangesSymbol = canSymbol.for('can.getChangesDependencyRecord');
    function ResolverObservable(resolver, context, initialValue) {
        this.resolver = ObservationRecorder.ignore(resolver);
        this.context = context;
        this._valueOptions = {
            resolve: this.resolve.bind(this),
            listenTo: this.listenTo.bind(this),
            stopListening: this.stopListening.bind(this),
            lastSet: new SimpleObservable(initialValue)
        };
        this.update = this.update.bind(this);
        this.contextHandlers = new WeakMap();
        this.teardown = null;
        this.binder = {};
    }
    ResolverObservable.prototype = Object.create(SettableObservable.prototype);
    function deleteHandler(bindTarget, event, queue, handler) {
        mapEventBindings.off.call(bindTarget, event, handler, queue);
    }
    canReflect.assignMap(ResolverObservable.prototype, {
        constructor: ResolverObservable,
        listenTo: function (bindTarget, event, handler, queueName) {
            if (canReflect.isPrimitive(bindTarget)) {
                handler = event;
                event = bindTarget;
                bindTarget = this.context;
            }
            if (typeof event === 'function') {
                handler = event;
                event = undefined;
            }
            var resolverInstance = this;
            var contextHandler = handler.bind(this.context);
            contextHandler[getChangesSymbol] = function getChangesDependencyRecord() {
                var s = new Set();
                s.add(resolverInstance);
                return { valueDependencies: s };
            };
            this.contextHandlers.set(handler, contextHandler);
            mapEventBindings.listenTo.call(this.binder, bindTarget, event, contextHandler, queueName || 'notify');
        },
        stopListening: function () {
            var meta = this.binder[canSymbol.for('can.meta')];
            var listenHandlers = meta && meta.listenHandlers;
            if (listenHandlers) {
                var keys = mapEventBindings.stopListeningArgumentsToKeys.call({
                    context: this.context,
                    defaultQueue: 'notify'
                });
                listenHandlers.delete(keys, deleteHandler);
            }
            return this;
        },
        resolve: function (newVal) {
            this._value = newVal;
            if (this.isBinding) {
                this.lastValue = this._value;
                return newVal;
            }
            if (this._value !== this.lastValue) {
                var enqueueMeta = {};
                queues.batch.start();
                queues.deriveQueue.enqueue(this.update, this, [], enqueueMeta);
                queues.batch.stop();
            }
            return newVal;
        },
        update: function () {
            if (this.lastValue !== this._value) {
                var old = this.lastValue;
                this.lastValue = this._value;
                queues.enqueueByQueue(this.handlers.getNode([]), this, [
                    this._value,
                    old
                ]);
            }
        },
        activate: function () {
            this.isBinding = true;
            this.teardown = this.resolver.call(this.context, this._valueOptions);
            this.isBinding = false;
        },
        onUnbound: function () {
            this.bound = false;
            mapEventBindings.stopListening.call(this.binder);
            if (this.teardown != null) {
                this.teardown();
                this.teardown = null;
            }
        },
        set: function (value) {
            this._valueOptions.lastSet.set(value);
        },
        get: function () {
            if (ObservationRecorder.isRecording()) {
                ObservationRecorder.add(this);
                if (!this.bound) {
                    this.onBound();
                }
            }
            if (this.bound === true) {
                return this._value;
            } else {
                var handler = function () {
                };
                this.on(handler);
                var val = this._value;
                this.off(handler);
                return val;
            }
        },
        hasDependencies: function hasDependencies() {
            var hasDependencies = false;
            if (this.bound) {
                var meta = this.binder[canSymbol.for('can.meta')];
                var listenHandlers = meta && meta.listenHandlers;
                hasDependencies = !!listenHandlers.size();
            }
            return hasDependencies;
        },
        getValueDependencies: function getValueDependencies() {
            if (this.bound) {
                var meta = this.binder[canSymbol.for('can.meta')];
                var listenHandlers = meta && meta.listenHandlers;
                var keyDeps = new Map();
                var valueDeps = new Set();
                if (listenHandlers) {
                    canReflect.each(listenHandlers.root, function (events, obj) {
                        canReflect.each(events, function (queues, eventName) {
                            if (eventName === undefined) {
                                valueDeps.add(obj);
                            } else {
                                var entry = keyDeps.get(obj);
                                if (!entry) {
                                    entry = new Set();
                                    keyDeps.set(obj, entry);
                                }
                                entry.add(eventName);
                            }
                        });
                    });
                    if (valueDeps.size || keyDeps.size) {
                        var result = {};
                        if (keyDeps.size) {
                            result.keyDependencies = keyDeps;
                        }
                        if (valueDeps.size) {
                            result.valueDependencies = valueDeps;
                        }
                        return result;
                    }
                }
            }
        }
    });
    canReflect.assignSymbols(ResolverObservable.prototype, {
        'can.getValue': ResolverObservable.prototype.get,
        'can.setValue': ResolverObservable.prototype.set,
        'can.isMapLike': false,
        'can.getPriority': function () {
            return this.priority || 0;
        },
        'can.setPriority': function (newPriority) {
            this.priority = newPriority;
        },
        'can.valueHasDependencies': ResolverObservable.prototype.hasDependencies,
        'can.getValueDependencies': ResolverObservable.prototype.getValueDependencies
    });
    module.exports = ResolverObservable;
});
/*can-event-queue@1.1.0#type/type*/
define('can-event-queue@1.1.0#type/type', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-symbol',
    'can-key-tree',
    'can-queues'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var KeyTree = require('can-key-tree');
    var queues = require('can-queues');
    var metaSymbol = canSymbol.for('can.meta');
    function addHandlers(obj, meta) {
        if (!meta.lifecycleHandlers) {
            meta.lifecycleHandlers = new KeyTree([
                Object,
                Array
            ]);
        }
        if (!meta.instancePatchesHandlers) {
            meta.instancePatchesHandlers = new KeyTree([
                Object,
                Array
            ]);
        }
    }
    function ensureMeta(obj) {
        var meta = obj[metaSymbol];
        if (!meta) {
            meta = {};
            canReflect.setKeyValue(obj, metaSymbol, meta);
        }
        addHandlers(obj, meta);
        return meta;
    }
    var props = {};
    function onOffAndDispatch(symbolName, dispatchName, handlersName) {
        props['can.on' + symbolName] = function (handler, queueName) {
            ensureMeta(this)[handlersName].add([
                queueName || 'mutate',
                handler
            ]);
        };
        props['can.off' + symbolName] = function (handler, queueName) {
            ensureMeta(this)[handlersName].delete([
                queueName || 'mutate',
                handler
            ]);
        };
        props['can.' + dispatchName] = function (instance, arg) {
            queues.enqueueByQueue(ensureMeta(this)[handlersName].getNode([]), this, [
                instance,
                arg
            ]);
        };
    }
    onOffAndDispatch('InstancePatches', 'dispatchInstanceOnPatches', 'instancePatchesHandlers');
    onOffAndDispatch('InstanceBoundChange', 'dispatchInstanceBoundChange', 'lifecycleHandlers');
    function mixinTypeBindings(obj) {
        return canReflect.assignSymbols(obj, props);
    }
    Object.defineProperty(mixinTypeBindings, 'addHandlers', {
        enumerable: false,
        value: addHandlers
    });
    module.exports = mixinTypeBindings;
});
/*can-string-to-any@1.2.0#can-string-to-any*/
define('can-string-to-any@1.2.0#can-string-to-any', function (require, exports, module) {
    'use strict';
    module.exports = function (str) {
        switch (str) {
        case 'NaN':
        case 'Infinity':
            return +str;
        case 'null':
            return null;
        case 'undefined':
            return undefined;
        case 'true':
        case 'false':
            return str === 'true';
        default:
            var val = +str;
            if (!isNaN(val)) {
                return val;
            } else {
                return str;
            }
        }
    };
});
/*can-data-types@1.2.0#maybe-boolean/maybe-boolean*/
define('can-data-types@1.2.0#maybe-boolean/maybe-boolean', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    function toBoolean(val) {
        if (val == null) {
            return val;
        }
        if (val === 'false' || val === '0' || !val) {
            return false;
        }
        return true;
    }
    module.exports = canReflect.assignSymbols(toBoolean, {
        'can.new': toBoolean,
        'can.getSchema': function () {
            return {
                type: 'Or',
                values: [
                    true,
                    false,
                    undefined,
                    null
                ]
            };
        },
        'can.getName': function () {
            return 'MaybeBoolean';
        },
        'can.isMember': function (value) {
            return value == null || typeof value === 'boolean';
        }
    });
});
/*can-data-types@1.2.0#maybe-date/maybe-date*/
define('can-data-types@1.2.0#maybe-date/maybe-date', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    function toDate(str) {
        var type = typeof str;
        if (type === 'string') {
            str = Date.parse(str);
            return isNaN(str) ? null : new Date(str);
        } else if (type === 'number') {
            return new Date(str);
        } else {
            return str;
        }
    }
    function DateStringSet(dateStr) {
        this.setValue = dateStr;
        var date = toDate(dateStr);
        this.value = date == null ? date : date.getTime();
    }
    DateStringSet.prototype.valueOf = function () {
        return this.value;
    };
    canReflect.assignSymbols(DateStringSet.prototype, {
        'can.serialize': function () {
            return this.setValue;
        }
    });
    module.exports = canReflect.assignSymbols(toDate, {
        'can.new': toDate,
        'can.getSchema': function () {
            return {
                type: 'Or',
                values: [
                    Date,
                    undefined,
                    null
                ]
            };
        },
        'can.ComparisonSetType': DateStringSet,
        'can.getName': function () {
            return 'MaybeDate';
        },
        'can.isMember': function (value) {
            return value == null || value instanceof Date;
        }
    });
});
/*can-data-types@1.2.0#maybe-number/maybe-number*/
define('can-data-types@1.2.0#maybe-number/maybe-number', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    function toNumber(val) {
        if (val == null) {
            return val;
        }
        return +val;
    }
    module.exports = canReflect.assignSymbols(toNumber, {
        'can.new': toNumber,
        'can.getSchema': function () {
            return {
                type: 'Or',
                values: [
                    Number,
                    undefined,
                    null
                ]
            };
        },
        'can.getName': function () {
            return 'MaybeNumber';
        },
        'can.isMember': function (value) {
            return value == null || typeof value === 'number';
        }
    });
});
/*can-data-types@1.2.0#maybe-string/maybe-string*/
define('can-data-types@1.2.0#maybe-string/maybe-string', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    function toString(val) {
        if (val == null) {
            return val;
        }
        return '' + val;
    }
    module.exports = canReflect.assignSymbols(toString, {
        'can.new': toString,
        'can.getSchema': function () {
            return {
                type: 'Or',
                values: [
                    String,
                    undefined,
                    null
                ]
            };
        },
        'can.getName': function () {
            return 'MaybeString';
        },
        'can.isMember': function (value) {
            return value == null || typeof value === 'string';
        }
    });
});
/*can-define@2.7.12#can-define*/
define('can-define@2.7.12#can-define', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-symbol',
    'can-reflect',
    'can-observation',
    'can-observation-recorder',
    'can-simple-observable/async/async',
    'can-simple-observable/settable/settable',
    'can-simple-observable/resolver/resolver',
    'can-event-queue/map/map',
    'can-event-queue/type/type',
    'can-queues',
    'can-assign',
    'can-log/dev/dev',
    'can-string-to-any',
    'can-define-lazy-value',
    'can-data-types/maybe-boolean/maybe-boolean',
    'can-data-types/maybe-date/maybe-date',
    'can-data-types/maybe-number/maybe-number',
    'can-data-types/maybe-string/maybe-string'
], function (require, exports, module) {
    'use strict';
    'format cjs';
    var ns = require('can-namespace');
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    var Observation = require('can-observation');
    var ObservationRecorder = require('can-observation-recorder');
    var AsyncObservable = require('can-simple-observable/async/async');
    var SettableObservable = require('can-simple-observable/settable/settable');
    var ResolverObservable = require('can-simple-observable/resolver/resolver');
    var eventQueue = require('can-event-queue/map/map');
    var addTypeEvents = require('can-event-queue/type/type');
    var queues = require('can-queues');
    var assign = require('can-assign');
    var canLogDev = require('can-log/dev/dev');
    var stringToAny = require('can-string-to-any');
    var defineLazyValue = require('can-define-lazy-value');
    var MaybeBoolean = require('can-data-types/maybe-boolean/maybe-boolean'), MaybeDate = require('can-data-types/maybe-date/maybe-date'), MaybeNumber = require('can-data-types/maybe-number/maybe-number'), MaybeString = require('can-data-types/maybe-string/maybe-string');
    var newSymbol = canSymbol.for('can.new'), serializeSymbol = canSymbol.for('can.serialize'), inSetupSymbol = canSymbol.for('can.initializing');
    var eventsProto, define, make, makeDefinition, getDefinitionsAndMethods, getDefinitionOrMethod;
    function isDefineType(func) {
        return func && (func.canDefineType === true || func[newSymbol]);
    }
    var peek = ObservationRecorder.ignore(canReflect.getValue.bind(canReflect));
    var Object_defineNamedPrototypeProperty = Object.defineProperty;
    function defineConfigurableAndNotEnumerable(obj, prop, value) {
        Object.defineProperty(obj, prop, {
            configurable: true,
            enumerable: false,
            writable: true,
            value: value
        });
    }
    function eachPropertyDescriptor(map, cb) {
        for (var prop in map) {
            if (map.hasOwnProperty(prop)) {
                cb.call(map, prop, Object.getOwnPropertyDescriptor(map, prop));
            }
        }
    }
    function getEveryPropertyAndSymbol(obj) {
        var props = Object.getOwnPropertyNames(obj);
        var symbols = 'getOwnPropertySymbols' in Object ? Object.getOwnPropertySymbols(obj) : [];
        return props.concat(symbols);
    }
    function cleanUpDefinition(prop, definition, shouldWarn, typePrototype) {
        if (definition.value !== undefined && (typeof definition.value !== 'function' || definition.value.length === 0)) {
            definition.default = definition.value;
            delete definition.value;
        }
        if (definition.Value !== undefined) {
            definition.Default = definition.Value;
            delete definition.Value;
        }
    }
    function isValueResolver(definition) {
        return typeof definition.value === 'function' && definition.value.length;
    }
    module.exports = define = ns.define = function (typePrototype, defines, baseDefine) {
        var prop, dataInitializers = Object.create(baseDefine ? baseDefine.dataInitializers : null), computedInitializers = Object.create(baseDefine ? baseDefine.computedInitializers : null);
        var result = getDefinitionsAndMethods(defines, baseDefine, typePrototype);
        result.dataInitializers = dataInitializers;
        result.computedInitializers = computedInitializers;
        canReflect.eachKey(result.definitions, function (definition, property) {
            define.property(typePrototype, property, definition, dataInitializers, computedInitializers, result.defaultDefinition);
        });
        if (typePrototype.hasOwnProperty('_data')) {
            for (prop in dataInitializers) {
                defineLazyValue(typePrototype._data, prop, dataInitializers[prop].bind(typePrototype), true);
            }
        } else {
            defineLazyValue(typePrototype, '_data', function () {
                var map = this;
                var data = {};
                for (var prop in dataInitializers) {
                    defineLazyValue(data, prop, dataInitializers[prop].bind(map), true);
                }
                return data;
            });
        }
        if (typePrototype.hasOwnProperty('_computed')) {
            for (prop in computedInitializers) {
                defineLazyValue(typePrototype._computed, prop, computedInitializers[prop].bind(typePrototype));
            }
        } else {
            defineLazyValue(typePrototype, '_computed', function () {
                var map = this;
                var data = Object.create(null);
                for (var prop in computedInitializers) {
                    defineLazyValue(data, prop, computedInitializers[prop].bind(map));
                }
                return data;
            });
        }
        getEveryPropertyAndSymbol(eventsProto).forEach(function (prop) {
            Object.defineProperty(typePrototype, prop, {
                enumerable: false,
                value: eventsProto[prop],
                configurable: true,
                writable: true
            });
        });
        Object.defineProperty(typePrototype, '_define', {
            enumerable: false,
            value: result,
            configurable: true,
            writable: true
        });
        var iteratorSymbol = canSymbol.iterator || canSymbol.for('iterator');
        if (!typePrototype[iteratorSymbol]) {
            defineConfigurableAndNotEnumerable(typePrototype, iteratorSymbol, function () {
                return new define.Iterator(this);
            });
        }
        return result;
    };
    var onlyType = function (obj) {
        for (var prop in obj) {
            if (prop !== 'type') {
                return false;
            }
        }
        return true;
    };
    define.extensions = function () {
    };
    define.property = function (typePrototype, prop, definition, dataInitializers, computedInitializers, defaultDefinition) {
        var propertyDefinition = define.extensions.apply(this, arguments);
        if (propertyDefinition) {
            definition = makeDefinition(prop, propertyDefinition, defaultDefinition || {}, typePrototype);
        }
        var type = definition.type;
        if (type && onlyType(definition) && type === define.types['*']) {
            Object_defineNamedPrototypeProperty(typePrototype, prop, {
                get: make.get.data(prop),
                set: make.set.events(prop, make.get.data(prop), make.set.data(prop), make.eventType.data(prop)),
                enumerable: true,
                configurable: true
            });
            return;
        }
        definition.type = type;
        var dataProperty = definition.get || isValueResolver(definition) ? 'computed' : 'data', reader = make.read[dataProperty](prop), getter = make.get[dataProperty](prop), setter = make.set[dataProperty](prop), getInitialValue;
        var typeConvert = function (val) {
            return val;
        };
        if (definition.Type) {
            typeConvert = make.set.Type(prop, definition.Type, typeConvert);
        }
        if (type) {
            typeConvert = make.set.type(prop, type, typeConvert);
        }
        var eventsSetter = make.set.events(prop, reader, setter, make.eventType[dataProperty](prop));
        if (isValueResolver(definition)) {
            computedInitializers[prop] = make.valueResolver(prop, definition, typeConvert);
        } else if (definition.default !== undefined || definition.Default !== undefined) {
            getInitialValue = ObservationRecorder.ignore(make.get.defaultValue(prop, definition, typeConvert, eventsSetter));
        }
        if (definition.get) {
            computedInitializers[prop] = make.compute(prop, definition.get, getInitialValue);
        } else if (getInitialValue) {
            dataInitializers[prop] = getInitialValue;
        }
        if (definition.get && definition.set) {
            setter = make.set.setter(prop, definition.set, make.read.lastSet(prop), setter, true);
        } else if (definition.set) {
            setter = make.set.setter(prop, definition.set, reader, eventsSetter, false);
        } else if (dataProperty === 'data') {
            setter = eventsSetter;
        } else if (definition.get && definition.get.length < 1) {
            setter = function () {
            };
        }
        if (type) {
            setter = make.set.type(prop, type, setter);
        }
        if (definition.Type) {
            setter = make.set.Type(prop, definition.Type, setter);
        }
        Object_defineNamedPrototypeProperty(typePrototype, prop, {
            get: getter,
            set: setter,
            enumerable: 'serialize' in definition ? !!definition.serialize : !definition.get,
            configurable: true
        });
    };
    define.makeDefineInstanceKey = function (constructor) {
        constructor[canSymbol.for('can.defineInstanceKey')] = function (property, value) {
            var defineResult = this.prototype._define;
            if (typeof value === 'object') {
                cleanUpDefinition(property, value, false, this);
            }
            var definition = getDefinitionOrMethod(property, value, defineResult.defaultDefinition, this);
            if (definition && typeof definition === 'object') {
                define.property(constructor.prototype, property, definition, defineResult.dataInitializers, defineResult.computedInitializers, defineResult.defaultDefinition);
                defineResult.definitions[property] = definition;
            } else {
                defineResult.methods[property] = definition;
            }
            this.prototype.dispatch({
                type: 'can.keys',
                target: this.prototype
            });
        };
    };
    define.Constructor = function (defines, sealed) {
        var constructor = function DefineConstructor(props) {
            Object.defineProperty(this, inSetupSymbol, {
                configurable: true,
                enumerable: false,
                value: true,
                writable: true
            });
            define.setup.call(this, props, sealed);
            this[inSetupSymbol] = false;
        };
        var result = define(constructor.prototype, defines);
        addTypeEvents(constructor);
        define.makeDefineInstanceKey(constructor, result);
        return constructor;
    };
    make = {
        computeObj: function (map, prop, observable) {
            var computeObj = {
                oldValue: undefined,
                compute: observable,
                count: 0,
                handler: function (newVal) {
                    var oldValue = computeObj.oldValue;
                    computeObj.oldValue = newVal;
                    map.dispatch({
                        type: prop,
                        target: map
                    }, [
                        newVal,
                        oldValue
                    ]);
                }
            };
            return computeObj;
        },
        valueResolver: function (prop, definition, typeConvert) {
            var getDefault = make.get.defaultValue(prop, definition, typeConvert);
            return function () {
                var map = this;
                var defaultValue = getDefault.call(this);
                var computeObj = make.computeObj(map, prop, new ResolverObservable(definition.value, map, defaultValue));
                return computeObj;
            };
        },
        compute: function (prop, get, defaultValueFn) {
            return function () {
                var map = this, defaultValue = defaultValueFn && defaultValueFn.call(this), observable, computeObj;
                if (get.length === 0) {
                    observable = new Observation(get, map);
                } else if (get.length === 1) {
                    observable = new SettableObservable(get, map, defaultValue);
                } else {
                    observable = new AsyncObservable(get, map, defaultValue);
                }
                computeObj = make.computeObj(map, prop, observable);
                return computeObj;
            };
        },
        set: {
            data: function (prop) {
                return function (newVal) {
                    this._data[prop] = newVal;
                };
            },
            computed: function (prop) {
                return function (val) {
                    canReflect.setValue(this._computed[prop].compute, val);
                };
            },
            events: function (prop, getCurrent, setData, eventType) {
                return function (newVal) {
                    if (this[inSetupSymbol]) {
                        setData.call(this, newVal);
                    } else {
                        var current = getCurrent.call(this);
                        if (newVal !== current) {
                            var dispatched;
                            setData.call(this, newVal);
                            dispatched = {
                                patches: [{
                                        type: 'set',
                                        key: prop,
                                        value: newVal
                                    }],
                                type: prop,
                                target: this
                            };
                            this.dispatch(dispatched, [
                                newVal,
                                current
                            ]);
                        }
                    }
                };
            },
            setter: function (prop, setter, getCurrent, setEvents, hasGetter) {
                return function (value) {
                    var self = this;
                    queues.batch.start();
                    var setterCalled = false, current = getCurrent.call(this), setValue = setter.call(this, value, function (value) {
                            setEvents.call(self, value);
                            setterCalled = true;
                        }, current);
                    if (setterCalled) {
                        queues.batch.stop();
                    } else {
                        if (hasGetter) {
                            if (setValue !== undefined) {
                                if (current !== setValue) {
                                    setEvents.call(this, setValue);
                                }
                                queues.batch.stop();
                            } else if (setter.length === 0) {
                                setEvents.call(this, value);
                                queues.batch.stop();
                                return;
                            } else if (setter.length === 1) {
                                queues.batch.stop();
                            } else {
                                queues.batch.stop();
                                return;
                            }
                        } else {
                            if (setValue !== undefined) {
                                setEvents.call(this, setValue);
                                queues.batch.stop();
                            } else if (setter.length === 0) {
                                setEvents.call(this, value);
                                queues.batch.stop();
                                return;
                            } else if (setter.length === 1) {
                                setEvents.call(this, undefined);
                                queues.batch.stop();
                            } else {
                                queues.batch.stop();
                                return;
                            }
                        }
                    }
                };
            },
            type: function (prop, type, set) {
                function setter(newValue) {
                    return set.call(this, type.call(this, newValue, prop));
                }
                if (isDefineType(type)) {
                    if (type.canDefineType) {
                        return setter;
                    } else {
                        return function setter(newValue) {
                            return set.call(this, canReflect.convert(newValue, type));
                        };
                    }
                }
                if (typeof type === 'object') {
                    return make.set.Type(prop, type, set);
                } else {
                    return setter;
                }
            },
            Type: function (prop, Type, set) {
                if (Array.isArray(Type) && define.DefineList) {
                    Type = define.DefineList.extend({ '#': Type[0] });
                } else if (typeof Type === 'object') {
                    if (define.DefineMap) {
                        Type = define.DefineMap.extend(Type);
                    } else {
                        Type = define.Constructor(Type);
                    }
                }
                return function (newValue) {
                    if (newValue instanceof Type || newValue == null) {
                        return set.call(this, newValue);
                    } else {
                        return set.call(this, new Type(newValue));
                    }
                };
            }
        },
        eventType: {
            data: function (prop) {
                return function (newVal, oldVal) {
                    return oldVal !== undefined || this._data.hasOwnProperty(prop) ? 'set' : 'add';
                };
            },
            computed: function () {
                return function () {
                    return 'set';
                };
            }
        },
        read: {
            data: function (prop) {
                return function () {
                    return this._data[prop];
                };
            },
            computed: function (prop) {
                return function () {
                    return canReflect.getValue(this._computed[prop].compute);
                };
            },
            lastSet: function (prop) {
                return function () {
                    var observable = this._computed[prop].compute;
                    if (observable.lastSetValue) {
                        return canReflect.getValue(observable.lastSetValue);
                    }
                };
            }
        },
        get: {
            defaultValue: function (prop, definition, typeConvert, callSetter) {
                return function () {
                    var value = definition.default;
                    if (value !== undefined) {
                        if (typeof value === 'function') {
                            value = value.call(this);
                        }
                        value = typeConvert.call(this, value);
                    } else {
                        var Default = definition.Default;
                        if (Default) {
                            value = typeConvert.call(this, new Default());
                        }
                    }
                    if (definition.set) {
                        var VALUE;
                        var sync = true;
                        var setter = make.set.setter(prop, definition.set, function () {
                        }, function (value) {
                            if (sync) {
                                VALUE = value;
                            } else {
                                callSetter.call(this, value);
                            }
                        }, definition.get);
                        setter.call(this, value);
                        sync = false;
                        return VALUE;
                    }
                    return value;
                };
            },
            data: function (prop) {
                return function () {
                    if (!this[inSetupSymbol]) {
                        ObservationRecorder.add(this, prop);
                    }
                    return this._data[prop];
                };
            },
            computed: function (prop) {
                return function (val) {
                    var compute = this._computed[prop].compute;
                    if (ObservationRecorder.isRecording()) {
                        ObservationRecorder.add(this, prop);
                        if (!canReflect.isBound(compute)) {
                            Observation.temporarilyBind(compute);
                        }
                    }
                    return peek(compute);
                };
            }
        }
    };
    define.behaviors = [
        'get',
        'set',
        'value',
        'Value',
        'type',
        'Type',
        'serialize'
    ];
    var addBehaviorToDefinition = function (definition, behavior, value) {
        if (behavior === 'enumerable') {
            definition.serialize = !!value;
        } else if (behavior === 'type') {
            var behaviorDef = value;
            if (typeof behaviorDef === 'string') {
                behaviorDef = define.types[behaviorDef];
                if (typeof behaviorDef === 'object' && !isDefineType(behaviorDef)) {
                    assign(definition, behaviorDef);
                    behaviorDef = behaviorDef[behavior];
                }
            }
            if (typeof behaviorDef !== 'undefined') {
                definition[behavior] = behaviorDef;
            }
        } else {
            definition[behavior] = value;
        }
    };
    makeDefinition = function (prop, def, defaultDefinition, typePrototype) {
        var definition = {};
        canReflect.eachKey(def, function (value, behavior) {
            addBehaviorToDefinition(definition, behavior, value);
        });
        canReflect.eachKey(defaultDefinition, function (value, prop) {
            if (definition[prop] === undefined) {
                if (prop !== 'type' && prop !== 'Type') {
                    definition[prop] = value;
                }
            }
        });
        if (def.Type) {
            var value = def.Type;
            var serialize = value[serializeSymbol];
            if (serialize) {
                definition.serialize = function (val) {
                    return serialize.call(val);
                };
            }
            if (value[newSymbol]) {
                definition.type = value;
                delete definition.Type;
            }
        }
        if (typeof def.type !== 'string') {
            if (!definition.type && !definition.Type) {
                var defaultsCopy = canReflect.assignMap({}, defaultDefinition);
                definition = canReflect.assignMap(defaultsCopy, definition);
            }
            if (canReflect.size(definition) === 0) {
                definition.type = define.types['*'];
            }
        }
        cleanUpDefinition(prop, definition, true, typePrototype);
        return definition;
    };
    getDefinitionOrMethod = function (prop, value, defaultDefinition, typePrototype) {
        var definition;
        if (typeof value === 'string') {
            definition = { type: value };
        } else if (value && (value[serializeSymbol] || value[newSymbol])) {
            definition = { Type: value };
        } else if (typeof value === 'function') {
            if (canReflect.isConstructorLike(value)) {
                definition = { Type: value };
            }
        } else if (Array.isArray(value)) {
            definition = { Type: value };
        } else if (canReflect.isPlainObject(value)) {
            definition = value;
        }
        if (definition) {
            return makeDefinition(prop, definition, defaultDefinition, typePrototype);
        } else {
            return value;
        }
    };
    getDefinitionsAndMethods = function (defines, baseDefines, typePrototype) {
        var definitions = Object.create(baseDefines ? baseDefines.definitions : null);
        var methods = {};
        var defaults = defines['*'], defaultDefinition;
        if (defaults) {
            delete defines['*'];
            defaultDefinition = getDefinitionOrMethod('*', defaults, {});
        } else {
            defaultDefinition = Object.create(null);
        }
        eachPropertyDescriptor(defines, function (prop, propertyDescriptor) {
            var value;
            if (propertyDescriptor.get || propertyDescriptor.set) {
                value = {
                    get: propertyDescriptor.get,
                    set: propertyDescriptor.set
                };
            } else {
                value = propertyDescriptor.value;
            }
            if (prop === 'constructor') {
                methods[prop] = value;
                return;
            } else {
                var result = getDefinitionOrMethod(prop, value, defaultDefinition, typePrototype);
                if (result && typeof result === 'object' && canReflect.size(result) > 0) {
                    definitions[prop] = result;
                } else {
                    if (typeof result === 'function') {
                        methods[prop] = result;
                    }
                }
            }
        });
        if (defaults) {
            defineConfigurableAndNotEnumerable(defines, '*', defaults);
        }
        return {
            definitions: definitions,
            methods: methods,
            defaultDefinition: defaultDefinition
        };
    };
    eventsProto = eventQueue({});
    function setupComputed(instance, eventName) {
        var computedBinding = instance._computed && instance._computed[eventName];
        if (computedBinding && computedBinding.compute) {
            if (!computedBinding.count) {
                computedBinding.count = 1;
                canReflect.onValue(computedBinding.compute, computedBinding.handler, 'notify');
                computedBinding.oldValue = peek(computedBinding.compute);
            } else {
                computedBinding.count++;
            }
        }
    }
    function teardownComputed(instance, eventName) {
        var computedBinding = instance._computed && instance._computed[eventName];
        if (computedBinding) {
            if (computedBinding.count === 1) {
                computedBinding.count = 0;
                canReflect.offValue(computedBinding.compute, computedBinding.handler, 'notify');
            } else {
                computedBinding.count--;
            }
        }
    }
    var canMetaSymbol = canSymbol.for('can.meta');
    assign(eventsProto, {
        _eventSetup: function () {
        },
        _eventTeardown: function () {
        },
        addEventListener: function (eventName, handler, queue) {
            setupComputed(this, eventName);
            return eventQueue.addEventListener.apply(this, arguments);
        },
        removeEventListener: function (eventName, handler) {
            teardownComputed(this, eventName);
            return eventQueue.removeEventListener.apply(this, arguments);
        }
    });
    eventsProto.on = eventsProto.bind = eventsProto.addEventListener;
    eventsProto.off = eventsProto.unbind = eventsProto.removeEventListener;
    var onKeyValueSymbol = canSymbol.for('can.onKeyValue');
    var offKeyValueSymbol = canSymbol.for('can.offKeyValue');
    canReflect.assignSymbols(eventsProto, {
        'can.onKeyValue': function (key) {
            setupComputed(this, key);
            return eventQueue[onKeyValueSymbol].apply(this, arguments);
        },
        'can.offKeyValue': function (key) {
            teardownComputed(this, key);
            return eventQueue[offKeyValueSymbol].apply(this, arguments);
        }
    });
    delete eventsProto.one;
    define.setup = function (props, sealed) {
        Object.defineProperty(this, 'constructor', {
            value: this.constructor,
            enumerable: false,
            writable: false
        });
        Object.defineProperty(this, canMetaSymbol, {
            value: Object.create(null),
            enumerable: false,
            writable: false
        });
        var definitions = this._define.definitions;
        var instanceDefinitions = Object.create(null);
        var map = this;
        canReflect.eachKey(props, function (value, prop) {
            if (definitions[prop] !== undefined) {
                map[prop] = value;
            } else {
                define.expando(map, prop, value);
            }
        });
        if (canReflect.size(instanceDefinitions) > 0) {
            defineConfigurableAndNotEnumerable(this, '_instanceDefinitions', instanceDefinitions);
        }
    };
    var returnFirstArg = function (arg) {
        return arg;
    };
    define.expando = function (map, prop, value) {
        if (define._specialKeys[prop]) {
            return true;
        }
        var constructorDefines = map._define.definitions;
        if (constructorDefines && constructorDefines[prop]) {
            return;
        }
        var instanceDefines = map._instanceDefinitions;
        if (!instanceDefines) {
            if (Object.isSealed(map)) {
                return;
            }
            Object.defineProperty(map, '_instanceDefinitions', {
                configurable: true,
                enumerable: false,
                writable: true,
                value: {}
            });
            instanceDefines = map._instanceDefinitions;
        }
        if (!instanceDefines[prop]) {
            var defaultDefinition = map._define.defaultDefinition || { type: define.types.observable };
            define.property(map, prop, defaultDefinition, {}, {});
            if (defaultDefinition.type) {
                map._data[prop] = define.make.set.type(prop, defaultDefinition.type, returnFirstArg).call(map, value);
            } else if (defaultDefinition.Type && canReflect.isConstructorLike(defaultDefinition.Type)) {
                map._data[prop] = define.make.set.Type(prop, defaultDefinition.Type, returnFirstArg).call(map, value);
            } else {
                map._data[prop] = define.types.observable(value);
            }
            instanceDefines[prop] = defaultDefinition;
            if (!map[inSetupSymbol]) {
                queues.batch.start();
                map.dispatch({
                    type: 'can.keys',
                    target: map
                });
                if (Object.prototype.hasOwnProperty.call(map._data, prop)) {
                    map.dispatch({
                        type: prop,
                        target: map,
                        patches: [{
                                type: 'add',
                                key: prop,
                                value: map._data[prop]
                            }]
                    }, [
                        map._data[prop],
                        undefined
                    ]);
                } else {
                    map.dispatch({
                        type: 'set',
                        target: map,
                        patches: [{
                                type: 'add',
                                key: prop,
                                value: map._data[prop]
                            }]
                    }, [
                        map._data[prop],
                        undefined
                    ]);
                }
                queues.batch.stop();
            }
            return true;
        }
    };
    define.replaceWith = defineLazyValue;
    define.eventsProto = eventsProto;
    define.defineConfigurableAndNotEnumerable = defineConfigurableAndNotEnumerable;
    define.make = make;
    define.getDefinitionOrMethod = getDefinitionOrMethod;
    define._specialKeys = {
        _data: true,
        _computed: true
    };
    var simpleGetterSetters = {};
    define.makeSimpleGetterSetter = function (prop) {
        if (simpleGetterSetters[prop] === undefined) {
            var setter = make.set.events(prop, make.get.data(prop), make.set.data(prop), make.eventType.data(prop));
            simpleGetterSetters[prop] = {
                get: make.get.data(prop),
                set: function (newVal) {
                    return setter.call(this, define.types.observable(newVal));
                },
                enumerable: true,
                configurable: true
            };
        }
        return simpleGetterSetters[prop];
    };
    define.Iterator = function (obj) {
        this.obj = obj;
        this.definitions = Object.keys(obj._define.definitions);
        this.instanceDefinitions = obj._instanceDefinitions ? Object.keys(obj._instanceDefinitions) : Object.keys(obj);
        this.hasGet = typeof obj.get === 'function';
    };
    define.Iterator.prototype.next = function () {
        var key;
        if (this.definitions.length) {
            key = this.definitions.shift();
            var def = this.obj._define.definitions[key];
            if (def.get) {
                return this.next();
            }
        } else if (this.instanceDefinitions.length) {
            key = this.instanceDefinitions.shift();
        } else {
            return {
                value: undefined,
                done: true
            };
        }
        return {
            value: [
                key,
                this.hasGet ? this.obj.get(key) : this.obj[key]
            ],
            done: false
        };
    };
    function isObservableValue(obj) {
        return canReflect.isValueLike(obj) && canReflect.isObservableLike(obj);
    }
    define.types = {
        'date': MaybeDate,
        'number': MaybeNumber,
        'boolean': MaybeBoolean,
        'observable': function (newVal) {
            if (Array.isArray(newVal) && define.DefineList) {
                newVal = new define.DefineList(newVal);
            } else if (canReflect.isPlainObject(newVal) && define.DefineMap) {
                newVal = new define.DefineMap(newVal);
            }
            return newVal;
        },
        'stringOrObservable': function (newVal) {
            if (Array.isArray(newVal)) {
                return new define.DefaultList(newVal);
            } else if (canReflect.isPlainObject(newVal)) {
                return new define.DefaultMap(newVal);
            } else {
                return canReflect.convert(newVal, define.types.string);
            }
        },
        'htmlbool': function (val) {
            if (val === '') {
                return true;
            }
            return !!stringToAny(val);
        },
        '*': function (val) {
            return val;
        },
        'any': function (val) {
            return val;
        },
        'string': MaybeString,
        'compute': {
            set: function (newValue, setVal, setErr, oldValue) {
                if (isObservableValue(newValue)) {
                    return newValue;
                }
                if (isObservableValue(oldValue)) {
                    canReflect.setValue(oldValue, newValue);
                    return oldValue;
                }
                return newValue;
            },
            get: function (value) {
                return isObservableValue(value) ? canReflect.getValue(value) : value;
            }
        }
    };
    define.updateSchemaKeys = function (schema, definitions) {
        for (var prop in definitions) {
            var definition = definitions[prop];
            if (definition.serialize !== false) {
                if (definition.Type) {
                    schema.keys[prop] = definition.Type;
                } else if (definition.type) {
                    schema.keys[prop] = definition.type;
                } else {
                    schema.keys[prop] = function (val) {
                        return val;
                    };
                }
                if (definitions[prop].identity === true) {
                    schema.identity.push(prop);
                }
            }
        }
        return schema;
    };
});
/*can-define@2.7.12#ensure-meta*/
define('can-define@2.7.12#ensure-meta', [
    'require',
    'exports',
    'module',
    'can-symbol',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    module.exports = function ensureMeta(obj) {
        var metaSymbol = canSymbol.for('can.meta');
        var meta = obj[metaSymbol];
        if (!meta) {
            meta = {};
            canReflect.setKeyValue(obj, metaSymbol, meta);
        }
        return meta;
    };
});
/*can-define@2.7.12#define-helpers/define-helpers*/
define('can-define@2.7.12#define-helpers/define-helpers', [
    'require',
    'exports',
    'module',
    'can-define',
    'can-reflect',
    'can-queues',
    'can-log/dev/dev',
    '../ensure-meta'
], function (require, exports, module) {
    'use strict';
    var define = require('can-define');
    var canReflect = require('can-reflect');
    var queues = require('can-queues');
    var dev = require('can-log/dev/dev');
    var ensureMeta = require('../ensure-meta');
    var defineHelpers = {
        defineExpando: define.expando,
        reflectSerialize: function (unwrapped) {
            var constructorDefinitions = this._define.definitions;
            var defaultDefinition = this._define.defaultDefinition;
            this.forEach(function (val, name) {
                var propDef = constructorDefinitions[name];
                if (propDef && typeof propDef.serialize === 'function') {
                    val = propDef.serialize.call(this, val, name);
                } else if (defaultDefinition && typeof defaultDefinition.serialize === 'function') {
                    val = defaultDefinition.serialize.call(this, val, name);
                } else {
                    val = canReflect.serialize(val);
                }
                if (val !== undefined) {
                    unwrapped[name] = val;
                }
            }, this);
            return unwrapped;
        },
        reflectUnwrap: function (unwrapped) {
            this.forEach(function (value, key) {
                if (value !== undefined) {
                    unwrapped[key] = canReflect.unwrap(value);
                }
            });
            return unwrapped;
        },
        log: function (key) {
            var instance = this;
            var quoteString = function quoteString(x) {
                return typeof x === 'string' ? JSON.stringify(x) : x;
            };
            var meta = ensureMeta(instance);
            var allowed = meta.allowedLogKeysSet || new Set();
            meta.allowedLogKeysSet = allowed;
            if (key) {
                allowed.add(key);
            }
            meta._log = function (event, data) {
                var type = event.type;
                if (type === 'can.onPatches' || key && !allowed.has(type) || type === 'can.keys' || key && !allowed.has(type)) {
                    return;
                }
                if (type === 'add' || type === 'remove') {
                    dev.log(canReflect.getName(instance), '\n how   ', quoteString(type), '\n what  ', quoteString(data[0]), '\n index ', quoteString(data[1]));
                } else {
                    dev.log(canReflect.getName(instance), '\n key ', quoteString(type), '\n is  ', quoteString(data[0]), '\n was ', quoteString(data[1]));
                }
            };
        },
        deleteKey: function (prop) {
            var instanceDefines = this._instanceDefinitions;
            if (instanceDefines && Object.prototype.hasOwnProperty.call(instanceDefines, prop) && !Object.isSealed(this)) {
                delete instanceDefines[prop];
                queues.batch.start();
                this.dispatch({
                    type: 'can.keys',
                    target: this
                });
                var oldValue = this._data[prop];
                if (oldValue !== undefined) {
                    delete this._data[prop];
                    this.dispatch({
                        type: prop,
                        target: this,
                        patches: [{
                                type: 'delete',
                                key: prop
                            }]
                    }, [
                        undefined,
                        oldValue
                    ]);
                }
                queues.batch.stop();
            } else {
                this.set(prop, undefined);
            }
            return this;
        }
    };
    module.exports = defineHelpers;
});
/*can-define@2.7.12#map/map*/
define('can-define@2.7.12#map/map', [
    'require',
    'exports',
    'module',
    'can-construct',
    'can-define',
    '../define-helpers/define-helpers',
    'can-observation-recorder',
    'can-namespace',
    'can-log',
    'can-log/dev/dev',
    'can-reflect',
    'can-symbol',
    'can-queues',
    'can-event-queue/type/type'
], function (require, exports, module) {
    'use strict';
    var Construct = require('can-construct');
    var define = require('can-define');
    var defineHelpers = require('../define-helpers/define-helpers');
    var ObservationRecorder = require('can-observation-recorder');
    var ns = require('can-namespace');
    var canLog = require('can-log');
    var canLogDev = require('can-log/dev/dev');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var queues = require('can-queues');
    var addTypeEvents = require('can-event-queue/type/type');
    var keysForDefinition = function (definitions) {
        var keys = [];
        for (var prop in definitions) {
            var definition = definitions[prop];
            if (typeof definition !== 'object' || ('serialize' in definition ? !!definition.serialize : !definition.get)) {
                keys.push(prop);
            }
        }
        return keys;
    };
    function assign(source) {
        queues.batch.start();
        canReflect.assignMap(this, source || {});
        queues.batch.stop();
    }
    function update(source) {
        queues.batch.start();
        canReflect.updateMap(this, source || {});
        queues.batch.stop();
    }
    function assignDeep(source) {
        queues.batch.start();
        canReflect.assignDeepMap(this, source || {});
        queues.batch.stop();
    }
    function updateDeep(source) {
        queues.batch.start();
        canReflect.updateDeepMap(this, source || {});
        queues.batch.stop();
    }
    function setKeyValue(key, value) {
        var defined = defineHelpers.defineExpando(this, key, value);
        if (!defined) {
            this[key] = value;
        }
    }
    function getKeyValue(key) {
        var value = this[key];
        if (value !== undefined || key in this || Object.isSealed(this)) {
            return value;
        } else {
            ObservationRecorder.add(this, key);
            return this[key];
        }
    }
    var getSchemaSymbol = canSymbol.for('can.getSchema');
    function getSchema() {
        var def = this.prototype._define;
        var definitions = def ? def.definitions : {};
        var schema = {
            type: 'map',
            identity: [],
            keys: {}
        };
        return define.updateSchemaKeys(schema, definitions);
    }
    var sealedSetup = function (props) {
        define.setup.call(this, props || {}, this.constructor.seal);
    };
    var DefineMap = Construct.extend('DefineMap', {
        setup: function (base) {
            var key, prototype = this.prototype;
            if (DefineMap) {
                var result = define(prototype, prototype, base.prototype._define);
                define.makeDefineInstanceKey(this, result);
                addTypeEvents(this);
                for (key in DefineMap.prototype) {
                    define.defineConfigurableAndNotEnumerable(prototype, key, prototype[key]);
                }
                if (prototype.setup === DefineMap.prototype.setup) {
                    define.defineConfigurableAndNotEnumerable(prototype, 'setup', sealedSetup);
                }
                var _computedGetter = Object.getOwnPropertyDescriptor(prototype, '_computed').get;
                Object.defineProperty(prototype, '_computed', {
                    configurable: true,
                    enumerable: false,
                    get: function () {
                        if (this === prototype) {
                            return;
                        }
                        return _computedGetter.call(this, arguments);
                    }
                });
            } else {
                for (key in prototype) {
                    define.defineConfigurableAndNotEnumerable(prototype, key, prototype[key]);
                }
            }
            define.defineConfigurableAndNotEnumerable(prototype, 'constructor', this);
            this[getSchemaSymbol] = getSchema;
        }
    }, {
        setup: function (props, sealed) {
            if (!this._define) {
                Object.defineProperty(this, '_define', {
                    enumerable: false,
                    value: { definitions: {} }
                });
                Object.defineProperty(this, '_data', {
                    enumerable: false,
                    value: {}
                });
            }
            define.setup.call(this, props || {}, sealed === true);
        },
        get: function (prop) {
            if (prop) {
                return getKeyValue.call(this, prop);
            } else {
                return canReflect.unwrap(this, Map);
            }
        },
        set: function (prop, value) {
            if (typeof prop === 'object') {
                if (value === true) {
                    updateDeep.call(this, prop);
                } else {
                    assignDeep.call(this, prop);
                }
            } else {
                setKeyValue.call(this, prop, value);
            }
            return this;
        },
        assignDeep: function (prop) {
            assignDeep.call(this, prop);
            return this;
        },
        updateDeep: function (prop) {
            updateDeep.call(this, prop);
            return this;
        },
        assign: function (prop) {
            assign.call(this, prop);
            return this;
        },
        update: function (prop) {
            update.call(this, prop);
            return this;
        },
        serialize: function () {
            return canReflect.serialize(this, Map);
        },
        deleteKey: defineHelpers.deleteKey,
        forEach: function () {
            var forEach = function (list, cb, thisarg) {
                    return canReflect.eachKey(list, cb, thisarg);
                }, noObserve = ObservationRecorder.ignore(forEach);
            return function (cb, thisarg, observe) {
                return observe === false ? noObserve(this, cb, thisarg) : forEach(this, cb, thisarg);
            };
        }(),
        '*': { type: define.types.observable }
    });
    var defineMapProto = {
        'can.isMapLike': true,
        'can.isListLike': false,
        'can.isValueLike': false,
        'can.getKeyValue': getKeyValue,
        'can.setKeyValue': setKeyValue,
        'can.deleteKeyValue': defineHelpers.deleteKey,
        'can.getOwnKeys': function () {
            var keys = canReflect.getOwnEnumerableKeys(this);
            if (this._computed) {
                var computedKeys = canReflect.getOwnKeys(this._computed);
                var key;
                for (var i = 0; i < computedKeys.length; i++) {
                    key = computedKeys[i];
                    if (keys.indexOf(key) < 0) {
                        keys.push(key);
                    }
                }
            }
            return keys;
        },
        'can.getOwnEnumerableKeys': function () {
            ObservationRecorder.add(this, 'can.keys');
            ObservationRecorder.add(Object.getPrototypeOf(this), 'can.keys');
            return keysForDefinition(this._define.definitions).concat(keysForDefinition(this._instanceDefinitions));
        },
        'can.hasOwnKey': function (key) {
            return Object.hasOwnProperty.call(this._define.definitions, key) || this._instanceDefinitions !== undefined && Object.hasOwnProperty.call(this._instanceDefinitions, key);
        },
        'can.hasKey': function (key) {
            return key in this._define.definitions || this._instanceDefinitions !== undefined && key in this._instanceDefinitions;
        },
        'can.assignDeep': assignDeep,
        'can.updateDeep': updateDeep,
        'can.unwrap': defineHelpers.reflectUnwrap,
        'can.serialize': defineHelpers.reflectSerialize,
        'can.keyHasDependencies': function (key) {
            return !!(this._computed && this._computed[key] && this._computed[key].compute);
        },
        'can.getKeyDependencies': function (key) {
            var ret;
            if (this._computed && this._computed[key] && this._computed[key].compute) {
                ret = {};
                ret.valueDependencies = new Set();
                ret.valueDependencies.add(this._computed[key].compute);
            }
            return ret;
        }
    };
    canReflect.assignSymbols(DefineMap.prototype, defineMapProto);
    canReflect.setKeyValue(DefineMap.prototype, canSymbol.iterator, function () {
        return new define.Iterator(this);
    });
    for (var prop in define.eventsProto) {
        DefineMap[prop] = define.eventsProto[prop];
        Object.defineProperty(DefineMap.prototype, prop, {
            enumerable: false,
            value: define.eventsProto[prop],
            writable: true
        });
    }
    function getSymbolsForIE(obj) {
        return Object.getOwnPropertyNames(obj).filter(function (name) {
            return name.indexOf('@@symbol') === 0;
        });
    }
    var eventsProtoSymbols = 'getOwnPropertySymbols' in Object ? Object.getOwnPropertySymbols(define.eventsProto) : getSymbolsForIE(define.eventsProto);
    eventsProtoSymbols.forEach(function (sym) {
        Object.defineProperty(DefineMap.prototype, sym, {
            configurable: true,
            enumerable: false,
            value: define.eventsProto[sym],
            writable: true
        });
    });
    define.DefineMap = DefineMap;
    Object.defineProperty(DefineMap.prototype, 'toObject', {
        enumerable: false,
        writable: true,
        value: function () {
            canLog.warn('Use DefineMap::get instead of DefineMap::toObject');
            return this.get();
        }
    });
    module.exports = ns.DefineMap = DefineMap;
});
/*can-reflect-dependencies@1.1.0#src/add-mutated-by*/
define('can-reflect-dependencies@1.1.0#src/add-mutated-by', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var makeDependencyRecord = function makeDependencyRecord() {
        return {
            keyDependencies: new Map(),
            valueDependencies: new Set()
        };
    };
    var makeRootRecord = function makeRootRecord() {
        return {
            mutateDependenciesForKey: new Map(),
            mutateDependenciesForValue: makeDependencyRecord()
        };
    };
    module.exports = function (mutatedByMap) {
        return function addMutatedBy(mutated, key, mutator) {
            var gotKey = arguments.length === 3;
            if (arguments.length === 2) {
                mutator = key;
                key = undefined;
            }
            if (!mutator.keyDependencies && !mutator.valueDependencies) {
                mutator = { valueDependencies: new Set([mutator]) };
            }
            var root = mutatedByMap.get(mutated);
            if (!root) {
                root = makeRootRecord();
                mutatedByMap.set(mutated, root);
            }
            if (gotKey && !root.mutateDependenciesForKey.get(key)) {
                root.mutateDependenciesForKey.set(key, makeDependencyRecord());
            }
            var dependencyRecord = gotKey ? root.mutateDependenciesForKey.get(key) : root.mutateDependenciesForValue;
            if (mutator.valueDependencies) {
                canReflect.addValues(dependencyRecord.valueDependencies, mutator.valueDependencies);
            }
            if (mutator.keyDependencies) {
                canReflect.each(mutator.keyDependencies, function (keysSet, obj) {
                    var entry = dependencyRecord.keyDependencies.get(obj);
                    if (!entry) {
                        entry = new Set();
                        dependencyRecord.keyDependencies.set(obj, entry);
                    }
                    canReflect.addValues(entry, keysSet);
                });
            }
        };
    };
});
/*can-reflect-dependencies@1.1.0#src/delete-mutated-by*/
define('can-reflect-dependencies@1.1.0#src/delete-mutated-by', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    module.exports = function (mutatedByMap) {
        return function deleteMutatedBy(mutated, key, mutator) {
            var gotKey = arguments.length === 3;
            var root = mutatedByMap.get(mutated);
            if (arguments.length === 2) {
                mutator = key;
                key = undefined;
            }
            if (!mutator.keyDependencies && !mutator.valueDependencies) {
                mutator = { valueDependencies: new Set([mutator]) };
            }
            var dependencyRecord = gotKey ? root.mutateDependenciesForKey.get(key) : root.mutateDependenciesForValue;
            if (mutator.valueDependencies) {
                canReflect.removeValues(dependencyRecord.valueDependencies, mutator.valueDependencies);
            }
            if (mutator.keyDependencies) {
                canReflect.each(mutator.keyDependencies, function (keysSet, obj) {
                    var entry = dependencyRecord.keyDependencies.get(obj);
                    if (entry) {
                        canReflect.removeValues(entry, keysSet);
                        if (!entry.size) {
                            dependencyRecord.keyDependencies.delete(obj);
                        }
                    }
                });
            }
        };
    };
});
/*can-reflect-dependencies@1.1.0#src/is-function*/
define('can-reflect-dependencies@1.1.0#src/is-function', function (require, exports, module) {
    'use strict';
    module.exports = function isFunction(value) {
        return typeof value === 'function';
    };
});
/*can-reflect-dependencies@1.1.0#src/get-dependency-data-of*/
define('can-reflect-dependencies@1.1.0#src/get-dependency-data-of', [
    'require',
    'exports',
    'module',
    'can-symbol',
    'can-reflect',
    './is-function'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    var isFunction = require('./is-function');
    var getWhatIChangeSymbol = canSymbol.for('can.getWhatIChange');
    var getKeyDependenciesSymbol = canSymbol.for('can.getKeyDependencies');
    var getValueDependenciesSymbol = canSymbol.for('can.getValueDependencies');
    var getKeyDependencies = function getKeyDependencies(obj, key) {
        if (isFunction(obj[getKeyDependenciesSymbol])) {
            return canReflect.getKeyDependencies(obj, key);
        }
    };
    var getValueDependencies = function getValueDependencies(obj) {
        if (isFunction(obj[getValueDependenciesSymbol])) {
            return canReflect.getValueDependencies(obj);
        }
    };
    var getMutatedKeyDependencies = function getMutatedKeyDependencies(mutatedByMap, obj, key) {
        var root = mutatedByMap.get(obj);
        var dependencyRecord;
        if (root && root.mutateDependenciesForKey.has(key)) {
            dependencyRecord = root.mutateDependenciesForKey.get(key);
        }
        return dependencyRecord;
    };
    var getMutatedValueDependencies = function getMutatedValueDependencies(mutatedByMap, obj) {
        var result;
        var root = mutatedByMap.get(obj);
        if (root) {
            var dependencyRecord = root.mutateDependenciesForValue;
            if (dependencyRecord.keyDependencies.size) {
                result = result || {};
                result.keyDependencies = dependencyRecord.keyDependencies;
            }
            if (dependencyRecord.valueDependencies.size) {
                result = result || {};
                result.valueDependencies = dependencyRecord.valueDependencies;
            }
        }
        return result;
    };
    var getWhatIChange = function getWhatIChange(obj, key) {
        if (isFunction(obj[getWhatIChangeSymbol])) {
            var gotKey = arguments.length === 2;
            return gotKey ? canReflect.getWhatIChange(obj, key) : canReflect.getWhatIChange(obj);
        }
    };
    var isEmptyRecord = function isEmptyRecord(record) {
        return record == null || !Object.keys(record).length || record.keyDependencies && !record.keyDependencies.size && (record.valueDependencies && !record.valueDependencies.size);
    };
    var getWhatChangesMe = function getWhatChangesMe(mutatedByMap, obj, key) {
        var gotKey = arguments.length === 3;
        var mutate = gotKey ? getMutatedKeyDependencies(mutatedByMap, obj, key) : getMutatedValueDependencies(mutatedByMap, obj);
        var derive = gotKey ? getKeyDependencies(obj, key) : getValueDependencies(obj);
        if (!isEmptyRecord(mutate) || !isEmptyRecord(derive)) {
            return Object.assign({}, mutate ? { mutate: mutate } : null, derive ? { derive: derive } : null);
        }
    };
    module.exports = function (mutatedByMap) {
        return function getDependencyDataOf(obj, key) {
            var gotKey = arguments.length === 2;
            var whatChangesMe = gotKey ? getWhatChangesMe(mutatedByMap, obj, key) : getWhatChangesMe(mutatedByMap, obj);
            var whatIChange = gotKey ? getWhatIChange(obj, key) : getWhatIChange(obj);
            if (whatChangesMe || whatIChange) {
                return Object.assign({}, whatIChange ? { whatIChange: whatIChange } : null, whatChangesMe ? { whatChangesMe: whatChangesMe } : null);
            }
        };
    };
});
/*can-reflect-dependencies@1.1.0#can-reflect-dependencies*/
define('can-reflect-dependencies@1.1.0#can-reflect-dependencies', [
    'require',
    'exports',
    'module',
    './src/add-mutated-by',
    './src/delete-mutated-by',
    './src/get-dependency-data-of'
], function (require, exports, module) {
    'use strict';
    var addMutatedBy = require('./src/add-mutated-by');
    var deleteMutatedBy = require('./src/delete-mutated-by');
    var getDependencyDataOf = require('./src/get-dependency-data-of');
    var mutatedByMap = new WeakMap();
    module.exports = {
        addMutatedBy: addMutatedBy(mutatedByMap),
        deleteMutatedBy: deleteMutatedBy(mutatedByMap),
        getDependencyDataOf: getDependencyDataOf(mutatedByMap)
    };
});
/*can-bind@1.0.0#can-bind*/
define('can-bind@1.0.0#can-bind', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-symbol',
    'can-namespace',
    'can-queues'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var namespace = require('can-namespace');
    var queues = require('can-queues');
    var getChangesSymbol = canSymbol.for('can.getChangesDependencyRecord');
    var getValueSymbol = canSymbol.for('can.getValue');
    var onValueSymbol = canSymbol.for('can.onValue');
    var setValueSymbol = canSymbol.for('can.setValue');
    function defaultSetValue(newValue, observable) {
        canReflect.setValue(observable, newValue);
    }
    function turnOffListeningAndUpdate(listenToObservable, updateObservable, updateFunction, queue) {
        if (listenToObservable[onValueSymbol]) {
            canReflect.offValue(listenToObservable, updateFunction, queue);
        }
    }
    function turnOnListeningAndUpdate(listenToObservable, updateObservable, updateFunction, queue) {
        if (listenToObservable[onValueSymbol]) {
            canReflect.onValue(listenToObservable, updateFunction, queue);
        }
    }
    function Semaphore() {
        this.value = 0;
    }
    Object.assign(Semaphore.prototype, {
        decrement: function () {
            this.value -= 1;
        },
        increment: function () {
            this.value += 1;
        }
    });
    function Bind(options) {
        this._options = options;
        if (options.queue === undefined) {
            options.queue = 'domUI';
        }
        if (options.cycles > 0 === false) {
            options.cycles = 0;
        }
        options.onInitDoNotUpdateChild = typeof options.onInitDoNotUpdateChild === 'boolean' ? options.onInitDoNotUpdateChild : false;
        options.onInitSetUndefinedParentIfChildIsDefined = typeof options.onInitSetUndefinedParentIfChildIsDefined === 'boolean' ? options.onInitSetUndefinedParentIfChildIsDefined : true;
        var childSemaphore = new Semaphore();
        var parentSemaphore = new Semaphore();
        var childToParent = true;
        if (typeof options.childToParent === 'boolean') {
            childToParent = options.childToParent;
        } else if (options.child[getValueSymbol] == null) {
            childToParent = false;
        } else if (options.setParent === undefined && options.parent[setValueSymbol] == null) {
            childToParent = false;
        }
        var parentToChild = true;
        if (typeof options.parentToChild === 'boolean') {
            parentToChild = options.parentToChild;
        } else if (options.parent[getValueSymbol] == null) {
            parentToChild = false;
        } else if (options.setChild === undefined && options.child[setValueSymbol] == null) {
            parentToChild = false;
        }
        if (childToParent === false && parentToChild === false) {
            throw new Error('Neither the child nor parent will be updated; this is a no-way binding');
        }
        this._childToParent = childToParent;
        this._parentToChild = parentToChild;
        if (options.setChild === undefined) {
            options.setChild = defaultSetValue;
        }
        if (options.setParent === undefined) {
            options.setParent = defaultSetValue;
        }
        if (options.priority !== undefined) {
            canReflect.setPriority(options.child, options.priority);
            canReflect.setPriority(options.parent, options.priority);
        }
        var allowedUpdates = options.cycles * 2;
        var allowedChildUpdates = allowedUpdates + (options.sticky === 'childSticksToParent' ? 1 : 0);
        var allowedParentUpdates = allowedUpdates + (options.sticky === 'parentSticksToChild' ? 1 : 0);
        var bindingState = this._bindingState = {
            child: false,
            parent: false
        };
        this._updateChild = function (newValue) {
            updateValue({
                bindingState: bindingState,
                newValue: newValue,
                debugObservableName: 'child',
                debugPartnerName: 'parent',
                observable: options.child,
                setValue: options.setChild,
                semaphore: childSemaphore,
                allowedUpdates: allowedChildUpdates,
                sticky: options.sticky === 'parentSticksToChild',
                partner: options.parent,
                setPartner: options.setParent,
                partnerSemaphore: parentSemaphore
            });
        };
        this._updateParent = function (newValue) {
            updateValue({
                bindingState: bindingState,
                newValue: newValue,
                debugObservableName: 'parent',
                debugPartnerName: 'child',
                observable: options.parent,
                setValue: options.setParent,
                semaphore: parentSemaphore,
                allowedUpdates: allowedParentUpdates,
                sticky: options.sticky === 'childSticksToParent',
                partner: options.child,
                setPartner: options.setChild,
                partnerSemaphore: childSemaphore
            });
        };
    }
    Object.defineProperty(Bind.prototype, 'parentValue', {
        get: function () {
            return canReflect.getValue(this._options.parent);
        }
    });
    Object.assign(Bind.prototype, {
        start: function () {
            var childValue;
            var options = this._options;
            var parentValue;
            this.startParent();
            this.startChild();
            if (this._childToParent === true && this._parentToChild === true) {
                parentValue = canReflect.getValue(options.parent);
                if (parentValue === undefined) {
                    childValue = canReflect.getValue(options.child);
                    if (childValue === undefined) {
                        if (options.onInitDoNotUpdateChild === false) {
                            this._updateChild(parentValue);
                        }
                    } else if (options.onInitSetUndefinedParentIfChildIsDefined === true) {
                        this._updateParent(childValue);
                    }
                } else {
                    if (options.onInitDoNotUpdateChild === false) {
                        this._updateChild(parentValue);
                    }
                }
            } else if (this._childToParent === true) {
                childValue = canReflect.getValue(options.child);
                this._updateParent(childValue);
            } else if (this._parentToChild === true) {
                if (options.onInitDoNotUpdateChild === false) {
                    parentValue = canReflect.getValue(options.parent);
                    this._updateChild(parentValue);
                }
            }
        },
        startChild: function () {
            if (this._bindingState.child === false && this._childToParent === true) {
                var options = this._options;
                this._bindingState.child = true;
                turnOnListeningAndUpdate(options.child, options.parent, this._updateParent, options.queue);
            }
        },
        startParent: function () {
            if (this._bindingState.parent === false && this._parentToChild === true) {
                var options = this._options;
                this._bindingState.parent = true;
                turnOnListeningAndUpdate(options.parent, options.child, this._updateChild, options.queue);
            }
        },
        stop: function () {
            var bindingState = this._bindingState;
            var options = this._options;
            if (bindingState.parent === true && this._parentToChild === true) {
                bindingState.parent = false;
                turnOffListeningAndUpdate(options.parent, options.child, this._updateChild, options.queue);
            }
            if (bindingState.child === true && this._childToParent === true) {
                bindingState.child = false;
                turnOffListeningAndUpdate(options.child, options.parent, this._updateParent, options.queue);
            }
        }
    });
    function updateValue(args) {
        var bindingState = args.bindingState;
        if (bindingState.child === false && bindingState.parent === false) {
            return;
        }
        var semaphore = args.semaphore;
        if (semaphore.value + args.partnerSemaphore.value <= args.allowedUpdates) {
            queues.batch.start();
            args.setValue(args.newValue, args.observable);
            semaphore.increment();
            queues.mutateQueue.enqueue(semaphore.decrement, semaphore, []);
            queues.batch.stop();
            if (args.sticky) {
                var observableValue = canReflect.getValue(args.observable);
                if (observableValue !== canReflect.getValue(args.partner)) {
                    args.setPartner(observableValue, args.partner);
                }
            }
        } else {
        }
    }
    module.exports = namespace.Bind = Bind;
});
/*can-simple-observable@2.2.0#make-compute/make-compute*/
define('can-simple-observable@2.2.0#make-compute/make-compute', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var Compute = function (newVal) {
        if (arguments.length) {
            return canReflect.setValue(this, newVal);
        } else {
            return canReflect.getValue(this);
        }
    };
    var translationHelpers = new WeakMap();
    module.exports = function (observable) {
        var compute = Compute.bind(observable);
        compute.on = compute.bind = compute.addEventListener = function (event, handler) {
            var translationHandler = translationHelpers.get(handler);
            if (!translationHandler) {
                translationHandler = function (newVal, oldVal) {
                    handler.call(compute, { type: 'change' }, newVal, oldVal);
                };
                translationHelpers.set(handler, translationHandler);
            }
            canReflect.onValue(observable, translationHandler);
        };
        compute.off = compute.unbind = compute.removeEventListener = function (event, handler) {
            canReflect.offValue(observable, translationHelpers.get(handler));
        };
        canReflect.assignSymbols(compute, {
            'can.getValue': function () {
                return canReflect.getValue(observable);
            },
            'can.setValue': function (newVal) {
                return canReflect.setValue(observable, newVal);
            },
            'can.onValue': function (handler, queue) {
                return canReflect.onValue(observable, handler, queue);
            },
            'can.offValue': function (handler, queue) {
                return canReflect.offValue(observable, handler, queue);
            },
            'can.valueHasDependencies': function () {
                return canReflect.valueHasDependencies(observable);
            },
            'can.getPriority': function () {
                return canReflect.getPriority(observable);
            },
            'can.setPriority': function (newPriority) {
                canReflect.setPriority(observable, newPriority);
            },
            'can.isValueLike': true,
            'can.isFunctionLike': false
        });
        compute.isComputed = true;
        return compute;
    };
});
/*can-util@3.12.0#js/assign/assign*/
define('can-util@3.12.0#js/assign/assign', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-assign'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    module.exports = namespace.assign = require('can-assign');
});
/*can-util@3.12.0#js/is-function/is-function*/
define('can-util@3.12.0#js/is-function/is-function', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var isFunction = function () {
        if (typeof document !== 'undefined' && typeof document.getElementsByTagName('body') === 'function') {
            return function (value) {
                return Object.prototype.toString.call(value) === '[object Function]';
            };
        }
        return function (value) {
            return typeof value === 'function';
        };
    }();
    module.exports = namespace.isFunction = isFunction;
});
/*can-util@3.12.0#js/is-plain-object/is-plain-object*/
define('can-util@3.12.0#js/is-plain-object/is-plain-object', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var core_hasOwn = Object.prototype.hasOwnProperty;
    function isWindow(obj) {
        return obj !== null && obj == obj.window;
    }
    function isPlainObject(obj) {
        if (!obj || typeof obj !== 'object' || obj.nodeType || isWindow(obj) || obj.constructor && obj.constructor.shortName) {
            return false;
        }
        try {
            if (obj.constructor && !core_hasOwn.call(obj, 'constructor') && !core_hasOwn.call(obj.constructor.prototype, 'isPrototypeOf')) {
                return false;
            }
        } catch (e) {
            return false;
        }
        var key;
        for (key in obj) {
        }
        return key === undefined || core_hasOwn.call(obj, key);
    }
    module.exports = namespace.isPlainObject = isPlainObject;
});
/*can-util@3.12.0#js/deep-assign/deep-assign*/
define('can-util@3.12.0#js/deep-assign/deep-assign', [
    'require',
    'exports',
    'module',
    '../is-function/is-function',
    '../is-plain-object/is-plain-object',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var isFunction = require('../is-function/is-function');
    var isPlainObject = require('../is-plain-object/is-plain-object');
    var namespace = require('can-namespace');
    function deepAssign() {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length;
        if (typeof target !== 'object' && !isFunction(target)) {
            target = {};
        }
        if (length === i) {
            target = this;
            --i;
        }
        for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];
                    if (target === copy) {
                        continue;
                    }
                    if (copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && Array.isArray(src) ? src : [];
                        } else {
                            clone = src && isPlainObject(src) ? src : {};
                        }
                        target[name] = deepAssign(clone, copy);
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }
        return target;
    }
    module.exports = namespace.deepAssign = deepAssign;
});
/*can-util@3.12.0#js/dev/dev*/
define('can-util@3.12.0#js/dev/dev', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-log/dev/dev'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    module.exports = namespace.dev = require('can-log/dev/dev');
});
/*can-util@3.12.0#js/is-array-like/is-array-like*/
define('can-util@3.12.0#js/is-array-like/is-array-like', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    function isArrayLike(obj) {
        var type = typeof obj;
        if (type === 'string') {
            return true;
        } else if (type === 'number') {
            return false;
        }
        var length = obj && type !== 'boolean' && typeof obj !== 'number' && 'length' in obj && obj.length;
        return typeof obj !== 'function' && (length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj);
    }
    module.exports = namespace.isArrayLike = isArrayLike;
});
/*can-util@3.12.0#js/is-iterable/is-iterable*/
define('can-util@3.12.0#js/is-iterable/is-iterable', [
    'require',
    'exports',
    'module',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    module.exports = function (obj) {
        return obj && !!obj[canSymbol.iterator || canSymbol.for('iterator')];
    };
});
/*can-util@3.12.0#js/each/each*/
define('can-util@3.12.0#js/each/each', [
    'require',
    'exports',
    'module',
    '../is-array-like/is-array-like',
    '../is-iterable/is-iterable',
    'can-symbol',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var isArrayLike = require('../is-array-like/is-array-like');
    var has = Object.prototype.hasOwnProperty;
    var isIterable = require('../is-iterable/is-iterable');
    var canSymbol = require('can-symbol');
    var namespace = require('can-namespace');
    function each(elements, callback, context) {
        var i = 0, key, len, item;
        if (elements) {
            if (isArrayLike(elements)) {
                for (len = elements.length; i < len; i++) {
                    item = elements[i];
                    if (callback.call(context || item, item, i, elements) === false) {
                        break;
                    }
                }
            } else if (isIterable(elements)) {
                var iter = elements[canSymbol.iterator || canSymbol.for('iterator')]();
                var res, value;
                while (!(res = iter.next()).done) {
                    value = res.value;
                    callback.call(context || elements, Array.isArray(value) ? value[1] : value, value[0]);
                }
            } else if (typeof elements === 'object') {
                for (key in elements) {
                    if (has.call(elements, key) && callback.call(context || elements[key], elements[key], key, elements) === false) {
                        break;
                    }
                }
            }
        }
        return elements;
    }
    module.exports = namespace.each = each;
});
/*can-util@3.12.0#js/make-array/make-array*/
define('can-util@3.12.0#js/make-array/make-array', [
    'require',
    'exports',
    'module',
    '../each/each',
    '../is-array-like/is-array-like',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var each = require('../each/each');
    var isArrayLike = require('../is-array-like/is-array-like');
    var namespace = require('can-namespace');
    function makeArray(element) {
        var ret = [];
        if (isArrayLike(element)) {
            each(element, function (a, i) {
                ret[i] = a;
            });
        } else if (element === 0 || element) {
            ret.push(element);
        }
        return ret;
    }
    module.exports = namespace.makeArray = makeArray;
});
/*can-util@3.12.0#js/is-container/is-container*/
define('can-util@3.12.0#js/is-container/is-container', function (require, exports, module) {
    'use strict';
    module.exports = function (current) {
        return /^f|^o/.test(typeof current);
    };
});
/*can-util@3.12.0#js/get/get*/
define('can-util@3.12.0#js/get/get', [
    'require',
    'exports',
    'module',
    '../is-container/is-container'
], function (require, exports, module) {
    'use strict';
    var isContainer = require('../is-container/is-container');
    function get(obj, name) {
        var parts = typeof name !== 'undefined' ? (name + '').replace(/\[/g, '.').replace(/]/g, '').split('.') : [], length = parts.length, current, i, container;
        if (!length) {
            return obj;
        }
        current = obj;
        for (i = 0; i < length && isContainer(current) && current !== null; i++) {
            container = current;
            current = container[parts[i]];
        }
        return current;
    }
    module.exports = get;
});
/*can-util@3.12.0#js/is-array/is-array*/
define('can-util@3.12.0#js/is-array/is-array', [
    'require',
    'exports',
    'module',
    'can-log/dev/dev',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var dev = require('can-log/dev/dev');
    var namespace = require('can-namespace');
    var hasWarned = false;
    module.exports = namespace.isArray = function (arr) {
        return Array.isArray(arr);
    };
});
/*can-util@3.12.0#js/string/string*/
define('can-util@3.12.0#js/string/string', [
    'require',
    'exports',
    'module',
    '../get/get',
    '../is-container/is-container',
    'can-log/dev/dev',
    '../is-array/is-array',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var get = require('../get/get');
    var isContainer = require('../is-container/is-container');
    var canDev = require('can-log/dev/dev');
    var isArray = require('../is-array/is-array');
    var namespace = require('can-namespace');
    var strUndHash = /_|-/, strColons = /\=\=/, strWords = /([A-Z]+)([A-Z][a-z])/g, strLowUp = /([a-z\d])([A-Z])/g, strDash = /([a-z\d])([A-Z])/g, strReplacer = /\{([^\}]+)\}/g, strQuote = /"/g, strSingleQuote = /'/g, strHyphenMatch = /-+(.)?/g, strCamelMatch = /[a-z][A-Z]/g, convertBadValues = function (content) {
            var isInvalid = content === null || content === undefined || isNaN(content) && '' + content === 'NaN';
            return '' + (isInvalid ? '' : content);
        }, deleteAtPath = function (data, path) {
            var parts = path ? path.replace(/\[/g, '.').replace(/]/g, '').split('.') : [];
            var current = data;
            for (var i = 0; i < parts.length - 1; i++) {
                if (current) {
                    current = current[parts[i]];
                }
            }
            if (current) {
                delete current[parts[parts.length - 1]];
            }
        };
    var string = {
        esc: function (content) {
            return convertBadValues(content).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(strQuote, '&#34;').replace(strSingleQuote, '&#39;');
        },
        getObject: function (name, roots) {
            roots = isArray(roots) ? roots : [roots || window];
            var result, l = roots.length;
            for (var i = 0; i < l; i++) {
                result = get(roots[i], name);
                if (result) {
                    return result;
                }
            }
        },
        capitalize: function (s, cache) {
            return s.charAt(0).toUpperCase() + s.slice(1);
        },
        camelize: function (str) {
            return convertBadValues(str).replace(strHyphenMatch, function (match, chr) {
                return chr ? chr.toUpperCase() : '';
            });
        },
        hyphenate: function (str) {
            return convertBadValues(str).replace(strCamelMatch, function (str, offset) {
                return str.charAt(0) + '-' + str.charAt(1).toLowerCase();
            });
        },
        underscore: function (s) {
            return s.replace(strColons, '/').replace(strWords, '$1_$2').replace(strLowUp, '$1_$2').replace(strDash, '_').toLowerCase();
        },
        sub: function (str, data, remove) {
            var obs = [];
            str = str || '';
            obs.push(str.replace(strReplacer, function (whole, inside) {
                var ob = get(data, inside);
                if (remove === true) {
                    deleteAtPath(data, inside);
                }
                if (ob === undefined || ob === null) {
                    obs = null;
                    return '';
                }
                if (isContainer(ob) && obs) {
                    obs.push(ob);
                    return '';
                }
                return '' + ob;
            }));
            return obs === null ? obs : obs.length <= 1 ? obs[0] : obs;
        },
        replaceWith: function (str, data, replacer, shouldRemoveMatchedPaths) {
            return str.replace(strReplacer, function (whole, path) {
                var value = get(data, path);
                if (shouldRemoveMatchedPaths) {
                    deleteAtPath(data, path);
                }
                return replacer(path, value);
            });
        },
        replacer: strReplacer,
        undHash: strUndHash
    };
    module.exports = namespace.string = string;
});
/*can-construct@3.3.1#can-construct*/
define('can-construct@3.3.1#can-construct', [
    'require',
    'exports',
    'module',
    'can-util/js/assign/assign',
    'can-util/js/deep-assign/deep-assign',
    'can-util/js/dev/dev',
    'can-util/js/make-array/make-array',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var assign = require('can-util/js/assign/assign');
    var deepAssign = require('can-util/js/deep-assign/deep-assign');
    var dev = require('can-util/js/dev/dev');
    var makeArray = require('can-util/js/make-array/make-array');
    var namespace = require('can-namespace');
    var initializing = 0;
    var Construct = function () {
        if (arguments.length) {
            return Construct.extend.apply(Construct, arguments);
        }
    };
    var canGetDescriptor;
    try {
        Object.getOwnPropertyDescriptor({});
        canGetDescriptor = true;
    } catch (e) {
        canGetDescriptor = false;
    }
    var getDescriptor = function (newProps, name) {
            var descriptor = Object.getOwnPropertyDescriptor(newProps, name);
            if (descriptor && (descriptor.get || descriptor.set)) {
                return descriptor;
            }
            return null;
        }, inheritGetterSetter = function (newProps, oldProps, addTo) {
            addTo = addTo || newProps;
            var descriptor;
            for (var name in newProps) {
                if (descriptor = getDescriptor(newProps, name)) {
                    this._defineProperty(addTo, oldProps, name, descriptor);
                } else {
                    Construct._overwrite(addTo, oldProps, name, newProps[name]);
                }
            }
        }, simpleInherit = function (newProps, oldProps, addTo) {
            addTo = addTo || newProps;
            for (var name in newProps) {
                Construct._overwrite(addTo, oldProps, name, newProps[name]);
            }
        };
    assign(Construct, {
        constructorExtends: true,
        newInstance: function () {
            var inst = this.instance(), args;
            if (inst.setup) {
                Object.defineProperty(inst, '__inSetup', {
                    configurable: true,
                    enumerable: false,
                    value: true,
                    writable: true
                });
                args = inst.setup.apply(inst, arguments);
                if (args instanceof Construct.ReturnValue) {
                    return args.value;
                }
                inst.__inSetup = false;
            }
            if (inst.init) {
                inst.init.apply(inst, args || arguments);
            }
            return inst;
        },
        _inherit: canGetDescriptor ? inheritGetterSetter : simpleInherit,
        _defineProperty: function (what, oldProps, propName, descriptor) {
            Object.defineProperty(what, propName, descriptor);
        },
        _overwrite: function (what, oldProps, propName, val) {
            Object.defineProperty(what, propName, {
                value: val,
                configurable: true,
                enumerable: true,
                writable: true
            });
        },
        setup: function (base) {
            this.defaults = deepAssign(true, {}, base.defaults, this.defaults);
        },
        instance: function () {
            initializing = 1;
            var inst = new this();
            initializing = 0;
            return inst;
        },
        extend: function (name, staticProperties, instanceProperties) {
            var shortName = name, klass = staticProperties, proto = instanceProperties;
            if (typeof shortName !== 'string') {
                proto = klass;
                klass = shortName;
                shortName = null;
            }
            if (!proto) {
                proto = klass;
                klass = null;
            }
            proto = proto || {};
            var _super_class = this, _super = this.prototype, Constructor, prototype;
            prototype = this.instance();
            Construct._inherit(proto, _super, prototype);
            if (shortName) {
            } else if (klass && klass.shortName) {
                shortName = klass.shortName;
            } else if (this.shortName) {
                shortName = this.shortName;
            }
            function init() {
                if (!initializing) {
                    return (!this || this.constructor !== Constructor) && arguments.length && Constructor.constructorExtends ? Constructor.extend.apply(Constructor, arguments) : Constructor.newInstance.apply(Constructor, arguments);
                }
            }
            Constructor = typeof namedCtor === 'function' ? namedCtor(constructorName, init) : function () {
                return init.apply(this, arguments);
            };
            for (var propName in _super_class) {
                if (_super_class.hasOwnProperty(propName)) {
                    Constructor[propName] = _super_class[propName];
                }
            }
            Construct._inherit(klass, _super_class, Constructor);
            assign(Constructor, {
                constructor: Constructor,
                prototype: prototype
            });
            if (shortName !== undefined) {
                if (Object.getOwnPropertyDescriptor) {
                    var desc = Object.getOwnPropertyDescriptor(Constructor, 'name');
                    if (!desc || desc.configurable) {
                        Object.defineProperty(Constructor, 'name', {
                            writable: true,
                            value: shortName,
                            configurable: true
                        });
                    }
                }
                Constructor.shortName = shortName;
            }
            Constructor.prototype.constructor = Constructor;
            var t = [_super_class].concat(makeArray(arguments)), args = Constructor.setup.apply(Constructor, t);
            if (Constructor.init) {
                Constructor.init.apply(Constructor, args || t);
            }
            return Constructor;
        },
        ReturnValue: function (value) {
            this.value = value;
        }
    });
    Construct.prototype.setup = function () {
    };
    Construct.prototype.init = function () {
    };
    module.exports = namespace.Construct = Construct;
});
/*can-simple-map@4.2.0#can-simple-map*/
define('can-simple-map@4.2.0#can-simple-map', [
    'require',
    'exports',
    'module',
    'can-construct',
    'can-event-queue/map/map',
    'can-queues',
    'can-observation-recorder',
    'can-reflect',
    'can-log/dev/dev',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var Construct = require('can-construct');
    var eventQueue = require('can-event-queue/map/map');
    var queues = require('can-queues');
    var ObservationRecorder = require('can-observation-recorder');
    var canReflect = require('can-reflect');
    var dev = require('can-log/dev/dev');
    var canSymbol = require('can-symbol');
    var ensureMeta = function ensureMeta(obj) {
        var metaSymbol = canSymbol.for('can.meta');
        var meta = obj[metaSymbol];
        if (!meta) {
            meta = {};
            canReflect.setKeyValue(obj, metaSymbol, meta);
        }
        return meta;
    };
    var SimpleMap = Construct.extend('SimpleMap', {
        setup: function (initialData) {
            this._data = {};
            if (initialData && typeof initialData === 'object') {
                this.attr(initialData);
            }
        },
        attr: function (prop, value) {
            var self = this;
            if (arguments.length === 0) {
                ObservationRecorder.add(this, 'can.keys');
                var data = {};
                canReflect.eachKey(this._data, function (value, prop) {
                    ObservationRecorder.add(this, prop);
                    data[prop] = value;
                }, this);
                return data;
            } else if (arguments.length > 1) {
                var had = this._data.hasOwnProperty(prop);
                var old = this._data[prop];
                this._data[prop] = value;
                if (old !== value) {
                    var dispatched = {
                        keyChanged: !had ? prop : undefined,
                        type: prop
                    };
                    this.dispatch(dispatched, [
                        value,
                        old
                    ]);
                }
            } else if (typeof prop === 'object') {
                queues.batch.start();
                canReflect.eachKey(prop, function (value, key) {
                    self.attr(key, value);
                });
                queues.batch.stop();
            } else {
                if (prop !== 'constructor') {
                    ObservationRecorder.add(this, prop);
                    return this._data[prop];
                }
                return this.constructor;
            }
        },
        serialize: function () {
            return canReflect.serialize(this, Map);
        },
        get: function () {
            return this.attr.apply(this, arguments);
        },
        set: function () {
            return this.attr.apply(this, arguments);
        },
        log: function (key) {
        }
    });
    eventQueue(SimpleMap.prototype);
    var simpleMapProto = {
        'can.isMapLike': true,
        'can.isListLike': false,
        'can.isValueLike': false,
        'can.getKeyValue': SimpleMap.prototype.get,
        'can.setKeyValue': SimpleMap.prototype.set,
        'can.deleteKeyValue': function (prop) {
            var dispatched;
            if (this._data.hasOwnProperty(prop)) {
                var old = this._data[prop];
                delete this._data[prop];
                dispatched = {
                    keyChanged: prop,
                    type: prop
                };
                this.dispatch(dispatched, [
                    undefined,
                    old
                ]);
            }
        },
        'can.getOwnEnumerableKeys': function () {
            ObservationRecorder.add(this, 'can.keys');
            return Object.keys(this._data);
        },
        'can.assignDeep': function (source) {
            queues.batch.start();
            canReflect.assignMap(this, source);
            queues.batch.stop();
        },
        'can.updateDeep': function (source) {
            queues.batch.start();
            canReflect.updateMap(this, source);
            queues.batch.stop();
        },
        'can.keyHasDependencies': function (key) {
            return false;
        },
        'can.getKeyDependencies': function (key) {
            return undefined;
        }
    };
    canReflect.assignSymbols(SimpleMap.prototype, simpleMapProto);
    module.exports = SimpleMap;
});
/*can-simple-observable@2.2.0#log*/
define('can-simple-observable@2.2.0#log', [
    'require',
    'exports',
    'module',
    'can-log/dev/dev',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var dev = require('can-log/dev/dev');
    var canReflect = require('can-reflect');
    function quoteString(x) {
        return typeof x === 'string' ? JSON.stringify(x) : x;
    }
    module.exports = function log() {
    };
});
/*can-simple-observable@2.2.0#can-simple-observable*/
define('can-simple-observable@2.2.0#can-simple-observable', [
    'require',
    'exports',
    'module',
    './log',
    'can-namespace',
    'can-symbol',
    'can-reflect',
    'can-observation-recorder',
    'can-event-queue/value/value'
], function (require, exports, module) {
    'use strict';
    var log = require('./log');
    var ns = require('can-namespace');
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    var ObservationRecorder = require('can-observation-recorder');
    var valueEventBindings = require('can-event-queue/value/value');
    var dispatchSymbol = canSymbol.for('can.dispatch');
    function SimpleObservable(initialValue) {
        this.value = initialValue;
    }
    valueEventBindings(SimpleObservable.prototype);
    Object.assign(SimpleObservable.prototype, {
        log: log,
        get: function () {
            ObservationRecorder.add(this);
            return this.value;
        },
        set: function (value) {
            var old = this.value;
            this.value = value;
            this[dispatchSymbol](value, old);
        }
    });
    var simpleObservableProto = {
        'can.getValue': SimpleObservable.prototype.get,
        'can.setValue': SimpleObservable.prototype.set,
        'can.isMapLike': false,
        'can.valueHasDependencies': function () {
            return true;
        }
    };
    canReflect.assignSymbols(SimpleObservable.prototype, simpleObservableProto);
    module.exports = ns.SimpleObservable = SimpleObservable;
});
/*can-route@4.3.0#src/binding-proxy*/
define('can-route@4.3.0#src/binding-proxy', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-symbol',
    'can-simple-observable'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var SimpleObservable = require('can-simple-observable');
    var urlDataObservable = new SimpleObservable(null);
    var bindingProxy = {
        defaultBinding: null,
        urlDataObservable: urlDataObservable,
        bindings: {},
        call: function () {
            var args = canReflect.toArray(arguments), prop = args.shift(), binding = urlDataObservable.value;
            if (binding === null) {
                throw new Error('there is no current binding!!!');
            }
            var method = binding[prop.indexOf('can.') === 0 ? canSymbol.for(prop) : prop];
            if (method.apply) {
                return method.apply(binding, args);
            } else {
                return method;
            }
        }
    };
    module.exports = bindingProxy;
});
/*can-route@4.3.0#src/regexps*/
define('can-route@4.3.0#src/regexps', function (require, exports, module) {
    'use strict';
    module.exports = {
        curlies: /\{\s*([\w.]+)\s*\}/g,
        colon: /\:([\w.]+)/g
    };
});
/*can-diff@1.4.4#list/list*/
define('can-diff@1.4.4#list/list', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var slice = [].slice;
    function defaultIdentity(a, b) {
        return a === b;
    }
    function makeIdentityFromMapSchema(typeSchema) {
        if (typeSchema.identity && typeSchema.identity.length) {
            return function identityCheck(a, b) {
                var aId = canReflect.getIdentity(a, typeSchema), bId = canReflect.getIdentity(b, typeSchema);
                return aId === bId;
            };
        } else {
            return defaultIdentity;
        }
    }
    function makeIdentityFromListSchema(listSchema) {
        return listSchema.values != null ? makeIdentityFromMapSchema(canReflect.getSchema(listSchema.values)) : defaultIdentity;
    }
    function makeIdentity(oldList, oldListLength) {
        var listSchema = canReflect.getSchema(oldList), typeSchema;
        if (listSchema != null) {
            if (listSchema.values != null) {
                typeSchema = canReflect.getSchema(listSchema.values);
            } else {
                return defaultIdentity;
            }
        }
        if (typeSchema == null && oldListLength > 0) {
            typeSchema = canReflect.getSchema(canReflect.getKeyValue(oldList, 0));
        }
        if (typeSchema) {
            return makeIdentityFromMapSchema(typeSchema);
        } else {
            return defaultIdentity;
        }
    }
    function reverseDiff(oldDiffStopIndex, newDiffStopIndex, oldList, newList, identity) {
        var oldIndex = oldList.length - 1, newIndex = newList.length - 1;
        while (oldIndex > oldDiffStopIndex && newIndex > newDiffStopIndex) {
            var oldItem = oldList[oldIndex], newItem = newList[newIndex];
            if (identity(oldItem, newItem, oldIndex)) {
                oldIndex--;
                newIndex--;
                continue;
            } else {
                return [{
                        type: 'splice',
                        index: newDiffStopIndex,
                        deleteCount: oldIndex - oldDiffStopIndex + 1,
                        insert: slice.call(newList, newDiffStopIndex, newIndex + 1)
                    }];
            }
        }
        return [{
                type: 'splice',
                index: newDiffStopIndex,
                deleteCount: oldIndex - oldDiffStopIndex + 1,
                insert: slice.call(newList, newDiffStopIndex, newIndex + 1)
            }];
    }
    module.exports = function (oldList, newList, schemaOrIdentity) {
        var oldIndex = 0, newIndex = 0, oldLength = canReflect.size(oldList), newLength = canReflect.size(newList), patches = [];
        var schemaType = typeof schemaOrIdentity, identity;
        if (schemaType === 'function') {
            identity = schemaOrIdentity;
        } else if (schemaOrIdentity != null) {
            if (schemaOrIdentity.type === 'map') {
                identity = makeIdentityFromMapSchema(schemaOrIdentity);
            } else {
                identity = makeIdentityFromListSchema(schemaOrIdentity);
            }
        } else {
            identity = makeIdentity(oldList, oldLength);
        }
        while (oldIndex < oldLength && newIndex < newLength) {
            var oldItem = oldList[oldIndex], newItem = newList[newIndex];
            if (identity(oldItem, newItem, oldIndex)) {
                oldIndex++;
                newIndex++;
                continue;
            }
            if (newIndex + 1 < newLength && identity(oldItem, newList[newIndex + 1], oldIndex)) {
                patches.push({
                    index: newIndex,
                    deleteCount: 0,
                    insert: [newList[newIndex]],
                    type: 'splice'
                });
                oldIndex++;
                newIndex += 2;
                continue;
            } else if (oldIndex + 1 < oldLength && identity(oldList[oldIndex + 1], newItem, oldIndex + 1)) {
                patches.push({
                    index: newIndex,
                    deleteCount: 1,
                    insert: [],
                    type: 'splice'
                });
                oldIndex += 2;
                newIndex++;
                continue;
            } else {
                patches.push.apply(patches, reverseDiff(oldIndex, newIndex, oldList, newList, identity));
                return patches;
            }
        }
        if (newIndex === newLength && oldIndex === oldLength) {
            return patches;
        }
        patches.push({
            type: 'splice',
            index: newIndex,
            deleteCount: oldLength - oldIndex,
            insert: slice.call(newList, newIndex)
        });
        return patches;
    };
});
/*can-diff@1.4.4#map/map*/
define('can-diff@1.4.4#map/map', [
    'require',
    'exports',
    'module',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    function defaultIdentity(a, b) {
        return a === b;
    }
    module.exports = function (oldObject, newObject) {
        var oldObjectClone, patches = [];
        oldObjectClone = canReflect.assignMap({}, oldObject);
        canReflect.eachKey(newObject, function (value, newProp) {
            if (!oldObject || !oldObject.hasOwnProperty(newProp)) {
                patches.push({
                    key: newProp,
                    type: 'add',
                    value: value
                });
            } else if (newObject[newProp] !== oldObject[newProp]) {
                patches.push({
                    key: newProp,
                    type: 'set',
                    value: value
                });
            }
            delete oldObjectClone[newProp];
        });
        for (var oldProp in oldObjectClone) {
            patches.push({
                key: oldProp,
                type: 'delete'
            });
        }
        return patches;
    };
});
/*can-route@4.3.0#src/register*/
define('can-route@4.3.0#src/register', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-log/dev/dev',
    './binding-proxy',
    './regexps',
    'can-diff/list/list',
    'can-diff/map/map'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var dev = require('can-log/dev/dev');
    var bindingProxy = require('./binding-proxy');
    var regexps = require('./regexps');
    var diff = require('can-diff/list/list');
    var diffObject = require('can-diff/map/map');
    var removeBackslash = function (str) {
        return str.replace(/\\/g, '');
    };
    var wrapQuote = function (str) {
        return (str + '').replace(/([.?*+\^$\[\]\\(){}|\-])/g, '\\$1');
    };
    var RouteRegistry = {
        routes: {},
        register: function registerRoute(url, defaults) {
            var root = bindingProxy.call('root');
            if (root.lastIndexOf('/') === root.length - 1 && url.indexOf('/') === 0) {
                url = url.substr(1);
            }
            defaults = defaults || {};
            var names = [], res, test = '', matcher, lastIndex, next, querySeparator = bindingProxy.call('querySeparator'), matchSlashes = bindingProxy.call('matchSlashes');
            if (regexps.colon.test(url)) {
                matcher = regexps.colon;
            } else {
                matcher = regexps.curlies;
            }
            lastIndex = matcher.lastIndex = 0;
            while (res = matcher.exec(url)) {
                names.push(res[1]);
                test += removeBackslash(url.substring(lastIndex, matcher.lastIndex - res[0].length));
                next = '\\' + (removeBackslash(url.substr(matcher.lastIndex, 1)) || querySeparator + (matchSlashes ? '' : '|/'));
                test += '([^' + next + ']' + (defaults[res[1]] ? '*' : '+') + ')';
                lastIndex = matcher.lastIndex;
            }
            test += url.substr(lastIndex).replace('\\', '');
            return RouteRegistry.routes[url] = {
                test: new RegExp('^' + test + '($|' + wrapQuote(querySeparator) + ')'),
                route: url,
                names: names,
                defaults: defaults,
                length: url.split('/').length
            };
        }
    };
    module.exports = RouteRegistry;
});
/*can-deparam@1.2.0#can-deparam*/
define('can-deparam@1.2.0#can-deparam', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var digitTest = /^\d+$/, keyBreaker = /([^\[\]]+)|(\[\])/g, paramTest = /([^?#]*)(#.*)?$/, entityRegex = /%([^0-9a-f][0-9a-f]|[0-9a-f][^0-9a-f]|[^0-9a-f][^0-9a-f])/i, prep = function (str) {
            str = str.replace(/\+/g, ' ');
            try {
                return decodeURIComponent(str);
            } catch (e) {
                return decodeURIComponent(str.replace(entityRegex, function (match, hex) {
                    return '%25' + hex;
                }));
            }
        };
    function isArrayLikeName(name) {
        return digitTest.test(name) || name === '[]';
    }
    function idenity(value) {
        return value;
    }
    module.exports = namespace.deparam = function (params, valueDeserializer) {
        valueDeserializer = valueDeserializer || idenity;
        var data = {}, pairs, lastPart;
        if (params && paramTest.test(params)) {
            pairs = params.split('&');
            pairs.forEach(function (pair) {
                var parts = pair.split('='), key = prep(parts.shift()), value = prep(parts.join('=')), current = data;
                if (key) {
                    parts = key.match(keyBreaker);
                    for (var j = 0, l = parts.length - 1; j < l; j++) {
                        var currentName = parts[j], nextName = parts[j + 1], currentIsArray = isArrayLikeName(currentName) && current instanceof Array;
                        if (!current[currentName]) {
                            if (currentIsArray) {
                                current.push(isArrayLikeName(nextName) ? [] : {});
                            } else {
                                current[currentName] = isArrayLikeName(nextName) ? [] : {};
                            }
                        }
                        if (currentIsArray) {
                            current = current[current.length - 1];
                        } else {
                            current = current[currentName];
                        }
                    }
                    lastPart = parts.pop();
                    if (isArrayLikeName(lastPart)) {
                        current.push(valueDeserializer(value));
                    } else {
                        current[lastPart] = valueDeserializer(value);
                    }
                }
            });
        }
        return data;
    };
});
/*can-route@4.3.0#src/deparam*/
define('can-route@4.3.0#src/deparam', [
    'require',
    'exports',
    'module',
    'can-deparam',
    'can-reflect',
    './binding-proxy',
    './register'
], function (require, exports, module) {
    'use strict';
    var deparam = require('can-deparam');
    var canReflect = require('can-reflect');
    var bindingProxy = require('./binding-proxy');
    var register = require('./register');
    var decode = function (str) {
        try {
            return decodeURIComponent(str);
        } catch (ex) {
            return unescape(str);
        }
    };
    function toURLFragment(url) {
        var root = bindingProxy.call('root');
        if (root.lastIndexOf('/') === root.length - 1 && url.indexOf('/') === 0) {
            url = url.substr(1);
        }
        return url;
    }
    function canRoute_getRule(url) {
        url = toURLFragment(url);
        var route = { length: -1 };
        canReflect.eachKey(register.routes, function (temp, name) {
            if (temp.test.test(url) && temp.length > route.length) {
                route = temp;
            }
        });
        if (route.length > -1) {
            return route;
        }
    }
    function canRoute_deparam(url) {
        var route = canRoute_getRule(url), querySeparator = bindingProxy.call('querySeparator'), paramsMatcher = bindingProxy.call('paramsMatcher');
        url = toURLFragment(url);
        if (route) {
            var parts = url.match(route.test), start = parts.shift(), remainder = url.substr(start.length - (parts[parts.length - 1] === querySeparator ? 1 : 0)), obj = remainder && paramsMatcher.test(remainder) ? deparam(remainder.slice(1)) : {};
            obj = canReflect.assignDeep(canReflect.assignDeep({}, route.defaults), obj);
            parts.forEach(function (part, i) {
                if (part && part !== querySeparator) {
                    obj[route.names[i]] = decode(part);
                }
            });
            return obj;
        }
        if (url.charAt(0) !== querySeparator) {
            url = querySeparator + url;
        }
        return paramsMatcher.test(url) ? deparam(url.slice(1)) : {};
    }
    canRoute_deparam.getRule = canRoute_getRule;
    module.exports = canRoute_deparam;
});
/*can-param@1.1.0#can-param*/
define('can-param@1.1.0#can-param', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    function buildParam(prefix, obj, add) {
        if (Array.isArray(obj)) {
            for (var i = 0, l = obj.length; i < l; ++i) {
                buildParam(prefix + '[]', obj[i], add);
            }
        } else if (obj && typeof obj === 'object') {
            for (var name in obj) {
                buildParam(prefix + '[' + name + ']', obj[name], add);
            }
        } else {
            add(prefix, obj);
        }
    }
    module.exports = namespace.param = function param(object) {
        var pairs = [], add = function (key, value) {
                pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
            };
        for (var name in object) {
            buildParam(name, object[name], add);
        }
        return pairs.join('&').replace(/%20/g, '+');
    };
});
/*can-route@4.3.0#src/param*/
define('can-route@4.3.0#src/param', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-param',
    './register',
    './regexps',
    './binding-proxy'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var param = require('can-param');
    var register = require('./register');
    var regexps = require('./regexps');
    var bindingProxy = require('./binding-proxy');
    var matchesData = function (route, data) {
        var count = 0, i = 0, defaults = {};
        for (var name in route.defaults) {
            if (route.defaults[name] === data[name]) {
                defaults[name] = 1;
                count++;
            }
        }
        for (; i < route.names.length; i++) {
            if (!data.hasOwnProperty(route.names[i])) {
                return -1;
            }
            if (!defaults[route.names[i]]) {
                count++;
            }
        }
        return count;
    };
    function getMatchedRoute(data, routeName) {
        var route, matches = 0, matchCount, propCount = 0;
        delete data.route;
        canReflect.eachKey(data, function () {
            propCount++;
        });
        canReflect.eachKey(register.routes, function (temp, name) {
            matchCount = matchesData(temp, data);
            if (matchCount > matches) {
                route = temp;
                matches = matchCount;
            }
            if (matchCount >= propCount) {
                return false;
            }
        });
        if (register.routes[routeName] && matchesData(register.routes[routeName], data) === matches) {
            route = register.routes[routeName];
        }
        return route;
    }
    function paramFromRoute(route, data) {
        var cpy, res, after, matcher;
        if (route) {
            cpy = canReflect.assignMap({}, data);
            matcher = regexps.colon.test(route.route) ? regexps.colon : regexps.curlies;
            res = route.route.replace(matcher, function (whole, name) {
                delete cpy[name];
                return data[name] === route.defaults[name] ? '' : encodeURIComponent(data[name]);
            }).replace('\\', '');
            canReflect.eachKey(route.defaults, function (val, name) {
                if (cpy[name] === val) {
                    delete cpy[name];
                }
            });
            after = param(cpy);
            return res + (after ? bindingProxy.call('querySeparator') + after : '');
        }
        return canReflect.size(data) === 0 ? '' : bindingProxy.call('querySeparator') + param(data);
    }
    function canRoute_param(data, currentRouteName) {
        return paramFromRoute(getMatchedRoute(data, currentRouteName), data);
    }
    module.exports = canRoute_param;
    canRoute_param.paramFromRoute = paramFromRoute;
    canRoute_param.getMatchedRoute = getMatchedRoute;
});
/*can-route@4.3.0#src/url-helpers*/
define('can-route@4.3.0#src/url-helpers', [
    'require',
    'exports',
    'module',
    './binding-proxy',
    './deparam',
    './param',
    'can-reflect',
    'can-string'
], function (require, exports, module) {
    'use strict';
    var bindingProxy = require('./binding-proxy');
    var routeDeparam = require('./deparam');
    var routeParam = require('./param');
    var canReflect = require('can-reflect');
    var string = require('can-string');
    var makeProps = function (props) {
        var tags = [];
        canReflect.eachKey(props, function (val, name) {
            tags.push((name === 'className' ? 'class' : name) + '="' + (name === 'href' ? val : string.esc(val)) + '"');
        });
        return tags.join(' ');
    };
    var matchCheck = function (source, matcher) {
        for (var prop in source) {
            var s = source[prop], m = matcher[prop];
            if (s && m && typeof s === 'object' && typeof matcher === 'object') {
                return matchCheck(s, m);
            }
            if (s != m) {
                return false;
            }
        }
        return true;
    };
    function canRoute_url(options, merge) {
        if (merge) {
            var baseOptions = routeDeparam(bindingProxy.call('can.getValue'));
            options = canReflect.assignMap(canReflect.assignMap({}, baseOptions), options);
        }
        return bindingProxy.call('root') + routeParam(options);
    }
    module.exports = {
        url: canRoute_url,
        link: function canRoute_link(name, options, props, merge) {
            return '<a ' + makeProps(canReflect.assignMap({ href: canRoute_url(options, merge) }, props)) + '>' + name + '</a>';
        },
        isCurrent: function canRoute_isCurrent(options, subsetMatch) {
            if (subsetMatch) {
                var baseOptions = routeDeparam(bindingProxy.call('can.getValue'));
                return matchCheck(options, baseOptions);
            } else {
                return bindingProxy.call('can.getValue') === routeParam(options);
            }
        }
    };
});
/*can-globals@1.2.0#location/location*/
define('can-globals@1.2.0#location/location', [
    'require',
    'exports',
    'module',
    'can-globals/global/global',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        require('can-globals/global/global');
        var globals = require('can-globals/can-globals-instance');
        globals.define('location', function () {
            return globals.getKeyValue('global').location;
        });
        module.exports = globals.makeExport('location');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-route-hash@1.0.1#can-route-hash*/
define('can-route-hash@1.0.1#can-route-hash', [
    'require',
    'exports',
    'module',
    'can-globals/location/location',
    'can-reflect',
    'can-observation-recorder',
    'can-queues',
    'can-key-tree',
    'can-simple-observable',
    'can-dom-events'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        var paramsMatcher = /^(?:&[^=]+=[^&]*)+/;
        var LOCATION = require('can-globals/location/location');
        var canReflect = require('can-reflect');
        var ObservationRecorder = require('can-observation-recorder');
        var queues = require('can-queues');
        var KeyTree = require('can-key-tree');
        var SimpleObservable = require('can-simple-observable');
        var domEvents = require('can-dom-events');
        function getHash() {
            var loc = LOCATION();
            return loc.href.split(/#!?/)[1] || '';
        }
        function HashchangeObservable() {
            var dispatchHandlers = this.dispatchHandlers.bind(this);
            var self = this;
            this._value = '';
            this.handlers = new KeyTree([
                Object,
                Array
            ], {
                onFirst: function () {
                    self._value = getHash();
                    domEvents.addEventListener(window, 'hashchange', dispatchHandlers);
                },
                onEmpty: function () {
                    domEvents.removeEventListener(window, 'hashchange', dispatchHandlers);
                }
            });
        }
        HashchangeObservable.prototype = Object.create(SimpleObservable.prototype);
        HashchangeObservable.constructor = HashchangeObservable;
        canReflect.assign(HashchangeObservable.prototype, {
            paramsMatcher: paramsMatcher,
            querySeparator: '&',
            matchSlashes: false,
            root: '#!',
            dispatchHandlers: function () {
                var old = this._value;
                this._value = getHash();
                if (old !== this._value) {
                    queues.enqueueByQueue(this.handlers.getNode([]), this, [
                        this._value,
                        old
                    ]);
                }
            },
            get: function () {
                ObservationRecorder.add(this);
                return getHash();
            },
            set: function (path) {
                var loc = LOCATION();
                if (!path && !loc.hash) {
                } else if (loc.hash !== '#' + path) {
                    loc.hash = '!' + path;
                }
                return path;
            }
        });
        Object.defineProperty(HashchangeObservable.prototype, 'value', {
            get: function () {
                return canReflect.getValue(this);
            },
            set: function (value) {
                canReflect.setValue(this, value);
            }
        });
        canReflect.assignSymbols(HashchangeObservable.prototype, {
            'can.getValue': HashchangeObservable.prototype.get,
            'can.setValue': HashchangeObservable.prototype.set,
            'can.onValue': HashchangeObservable.prototype.on,
            'can.offValue': HashchangeObservable.prototype.off,
            'can.isMapLike': false,
            'can.valueHasDependencies': function () {
                return true;
            }
        });
        module.exports = HashchangeObservable;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.0#is-web-worker/is-web-worker*/
define('can-globals@1.2.0#is-web-worker/is-web-worker', [
    'require',
    'exports',
    'module',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('can-globals/can-globals-instance');
        var funcConstructor = Function;
        globals.define('isWebWorker', function () {
            var global = funcConstructor('return this')();
            return typeof WorkerGlobalScope !== 'undefined' && global instanceof WorkerGlobalScope;
        });
        module.exports = globals.makeExport('isWebWorker');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-route@4.3.0#can-route*/
define('can-route@4.3.0#can-route', [
    'require',
    'exports',
    'module',
    'can-bind',
    'can-queues',
    'can-observation',
    'can-namespace',
    'can-log/dev/dev',
    'can-reflect',
    'can-symbol',
    'can-simple-observable/make-compute/make-compute',
    'can-simple-map',
    './src/register',
    './src/url-helpers',
    './src/param',
    './src/deparam',
    './src/binding-proxy',
    'can-route-hash',
    'can-globals/is-web-worker/is-web-worker',
    'can-globals/is-browser-window/is-browser-window'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var Bind = require('can-bind');
        var queues = require('can-queues');
        var Observation = require('can-observation');
        var namespace = require('can-namespace');
        var devLog = require('can-log/dev/dev');
        var canReflect = require('can-reflect');
        var canSymbol = require('can-symbol');
        var makeCompute = require('can-simple-observable/make-compute/make-compute');
        var SimpleMap = require('can-simple-map');
        var registerRoute = require('./src/register');
        var urlHelpers = require('./src/url-helpers');
        var routeParam = require('./src/param');
        var routeDeparam = require('./src/deparam');
        var bindingProxy = require('./src/binding-proxy');
        var Hashchange = require('can-route-hash');
        var isWebWorker = require('can-globals/is-web-worker/is-web-worker');
        var isBrowserWindow = require('can-globals/is-browser-window/is-browser-window');
        var hashchangeObservable = new Hashchange();
        bindingProxy.bindings.hashchange = hashchangeObservable;
        bindingProxy.defaultBinding = 'hashchange';
        bindingProxy.urlDataObservable.value = hashchangeObservable;
        function canRoute(url, defaults) {
            registerRoute.register(url, defaults);
            return canRoute;
        }
        var timer;
        var currentRuleObservable = new Observation(function canRoute_matchedRoute() {
            var url = bindingProxy.call('can.getValue');
            return canRoute.rule(url);
        });
        function updateUrl(serializedData) {
            clearTimeout(timer);
            timer = setTimeout(function () {
                var serialized = canReflect.serialize(canRoute.data), currentRouteName = currentRuleObservable.get(), route = routeParam.getMatchedRoute(serialized, currentRouteName), path = routeParam.paramFromRoute(route, serialized);
                bindingProxy.call('can.setValue', path);
            }, 10);
        }
        function updateRouteData() {
            var hash = bindingProxy.call('can.getValue');
            queues.batch.start();
            var state = canRoute.deparam(hash);
            delete state.route;
            canReflect.update(canRoute.data, state);
            queues.batch.stop();
        }
        Object.defineProperty(canRoute, 'routes', {
            get: function () {
                return registerRoute.routes;
            },
            set: function (newVal) {
                return registerRoute.routes = newVal;
            }
        });
        Object.defineProperty(canRoute, 'defaultBinding', {
            get: function () {
                return bindingProxy.defaultBinding;
            },
            set: function (newVal) {
                bindingProxy.defaultBinding = newVal;
                var observable = bindingProxy.bindings[bindingProxy.defaultBinding];
                if (observable) {
                    bindingProxy.urlDataObservable.value = observable;
                }
            }
        });
        Object.defineProperty(canRoute, 'urlData', {
            get: function () {
                return bindingProxy.urlDataObservable.value;
            },
            set: function (newVal) {
                canRoute._teardown();
                bindingProxy.urlDataObservable.value = newVal;
            }
        });
        canReflect.assignMap(canRoute, {
            param: routeParam,
            deparam: routeDeparam,
            map: function (data) {
                canRoute.data = data;
            },
            start: function (val) {
                if (val !== true) {
                    canRoute._setup();
                    if (isBrowserWindow() || isWebWorker()) {
                        var hash = bindingProxy.call('can.getValue');
                        queues.batch.start();
                        var state = canRoute.deparam(hash);
                        delete state.route;
                        canReflect.assign(canRoute.data, state);
                        queues.batch.stop();
                        updateUrl();
                    }
                }
                return canRoute;
            },
            url: urlHelpers.url,
            link: urlHelpers.link,
            isCurrent: urlHelpers.isCurrent,
            bindings: bindingProxy.bindings,
            _setup: function () {
                if (!canRoute._canBinding) {
                    var bindingOptions = {
                        parent: bindingProxy.urlDataObservable.value,
                        setParent: updateUrl,
                        child: canRoute.serializedObservation,
                        setChild: updateRouteData,
                        onInitDoNotUpdateChild: true,
                        cycles: 1,
                        queue: 'notify'
                    };
                    canRoute._canBinding = new Bind(bindingOptions);
                    canRoute._canBinding.start();
                }
            },
            _teardown: function () {
                if (canRoute._canBinding) {
                    canRoute._canBinding.stop();
                    canRoute._canBinding = null;
                }
                clearTimeout(timer);
            },
            stop: function () {
                this._teardown();
                return canRoute;
            },
            currentRule: makeCompute(currentRuleObservable),
            register: registerRoute.register,
            rule: function (url) {
                var rule = routeDeparam.getRule(url);
                if (rule) {
                    return rule.route;
                }
            }
        });
        var bindToCanRouteData = function (name, args) {
            if (!canRoute.data[name]) {
                return canRoute.data.addEventListener.apply(canRoute.data, args);
            }
            return canRoute.data[name].apply(canRoute.data, args);
        };
        [
            'addEventListener',
            'removeEventListener',
            'bind',
            'unbind',
            'on',
            'off'
        ].forEach(function (name) {
            canRoute[name] = function (eventName, handler) {
                if (eventName === '__url') {
                    return bindingProxy.call('can.onValue', handler);
                }
                return bindToCanRouteData(name, arguments);
            };
        });
        [
            'delegate',
            'undelegate',
            'removeAttr',
            'compute',
            '_get',
            '___get',
            'each'
        ].forEach(function (name) {
            canRoute[name] = function () {
                return bindToCanRouteData(name, arguments);
            };
        });
        var routeData;
        var setRouteData = function (data) {
            routeData = data;
            return routeData;
        };
        var serializedObservation;
        var serializedCompute;
        Object.defineProperty(canRoute, 'serializedObservation', {
            get: function () {
                if (!serializedObservation) {
                    serializedObservation = new Observation(function canRoute_data_serialized() {
                        return canReflect.serialize(canRoute.data);
                    });
                }
                return serializedObservation;
            }
        });
        Object.defineProperty(canRoute, 'serializedCompute', {
            get: function () {
                if (!serializedCompute) {
                    serializedCompute = makeCompute(canRoute.serializedObservation);
                }
                return serializedCompute;
            }
        });
        var stringify = function (obj) {
            if (obj && typeof obj === 'object') {
                if (obj && typeof obj === 'object' && 'serialize' in obj) {
                    obj = obj.serialize();
                } else {
                    obj = typeof obj.slice === 'function' ? obj.slice() : canReflect.assign({}, obj);
                }
                canReflect.eachKey(obj, function (val, prop) {
                    obj[prop] = stringify(val);
                });
            } else if (obj !== undefined && obj !== null && typeof obj.toString === 'function') {
                obj = obj.toString();
            }
            return obj;
        };
        var stringCoercingMapDecorator = function (map) {
            var sym = canSymbol.for('can.route.stringCoercingMapDecorator');
            if (!map.attr[sym]) {
                var attrSuper = map.attr;
                map.attr = function (prop, val) {
                    var serializable = this.define === undefined || this.define[prop] === undefined || !!this.define[prop].serialize, args;
                    if (serializable) {
                        args = stringify(Array.apply(null, arguments));
                    } else {
                        args = arguments;
                    }
                    return attrSuper.apply(this, args);
                };
                canReflect.setKeyValue(map.attr, sym, true);
            }
            return map;
        };
        var viewModelSymbol = canSymbol.for('can.viewModel');
        Object.defineProperty(canRoute, 'data', {
            get: function () {
                if (routeData) {
                    return routeData;
                } else {
                    return setRouteData(stringCoercingMapDecorator(new SimpleMap()));
                }
            },
            set: function (data) {
                if (canReflect.isConstructorLike(data)) {
                    data = new data();
                }
                if (data && data[viewModelSymbol] !== undefined) {
                    data = data[viewModelSymbol];
                }
                if ('attr' in data) {
                    setRouteData(stringCoercingMapDecorator(data));
                } else {
                    setRouteData(data);
                }
            }
        });
        canRoute.attr = function (prop, value) {
            console.warn('can-route: can-route.attr is deprecated. Use methods on can-route.data instead.');
            if ('attr' in canRoute.data) {
                return canRoute.data.attr.apply(canRoute.data, arguments);
            } else {
                if (arguments.length > 1) {
                    canReflect.setKeyValue(canRoute.data, prop, value);
                    return canRoute.data;
                } else if (typeof prop === 'object') {
                    canReflect.assignDeep(canRoute.data, prop);
                    return canRoute.data;
                } else if (arguments.length === 1) {
                    return canReflect.getKeyValue(canRoute.data, prop);
                } else {
                    return canReflect.unwrap(canRoute.data);
                }
            }
        };
        canReflect.setKeyValue(canRoute, canSymbol.for('can.isFunctionLike'), false);
        canRoute.matched = canRoute.currentRule;
        canRoute.current = canRoute.isCurrent;
        module.exports = namespace.route = canRoute;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-route-pushstate@5.0.2#can-route-pushstate*/
define('can-route-pushstate@5.0.2#can-route-pushstate', [
    'require',
    'exports',
    'module',
    'can-route',
    'can-route/src/binding-proxy',
    'can-reflect',
    'can-key-tree',
    'can-queues',
    'can-simple-observable',
    'can-observation-recorder',
    'can-globals/is-node/is-node',
    'can-globals/location/location',
    'can-dom-events',
    'can-diff/map/map'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var route = require('can-route');
        var bindingProxy = require('can-route/src/binding-proxy');
        var canReflect = require('can-reflect');
        var KeyTree = require('can-key-tree');
        var queues = require('can-queues');
        var SimpleObservable = require('can-simple-observable');
        var ObservationRecorder = require('can-observation-recorder');
        var isNode = require('can-globals/is-node/is-node');
        var LOCATION = require('can-globals/location/location');
        var domEvents = require('can-dom-events');
        var diffObject = require('can-diff/map/map');
        var methodsToOverwrite = [
            'pushState',
            'replaceState'
        ];
        var cleanRoot = function () {
            var location = LOCATION();
            var domain = location.protocol + '//' + location.host, root = bindingProxy.call('root'), index = root.indexOf(domain);
            if (index === 0) {
                return root.substr(domain.length);
            }
            return root;
        };
        function getCurrentUrl() {
            var root = cleanRoot(), location = LOCATION(), loc = location.pathname + location.search, index = loc.indexOf(root);
            return loc.substr(index + root.length);
        }
        function PushstateObservable() {
            this.options = {
                replaceStateOnceKeys: [],
                replaceStateKeys: []
            };
            this.dispatchHandlers = this.dispatchHandlers.bind(this);
            var self = this;
            this.anchorClickHandler = function (event) {
                PushstateObservable.prototype.anchorClickHandler.call(self, this, event);
            };
            this.handlers = new KeyTree([
                Object,
                Array
            ], {
                onFirst: this.setup.bind(this),
                onEmpty: this.teardown.bind(this)
            });
            this.keepHash = true;
        }
        PushstateObservable.prototype = Object.create(SimpleObservable.prototype);
        PushstateObservable.constructor = PushstateObservable;
        canReflect.assign(PushstateObservable.prototype, {
            root: '/',
            matchSlashes: false,
            paramsMatcher: /^\?(?:[^=]+=[^&]*&)*[^=]+=[^&]*/,
            querySeparator: '?',
            dispatchHandlers: function () {
                var old = this.value;
                var queuesArgs = [];
                this.value = getCurrentUrl();
                if (old !== this.value) {
                    queuesArgs = [
                        this.handlers.getNode([]),
                        this,
                        [
                            this.value,
                            old
                        ]
                    ];
                    queues.enqueueByQueue.apply(queues, queuesArgs);
                }
            },
            anchorClickHandler: function (node, e) {
                if (!(e.isDefaultPrevented ? e.isDefaultPrevented() : e.defaultPrevented === true)) {
                    var linksHost = node.host || window.location.host;
                    if (node.href === 'javascript://') {
                        return;
                    }
                    if (node.target === '_blank') {
                        return;
                    }
                    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) {
                        return;
                    }
                    if (window.location.host === linksHost) {
                        var root = cleanRoot();
                        if (node.pathname.indexOf(root) === 0) {
                            var nodePathWithSearch = node.pathname + node.search;
                            var url = nodePathWithSearch.substr(root.length);
                            if (route.rule(url) !== undefined) {
                                if (node.href.indexOf('#') >= 0) {
                                    this.keepHash = true;
                                }
                                var windowPathWithSearch = window.location.pathname + window.location.search;
                                var shouldCallPreventDefault = nodePathWithSearch !== windowPathWithSearch || node.hash === window.location.hash;
                                window.history.pushState(null, null, node.href);
                                if (shouldCallPreventDefault && e.preventDefault) {
                                    e.preventDefault();
                                }
                            }
                        }
                    }
                }
            },
            setup: function () {
                if (isNode()) {
                    return;
                }
                this.value = getCurrentUrl();
                domEvents.addDelegateListener(document.documentElement, 'click', 'a', this.anchorClickHandler);
                var originalMethods = this.originalMethods = {};
                var dispatchHandlers = this.dispatchHandlers;
                canReflect.eachKey(methodsToOverwrite, function (method) {
                    this.originalMethods[method] = window.history[method];
                    window.history[method] = function (state, title, url) {
                        var absolute = url.indexOf('http') === 0;
                        var loc = LOCATION();
                        var searchHash = loc.search + loc.hash;
                        if (!absolute && url !== loc.pathname + searchHash || absolute && url !== loc.href + searchHash) {
                            originalMethods[method].apply(window.history, arguments);
                            dispatchHandlers();
                        }
                    };
                }, this);
                domEvents.addEventListener(window, 'popstate', this.dispatchHandlers);
            },
            teardown: function () {
                domEvents.removeDelegateListener(document.documentElement, 'click', 'a', this.anchorClickHandler);
                canReflect.eachKey(methodsToOverwrite, function (method) {
                    window.history[method] = this.originalMethods[method];
                }, this);
                domEvents.removeEventListener(window, 'popstate', this.dispatchHandlers);
            },
            get: function get() {
                ObservationRecorder.add(this);
                return getCurrentUrl();
            },
            set: function (path) {
                var newProps = route.deparam(path);
                var oldProps = route.deparam(getCurrentUrl());
                var method = 'pushState';
                var changed;
                if (this.keepHash && path.indexOf('#') === -1 && window.location.hash) {
                    path += window.location.hash;
                }
                changed = {};
                diffObject(oldProps, newProps).forEach(function (patch) {
                    return changed[patch.key] = true;
                });
                if (this.options.replaceStateKeys.length) {
                    this.options.replaceStateKeys.forEach(function (replaceKey) {
                        if (changed[replaceKey]) {
                            method = 'replaceState';
                        }
                    });
                }
                if (this.options.replaceStateOnceKeys.length) {
                    for (var i = this.options.replaceStateOnceKeys.length - 1; i >= 0; i--) {
                        var replaceOnceKey = this.options.replaceStateOnceKeys[i];
                        if (changed[replaceOnceKey]) {
                            method = 'replaceState';
                            this.options.replaceStateOnceKeys.splice(i, 1);
                        }
                    }
                }
                window.history[method](null, null, bindingProxy.call('root') + path);
            },
            replaceStateOn: function () {
                canReflect.addValues(this.options.replaceStateKeys, canReflect.toArray(arguments));
            },
            replaceStateOnce: function () {
                canReflect.addValues(this.options.replaceStateOnceKeys, canReflect.toArray(arguments));
            },
            replaceStateOff: function () {
                canReflect.removeValues(this.options.replaceStateKeys, canReflect.toArray(arguments));
                canReflect.removeValues(this.options.replaceStateOnceKeys, canReflect.toArray(arguments));
            }
        });
        var pushstateObservableProto = {
            'can.getValue': PushstateObservable.prototype.get,
            'can.setValue': PushstateObservable.prototype.set,
            'can.onValue': PushstateObservable.prototype.on,
            'can.offValue': PushstateObservable.prototype.off,
            'can.isMapLike': false,
            'can.valueHasDependencies': function () {
                return true;
            }
        };
        canReflect.assignSymbols(PushstateObservable.prototype, pushstateObservableProto);
        module.exports = PushstateObservable;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*jquery@3.4.0#dist/jquery*/
(function (global, factory) {
    'use strict';
    if (typeof module === 'object' && typeof module.exports === 'object') {
        module.exports = global.document ? factory(global, true) : function (w) {
            if (!w.document) {
                throw new Error('jQuery requires a window with a document');
            }
            return factory(w);
        };
    } else {
        factory(global);
    }
}(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {
    'use strict';
    var arr = [];
    var document = window.document;
    var getProto = Object.getPrototypeOf;
    var slice = arr.slice;
    var concat = arr.concat;
    var push = arr.push;
    var indexOf = arr.indexOf;
    var class2type = {};
    var toString = class2type.toString;
    var hasOwn = class2type.hasOwnProperty;
    var fnToString = hasOwn.toString;
    var ObjectFunctionString = fnToString.call(Object);
    var support = {};
    var isFunction = function isFunction(obj) {
        return typeof obj === 'function' && typeof obj.nodeType !== 'number';
    };
    var isWindow = function isWindow(obj) {
        return obj != null && obj === obj.window;
    };
    var preservedScriptAttributes = {
        type: true,
        src: true,
        nonce: true,
        noModule: true
    };
    function DOMEval(code, node, doc) {
        doc = doc || document;
        var i, val, script = doc.createElement('script');
        script.text = code;
        if (node) {
            for (i in preservedScriptAttributes) {
                val = node[i] || node.getAttribute && node.getAttribute(i);
                if (val) {
                    script.setAttribute(i, val);
                }
            }
        }
        doc.head.appendChild(script).parentNode.removeChild(script);
    }
    function toType(obj) {
        if (obj == null) {
            return obj + '';
        }
        return typeof obj === 'object' || typeof obj === 'function' ? class2type[toString.call(obj)] || 'object' : typeof obj;
    }
    var version = '3.4.0', jQuery = function (selector, context) {
            return new jQuery.fn.init(selector, context);
        }, rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
    jQuery.fn = jQuery.prototype = {
        jquery: version,
        constructor: jQuery,
        length: 0,
        toArray: function () {
            return slice.call(this);
        },
        get: function (num) {
            if (num == null) {
                return slice.call(this);
            }
            return num < 0 ? this[num + this.length] : this[num];
        },
        pushStack: function (elems) {
            var ret = jQuery.merge(this.constructor(), elems);
            ret.prevObject = this;
            return ret;
        },
        each: function (callback) {
            return jQuery.each(this, callback);
        },
        map: function (callback) {
            return this.pushStack(jQuery.map(this, function (elem, i) {
                return callback.call(elem, i, elem);
            }));
        },
        slice: function () {
            return this.pushStack(slice.apply(this, arguments));
        },
        first: function () {
            return this.eq(0);
        },
        last: function () {
            return this.eq(-1);
        },
        eq: function (i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },
        end: function () {
            return this.prevObject || this.constructor();
        },
        push: push,
        sort: arr.sort,
        splice: arr.splice
    };
    jQuery.extend = jQuery.fn.extend = function () {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        if (typeof target === 'boolean') {
            deep = target;
            target = arguments[i] || {};
            i++;
        }
        if (typeof target !== 'object' && !isFunction(target)) {
            target = {};
        }
        if (i === length) {
            target = this;
            i--;
        }
        for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    copy = options[name];
                    if (name === '__proto__' || target === copy) {
                        continue;
                    }
                    if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                        src = target[name];
                        if (copyIsArray && !Array.isArray(src)) {
                            clone = [];
                        } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
                            clone = {};
                        } else {
                            clone = src;
                        }
                        copyIsArray = false;
                        target[name] = jQuery.extend(deep, clone, copy);
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }
        return target;
    };
    jQuery.extend({
        expando: 'jQuery' + (version + Math.random()).replace(/\D/g, ''),
        isReady: true,
        error: function (msg) {
            throw new Error(msg);
        },
        noop: function () {
        },
        isPlainObject: function (obj) {
            var proto, Ctor;
            if (!obj || toString.call(obj) !== '[object Object]') {
                return false;
            }
            proto = getProto(obj);
            if (!proto) {
                return true;
            }
            Ctor = hasOwn.call(proto, 'constructor') && proto.constructor;
            return typeof Ctor === 'function' && fnToString.call(Ctor) === ObjectFunctionString;
        },
        isEmptyObject: function (obj) {
            var name;
            for (name in obj) {
                return false;
            }
            return true;
        },
        globalEval: function (code, options) {
            DOMEval(code, { nonce: options && options.nonce });
        },
        each: function (obj, callback) {
            var length, i = 0;
            if (isArrayLike(obj)) {
                length = obj.length;
                for (; i < length; i++) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            } else {
                for (i in obj) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            }
            return obj;
        },
        trim: function (text) {
            return text == null ? '' : (text + '').replace(rtrim, '');
        },
        makeArray: function (arr, results) {
            var ret = results || [];
            if (arr != null) {
                if (isArrayLike(Object(arr))) {
                    jQuery.merge(ret, typeof arr === 'string' ? [arr] : arr);
                } else {
                    push.call(ret, arr);
                }
            }
            return ret;
        },
        inArray: function (elem, arr, i) {
            return arr == null ? -1 : indexOf.call(arr, elem, i);
        },
        merge: function (first, second) {
            var len = +second.length, j = 0, i = first.length;
            for (; j < len; j++) {
                first[i++] = second[j];
            }
            first.length = i;
            return first;
        },
        grep: function (elems, callback, invert) {
            var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
            for (; i < length; i++) {
                callbackInverse = !callback(elems[i], i);
                if (callbackInverse !== callbackExpect) {
                    matches.push(elems[i]);
                }
            }
            return matches;
        },
        map: function (elems, callback, arg) {
            var length, value, i = 0, ret = [];
            if (isArrayLike(elems)) {
                length = elems.length;
                for (; i < length; i++) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret.push(value);
                    }
                }
            } else {
                for (i in elems) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret.push(value);
                    }
                }
            }
            return concat.apply([], ret);
        },
        guid: 1,
        support: support
    });
    if (typeof Symbol === 'function') {
        jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
    }
    jQuery.each('Boolean Number String Function Array Date RegExp Object Error Symbol'.split(' '), function (i, name) {
        class2type['[object ' + name + ']'] = name.toLowerCase();
    });
    function isArrayLike(obj) {
        var length = !!obj && 'length' in obj && obj.length, type = toType(obj);
        if (isFunction(obj) || isWindow(obj)) {
            return false;
        }
        return type === 'array' || length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj;
    }
    var Sizzle = function (window) {
        var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = 'sizzle' + 1 * new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), nonnativeSelectorCache = createCache(), sortOrder = function (a, b) {
                if (a === b) {
                    hasDuplicate = true;
                }
                return 0;
            }, hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice, indexOf = function (list, elem) {
                var i = 0, len = list.length;
                for (; i < len; i++) {
                    if (list[i] === elem) {
                        return i;
                    }
                }
                return -1;
            }, booleans = 'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped', whitespace = '[\\x20\\t\\r\\n\\f]', identifier = '(?:\\\\.|[\\w-]|[^\0-\\xa0])+', attributes = '\\[' + whitespace + '*(' + identifier + ')(?:' + whitespace + '*([*^$|!~]?=)' + whitespace + '*(?:\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)"|(' + identifier + '))|)' + whitespace + '*\\]', pseudos = ':(' + identifier + ')(?:\\((' + '(\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)")|' + '((?:\\\\.|[^\\\\()[\\]]|' + attributes + ')*)|' + '.*' + ')\\)|)', rwhitespace = new RegExp(whitespace + '+', 'g'), rtrim = new RegExp('^' + whitespace + '+|((?:^|[^\\\\])(?:\\\\.)*)' + whitespace + '+$', 'g'), rcomma = new RegExp('^' + whitespace + '*,' + whitespace + '*'), rcombinators = new RegExp('^' + whitespace + '*([>+~]|' + whitespace + ')' + whitespace + '*'), rdescend = new RegExp(whitespace + '|>'), rpseudo = new RegExp(pseudos), ridentifier = new RegExp('^' + identifier + '$'), matchExpr = {
                'ID': new RegExp('^#(' + identifier + ')'),
                'CLASS': new RegExp('^\\.(' + identifier + ')'),
                'TAG': new RegExp('^(' + identifier + '|[*])'),
                'ATTR': new RegExp('^' + attributes),
                'PSEUDO': new RegExp('^' + pseudos),
                'CHILD': new RegExp('^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(' + whitespace + '*(even|odd|(([+-]|)(\\d*)n|)' + whitespace + '*(?:([+-]|)' + whitespace + '*(\\d+)|))' + whitespace + '*\\)|)', 'i'),
                'bool': new RegExp('^(?:' + booleans + ')$', 'i'),
                'needsContext': new RegExp('^' + whitespace + '*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(' + whitespace + '*((?:-\\d)?\\d*)' + whitespace + '*\\)|)(?=[^-]|$)', 'i')
            }, rhtml = /HTML$/i, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, runescape = new RegExp('\\\\([\\da-f]{1,6}' + whitespace + '?|(' + whitespace + ')|.)', 'ig'), funescape = function (_, escaped, escapedWhitespace) {
                var high = '0x' + escaped - 65536;
                return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
            }, rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, fcssescape = function (ch, asCodePoint) {
                if (asCodePoint) {
                    if (ch === '\0') {
                        return '\uFFFD';
                    }
                    return ch.slice(0, -1) + '\\' + ch.charCodeAt(ch.length - 1).toString(16) + ' ';
                }
                return '\\' + ch;
            }, unloadHandler = function () {
                setDocument();
            }, inDisabledFieldset = addCombinator(function (elem) {
                return elem.disabled === true && elem.nodeName.toLowerCase() === 'fieldset';
            }, {
                dir: 'parentNode',
                next: 'legend'
            });
        try {
            push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
            arr[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
            push = {
                apply: arr.length ? function (target, els) {
                    push_native.apply(target, slice.call(els));
                } : function (target, els) {
                    var j = target.length, i = 0;
                    while (target[j++] = els[i++]) {
                    }
                    target.length = j - 1;
                }
            };
        }
        function Sizzle(selector, context, results, seed) {
            var m, i, elem, nid, match, groups, newSelector, newContext = context && context.ownerDocument, nodeType = context ? context.nodeType : 9;
            results = results || [];
            if (typeof selector !== 'string' || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
                return results;
            }
            if (!seed) {
                if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                    setDocument(context);
                }
                context = context || document;
                if (documentIsHTML) {
                    if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                        if (m = match[1]) {
                            if (nodeType === 9) {
                                if (elem = context.getElementById(m)) {
                                    if (elem.id === m) {
                                        results.push(elem);
                                        return results;
                                    }
                                } else {
                                    return results;
                                }
                            } else {
                                if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                                    results.push(elem);
                                    return results;
                                }
                            }
                        } else if (match[2]) {
                            push.apply(results, context.getElementsByTagName(selector));
                            return results;
                        } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                            push.apply(results, context.getElementsByClassName(m));
                            return results;
                        }
                    }
                    if (support.qsa && !nonnativeSelectorCache[selector + ' '] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && (nodeType !== 1 || context.nodeName.toLowerCase() !== 'object')) {
                        newSelector = selector;
                        newContext = context;
                        if (nodeType === 1 && rdescend.test(selector)) {
                            if (nid = context.getAttribute('id')) {
                                nid = nid.replace(rcssescape, fcssescape);
                            } else {
                                context.setAttribute('id', nid = expando);
                            }
                            groups = tokenize(selector);
                            i = groups.length;
                            while (i--) {
                                groups[i] = '#' + nid + ' ' + toSelector(groups[i]);
                            }
                            newSelector = groups.join(',');
                            newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                        }
                        try {
                            push.apply(results, newContext.querySelectorAll(newSelector));
                            return results;
                        } catch (qsaError) {
                            nonnativeSelectorCache(selector, true);
                        } finally {
                            if (nid === expando) {
                                context.removeAttribute('id');
                            }
                        }
                    }
                }
            }
            return select(selector.replace(rtrim, '$1'), context, results, seed);
        }
        function createCache() {
            var keys = [];
            function cache(key, value) {
                if (keys.push(key + ' ') > Expr.cacheLength) {
                    delete cache[keys.shift()];
                }
                return cache[key + ' '] = value;
            }
            return cache;
        }
        function markFunction(fn) {
            fn[expando] = true;
            return fn;
        }
        function assert(fn) {
            var el = document.createElement('fieldset');
            try {
                return !!fn(el);
            } catch (e) {
                return false;
            } finally {
                if (el.parentNode) {
                    el.parentNode.removeChild(el);
                }
                el = null;
            }
        }
        function addHandle(attrs, handler) {
            var arr = attrs.split('|'), i = arr.length;
            while (i--) {
                Expr.attrHandle[arr[i]] = handler;
            }
        }
        function siblingCheck(a, b) {
            var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;
            if (diff) {
                return diff;
            }
            if (cur) {
                while (cur = cur.nextSibling) {
                    if (cur === b) {
                        return -1;
                    }
                }
            }
            return a ? 1 : -1;
        }
        function createInputPseudo(type) {
            return function (elem) {
                var name = elem.nodeName.toLowerCase();
                return name === 'input' && elem.type === type;
            };
        }
        function createButtonPseudo(type) {
            return function (elem) {
                var name = elem.nodeName.toLowerCase();
                return (name === 'input' || name === 'button') && elem.type === type;
            };
        }
        function createDisabledPseudo(disabled) {
            return function (elem) {
                if ('form' in elem) {
                    if (elem.parentNode && elem.disabled === false) {
                        if ('label' in elem) {
                            if ('label' in elem.parentNode) {
                                return elem.parentNode.disabled === disabled;
                            } else {
                                return elem.disabled === disabled;
                            }
                        }
                        return elem.isDisabled === disabled || elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
                    }
                    return elem.disabled === disabled;
                } else if ('label' in elem) {
                    return elem.disabled === disabled;
                }
                return false;
            };
        }
        function createPositionalPseudo(fn) {
            return markFunction(function (argument) {
                argument = +argument;
                return markFunction(function (seed, matches) {
                    var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
                    while (i--) {
                        if (seed[j = matchIndexes[i]]) {
                            seed[j] = !(matches[j] = seed[j]);
                        }
                    }
                });
            });
        }
        function testContext(context) {
            return context && typeof context.getElementsByTagName !== 'undefined' && context;
        }
        support = Sizzle.support = {};
        isXML = Sizzle.isXML = function (elem) {
            var namespace = elem.namespaceURI, docElem = (elem.ownerDocument || elem).documentElement;
            return !rhtml.test(namespace || docElem && docElem.nodeName || 'HTML');
        };
        setDocument = Sizzle.setDocument = function (node) {
            var hasCompare, subWindow, doc = node ? node.ownerDocument || node : preferredDoc;
            if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                return document;
            }
            document = doc;
            docElem = document.documentElement;
            documentIsHTML = !isXML(document);
            if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
                if (subWindow.addEventListener) {
                    subWindow.addEventListener('unload', unloadHandler, false);
                } else if (subWindow.attachEvent) {
                    subWindow.attachEvent('onunload', unloadHandler);
                }
            }
            support.attributes = assert(function (el) {
                el.className = 'i';
                return !el.getAttribute('className');
            });
            support.getElementsByTagName = assert(function (el) {
                el.appendChild(document.createComment(''));
                return !el.getElementsByTagName('*').length;
            });
            support.getElementsByClassName = rnative.test(document.getElementsByClassName);
            support.getById = assert(function (el) {
                docElem.appendChild(el).id = expando;
                return !document.getElementsByName || !document.getElementsByName(expando).length;
            });
            if (support.getById) {
                Expr.filter['ID'] = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                        return elem.getAttribute('id') === attrId;
                    };
                };
                Expr.find['ID'] = function (id, context) {
                    if (typeof context.getElementById !== 'undefined' && documentIsHTML) {
                        var elem = context.getElementById(id);
                        return elem ? [elem] : [];
                    }
                };
            } else {
                Expr.filter['ID'] = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                        var node = typeof elem.getAttributeNode !== 'undefined' && elem.getAttributeNode('id');
                        return node && node.value === attrId;
                    };
                };
                Expr.find['ID'] = function (id, context) {
                    if (typeof context.getElementById !== 'undefined' && documentIsHTML) {
                        var node, i, elems, elem = context.getElementById(id);
                        if (elem) {
                            node = elem.getAttributeNode('id');
                            if (node && node.value === id) {
                                return [elem];
                            }
                            elems = context.getElementsByName(id);
                            i = 0;
                            while (elem = elems[i++]) {
                                node = elem.getAttributeNode('id');
                                if (node && node.value === id) {
                                    return [elem];
                                }
                            }
                        }
                        return [];
                    }
                };
            }
            Expr.find['TAG'] = support.getElementsByTagName ? function (tag, context) {
                if (typeof context.getElementsByTagName !== 'undefined') {
                    return context.getElementsByTagName(tag);
                } else if (support.qsa) {
                    return context.querySelectorAll(tag);
                }
            } : function (tag, context) {
                var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
                if (tag === '*') {
                    while (elem = results[i++]) {
                        if (elem.nodeType === 1) {
                            tmp.push(elem);
                        }
                    }
                    return tmp;
                }
                return results;
            };
            Expr.find['CLASS'] = support.getElementsByClassName && function (className, context) {
                if (typeof context.getElementsByClassName !== 'undefined' && documentIsHTML) {
                    return context.getElementsByClassName(className);
                }
            };
            rbuggyMatches = [];
            rbuggyQSA = [];
            if (support.qsa = rnative.test(document.querySelectorAll)) {
                assert(function (el) {
                    docElem.appendChild(el).innerHTML = '<a id=\'' + expando + '\'></a>' + '<select id=\'' + expando + '-\r\\\' msallowcapture=\'\'>' + '<option selected=\'\'></option></select>';
                    if (el.querySelectorAll('[msallowcapture^=\'\']').length) {
                        rbuggyQSA.push('[*^$]=' + whitespace + '*(?:\'\'|"")');
                    }
                    if (!el.querySelectorAll('[selected]').length) {
                        rbuggyQSA.push('\\[' + whitespace + '*(?:value|' + booleans + ')');
                    }
                    if (!el.querySelectorAll('[id~=' + expando + '-]').length) {
                        rbuggyQSA.push('~=');
                    }
                    if (!el.querySelectorAll(':checked').length) {
                        rbuggyQSA.push(':checked');
                    }
                    if (!el.querySelectorAll('a#' + expando + '+*').length) {
                        rbuggyQSA.push('.#.+[+~]');
                    }
                });
                assert(function (el) {
                    el.innerHTML = '<a href=\'\' disabled=\'disabled\'></a>' + '<select disabled=\'disabled\'><option/></select>';
                    var input = document.createElement('input');
                    input.setAttribute('type', 'hidden');
                    el.appendChild(input).setAttribute('name', 'D');
                    if (el.querySelectorAll('[name=d]').length) {
                        rbuggyQSA.push('name' + whitespace + '*[*^$|!~]?=');
                    }
                    if (el.querySelectorAll(':enabled').length !== 2) {
                        rbuggyQSA.push(':enabled', ':disabled');
                    }
                    docElem.appendChild(el).disabled = true;
                    if (el.querySelectorAll(':disabled').length !== 2) {
                        rbuggyQSA.push(':enabled', ':disabled');
                    }
                    el.querySelectorAll('*,:x');
                    rbuggyQSA.push(',.*:');
                });
            }
            if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
                assert(function (el) {
                    support.disconnectedMatch = matches.call(el, '*');
                    matches.call(el, '[s!=\'\']:x');
                    rbuggyMatches.push('!=', pseudos);
                });
            }
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join('|'));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join('|'));
            hasCompare = rnative.test(docElem.compareDocumentPosition);
            contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
                var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
                return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
            } : function (a, b) {
                if (b) {
                    while (b = b.parentNode) {
                        if (b === a) {
                            return true;
                        }
                    }
                }
                return false;
            };
            sortOrder = hasCompare ? function (a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                if (compare) {
                    return compare;
                }
                compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
                if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                    if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                        return -1;
                    }
                    if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                        return 1;
                    }
                    return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                }
                return compare & 4 ? -1 : 1;
            } : function (a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b];
                if (!aup || !bup) {
                    return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
                } else if (aup === bup) {
                    return siblingCheck(a, b);
                }
                cur = a;
                while (cur = cur.parentNode) {
                    ap.unshift(cur);
                }
                cur = b;
                while (cur = cur.parentNode) {
                    bp.unshift(cur);
                }
                while (ap[i] === bp[i]) {
                    i++;
                }
                return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
            };
            return document;
        };
        Sizzle.matches = function (expr, elements) {
            return Sizzle(expr, null, null, elements);
        };
        Sizzle.matchesSelector = function (elem, expr) {
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            if (support.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + ' '] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
                try {
                    var ret = matches.call(elem, expr);
                    if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                        return ret;
                    }
                } catch (e) {
                    nonnativeSelectorCache(expr, true);
                }
            }
            return Sizzle(expr, document, null, [elem]).length > 0;
        };
        Sizzle.contains = function (context, elem) {
            if ((context.ownerDocument || context) !== document) {
                setDocument(context);
            }
            return contains(context, elem);
        };
        Sizzle.attr = function (elem, name) {
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
            return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        };
        Sizzle.escape = function (sel) {
            return (sel + '').replace(rcssescape, fcssescape);
        };
        Sizzle.error = function (msg) {
            throw new Error('Syntax error, unrecognized expression: ' + msg);
        };
        Sizzle.uniqueSort = function (results) {
            var elem, duplicates = [], j = 0, i = 0;
            hasDuplicate = !support.detectDuplicates;
            sortInput = !support.sortStable && results.slice(0);
            results.sort(sortOrder);
            if (hasDuplicate) {
                while (elem = results[i++]) {
                    if (elem === results[i]) {
                        j = duplicates.push(i);
                    }
                }
                while (j--) {
                    results.splice(duplicates[j], 1);
                }
            }
            sortInput = null;
            return results;
        };
        getText = Sizzle.getText = function (elem) {
            var node, ret = '', i = 0, nodeType = elem.nodeType;
            if (!nodeType) {
                while (node = elem[i++]) {
                    ret += getText(node);
                }
            } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                if (typeof elem.textContent === 'string') {
                    return elem.textContent;
                } else {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        ret += getText(elem);
                    }
                }
            } else if (nodeType === 3 || nodeType === 4) {
                return elem.nodeValue;
            }
            return ret;
        };
        Expr = Sizzle.selectors = {
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
                '>': {
                    dir: 'parentNode',
                    first: true
                },
                ' ': { dir: 'parentNode' },
                '+': {
                    dir: 'previousSibling',
                    first: true
                },
                '~': { dir: 'previousSibling' }
            },
            preFilter: {
                'ATTR': function (match) {
                    match[1] = match[1].replace(runescape, funescape);
                    match[3] = (match[3] || match[4] || match[5] || '').replace(runescape, funescape);
                    if (match[2] === '~=') {
                        match[3] = ' ' + match[3] + ' ';
                    }
                    return match.slice(0, 4);
                },
                'CHILD': function (match) {
                    match[1] = match[1].toLowerCase();
                    if (match[1].slice(0, 3) === 'nth') {
                        if (!match[3]) {
                            Sizzle.error(match[0]);
                        }
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === 'even' || match[3] === 'odd'));
                        match[5] = +(match[7] + match[8] || match[3] === 'odd');
                    } else if (match[3]) {
                        Sizzle.error(match[0]);
                    }
                    return match;
                },
                'PSEUDO': function (match) {
                    var excess, unquoted = !match[6] && match[2];
                    if (matchExpr['CHILD'].test(match[0])) {
                        return null;
                    }
                    if (match[3]) {
                        match[2] = match[4] || match[5] || '';
                    } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(')', unquoted.length - excess) - unquoted.length)) {
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess);
                    }
                    return match.slice(0, 3);
                }
            },
            filter: {
                'TAG': function (nodeNameSelector) {
                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return nodeNameSelector === '*' ? function () {
                        return true;
                    } : function (elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
                },
                'CLASS': function (className) {
                    var pattern = classCache[className + ' '];
                    return pattern || (pattern = new RegExp('(^|' + whitespace + ')' + className + '(' + whitespace + '|$)')) && classCache(className, function (elem) {
                        return pattern.test(typeof elem.className === 'string' && elem.className || typeof elem.getAttribute !== 'undefined' && elem.getAttribute('class') || '');
                    });
                },
                'ATTR': function (name, operator, check) {
                    return function (elem) {
                        var result = Sizzle.attr(elem, name);
                        if (result == null) {
                            return operator === '!=';
                        }
                        if (!operator) {
                            return true;
                        }
                        result += '';
                        return operator === '=' ? result === check : operator === '!=' ? result !== check : operator === '^=' ? check && result.indexOf(check) === 0 : operator === '*=' ? check && result.indexOf(check) > -1 : operator === '$=' ? check && result.slice(-check.length) === check : operator === '~=' ? (' ' + result.replace(rwhitespace, ' ') + ' ').indexOf(check) > -1 : operator === '|=' ? result === check || result.slice(0, check.length + 1) === check + '-' : false;
                    };
                },
                'CHILD': function (type, what, argument, first, last) {
                    var simple = type.slice(0, 3) !== 'nth', forward = type.slice(-4) !== 'last', ofType = what === 'of-type';
                    return first === 1 && last === 0 ? function (elem) {
                        return !!elem.parentNode;
                    } : function (elem, context, xml) {
                        var cache, uniqueCache, outerCache, node, nodeIndex, start, dir = simple !== forward ? 'nextSibling' : 'previousSibling', parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false;
                        if (parent) {
                            if (simple) {
                                while (dir) {
                                    node = elem;
                                    while (node = node[dir]) {
                                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                                            return false;
                                        }
                                    }
                                    start = dir = type === 'only' && !start && 'nextSibling';
                                }
                                return true;
                            }
                            start = [forward ? parent.firstChild : parent.lastChild];
                            if (forward && useCache) {
                                node = parent;
                                outerCache = node[expando] || (node[expando] = {});
                                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                cache = uniqueCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = nodeIndex && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];
                                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                    if (node.nodeType === 1 && ++diff && node === elem) {
                                        uniqueCache[type] = [
                                            dirruns,
                                            nodeIndex,
                                            diff
                                        ];
                                        break;
                                    }
                                }
                            } else {
                                if (useCache) {
                                    node = elem;
                                    outerCache = node[expando] || (node[expando] = {});
                                    uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                    cache = uniqueCache[type] || [];
                                    nodeIndex = cache[0] === dirruns && cache[1];
                                    diff = nodeIndex;
                                }
                                if (diff === false) {
                                    while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                        if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                            if (useCache) {
                                                outerCache = node[expando] || (node[expando] = {});
                                                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                                                uniqueCache[type] = [
                                                    dirruns,
                                                    diff
                                                ];
                                            }
                                            if (node === elem) {
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            diff -= last;
                            return diff === first || diff % first === 0 && diff / first >= 0;
                        }
                    };
                },
                'PSEUDO': function (pseudo, argument) {
                    var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error('unsupported pseudo: ' + pseudo);
                    if (fn[expando]) {
                        return fn(argument);
                    }
                    if (fn.length > 1) {
                        args = [
                            pseudo,
                            pseudo,
                            '',
                            argument
                        ];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
                            var idx, matched = fn(seed, argument), i = matched.length;
                            while (i--) {
                                idx = indexOf(seed, matched[i]);
                                seed[idx] = !(matches[idx] = matched[i]);
                            }
                        }) : function (elem) {
                            return fn(elem, 0, args);
                        };
                    }
                    return fn;
                }
            },
            pseudos: {
                'not': markFunction(function (selector) {
                    var input = [], results = [], matcher = compile(selector.replace(rtrim, '$1'));
                    return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
                        var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                        while (i--) {
                            if (elem = unmatched[i]) {
                                seed[i] = !(matches[i] = elem);
                            }
                        }
                    }) : function (elem, context, xml) {
                        input[0] = elem;
                        matcher(input, null, xml, results);
                        input[0] = null;
                        return !results.pop();
                    };
                }),
                'has': markFunction(function (selector) {
                    return function (elem) {
                        return Sizzle(selector, elem).length > 0;
                    };
                }),
                'contains': markFunction(function (text) {
                    text = text.replace(runescape, funescape);
                    return function (elem) {
                        return (elem.textContent || getText(elem)).indexOf(text) > -1;
                    };
                }),
                'lang': markFunction(function (lang) {
                    if (!ridentifier.test(lang || '')) {
                        Sizzle.error('unsupported lang: ' + lang);
                    }
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function (elem) {
                        var elemLang;
                        do {
                            if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute('xml:lang') || elem.getAttribute('lang')) {
                                elemLang = elemLang.toLowerCase();
                                return elemLang === lang || elemLang.indexOf(lang + '-') === 0;
                            }
                        } while ((elem = elem.parentNode) && elem.nodeType === 1);
                        return false;
                    };
                }),
                'target': function (elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                },
                'root': function (elem) {
                    return elem === docElem;
                },
                'focus': function (elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },
                'enabled': createDisabledPseudo(false),
                'disabled': createDisabledPseudo(true),
                'checked': function (elem) {
                    var nodeName = elem.nodeName.toLowerCase();
                    return nodeName === 'input' && !!elem.checked || nodeName === 'option' && !!elem.selected;
                },
                'selected': function (elem) {
                    if (elem.parentNode) {
                        elem.parentNode.selectedIndex;
                    }
                    return elem.selected === true;
                },
                'empty': function (elem) {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        if (elem.nodeType < 6) {
                            return false;
                        }
                    }
                    return true;
                },
                'parent': function (elem) {
                    return !Expr.pseudos['empty'](elem);
                },
                'header': function (elem) {
                    return rheader.test(elem.nodeName);
                },
                'input': function (elem) {
                    return rinputs.test(elem.nodeName);
                },
                'button': function (elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === 'input' && elem.type === 'button' || name === 'button';
                },
                'text': function (elem) {
                    var attr;
                    return elem.nodeName.toLowerCase() === 'input' && elem.type === 'text' && ((attr = elem.getAttribute('type')) == null || attr.toLowerCase() === 'text');
                },
                'first': createPositionalPseudo(function () {
                    return [0];
                }),
                'last': createPositionalPseudo(function (matchIndexes, length) {
                    return [length - 1];
                }),
                'eq': createPositionalPseudo(function (matchIndexes, length, argument) {
                    return [argument < 0 ? argument + length : argument];
                }),
                'even': createPositionalPseudo(function (matchIndexes, length) {
                    var i = 0;
                    for (; i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                'odd': createPositionalPseudo(function (matchIndexes, length) {
                    var i = 1;
                    for (; i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                'lt': createPositionalPseudo(function (matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument > length ? length : argument;
                    for (; --i >= 0;) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                'gt': createPositionalPseudo(function (matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; ++i < length;) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                })
            }
        };
        Expr.pseudos['nth'] = Expr.pseudos['eq'];
        for (i in {
                radio: true,
                checkbox: true,
                file: true,
                password: true,
                image: true
            }) {
            Expr.pseudos[i] = createInputPseudo(i);
        }
        for (i in {
                submit: true,
                reset: true
            }) {
            Expr.pseudos[i] = createButtonPseudo(i);
        }
        function setFilters() {
        }
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        tokenize = Sizzle.tokenize = function (selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + ' '];
            if (cached) {
                return parseOnly ? 0 : cached.slice(0);
            }
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while (soFar) {
                if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) {
                        soFar = soFar.slice(match[0].length) || soFar;
                    }
                    groups.push(tokens = []);
                }
                matched = false;
                if (match = rcombinators.exec(soFar)) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: match[0].replace(rtrim, ' ')
                    });
                    soFar = soFar.slice(matched.length);
                }
                for (type in Expr.filter) {
                    if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                        matched = match.shift();
                        tokens.push({
                            value: matched,
                            type: type,
                            matches: match
                        });
                        soFar = soFar.slice(matched.length);
                    }
                }
                if (!matched) {
                    break;
                }
            }
            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
        };
        function toSelector(tokens) {
            var i = 0, len = tokens.length, selector = '';
            for (; i < len; i++) {
                selector += tokens[i].value;
            }
            return selector;
        }
        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir, skip = combinator.next, key = skip || dir, checkNonElements = base && key === 'parentNode', doneName = done++;
            return combinator.first ? function (elem, context, xml) {
                while (elem = elem[dir]) {
                    if (elem.nodeType === 1 || checkNonElements) {
                        return matcher(elem, context, xml);
                    }
                }
                return false;
            } : function (elem, context, xml) {
                var oldCache, uniqueCache, outerCache, newCache = [
                        dirruns,
                        doneName
                    ];
                if (xml) {
                    while (elem = elem[dir]) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            if (matcher(elem, context, xml)) {
                                return true;
                            }
                        }
                    }
                } else {
                    while (elem = elem[dir]) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            outerCache = elem[expando] || (elem[expando] = {});
                            uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});
                            if (skip && skip === elem.nodeName.toLowerCase()) {
                                elem = elem[dir] || elem;
                            } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                                return newCache[2] = oldCache[2];
                            } else {
                                uniqueCache[key] = newCache;
                                if (newCache[2] = matcher(elem, context, xml)) {
                                    return true;
                                }
                            }
                        }
                    }
                }
                return false;
            };
        }
        function elementMatcher(matchers) {
            return matchers.length > 1 ? function (elem, context, xml) {
                var i = matchers.length;
                while (i--) {
                    if (!matchers[i](elem, context, xml)) {
                        return false;
                    }
                }
                return true;
            } : matchers[0];
        }
        function multipleContexts(selector, contexts, results) {
            var i = 0, len = contexts.length;
            for (; i < len; i++) {
                Sizzle(selector, contexts[i], results);
            }
            return results;
        }
        function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
            for (; i < len; i++) {
                if (elem = unmatched[i]) {
                    if (!filter || filter(elem, context, xml)) {
                        newUnmatched.push(elem);
                        if (mapped) {
                            map.push(i);
                        }
                    }
                }
            }
            return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) {
                postFilter = setMatcher(postFilter);
            }
            if (postFinder && !postFinder[expando]) {
                postFinder = setMatcher(postFinder, postSelector);
            }
            return markFunction(function (seed, results, context, xml) {
                var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || '*', context.nodeType ? [context] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
                if (matcher) {
                    matcher(matcherIn, matcherOut, context, xml);
                }
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);
                    i = temp.length;
                    while (i--) {
                        if (elem = temp[i]) {
                            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                        }
                    }
                }
                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            temp = [];
                            i = matcherOut.length;
                            while (i--) {
                                if (elem = matcherOut[i]) {
                                    temp.push(matcherIn[i] = elem);
                                }
                            }
                            postFinder(null, matcherOut = [], temp, xml);
                        }
                        i = matcherOut.length;
                        while (i--) {
                            if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                                seed[temp] = !(results[temp] = elem);
                            }
                        }
                    }
                } else {
                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                    if (postFinder) {
                        postFinder(null, results, matcherOut, xml);
                    } else {
                        push.apply(results, matcherOut);
                    }
                }
            });
        }
        function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[' '], i = leadingRelative ? 1 : 0, matchContext = addCombinator(function (elem) {
                    return elem === checkContext;
                }, implicitRelative, true), matchAnyContext = addCombinator(function (elem) {
                    return indexOf(checkContext, elem) > -1;
                }, implicitRelative, true), matchers = [function (elem, context, xml) {
                        var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                        checkContext = null;
                        return ret;
                    }];
            for (; i < len; i++) {
                if (matcher = Expr.relative[tokens[i].type]) {
                    matchers = [addCombinator(elementMatcher(matchers), matcher)];
                } else {
                    matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                    if (matcher[expando]) {
                        j = ++i;
                        for (; j < len; j++) {
                            if (Expr.relative[tokens[j].type]) {
                                break;
                            }
                        }
                        return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === ' ' ? '*' : '' })).replace(rtrim, '$1'), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                    }
                    matchers.push(matcher);
                }
            }
            return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function (seed, context, xml, results, outermost) {
                    var elem, j, matcher, matchedCount = 0, i = '0', unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find['TAG']('*', outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
                    if (outermost) {
                        outermostContext = context === document || context || outermost;
                    }
                    for (; i !== len && (elem = elems[i]) != null; i++) {
                        if (byElement && elem) {
                            j = 0;
                            if (!context && elem.ownerDocument !== document) {
                                setDocument(elem);
                                xml = !documentIsHTML;
                            }
                            while (matcher = elementMatchers[j++]) {
                                if (matcher(elem, context || document, xml)) {
                                    results.push(elem);
                                    break;
                                }
                            }
                            if (outermost) {
                                dirruns = dirrunsUnique;
                            }
                        }
                        if (bySet) {
                            if (elem = !matcher && elem) {
                                matchedCount--;
                            }
                            if (seed) {
                                unmatched.push(elem);
                            }
                        }
                    }
                    matchedCount += i;
                    if (bySet && i !== matchedCount) {
                        j = 0;
                        while (matcher = setMatchers[j++]) {
                            matcher(unmatched, setMatched, context, xml);
                        }
                        if (seed) {
                            if (matchedCount > 0) {
                                while (i--) {
                                    if (!(unmatched[i] || setMatched[i])) {
                                        setMatched[i] = pop.call(results);
                                    }
                                }
                            }
                            setMatched = condense(setMatched);
                        }
                        push.apply(results, setMatched);
                        if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                            Sizzle.uniqueSort(results);
                        }
                    }
                    if (outermost) {
                        dirruns = dirrunsUnique;
                        outermostContext = contextBackup;
                    }
                    return unmatched;
                };
            return bySet ? markFunction(superMatcher) : superMatcher;
        }
        compile = Sizzle.compile = function (selector, match) {
            var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + ' '];
            if (!cached) {
                if (!match) {
                    match = tokenize(selector);
                }
                i = match.length;
                while (i--) {
                    cached = matcherFromTokens(match[i]);
                    if (cached[expando]) {
                        setMatchers.push(cached);
                    } else {
                        elementMatchers.push(cached);
                    }
                }
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
                cached.selector = selector;
            }
            return cached;
        };
        select = Sizzle.select = function (selector, context, results, seed) {
            var i, tokens, token, type, find, compiled = typeof selector === 'function' && selector, match = !seed && tokenize(selector = compiled.selector || selector);
            results = results || [];
            if (match.length === 1) {
                tokens = match[0] = match[0].slice(0);
                if (tokens.length > 2 && (token = tokens[0]).type === 'ID' && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                    context = (Expr.find['ID'](token.matches[0].replace(runescape, funescape), context) || [])[0];
                    if (!context) {
                        return results;
                    } else if (compiled) {
                        context = context.parentNode;
                    }
                    selector = selector.slice(tokens.shift().value.length);
                }
                i = matchExpr['needsContext'].test(selector) ? 0 : tokens.length;
                while (i--) {
                    token = tokens[i];
                    if (Expr.relative[type = token.type]) {
                        break;
                    }
                    if (find = Expr.find[type]) {
                        if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                            tokens.splice(i, 1);
                            selector = seed.length && toSelector(tokens);
                            if (!selector) {
                                push.apply(results, seed);
                                return results;
                            }
                            break;
                        }
                    }
                }
            }
            (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
            return results;
        };
        support.sortStable = expando.split('').sort(sortOrder).join('') === expando;
        support.detectDuplicates = !!hasDuplicate;
        setDocument();
        support.sortDetached = assert(function (el) {
            return el.compareDocumentPosition(document.createElement('fieldset')) & 1;
        });
        if (!assert(function (el) {
                el.innerHTML = '<a href=\'#\'></a>';
                return el.firstChild.getAttribute('href') === '#';
            })) {
            addHandle('type|href|height|width', function (elem, name, isXML) {
                if (!isXML) {
                    return elem.getAttribute(name, name.toLowerCase() === 'type' ? 1 : 2);
                }
            });
        }
        if (!support.attributes || !assert(function (el) {
                el.innerHTML = '<input/>';
                el.firstChild.setAttribute('value', '');
                return el.firstChild.getAttribute('value') === '';
            })) {
            addHandle('value', function (elem, name, isXML) {
                if (!isXML && elem.nodeName.toLowerCase() === 'input') {
                    return elem.defaultValue;
                }
            });
        }
        if (!assert(function (el) {
                return el.getAttribute('disabled') == null;
            })) {
            addHandle(booleans, function (elem, name, isXML) {
                var val;
                if (!isXML) {
                    return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
                }
            });
        }
        return Sizzle;
    }(window);
    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[':'] = jQuery.expr.pseudos;
    jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;
    jQuery.escapeSelector = Sizzle.escape;
    var dir = function (elem, dir, until) {
        var matched = [], truncate = until !== undefined;
        while ((elem = elem[dir]) && elem.nodeType !== 9) {
            if (elem.nodeType === 1) {
                if (truncate && jQuery(elem).is(until)) {
                    break;
                }
                matched.push(elem);
            }
        }
        return matched;
    };
    var siblings = function (n, elem) {
        var matched = [];
        for (; n; n = n.nextSibling) {
            if (n.nodeType === 1 && n !== elem) {
                matched.push(n);
            }
        }
        return matched;
    };
    var rneedsContext = jQuery.expr.match.needsContext;
    function nodeName(elem, name) {
        return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
    }
    ;
    var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
    function winnow(elements, qualifier, not) {
        if (isFunction(qualifier)) {
            return jQuery.grep(elements, function (elem, i) {
                return !!qualifier.call(elem, i, elem) !== not;
            });
        }
        if (qualifier.nodeType) {
            return jQuery.grep(elements, function (elem) {
                return elem === qualifier !== not;
            });
        }
        if (typeof qualifier !== 'string') {
            return jQuery.grep(elements, function (elem) {
                return indexOf.call(qualifier, elem) > -1 !== not;
            });
        }
        return jQuery.filter(qualifier, elements, not);
    }
    jQuery.filter = function (expr, elems, not) {
        var elem = elems[0];
        if (not) {
            expr = ':not(' + expr + ')';
        }
        if (elems.length === 1 && elem.nodeType === 1) {
            return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
        }
        return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
            return elem.nodeType === 1;
        }));
    };
    jQuery.fn.extend({
        find: function (selector) {
            var i, ret, len = this.length, self = this;
            if (typeof selector !== 'string') {
                return this.pushStack(jQuery(selector).filter(function () {
                    for (i = 0; i < len; i++) {
                        if (jQuery.contains(self[i], this)) {
                            return true;
                        }
                    }
                }));
            }
            ret = this.pushStack([]);
            for (i = 0; i < len; i++) {
                jQuery.find(selector, self[i], ret);
            }
            return len > 1 ? jQuery.uniqueSort(ret) : ret;
        },
        filter: function (selector) {
            return this.pushStack(winnow(this, selector || [], false));
        },
        not: function (selector) {
            return this.pushStack(winnow(this, selector || [], true));
        },
        is: function (selector) {
            return !!winnow(this, typeof selector === 'string' && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
        }
    });
    var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, init = jQuery.fn.init = function (selector, context, root) {
            var match, elem;
            if (!selector) {
                return this;
            }
            root = root || rootjQuery;
            if (typeof selector === 'string') {
                if (selector[0] === '<' && selector[selector.length - 1] === '>' && selector.length >= 3) {
                    match = [
                        null,
                        selector,
                        null
                    ];
                } else {
                    match = rquickExpr.exec(selector);
                }
                if (match && (match[1] || !context)) {
                    if (match[1]) {
                        context = context instanceof jQuery ? context[0] : context;
                        jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                        if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                            for (match in context) {
                                if (isFunction(this[match])) {
                                    this[match](context[match]);
                                } else {
                                    this.attr(match, context[match]);
                                }
                            }
                        }
                        return this;
                    } else {
                        elem = document.getElementById(match[2]);
                        if (elem) {
                            this[0] = elem;
                            this.length = 1;
                        }
                        return this;
                    }
                } else if (!context || context.jquery) {
                    return (context || root).find(selector);
                } else {
                    return this.constructor(context).find(selector);
                }
            } else if (selector.nodeType) {
                this[0] = selector;
                this.length = 1;
                return this;
            } else if (isFunction(selector)) {
                return root.ready !== undefined ? root.ready(selector) : selector(jQuery);
            }
            return jQuery.makeArray(selector, this);
        };
    init.prototype = jQuery.fn;
    rootjQuery = jQuery(document);
    var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
            children: true,
            contents: true,
            next: true,
            prev: true
        };
    jQuery.fn.extend({
        has: function (target) {
            var targets = jQuery(target, this), l = targets.length;
            return this.filter(function () {
                var i = 0;
                for (; i < l; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true;
                    }
                }
            });
        },
        closest: function (selectors, context) {
            var cur, i = 0, l = this.length, matched = [], targets = typeof selectors !== 'string' && jQuery(selectors);
            if (!rneedsContext.test(selectors)) {
                for (; i < l; i++) {
                    for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                        if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                            matched.push(cur);
                            break;
                        }
                    }
                }
            }
            return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
        },
        index: function (elem) {
            if (!elem) {
                return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            }
            if (typeof elem === 'string') {
                return indexOf.call(jQuery(elem), this[0]);
            }
            return indexOf.call(this, elem.jquery ? elem[0] : elem);
        },
        add: function (selector, context) {
            return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
        },
        addBack: function (selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
    });
    function sibling(cur, dir) {
        while ((cur = cur[dir]) && cur.nodeType !== 1) {
        }
        return cur;
    }
    jQuery.each({
        parent: function (elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function (elem) {
            return dir(elem, 'parentNode');
        },
        parentsUntil: function (elem, i, until) {
            return dir(elem, 'parentNode', until);
        },
        next: function (elem) {
            return sibling(elem, 'nextSibling');
        },
        prev: function (elem) {
            return sibling(elem, 'previousSibling');
        },
        nextAll: function (elem) {
            return dir(elem, 'nextSibling');
        },
        prevAll: function (elem) {
            return dir(elem, 'previousSibling');
        },
        nextUntil: function (elem, i, until) {
            return dir(elem, 'nextSibling', until);
        },
        prevUntil: function (elem, i, until) {
            return dir(elem, 'previousSibling', until);
        },
        siblings: function (elem) {
            return siblings((elem.parentNode || {}).firstChild, elem);
        },
        children: function (elem) {
            return siblings(elem.firstChild);
        },
        contents: function (elem) {
            if (typeof elem.contentDocument !== 'undefined') {
                return elem.contentDocument;
            }
            if (nodeName(elem, 'template')) {
                elem = elem.content || elem;
            }
            return jQuery.merge([], elem.childNodes);
        }
    }, function (name, fn) {
        jQuery.fn[name] = function (until, selector) {
            var matched = jQuery.map(this, fn, until);
            if (name.slice(-5) !== 'Until') {
                selector = until;
            }
            if (selector && typeof selector === 'string') {
                matched = jQuery.filter(selector, matched);
            }
            if (this.length > 1) {
                if (!guaranteedUnique[name]) {
                    jQuery.uniqueSort(matched);
                }
                if (rparentsprev.test(name)) {
                    matched.reverse();
                }
            }
            return this.pushStack(matched);
        };
    });
    var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
    function createOptions(options) {
        var object = {};
        jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
            object[flag] = true;
        });
        return object;
    }
    jQuery.Callbacks = function (options) {
        options = typeof options === 'string' ? createOptions(options) : jQuery.extend({}, options);
        var firing, memory, fired, locked, list = [], queue = [], firingIndex = -1, fire = function () {
                locked = locked || options.once;
                fired = firing = true;
                for (; queue.length; firingIndex = -1) {
                    memory = queue.shift();
                    while (++firingIndex < list.length) {
                        if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                            firingIndex = list.length;
                            memory = false;
                        }
                    }
                }
                if (!options.memory) {
                    memory = false;
                }
                firing = false;
                if (locked) {
                    if (memory) {
                        list = [];
                    } else {
                        list = '';
                    }
                }
            }, self = {
                add: function () {
                    if (list) {
                        if (memory && !firing) {
                            firingIndex = list.length - 1;
                            queue.push(memory);
                        }
                        (function add(args) {
                            jQuery.each(args, function (_, arg) {
                                if (isFunction(arg)) {
                                    if (!options.unique || !self.has(arg)) {
                                        list.push(arg);
                                    }
                                } else if (arg && arg.length && toType(arg) !== 'string') {
                                    add(arg);
                                }
                            });
                        }(arguments));
                        if (memory && !firing) {
                            fire();
                        }
                    }
                    return this;
                },
                remove: function () {
                    jQuery.each(arguments, function (_, arg) {
                        var index;
                        while ((index = jQuery.inArray(arg, list, index)) > -1) {
                            list.splice(index, 1);
                            if (index <= firingIndex) {
                                firingIndex--;
                            }
                        }
                    });
                    return this;
                },
                has: function (fn) {
                    return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
                },
                empty: function () {
                    if (list) {
                        list = [];
                    }
                    return this;
                },
                disable: function () {
                    locked = queue = [];
                    list = memory = '';
                    return this;
                },
                disabled: function () {
                    return !list;
                },
                lock: function () {
                    locked = queue = [];
                    if (!memory && !firing) {
                        list = memory = '';
                    }
                    return this;
                },
                locked: function () {
                    return !!locked;
                },
                fireWith: function (context, args) {
                    if (!locked) {
                        args = args || [];
                        args = [
                            context,
                            args.slice ? args.slice() : args
                        ];
                        queue.push(args);
                        if (!firing) {
                            fire();
                        }
                    }
                    return this;
                },
                fire: function () {
                    self.fireWith(this, arguments);
                    return this;
                },
                fired: function () {
                    return !!fired;
                }
            };
        return self;
    };
    function Identity(v) {
        return v;
    }
    function Thrower(ex) {
        throw ex;
    }
    function adoptValue(value, resolve, reject, noValue) {
        var method;
        try {
            if (value && isFunction(method = value.promise)) {
                method.call(value).done(resolve).fail(reject);
            } else if (value && isFunction(method = value.then)) {
                method.call(value, resolve, reject);
            } else {
                resolve.apply(undefined, [value].slice(noValue));
            }
        } catch (value) {
            reject.apply(undefined, [value]);
        }
    }
    jQuery.extend({
        Deferred: function (func) {
            var tuples = [
                    [
                        'notify',
                        'progress',
                        jQuery.Callbacks('memory'),
                        jQuery.Callbacks('memory'),
                        2
                    ],
                    [
                        'resolve',
                        'done',
                        jQuery.Callbacks('once memory'),
                        jQuery.Callbacks('once memory'),
                        0,
                        'resolved'
                    ],
                    [
                        'reject',
                        'fail',
                        jQuery.Callbacks('once memory'),
                        jQuery.Callbacks('once memory'),
                        1,
                        'rejected'
                    ]
                ], state = 'pending', promise = {
                    state: function () {
                        return state;
                    },
                    always: function () {
                        deferred.done(arguments).fail(arguments);
                        return this;
                    },
                    'catch': function (fn) {
                        return promise.then(null, fn);
                    },
                    pipe: function () {
                        var fns = arguments;
                        return jQuery.Deferred(function (newDefer) {
                            jQuery.each(tuples, function (i, tuple) {
                                var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];
                                deferred[tuple[1]](function () {
                                    var returned = fn && fn.apply(this, arguments);
                                    if (returned && isFunction(returned.promise)) {
                                        returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                                    } else {
                                        newDefer[tuple[0] + 'With'](this, fn ? [returned] : arguments);
                                    }
                                });
                            });
                            fns = null;
                        }).promise();
                    },
                    then: function (onFulfilled, onRejected, onProgress) {
                        var maxDepth = 0;
                        function resolve(depth, deferred, handler, special) {
                            return function () {
                                var that = this, args = arguments, mightThrow = function () {
                                        var returned, then;
                                        if (depth < maxDepth) {
                                            return;
                                        }
                                        returned = handler.apply(that, args);
                                        if (returned === deferred.promise()) {
                                            throw new TypeError('Thenable self-resolution');
                                        }
                                        then = returned && (typeof returned === 'object' || typeof returned === 'function') && returned.then;
                                        if (isFunction(then)) {
                                            if (special) {
                                                then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));
                                            } else {
                                                maxDepth++;
                                                then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
                                            }
                                        } else {
                                            if (handler !== Identity) {
                                                that = undefined;
                                                args = [returned];
                                            }
                                            (special || deferred.resolveWith)(that, args);
                                        }
                                    }, process = special ? mightThrow : function () {
                                        try {
                                            mightThrow();
                                        } catch (e) {
                                            if (jQuery.Deferred.exceptionHook) {
                                                jQuery.Deferred.exceptionHook(e, process.stackTrace);
                                            }
                                            if (depth + 1 >= maxDepth) {
                                                if (handler !== Thrower) {
                                                    that = undefined;
                                                    args = [e];
                                                }
                                                deferred.rejectWith(that, args);
                                            }
                                        }
                                    };
                                if (depth) {
                                    process();
                                } else {
                                    if (jQuery.Deferred.getStackHook) {
                                        process.stackTrace = jQuery.Deferred.getStackHook();
                                    }
                                    window.setTimeout(process);
                                }
                            };
                        }
                        return jQuery.Deferred(function (newDefer) {
                            tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));
                            tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity));
                            tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
                        }).promise();
                    },
                    promise: function (obj) {
                        return obj != null ? jQuery.extend(obj, promise) : promise;
                    }
                }, deferred = {};
            jQuery.each(tuples, function (i, tuple) {
                var list = tuple[2], stateString = tuple[5];
                promise[tuple[1]] = list.add;
                if (stateString) {
                    list.add(function () {
                        state = stateString;
                    }, tuples[3 - i][2].disable, tuples[3 - i][3].disable, tuples[0][2].lock, tuples[0][3].lock);
                }
                list.add(tuple[3].fire);
                deferred[tuple[0]] = function () {
                    deferred[tuple[0] + 'With'](this === deferred ? undefined : this, arguments);
                    return this;
                };
                deferred[tuple[0] + 'With'] = list.fireWith;
            });
            promise.promise(deferred);
            if (func) {
                func.call(deferred, deferred);
            }
            return deferred;
        },
        when: function (singleValue) {
            var remaining = arguments.length, i = remaining, resolveContexts = Array(i), resolveValues = slice.call(arguments), master = jQuery.Deferred(), updateFunc = function (i) {
                    return function (value) {
                        resolveContexts[i] = this;
                        resolveValues[i] = arguments.length > 1 ? slice.call(arguments) : value;
                        if (!--remaining) {
                            master.resolveWith(resolveContexts, resolveValues);
                        }
                    };
                };
            if (remaining <= 1) {
                adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining);
                if (master.state() === 'pending' || isFunction(resolveValues[i] && resolveValues[i].then)) {
                    return master.then();
                }
            }
            while (i--) {
                adoptValue(resolveValues[i], updateFunc(i), master.reject);
            }
            return master.promise();
        }
    });
    var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
    jQuery.Deferred.exceptionHook = function (error, stack) {
        if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
            window.console.warn('jQuery.Deferred exception: ' + error.message, error.stack, stack);
        }
    };
    jQuery.readyException = function (error) {
        window.setTimeout(function () {
            throw error;
        });
    };
    var readyList = jQuery.Deferred();
    jQuery.fn.ready = function (fn) {
        readyList.then(fn).catch(function (error) {
            jQuery.readyException(error);
        });
        return this;
    };
    jQuery.extend({
        isReady: false,
        readyWait: 1,
        ready: function (wait) {
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
            }
            jQuery.isReady = true;
            if (wait !== true && --jQuery.readyWait > 0) {
                return;
            }
            readyList.resolveWith(document, [jQuery]);
        }
    });
    jQuery.ready.then = readyList.then;
    function completed() {
        document.removeEventListener('DOMContentLoaded', completed);
        window.removeEventListener('load', completed);
        jQuery.ready();
    }
    if (document.readyState === 'complete' || document.readyState !== 'loading' && !document.documentElement.doScroll) {
        window.setTimeout(jQuery.ready);
    } else {
        document.addEventListener('DOMContentLoaded', completed);
        window.addEventListener('load', completed);
    }
    var access = function (elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0, len = elems.length, bulk = key == null;
        if (toType(key) === 'object') {
            chainable = true;
            for (i in key) {
                access(elems, fn, i, key[i], true, emptyGet, raw);
            }
        } else if (value !== undefined) {
            chainable = true;
            if (!isFunction(value)) {
                raw = true;
            }
            if (bulk) {
                if (raw) {
                    fn.call(elems, value);
                    fn = null;
                } else {
                    bulk = fn;
                    fn = function (elem, key, value) {
                        return bulk.call(jQuery(elem), value);
                    };
                }
            }
            if (fn) {
                for (; i < len; i++) {
                    fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
                }
            }
        }
        if (chainable) {
            return elems;
        }
        if (bulk) {
            return fn.call(elems);
        }
        return len ? fn(elems[0], key) : emptyGet;
    };
    var rmsPrefix = /^-ms-/, rdashAlpha = /-([a-z])/g;
    function fcamelCase(all, letter) {
        return letter.toUpperCase();
    }
    function camelCase(string) {
        return string.replace(rmsPrefix, 'ms-').replace(rdashAlpha, fcamelCase);
    }
    var acceptData = function (owner) {
        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
    };
    function Data() {
        this.expando = jQuery.expando + Data.uid++;
    }
    Data.uid = 1;
    Data.prototype = {
        cache: function (owner) {
            var value = owner[this.expando];
            if (!value) {
                value = {};
                if (acceptData(owner)) {
                    if (owner.nodeType) {
                        owner[this.expando] = value;
                    } else {
                        Object.defineProperty(owner, this.expando, {
                            value: value,
                            configurable: true
                        });
                    }
                }
            }
            return value;
        },
        set: function (owner, data, value) {
            var prop, cache = this.cache(owner);
            if (typeof data === 'string') {
                cache[camelCase(data)] = value;
            } else {
                for (prop in data) {
                    cache[camelCase(prop)] = data[prop];
                }
            }
            return cache;
        },
        get: function (owner, key) {
            return key === undefined ? this.cache(owner) : owner[this.expando] && owner[this.expando][camelCase(key)];
        },
        access: function (owner, key, value) {
            if (key === undefined || key && typeof key === 'string' && value === undefined) {
                return this.get(owner, key);
            }
            this.set(owner, key, value);
            return value !== undefined ? value : key;
        },
        remove: function (owner, key) {
            var i, cache = owner[this.expando];
            if (cache === undefined) {
                return;
            }
            if (key !== undefined) {
                if (Array.isArray(key)) {
                    key = key.map(camelCase);
                } else {
                    key = camelCase(key);
                    key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
                }
                i = key.length;
                while (i--) {
                    delete cache[key[i]];
                }
            }
            if (key === undefined || jQuery.isEmptyObject(cache)) {
                if (owner.nodeType) {
                    owner[this.expando] = undefined;
                } else {
                    delete owner[this.expando];
                }
            }
        },
        hasData: function (owner) {
            var cache = owner[this.expando];
            return cache !== undefined && !jQuery.isEmptyObject(cache);
        }
    };
    var dataPriv = new Data();
    var dataUser = new Data();
    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
    function getData(data) {
        if (data === 'true') {
            return true;
        }
        if (data === 'false') {
            return false;
        }
        if (data === 'null') {
            return null;
        }
        if (data === +data + '') {
            return +data;
        }
        if (rbrace.test(data)) {
            return JSON.parse(data);
        }
        return data;
    }
    function dataAttr(elem, key, data) {
        var name;
        if (data === undefined && elem.nodeType === 1) {
            name = 'data-' + key.replace(rmultiDash, '-$&').toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === 'string') {
                try {
                    data = getData(data);
                } catch (e) {
                }
                dataUser.set(elem, key, data);
            } else {
                data = undefined;
            }
        }
        return data;
    }
    jQuery.extend({
        hasData: function (elem) {
            return dataUser.hasData(elem) || dataPriv.hasData(elem);
        },
        data: function (elem, name, data) {
            return dataUser.access(elem, name, data);
        },
        removeData: function (elem, name) {
            dataUser.remove(elem, name);
        },
        _data: function (elem, name, data) {
            return dataPriv.access(elem, name, data);
        },
        _removeData: function (elem, name) {
            dataPriv.remove(elem, name);
        }
    });
    jQuery.fn.extend({
        data: function (key, value) {
            var i, name, data, elem = this[0], attrs = elem && elem.attributes;
            if (key === undefined) {
                if (this.length) {
                    data = dataUser.get(elem);
                    if (elem.nodeType === 1 && !dataPriv.get(elem, 'hasDataAttrs')) {
                        i = attrs.length;
                        while (i--) {
                            if (attrs[i]) {
                                name = attrs[i].name;
                                if (name.indexOf('data-') === 0) {
                                    name = camelCase(name.slice(5));
                                    dataAttr(elem, name, data[name]);
                                }
                            }
                        }
                        dataPriv.set(elem, 'hasDataAttrs', true);
                    }
                }
                return data;
            }
            if (typeof key === 'object') {
                return this.each(function () {
                    dataUser.set(this, key);
                });
            }
            return access(this, function (value) {
                var data;
                if (elem && value === undefined) {
                    data = dataUser.get(elem, key);
                    if (data !== undefined) {
                        return data;
                    }
                    data = dataAttr(elem, key);
                    if (data !== undefined) {
                        return data;
                    }
                    return;
                }
                this.each(function () {
                    dataUser.set(this, key, value);
                });
            }, null, value, arguments.length > 1, null, true);
        },
        removeData: function (key) {
            return this.each(function () {
                dataUser.remove(this, key);
            });
        }
    });
    jQuery.extend({
        queue: function (elem, type, data) {
            var queue;
            if (elem) {
                type = (type || 'fx') + 'queue';
                queue = dataPriv.get(elem, type);
                if (data) {
                    if (!queue || Array.isArray(data)) {
                        queue = dataPriv.access(elem, type, jQuery.makeArray(data));
                    } else {
                        queue.push(data);
                    }
                }
                return queue || [];
            }
        },
        dequeue: function (elem, type) {
            type = type || 'fx';
            var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function () {
                    jQuery.dequeue(elem, type);
                };
            if (fn === 'inprogress') {
                fn = queue.shift();
                startLength--;
            }
            if (fn) {
                if (type === 'fx') {
                    queue.unshift('inprogress');
                }
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }
            if (!startLength && hooks) {
                hooks.empty.fire();
            }
        },
        _queueHooks: function (elem, type) {
            var key = type + 'queueHooks';
            return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
                empty: jQuery.Callbacks('once memory').add(function () {
                    dataPriv.remove(elem, [
                        type + 'queue',
                        key
                    ]);
                })
            });
        }
    });
    jQuery.fn.extend({
        queue: function (type, data) {
            var setter = 2;
            if (typeof type !== 'string') {
                data = type;
                type = 'fx';
                setter--;
            }
            if (arguments.length < setter) {
                return jQuery.queue(this[0], type);
            }
            return data === undefined ? this : this.each(function () {
                var queue = jQuery.queue(this, type, data);
                jQuery._queueHooks(this, type);
                if (type === 'fx' && queue[0] !== 'inprogress') {
                    jQuery.dequeue(this, type);
                }
            });
        },
        dequeue: function (type) {
            return this.each(function () {
                jQuery.dequeue(this, type);
            });
        },
        clearQueue: function (type) {
            return this.queue(type || 'fx', []);
        },
        promise: function (type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function () {
                    if (!--count) {
                        defer.resolveWith(elements, [elements]);
                    }
                };
            if (typeof type !== 'string') {
                obj = type;
                type = undefined;
            }
            type = type || 'fx';
            while (i--) {
                tmp = dataPriv.get(elements[i], type + 'queueHooks');
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
    var rcssNum = new RegExp('^(?:([+-])=|)(' + pnum + ')([a-z%]*)$', 'i');
    var cssExpand = [
        'Top',
        'Right',
        'Bottom',
        'Left'
    ];
    var documentElement = document.documentElement;
    var isAttached = function (elem) {
            return jQuery.contains(elem.ownerDocument, elem);
        }, composed = { composed: true };
    if (documentElement.attachShadow) {
        isAttached = function (elem) {
            return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
        };
    }
    var isHiddenWithinTree = function (elem, el) {
        elem = el || elem;
        return elem.style.display === 'none' || elem.style.display === '' && isAttached(elem) && jQuery.css(elem, 'display') === 'none';
    };
    var swap = function (elem, options, callback, args) {
        var ret, name, old = {};
        for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }
        ret = callback.apply(elem, args || []);
        for (name in options) {
            elem.style[name] = old[name];
        }
        return ret;
    };
    function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted, scale, maxIterations = 20, currentValue = tween ? function () {
                return tween.cur();
            } : function () {
                return jQuery.css(elem, prop, '');
            }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? '' : 'px'), initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== 'px' && +initial) && rcssNum.exec(jQuery.css(elem, prop));
        if (initialInUnit && initialInUnit[3] !== unit) {
            initial = initial / 2;
            unit = unit || initialInUnit[3];
            initialInUnit = +initial || 1;
            while (maxIterations--) {
                jQuery.style(elem, prop, initialInUnit + unit);
                if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
                    maxIterations = 0;
                }
                initialInUnit = initialInUnit / scale;
            }
            initialInUnit = initialInUnit * 2;
            jQuery.style(elem, prop, initialInUnit + unit);
            valueParts = valueParts || [];
        }
        if (valueParts) {
            initialInUnit = +initialInUnit || +initial || 0;
            adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
            if (tween) {
                tween.unit = unit;
                tween.start = initialInUnit;
                tween.end = adjusted;
            }
        }
        return adjusted;
    }
    var defaultDisplayMap = {};
    function getDefaultDisplay(elem) {
        var temp, doc = elem.ownerDocument, nodeName = elem.nodeName, display = defaultDisplayMap[nodeName];
        if (display) {
            return display;
        }
        temp = doc.body.appendChild(doc.createElement(nodeName));
        display = jQuery.css(temp, 'display');
        temp.parentNode.removeChild(temp);
        if (display === 'none') {
            display = 'block';
        }
        defaultDisplayMap[nodeName] = display;
        return display;
    }
    function showHide(elements, show) {
        var display, elem, values = [], index = 0, length = elements.length;
        for (; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            display = elem.style.display;
            if (show) {
                if (display === 'none') {
                    values[index] = dataPriv.get(elem, 'display') || null;
                    if (!values[index]) {
                        elem.style.display = '';
                    }
                }
                if (elem.style.display === '' && isHiddenWithinTree(elem)) {
                    values[index] = getDefaultDisplay(elem);
                }
            } else {
                if (display !== 'none') {
                    values[index] = 'none';
                    dataPriv.set(elem, 'display', display);
                }
            }
        }
        for (index = 0; index < length; index++) {
            if (values[index] != null) {
                elements[index].style.display = values[index];
            }
        }
        return elements;
    }
    jQuery.fn.extend({
        show: function () {
            return showHide(this, true);
        },
        hide: function () {
            return showHide(this);
        },
        toggle: function (state) {
            if (typeof state === 'boolean') {
                return state ? this.show() : this.hide();
            }
            return this.each(function () {
                if (isHiddenWithinTree(this)) {
                    jQuery(this).show();
                } else {
                    jQuery(this).hide();
                }
            });
        }
    });
    var rcheckableType = /^(?:checkbox|radio)$/i;
    var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
    var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;
    var wrapMap = {
        option: [
            1,
            '<select multiple=\'multiple\'>',
            '</select>'
        ],
        thead: [
            1,
            '<table>',
            '</table>'
        ],
        col: [
            2,
            '<table><colgroup>',
            '</colgroup></table>'
        ],
        tr: [
            2,
            '<table><tbody>',
            '</tbody></table>'
        ],
        td: [
            3,
            '<table><tbody><tr>',
            '</tr></tbody></table>'
        ],
        _default: [
            0,
            '',
            ''
        ]
    };
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    function getAll(context, tag) {
        var ret;
        if (typeof context.getElementsByTagName !== 'undefined') {
            ret = context.getElementsByTagName(tag || '*');
        } else if (typeof context.querySelectorAll !== 'undefined') {
            ret = context.querySelectorAll(tag || '*');
        } else {
            ret = [];
        }
        if (tag === undefined || tag && nodeName(context, tag)) {
            return jQuery.merge([context], ret);
        }
        return ret;
    }
    function setGlobalEval(elems, refElements) {
        var i = 0, l = elems.length;
        for (; i < l; i++) {
            dataPriv.set(elems[i], 'globalEval', !refElements || dataPriv.get(refElements[i], 'globalEval'));
        }
    }
    var rhtml = /<|&#?\w+;/;
    function buildFragment(elems, context, scripts, selection, ignored) {
        var elem, tmp, tag, wrap, attached, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
        for (; i < l; i++) {
            elem = elems[i];
            if (elem || elem === 0) {
                if (toType(elem) === 'object') {
                    jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
                } else if (!rhtml.test(elem)) {
                    nodes.push(context.createTextNode(elem));
                } else {
                    tmp = tmp || fragment.appendChild(context.createElement('div'));
                    tag = (rtagName.exec(elem) || [
                        '',
                        ''
                    ])[1].toLowerCase();
                    wrap = wrapMap[tag] || wrapMap._default;
                    tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];
                    j = wrap[0];
                    while (j--) {
                        tmp = tmp.lastChild;
                    }
                    jQuery.merge(nodes, tmp.childNodes);
                    tmp = fragment.firstChild;
                    tmp.textContent = '';
                }
            }
        }
        fragment.textContent = '';
        i = 0;
        while (elem = nodes[i++]) {
            if (selection && jQuery.inArray(elem, selection) > -1) {
                if (ignored) {
                    ignored.push(elem);
                }
                continue;
            }
            attached = isAttached(elem);
            tmp = getAll(fragment.appendChild(elem), 'script');
            if (attached) {
                setGlobalEval(tmp);
            }
            if (scripts) {
                j = 0;
                while (elem = tmp[j++]) {
                    if (rscriptType.test(elem.type || '')) {
                        scripts.push(elem);
                    }
                }
            }
        }
        return fragment;
    }
    (function () {
        var fragment = document.createDocumentFragment(), div = fragment.appendChild(document.createElement('div')), input = document.createElement('input');
        input.setAttribute('type', 'radio');
        input.setAttribute('checked', 'checked');
        input.setAttribute('name', 't');
        div.appendChild(input);
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        div.innerHTML = '<textarea>x</textarea>';
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
    }());
    var rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/, rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
    function returnTrue() {
        return true;
    }
    function returnFalse() {
        return false;
    }
    function expectSync(elem, type) {
        return elem === safeActiveElement() === (type === 'focus');
    }
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch (err) {
        }
    }
    function on(elem, types, selector, data, fn, one) {
        var origFn, type;
        if (typeof types === 'object') {
            if (typeof selector !== 'string') {
                data = data || selector;
                selector = undefined;
            }
            for (type in types) {
                on(elem, type, selector, data, types[type], one);
            }
            return elem;
        }
        if (data == null && fn == null) {
            fn = selector;
            data = selector = undefined;
        } else if (fn == null) {
            if (typeof selector === 'string') {
                fn = data;
                data = undefined;
            } else {
                fn = data;
                data = selector;
                selector = undefined;
            }
        }
        if (fn === false) {
            fn = returnFalse;
        } else if (!fn) {
            return elem;
        }
        if (one === 1) {
            origFn = fn;
            fn = function (event) {
                jQuery().off(event);
                return origFn.apply(this, arguments);
            };
            fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
        }
        return elem.each(function () {
            jQuery.event.add(this, types, fn, data, selector);
        });
    }
    jQuery.event = {
        global: {},
        add: function (elem, types, handler, data, selector) {
            var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.get(elem);
            if (!elemData) {
                return;
            }
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }
            if (selector) {
                jQuery.find.matchesSelector(documentElement, selector);
            }
            if (!handler.guid) {
                handler.guid = jQuery.guid++;
            }
            if (!(events = elemData.events)) {
                events = elemData.events = {};
            }
            if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function (e) {
                    return typeof jQuery !== 'undefined' && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
                };
            }
            types = (types || '').match(rnothtmlwhite) || [''];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || '').split('.').sort();
                if (!type) {
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                special = jQuery.event.special[type] || {};
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join('.')
                }, handleObjIn);
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle);
                        }
                    }
                }
                if (special.add) {
                    special.add.call(elem, handleObj);
                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid;
                    }
                }
                if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                } else {
                    handlers.push(handleObj);
                }
                jQuery.event.global[type] = true;
            }
        },
        remove: function (elem, types, handler, selector, mappedTypes) {
            var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
            if (!elemData || !(events = elemData.events)) {
                return;
            }
            types = (types || '').match(rnothtmlwhite) || [''];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || '').split('.').sort();
                if (!type) {
                    for (type in events) {
                        jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    }
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)');
                origCount = j = handlers.length;
                while (j--) {
                    handleObj = handlers[j];
                    if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === '**' && handleObj.selector)) {
                        handlers.splice(j, 1);
                        if (handleObj.selector) {
                            handlers.delegateCount--;
                        }
                        if (special.remove) {
                            special.remove.call(elem, handleObj);
                        }
                    }
                }
                if (origCount && !handlers.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                        jQuery.removeEvent(elem, type, elemData.handle);
                    }
                    delete events[type];
                }
            }
            if (jQuery.isEmptyObject(events)) {
                dataPriv.remove(elem, 'handle events');
            }
        },
        dispatch: function (nativeEvent) {
            var event = jQuery.event.fix(nativeEvent);
            var i, j, ret, matched, handleObj, handlerQueue, args = new Array(arguments.length), handlers = (dataPriv.get(this, 'events') || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
            args[0] = event;
            for (i = 1; i < arguments.length; i++) {
                args[i] = arguments[i];
            }
            event.delegateTarget = this;
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                return;
            }
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;
                j = 0;
                while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                    if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
                        event.handleObj = handleObj;
                        event.data = handleObj.data;
                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                        if (ret !== undefined) {
                            if ((event.result = ret) === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }
            if (special.postDispatch) {
                special.postDispatch.call(this, event);
            }
            return event.result;
        },
        handlers: function (event, handlers) {
            var i, handleObj, sel, matchedHandlers, matchedSelectors, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            if (delegateCount && cur.nodeType && !(event.type === 'click' && event.button >= 1)) {
                for (; cur !== this; cur = cur.parentNode || this) {
                    if (cur.nodeType === 1 && !(event.type === 'click' && cur.disabled === true)) {
                        matchedHandlers = [];
                        matchedSelectors = {};
                        for (i = 0; i < delegateCount; i++) {
                            handleObj = handlers[i];
                            sel = handleObj.selector + ' ';
                            if (matchedSelectors[sel] === undefined) {
                                matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
                            }
                            if (matchedSelectors[sel]) {
                                matchedHandlers.push(handleObj);
                            }
                        }
                        if (matchedHandlers.length) {
                            handlerQueue.push({
                                elem: cur,
                                handlers: matchedHandlers
                            });
                        }
                    }
                }
            }
            cur = this;
            if (delegateCount < handlers.length) {
                handlerQueue.push({
                    elem: cur,
                    handlers: handlers.slice(delegateCount)
                });
            }
            return handlerQueue;
        },
        addProp: function (name, hook) {
            Object.defineProperty(jQuery.Event.prototype, name, {
                enumerable: true,
                configurable: true,
                get: isFunction(hook) ? function () {
                    if (this.originalEvent) {
                        return hook(this.originalEvent);
                    }
                } : function () {
                    if (this.originalEvent) {
                        return this.originalEvent[name];
                    }
                },
                set: function (value) {
                    Object.defineProperty(this, name, {
                        enumerable: true,
                        configurable: true,
                        writable: true,
                        value: value
                    });
                }
            });
        },
        fix: function (originalEvent) {
            return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
        },
        special: {
            load: { noBubble: true },
            click: {
                setup: function (data) {
                    var el = this || data;
                    if (rcheckableType.test(el.type) && el.click && nodeName(el, 'input') && dataPriv.get(el, 'click') === undefined) {
                        leverageNative(el, 'click', returnTrue);
                    }
                    return false;
                },
                trigger: function (data) {
                    var el = this || data;
                    if (rcheckableType.test(el.type) && el.click && nodeName(el, 'input') && dataPriv.get(el, 'click') === undefined) {
                        leverageNative(el, 'click');
                    }
                    return true;
                },
                _default: function (event) {
                    var target = event.target;
                    return rcheckableType.test(target.type) && target.click && nodeName(target, 'input') && dataPriv.get(target, 'click') || nodeName(target, 'a');
                }
            },
            beforeunload: {
                postDispatch: function (event) {
                    if (event.result !== undefined && event.originalEvent) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        }
    };
    function leverageNative(el, type, expectSync) {
        if (!expectSync) {
            jQuery.event.add(el, type, returnTrue);
            return;
        }
        dataPriv.set(el, type, false);
        jQuery.event.add(el, type, {
            namespace: false,
            handler: function (event) {
                var notAsync, result, saved = dataPriv.get(this, type);
                if (event.isTrigger & 1 && this[type]) {
                    if (!saved) {
                        saved = slice.call(arguments);
                        dataPriv.set(this, type, saved);
                        notAsync = expectSync(this, type);
                        this[type]();
                        result = dataPriv.get(this, type);
                        if (saved !== result || notAsync) {
                            dataPriv.set(this, type, false);
                        } else {
                            result = undefined;
                        }
                        if (saved !== result) {
                            event.stopImmediatePropagation();
                            event.preventDefault();
                            return result;
                        }
                    } else if ((jQuery.event.special[type] || {}).delegateType) {
                        event.stopPropagation();
                    }
                } else if (saved) {
                    dataPriv.set(this, type, jQuery.event.trigger(jQuery.extend(saved.shift(), jQuery.Event.prototype), saved, this));
                    event.stopImmediatePropagation();
                }
            }
        });
    }
    jQuery.removeEvent = function (elem, type, handle) {
        if (elem.removeEventListener) {
            elem.removeEventListener(type, handle);
        }
    };
    jQuery.Event = function (src, props) {
        if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
        }
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && src.returnValue === false ? returnTrue : returnFalse;
            this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
            this.currentTarget = src.currentTarget;
            this.relatedTarget = src.relatedTarget;
        } else {
            this.type = src;
        }
        if (props) {
            jQuery.extend(this, props);
        }
        this.timeStamp = src && src.timeStamp || Date.now();
        this[jQuery.expando] = true;
    };
    jQuery.Event.prototype = {
        constructor: jQuery.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        isSimulated: false,
        preventDefault: function () {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (e && !this.isSimulated) {
                e.preventDefault();
            }
        },
        stopPropagation: function () {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
                e.stopPropagation();
            }
        },
        stopImmediatePropagation: function () {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = returnTrue;
            if (e && !this.isSimulated) {
                e.stopImmediatePropagation();
            }
            this.stopPropagation();
        }
    };
    jQuery.each({
        altKey: true,
        bubbles: true,
        cancelable: true,
        changedTouches: true,
        ctrlKey: true,
        detail: true,
        eventPhase: true,
        metaKey: true,
        pageX: true,
        pageY: true,
        shiftKey: true,
        view: true,
        'char': true,
        code: true,
        charCode: true,
        key: true,
        keyCode: true,
        button: true,
        buttons: true,
        clientX: true,
        clientY: true,
        offsetX: true,
        offsetY: true,
        pointerId: true,
        pointerType: true,
        screenX: true,
        screenY: true,
        targetTouches: true,
        toElement: true,
        touches: true,
        which: function (event) {
            var button = event.button;
            if (event.which == null && rkeyEvent.test(event.type)) {
                return event.charCode != null ? event.charCode : event.keyCode;
            }
            if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
                if (button & 1) {
                    return 1;
                }
                if (button & 2) {
                    return 3;
                }
                if (button & 4) {
                    return 2;
                }
                return 0;
            }
            return event.which;
        }
    }, jQuery.event.addProp);
    jQuery.each({
        focus: 'focusin',
        blur: 'focusout'
    }, function (type, delegateType) {
        jQuery.event.special[type] = {
            setup: function () {
                leverageNative(this, type, expectSync);
                return false;
            },
            trigger: function () {
                leverageNative(this, type);
                return true;
            },
            delegateType: delegateType
        };
    });
    jQuery.each({
        mouseenter: 'mouseover',
        mouseleave: 'mouseout',
        pointerenter: 'pointerover',
        pointerleave: 'pointerout'
    }, function (orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function (event) {
                var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
                if (!related || related !== target && !jQuery.contains(target, related)) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });
    jQuery.fn.extend({
        on: function (types, selector, data, fn) {
            return on(this, types, selector, data, fn);
        },
        one: function (types, selector, data, fn) {
            return on(this, types, selector, data, fn, 1);
        },
        off: function (types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + '.' + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                return this;
            }
            if (typeof types === 'object') {
                for (type in types) {
                    this.off(type, selector, types[type]);
                }
                return this;
            }
            if (selector === false || typeof selector === 'function') {
                fn = selector;
                selector = undefined;
            }
            if (fn === false) {
                fn = returnFalse;
            }
            return this.each(function () {
                jQuery.event.remove(this, types, fn, selector);
            });
        }
    });
    var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi, rnoInnerhtml = /<script|<style|<link/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
    function manipulationTarget(elem, content) {
        if (nodeName(elem, 'table') && nodeName(content.nodeType !== 11 ? content : content.firstChild, 'tr')) {
            return jQuery(elem).children('tbody')[0] || elem;
        }
        return elem;
    }
    function disableScript(elem) {
        elem.type = (elem.getAttribute('type') !== null) + '/' + elem.type;
        return elem;
    }
    function restoreScript(elem) {
        if ((elem.type || '').slice(0, 5) === 'true/') {
            elem.type = elem.type.slice(5);
        } else {
            elem.removeAttribute('type');
        }
        return elem;
    }
    function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
        if (dest.nodeType !== 1) {
            return;
        }
        if (dataPriv.hasData(src)) {
            pdataOld = dataPriv.access(src);
            pdataCur = dataPriv.set(dest, pdataOld);
            events = pdataOld.events;
            if (events) {
                delete pdataCur.handle;
                pdataCur.events = {};
                for (type in events) {
                    for (i = 0, l = events[type].length; i < l; i++) {
                        jQuery.event.add(dest, type, events[type][i]);
                    }
                }
            }
        }
        if (dataUser.hasData(src)) {
            udataOld = dataUser.access(src);
            udataCur = jQuery.extend({}, udataOld);
            dataUser.set(dest, udataCur);
        }
    }
    function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase();
        if (nodeName === 'input' && rcheckableType.test(src.type)) {
            dest.checked = src.checked;
        } else if (nodeName === 'input' || nodeName === 'textarea') {
            dest.defaultValue = src.defaultValue;
        }
    }
    function domManip(collection, args, callback, ignored) {
        args = concat.apply([], args);
        var fragment, first, scripts, hasScripts, node, doc, i = 0, l = collection.length, iNoClone = l - 1, value = args[0], valueIsFunction = isFunction(value);
        if (valueIsFunction || l > 1 && typeof value === 'string' && !support.checkClone && rchecked.test(value)) {
            return collection.each(function (index) {
                var self = collection.eq(index);
                if (valueIsFunction) {
                    args[0] = value.call(this, index, self.html());
                }
                domManip(self, args, callback, ignored);
            });
        }
        if (l) {
            fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
            first = fragment.firstChild;
            if (fragment.childNodes.length === 1) {
                fragment = first;
            }
            if (first || ignored) {
                scripts = jQuery.map(getAll(fragment, 'script'), disableScript);
                hasScripts = scripts.length;
                for (; i < l; i++) {
                    node = fragment;
                    if (i !== iNoClone) {
                        node = jQuery.clone(node, true, true);
                        if (hasScripts) {
                            jQuery.merge(scripts, getAll(node, 'script'));
                        }
                    }
                    callback.call(collection[i], node, i);
                }
                if (hasScripts) {
                    doc = scripts[scripts.length - 1].ownerDocument;
                    jQuery.map(scripts, restoreScript);
                    for (i = 0; i < hasScripts; i++) {
                        node = scripts[i];
                        if (rscriptType.test(node.type || '') && !dataPriv.access(node, 'globalEval') && jQuery.contains(doc, node)) {
                            if (node.src && (node.type || '').toLowerCase() !== 'module') {
                                if (jQuery._evalUrl && !node.noModule) {
                                    jQuery._evalUrl(node.src, { nonce: node.nonce || node.getAttribute('nonce') });
                                }
                            } else {
                                DOMEval(node.textContent.replace(rcleanScript, ''), node, doc);
                            }
                        }
                    }
                }
            }
        }
        return collection;
    }
    function remove(elem, selector, keepData) {
        var node, nodes = selector ? jQuery.filter(selector, elem) : elem, i = 0;
        for (; (node = nodes[i]) != null; i++) {
            if (!keepData && node.nodeType === 1) {
                jQuery.cleanData(getAll(node));
            }
            if (node.parentNode) {
                if (keepData && isAttached(node)) {
                    setGlobalEval(getAll(node, 'script'));
                }
                node.parentNode.removeChild(node);
            }
        }
        return elem;
    }
    jQuery.extend({
        htmlPrefilter: function (html) {
            return html.replace(rxhtmlTag, '<$1></$2>');
        },
        clone: function (elem, dataAndEvents, deepDataAndEvents) {
            var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = isAttached(elem);
            if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                destElements = getAll(clone);
                srcElements = getAll(elem);
                for (i = 0, l = srcElements.length; i < l; i++) {
                    fixInput(srcElements[i], destElements[i]);
                }
            }
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);
                    for (i = 0, l = srcElements.length; i < l; i++) {
                        cloneCopyEvent(srcElements[i], destElements[i]);
                    }
                } else {
                    cloneCopyEvent(elem, clone);
                }
            }
            destElements = getAll(clone, 'script');
            if (destElements.length > 0) {
                setGlobalEval(destElements, !inPage && getAll(elem, 'script'));
            }
            return clone;
        },
        cleanData: function (elems) {
            var data, elem, type, special = jQuery.event.special, i = 0;
            for (; (elem = elems[i]) !== undefined; i++) {
                if (acceptData(elem)) {
                    if (data = elem[dataPriv.expando]) {
                        if (data.events) {
                            for (type in data.events) {
                                if (special[type]) {
                                    jQuery.event.remove(elem, type);
                                } else {
                                    jQuery.removeEvent(elem, type, data.handle);
                                }
                            }
                        }
                        elem[dataPriv.expando] = undefined;
                    }
                    if (elem[dataUser.expando]) {
                        elem[dataUser.expando] = undefined;
                    }
                }
            }
        }
    });
    jQuery.fn.extend({
        detach: function (selector) {
            return remove(this, selector, true);
        },
        remove: function (selector) {
            return remove(this, selector);
        },
        text: function (value) {
            return access(this, function (value) {
                return value === undefined ? jQuery.text(this) : this.empty().each(function () {
                    if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                        this.textContent = value;
                    }
                });
            }, null, value, arguments.length);
        },
        append: function () {
            return domManip(this, arguments, function (elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                }
            });
        },
        prepend: function () {
            return domManip(this, arguments, function (elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },
        before: function () {
            return domManip(this, arguments, function (elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                }
            });
        },
        after: function () {
            return domManip(this, arguments, function (elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                }
            });
        },
        empty: function () {
            var elem, i = 0;
            for (; (elem = this[i]) != null; i++) {
                if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                    elem.textContent = '';
                }
            }
            return this;
        },
        clone: function (dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function () {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        html: function (value) {
            return access(this, function (value) {
                var elem = this[0] || {}, i = 0, l = this.length;
                if (value === undefined && elem.nodeType === 1) {
                    return elem.innerHTML;
                }
                if (typeof value === 'string' && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [
                        '',
                        ''
                    ])[1].toLowerCase()]) {
                    value = jQuery.htmlPrefilter(value);
                    try {
                        for (; i < l; i++) {
                            elem = this[i] || {};
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value;
                            }
                        }
                        elem = 0;
                    } catch (e) {
                    }
                }
                if (elem) {
                    this.empty().append(value);
                }
            }, null, value, arguments.length);
        },
        replaceWith: function () {
            var ignored = [];
            return domManip(this, arguments, function (elem) {
                var parent = this.parentNode;
                if (jQuery.inArray(this, ignored) < 0) {
                    jQuery.cleanData(getAll(this));
                    if (parent) {
                        parent.replaceChild(elem, this);
                    }
                }
            }, ignored);
        }
    });
    jQuery.each({
        appendTo: 'append',
        prependTo: 'prepend',
        insertBefore: 'before',
        insertAfter: 'after',
        replaceAll: 'replaceWith'
    }, function (name, original) {
        jQuery.fn[name] = function (selector) {
            var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
            for (; i <= last; i++) {
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);
                push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
        };
    });
    var rnumnonpx = new RegExp('^(' + pnum + ')(?!px)[a-z%]+$', 'i');
    var getStyles = function (elem) {
        var view = elem.ownerDocument.defaultView;
        if (!view || !view.opener) {
            view = window;
        }
        return view.getComputedStyle(elem);
    };
    var rboxStyle = new RegExp(cssExpand.join('|'), 'i');
    (function () {
        function computeStyleTests() {
            if (!div) {
                return;
            }
            container.style.cssText = 'position:absolute;left:-11111px;width:60px;' + 'margin-top:1px;padding:0;border:0';
            div.style.cssText = 'position:relative;display:block;box-sizing:border-box;overflow:scroll;' + 'margin:auto;border:1px;padding:1px;' + 'width:60%;top:1%';
            documentElement.appendChild(container).appendChild(div);
            var divStyle = window.getComputedStyle(div);
            pixelPositionVal = divStyle.top !== '1%';
            reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;
            div.style.right = '60%';
            pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;
            boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;
            div.style.position = 'absolute';
            scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
            documentElement.removeChild(container);
            div = null;
        }
        function roundPixelMeasures(measure) {
            return Math.round(parseFloat(measure));
        }
        var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal, reliableMarginLeftVal, container = document.createElement('div'), div = document.createElement('div');
        if (!div.style) {
            return;
        }
        div.style.backgroundClip = 'content-box';
        div.cloneNode(true).style.backgroundClip = '';
        support.clearCloneStyle = div.style.backgroundClip === 'content-box';
        jQuery.extend(support, {
            boxSizingReliable: function () {
                computeStyleTests();
                return boxSizingReliableVal;
            },
            pixelBoxStyles: function () {
                computeStyleTests();
                return pixelBoxStylesVal;
            },
            pixelPosition: function () {
                computeStyleTests();
                return pixelPositionVal;
            },
            reliableMarginLeft: function () {
                computeStyleTests();
                return reliableMarginLeftVal;
            },
            scrollboxSize: function () {
                computeStyleTests();
                return scrollboxSizeVal;
            }
        });
    }());
    function curCSS(elem, name, computed) {
        var width, minWidth, maxWidth, ret, style = elem.style;
        computed = computed || getStyles(elem);
        if (computed) {
            ret = computed.getPropertyValue(name) || computed[name];
            if (ret === '' && !isAttached(elem)) {
                ret = jQuery.style(elem, name);
            }
            if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
                width = style.width;
                minWidth = style.minWidth;
                maxWidth = style.maxWidth;
                style.minWidth = style.maxWidth = style.width = ret;
                ret = computed.width;
                style.width = width;
                style.minWidth = minWidth;
                style.maxWidth = maxWidth;
            }
        }
        return ret !== undefined ? ret + '' : ret;
    }
    function addGetHookIf(conditionFn, hookFn) {
        return {
            get: function () {
                if (conditionFn()) {
                    delete this.get;
                    return;
                }
                return (this.get = hookFn).apply(this, arguments);
            }
        };
    }
    var cssPrefixes = [
            'Webkit',
            'Moz',
            'ms'
        ], emptyStyle = document.createElement('div').style, vendorProps = {};
    function vendorPropName(name) {
        var capName = name[0].toUpperCase() + name.slice(1), i = cssPrefixes.length;
        while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in emptyStyle) {
                return name;
            }
        }
    }
    function finalPropName(name) {
        var final = jQuery.cssProps[name] || vendorProps[name];
        if (final) {
            return final;
        }
        if (name in emptyStyle) {
            return name;
        }
        return vendorProps[name] = vendorPropName(name) || name;
    }
    var rdisplayswap = /^(none|table(?!-c[ea]).+)/, rcustomProp = /^--/, cssShow = {
            position: 'absolute',
            visibility: 'hidden',
            display: 'block'
        }, cssNormalTransform = {
            letterSpacing: '0',
            fontWeight: '400'
        };
    function setPositiveNumber(elem, value, subtract) {
        var matches = rcssNum.exec(value);
        return matches ? Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || 'px') : value;
    }
    function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
        var i = dimension === 'width' ? 1 : 0, extra = 0, delta = 0;
        if (box === (isBorderBox ? 'border' : 'content')) {
            return 0;
        }
        for (; i < 4; i += 2) {
            if (box === 'margin') {
                delta += jQuery.css(elem, box + cssExpand[i], true, styles);
            }
            if (!isBorderBox) {
                delta += jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
                if (box !== 'padding') {
                    delta += jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
                } else {
                    extra += jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
                }
            } else {
                if (box === 'content') {
                    delta -= jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
                }
                if (box !== 'margin') {
                    delta -= jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
                }
            }
        }
        if (!isBorderBox && computedVal >= 0) {
            delta += Math.max(0, Math.ceil(elem['offset' + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5)) || 0;
        }
        return delta;
    }
    function getWidthOrHeight(elem, dimension, extra) {
        var styles = getStyles(elem), boxSizingNeeded = !support.boxSizingReliable() || extra, isBorderBox = boxSizingNeeded && jQuery.css(elem, 'boxSizing', false, styles) === 'border-box', valueIsBorderBox = isBorderBox, val = curCSS(elem, dimension, styles), offsetProp = 'offset' + dimension[0].toUpperCase() + dimension.slice(1);
        if (rnumnonpx.test(val)) {
            if (!extra) {
                return val;
            }
            val = 'auto';
        }
        if ((!support.boxSizingReliable() && isBorderBox || val === 'auto' || !parseFloat(val) && jQuery.css(elem, 'display', false, styles) === 'inline') && elem.getClientRects().length) {
            isBorderBox = jQuery.css(elem, 'boxSizing', false, styles) === 'border-box';
            valueIsBorderBox = offsetProp in elem;
            if (valueIsBorderBox) {
                val = elem[offsetProp];
            }
        }
        val = parseFloat(val) || 0;
        return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? 'border' : 'content'), valueIsBorderBox, styles, val) + 'px';
    }
    jQuery.extend({
        cssHooks: {
            opacity: {
                get: function (elem, computed) {
                    if (computed) {
                        var ret = curCSS(elem, 'opacity');
                        return ret === '' ? '1' : ret;
                    }
                }
            }
        },
        cssNumber: {
            'animationIterationCount': true,
            'columnCount': true,
            'fillOpacity': true,
            'flexGrow': true,
            'flexShrink': true,
            'fontWeight': true,
            'gridArea': true,
            'gridColumn': true,
            'gridColumnEnd': true,
            'gridColumnStart': true,
            'gridRow': true,
            'gridRowEnd': true,
            'gridRowStart': true,
            'lineHeight': true,
            'opacity': true,
            'order': true,
            'orphans': true,
            'widows': true,
            'zIndex': true,
            'zoom': true
        },
        cssProps: {},
        style: function (elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return;
            }
            var ret, type, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name), style = elem.style;
            if (!isCustomProp) {
                name = finalPropName(origName);
            }
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (value !== undefined) {
                type = typeof value;
                if (type === 'string' && (ret = rcssNum.exec(value)) && ret[1]) {
                    value = adjustCSS(elem, name, ret);
                    type = 'number';
                }
                if (value == null || value !== value) {
                    return;
                }
                if (type === 'number' && !isCustomProp) {
                    value += ret && ret[3] || (jQuery.cssNumber[origName] ? '' : 'px');
                }
                if (!support.clearCloneStyle && value === '' && name.indexOf('background') === 0) {
                    style[name] = 'inherit';
                }
                if (!hooks || !('set' in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                    if (isCustomProp) {
                        style.setProperty(name, value);
                    } else {
                        style[name] = value;
                    }
                }
            } else {
                if (hooks && 'get' in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                    return ret;
                }
                return style[name];
            }
        },
        css: function (elem, name, extra, styles) {
            var val, num, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name);
            if (!isCustomProp) {
                name = finalPropName(origName);
            }
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (hooks && 'get' in hooks) {
                val = hooks.get(elem, true, extra);
            }
            if (val === undefined) {
                val = curCSS(elem, name, styles);
            }
            if (val === 'normal' && name in cssNormalTransform) {
                val = cssNormalTransform[name];
            }
            if (extra === '' || extra) {
                num = parseFloat(val);
                return extra === true || isFinite(num) ? num || 0 : val;
            }
            return val;
        }
    });
    jQuery.each([
        'height',
        'width'
    ], function (i, dimension) {
        jQuery.cssHooks[dimension] = {
            get: function (elem, computed, extra) {
                if (computed) {
                    return rdisplayswap.test(jQuery.css(elem, 'display')) && (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
                        return getWidthOrHeight(elem, dimension, extra);
                    }) : getWidthOrHeight(elem, dimension, extra);
                }
            },
            set: function (elem, value, extra) {
                var matches, styles = getStyles(elem), scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === 'absolute', boxSizingNeeded = scrollboxSizeBuggy || extra, isBorderBox = boxSizingNeeded && jQuery.css(elem, 'boxSizing', false, styles) === 'border-box', subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0;
                if (isBorderBox && scrollboxSizeBuggy) {
                    subtract -= Math.ceil(elem['offset' + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, 'border', false, styles) - 0.5);
                }
                if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || 'px') !== 'px') {
                    elem.style[dimension] = value;
                    value = jQuery.css(elem, dimension);
                }
                return setPositiveNumber(elem, value, subtract);
            }
        };
    });
    jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
        if (computed) {
            return (parseFloat(curCSS(elem, 'marginLeft')) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function () {
                return elem.getBoundingClientRect().left;
            })) + 'px';
        }
    });
    jQuery.each({
        margin: '',
        padding: '',
        border: 'Width'
    }, function (prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function (value) {
                var i = 0, expanded = {}, parts = typeof value === 'string' ? value.split(' ') : [value];
                for (; i < 4; i++) {
                    expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                }
                return expanded;
            }
        };
        if (prefix !== 'margin') {
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
    });
    jQuery.fn.extend({
        css: function (name, value) {
            return access(this, function (elem, name, value) {
                var styles, len, map = {}, i = 0;
                if (Array.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;
                    for (; i < len; i++) {
                        map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    }
                    return map;
                }
                return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        }
    });
    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    jQuery.Tween = Tween;
    Tween.prototype = {
        constructor: Tween,
        init: function (elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || jQuery.easing._default;
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? '' : 'px');
        },
        cur: function () {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function (percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) {
                this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
            } else {
                this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
            }
            if (hooks && hooks.set) {
                hooks.set(this);
            } else {
                Tween.propHooks._default.set(this);
            }
            return this;
        }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
        _default: {
            get: function (tween) {
                var result;
                if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
                    return tween.elem[tween.prop];
                }
                result = jQuery.css(tween.elem, tween.prop, '');
                return !result || result === 'auto' ? 0 : result;
            },
            set: function (tween) {
                if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween);
                } else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
                    jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                } else {
                    tween.elem[tween.prop] = tween.now;
                }
            }
        }
    };
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function (tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
                tween.elem[tween.prop] = tween.now;
            }
        }
    };
    jQuery.easing = {
        linear: function (p) {
            return p;
        },
        swing: function (p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
        },
        _default: 'swing'
    };
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.step = {};
    var fxNow, inProgress, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/;
    function schedule() {
        if (inProgress) {
            if (document.hidden === false && window.requestAnimationFrame) {
                window.requestAnimationFrame(schedule);
            } else {
                window.setTimeout(schedule, jQuery.fx.interval);
            }
            jQuery.fx.tick();
        }
    }
    function createFxNow() {
        window.setTimeout(function () {
            fxNow = undefined;
        });
        return fxNow = Date.now();
    }
    function genFx(type, includeWidth) {
        var which, i = 0, attrs = { height: type };
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs['margin' + which] = attrs['padding' + which] = type;
        }
        if (includeWidth) {
            attrs.opacity = attrs.width = type;
        }
        return attrs;
    }
    function createTween(value, prop, animation) {
        var tween, collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners['*']), index = 0, length = collection.length;
        for (; index < length; index++) {
            if (tween = collection[index].call(animation, prop, value)) {
                return tween;
            }
        }
    }
    function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display, isBox = 'width' in props || 'height' in props, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHiddenWithinTree(elem), dataShow = dataPriv.get(elem, 'fxshow');
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, 'fx');
            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function () {
                    if (!hooks.unqueued) {
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;
            anim.always(function () {
                anim.always(function () {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, 'fx').length) {
                        hooks.empty.fire();
                    }
                });
            });
        }
        for (prop in props) {
            value = props[prop];
            if (rfxtypes.test(value)) {
                delete props[prop];
                toggle = toggle || value === 'toggle';
                if (value === (hidden ? 'hide' : 'show')) {
                    if (value === 'show' && dataShow && dataShow[prop] !== undefined) {
                        hidden = true;
                    } else {
                        continue;
                    }
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
            }
        }
        propTween = !jQuery.isEmptyObject(props);
        if (!propTween && jQuery.isEmptyObject(orig)) {
            return;
        }
        if (isBox && elem.nodeType === 1) {
            opts.overflow = [
                style.overflow,
                style.overflowX,
                style.overflowY
            ];
            restoreDisplay = dataShow && dataShow.display;
            if (restoreDisplay == null) {
                restoreDisplay = dataPriv.get(elem, 'display');
            }
            display = jQuery.css(elem, 'display');
            if (display === 'none') {
                if (restoreDisplay) {
                    display = restoreDisplay;
                } else {
                    showHide([elem], true);
                    restoreDisplay = elem.style.display || restoreDisplay;
                    display = jQuery.css(elem, 'display');
                    showHide([elem]);
                }
            }
            if (display === 'inline' || display === 'inline-block' && restoreDisplay != null) {
                if (jQuery.css(elem, 'float') === 'none') {
                    if (!propTween) {
                        anim.done(function () {
                            style.display = restoreDisplay;
                        });
                        if (restoreDisplay == null) {
                            display = style.display;
                            restoreDisplay = display === 'none' ? '' : display;
                        }
                    }
                    style.display = 'inline-block';
                }
            }
        }
        if (opts.overflow) {
            style.overflow = 'hidden';
            anim.always(function () {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2];
            });
        }
        propTween = false;
        for (prop in orig) {
            if (!propTween) {
                if (dataShow) {
                    if ('hidden' in dataShow) {
                        hidden = dataShow.hidden;
                    }
                } else {
                    dataShow = dataPriv.access(elem, 'fxshow', { display: restoreDisplay });
                }
                if (toggle) {
                    dataShow.hidden = !hidden;
                }
                if (hidden) {
                    showHide([elem], true);
                }
                anim.done(function () {
                    if (!hidden) {
                        showHide([elem]);
                    }
                    dataPriv.remove(elem, 'fxshow');
                    for (prop in orig) {
                        jQuery.style(elem, prop, orig[prop]);
                    }
                });
            }
            propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
            if (!(prop in dataShow)) {
                dataShow[prop] = propTween.start;
                if (hidden) {
                    propTween.end = propTween.start;
                    propTween.start = 0;
                }
            }
        }
    }
    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        for (index in props) {
            name = camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (Array.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }
            if (index !== name) {
                props[name] = value;
                delete props[index];
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && 'expand' in hooks) {
                value = hooks.expand(value);
                delete props[name];
                for (index in value) {
                    if (!(index in props)) {
                        props[index] = value[index];
                        specialEasing[index] = easing;
                    }
                }
            } else {
                specialEasing[name] = easing;
            }
        }
    }
    function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = Animation.prefilters.length, deferred = jQuery.Deferred().always(function () {
                delete tick.elem;
            }), tick = function () {
                if (stopped) {
                    return false;
                }
                var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
                for (; index < length; index++) {
                    animation.tweens[index].run(percent);
                }
                deferred.notifyWith(elem, [
                    animation,
                    percent,
                    remaining
                ]);
                if (percent < 1 && length) {
                    return remaining;
                }
                if (!length) {
                    deferred.notifyWith(elem, [
                        animation,
                        1,
                        0
                    ]);
                }
                deferred.resolveWith(elem, [animation]);
                return false;
            }, animation = deferred.promise({
                elem: elem,
                props: jQuery.extend({}, properties),
                opts: jQuery.extend(true, {
                    specialEasing: {},
                    easing: jQuery.easing._default
                }, options),
                originalProperties: properties,
                originalOptions: options,
                startTime: fxNow || createFxNow(),
                duration: options.duration,
                tweens: [],
                createTween: function (prop, end) {
                    var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                    animation.tweens.push(tween);
                    return tween;
                },
                stop: function (gotoEnd) {
                    var index = 0, length = gotoEnd ? animation.tweens.length : 0;
                    if (stopped) {
                        return this;
                    }
                    stopped = true;
                    for (; index < length; index++) {
                        animation.tweens[index].run(1);
                    }
                    if (gotoEnd) {
                        deferred.notifyWith(elem, [
                            animation,
                            1,
                            0
                        ]);
                        deferred.resolveWith(elem, [
                            animation,
                            gotoEnd
                        ]);
                    } else {
                        deferred.rejectWith(elem, [
                            animation,
                            gotoEnd
                        ]);
                    }
                    return this;
                }
            }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (; index < length; index++) {
            result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
                if (isFunction(result.stop)) {
                    jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
                }
                return result;
            }
        }
        jQuery.map(props, createTween, animation);
        if (isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
        }
        animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
        jQuery.fx.timer(jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        }));
        return animation;
    }
    jQuery.Animation = jQuery.extend(Animation, {
        tweeners: {
            '*': [function (prop, value) {
                    var tween = this.createTween(prop, value);
                    adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
                    return tween;
                }]
        },
        tweener: function (props, callback) {
            if (isFunction(props)) {
                callback = props;
                props = ['*'];
            } else {
                props = props.match(rnothtmlwhite);
            }
            var prop, index = 0, length = props.length;
            for (; index < length; index++) {
                prop = props[index];
                Animation.tweeners[prop] = Animation.tweeners[prop] || [];
                Animation.tweeners[prop].unshift(callback);
            }
        },
        prefilters: [defaultPrefilter],
        prefilter: function (callback, prepend) {
            if (prepend) {
                Animation.prefilters.unshift(callback);
            } else {
                Animation.prefilters.push(callback);
            }
        }
    });
    jQuery.speed = function (speed, easing, fn) {
        var opt = speed && typeof speed === 'object' ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing || isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !isFunction(easing) && easing
        };
        if (jQuery.fx.off) {
            opt.duration = 0;
        } else {
            if (typeof opt.duration !== 'number') {
                if (opt.duration in jQuery.fx.speeds) {
                    opt.duration = jQuery.fx.speeds[opt.duration];
                } else {
                    opt.duration = jQuery.fx.speeds._default;
                }
            }
        }
        if (opt.queue == null || opt.queue === true) {
            opt.queue = 'fx';
        }
        opt.old = opt.complete;
        opt.complete = function () {
            if (isFunction(opt.old)) {
                opt.old.call(this);
            }
            if (opt.queue) {
                jQuery.dequeue(this, opt.queue);
            }
        };
        return opt;
    };
    jQuery.fn.extend({
        fadeTo: function (speed, to, easing, callback) {
            return this.filter(isHiddenWithinTree).css('opacity', 0).show().end().animate({ opacity: to }, speed, easing, callback);
        },
        animate: function (prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function () {
                    var anim = Animation(this, jQuery.extend({}, prop), optall);
                    if (empty || dataPriv.get(this, 'finish')) {
                        anim.stop(true);
                    }
                };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function (type, clearQueue, gotoEnd) {
            var stopQueue = function (hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };
            if (typeof type !== 'string') {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue && type !== false) {
                this.queue(type || 'fx', []);
            }
            return this.each(function () {
                var dequeue = true, index = type != null && type + 'queueHooks', timers = jQuery.timers, data = dataPriv.get(this);
                if (index) {
                    if (data[index] && data[index].stop) {
                        stopQueue(data[index]);
                    }
                } else {
                    for (index in data) {
                        if (data[index] && data[index].stop && rrun.test(index)) {
                            stopQueue(data[index]);
                        }
                    }
                }
                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                        timers[index].anim.stop(gotoEnd);
                        dequeue = false;
                        timers.splice(index, 1);
                    }
                }
                if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type);
                }
            });
        },
        finish: function (type) {
            if (type !== false) {
                type = type || 'fx';
            }
            return this.each(function () {
                var index, data = dataPriv.get(this), queue = data[type + 'queue'], hooks = data[type + 'queueHooks'], timers = jQuery.timers, length = queue ? queue.length : 0;
                data.finish = true;
                jQuery.queue(this, type, []);
                if (hooks && hooks.stop) {
                    hooks.stop.call(this, true);
                }
                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && timers[index].queue === type) {
                        timers[index].anim.stop(true);
                        timers.splice(index, 1);
                    }
                }
                for (index = 0; index < length; index++) {
                    if (queue[index] && queue[index].finish) {
                        queue[index].finish.call(this);
                    }
                }
                delete data.finish;
            });
        }
    });
    jQuery.each([
        'toggle',
        'show',
        'hide'
    ], function (i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function (speed, easing, callback) {
            return speed == null || typeof speed === 'boolean' ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
    });
    jQuery.each({
        slideDown: genFx('show'),
        slideUp: genFx('hide'),
        slideToggle: genFx('toggle'),
        fadeIn: { opacity: 'show' },
        fadeOut: { opacity: 'hide' },
        fadeToggle: { opacity: 'toggle' }
    }, function (name, props) {
        jQuery.fn[name] = function (speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });
    jQuery.timers = [];
    jQuery.fx.tick = function () {
        var timer, i = 0, timers = jQuery.timers;
        fxNow = Date.now();
        for (; i < timers.length; i++) {
            timer = timers[i];
            if (!timer() && timers[i] === timer) {
                timers.splice(i--, 1);
            }
        }
        if (!timers.length) {
            jQuery.fx.stop();
        }
        fxNow = undefined;
    };
    jQuery.fx.timer = function (timer) {
        jQuery.timers.push(timer);
        jQuery.fx.start();
    };
    jQuery.fx.interval = 13;
    jQuery.fx.start = function () {
        if (inProgress) {
            return;
        }
        inProgress = true;
        schedule();
    };
    jQuery.fx.stop = function () {
        inProgress = null;
    };
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    };
    jQuery.fn.delay = function (time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || 'fx';
        return this.queue(type, function (next, hooks) {
            var timeout = window.setTimeout(next, time);
            hooks.stop = function () {
                window.clearTimeout(timeout);
            };
        });
    };
    (function () {
        var input = document.createElement('input'), select = document.createElement('select'), opt = select.appendChild(document.createElement('option'));
        input.type = 'checkbox';
        support.checkOn = input.value !== '';
        support.optSelected = opt.selected;
        input = document.createElement('input');
        input.value = 't';
        input.type = 'radio';
        support.radioValue = input.value === 't';
    }());
    var boolHook, attrHandle = jQuery.expr.attrHandle;
    jQuery.fn.extend({
        attr: function (name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function (name) {
            return this.each(function () {
                jQuery.removeAttr(this, name);
            });
        }
    });
    jQuery.extend({
        attr: function (elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            if (typeof elem.getAttribute === 'undefined') {
                return jQuery.prop(elem, name, value);
            }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
            }
            if (value !== undefined) {
                if (value === null) {
                    jQuery.removeAttr(elem, name);
                    return;
                }
                if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                }
                elem.setAttribute(name, value + '');
                return value;
            }
            if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            }
            ret = jQuery.find.attr(elem, name);
            return ret == null ? undefined : ret;
        },
        attrHooks: {
            type: {
                set: function (elem, value) {
                    if (!support.radioValue && value === 'radio' && nodeName(elem, 'input')) {
                        var val = elem.value;
                        elem.setAttribute('type', value);
                        if (val) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        },
        removeAttr: function (elem, value) {
            var name, i = 0, attrNames = value && value.match(rnothtmlwhite);
            if (attrNames && elem.nodeType === 1) {
                while (name = attrNames[i++]) {
                    elem.removeAttribute(name);
                }
            }
        }
    });
    boolHook = {
        set: function (elem, value, name) {
            if (value === false) {
                jQuery.removeAttr(elem, name);
            } else {
                elem.setAttribute(name, name);
            }
            return name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;
        attrHandle[name] = function (elem, name, isXML) {
            var ret, handle, lowercaseName = name.toLowerCase();
            if (!isXML) {
                handle = attrHandle[lowercaseName];
                attrHandle[lowercaseName] = ret;
                ret = getter(elem, name, isXML) != null ? lowercaseName : null;
                attrHandle[lowercaseName] = handle;
            }
            return ret;
        };
    });
    var rfocusable = /^(?:input|select|textarea|button)$/i, rclickable = /^(?:a|area)$/i;
    jQuery.fn.extend({
        prop: function (name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function (name) {
            return this.each(function () {
                delete this[jQuery.propFix[name] || name];
            });
        }
    });
    jQuery.extend({
        prop: function (elem, name, value) {
            var ret, hooks, nType = elem.nodeType;
            if (nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }
            if (value !== undefined) {
                if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                }
                return elem[name] = value;
            }
            if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            }
            return elem[name];
        },
        propHooks: {
            tabIndex: {
                get: function (elem) {
                    var tabindex = jQuery.find.attr(elem, 'tabindex');
                    if (tabindex) {
                        return parseInt(tabindex, 10);
                    }
                    if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
                        return 0;
                    }
                    return -1;
                }
            }
        },
        propFix: {
            'for': 'htmlFor',
            'class': 'className'
        }
    });
    if (!support.optSelected) {
        jQuery.propHooks.selected = {
            get: function (elem) {
                var parent = elem.parentNode;
                if (parent && parent.parentNode) {
                    parent.parentNode.selectedIndex;
                }
                return null;
            },
            set: function (elem) {
                var parent = elem.parentNode;
                if (parent) {
                    parent.selectedIndex;
                    if (parent.parentNode) {
                        parent.parentNode.selectedIndex;
                    }
                }
            }
        };
    }
    jQuery.each([
        'tabIndex',
        'readOnly',
        'maxLength',
        'cellSpacing',
        'cellPadding',
        'rowSpan',
        'colSpan',
        'useMap',
        'frameBorder',
        'contentEditable'
    ], function () {
        jQuery.propFix[this.toLowerCase()] = this;
    });
    function stripAndCollapse(value) {
        var tokens = value.match(rnothtmlwhite) || [];
        return tokens.join(' ');
    }
    function getClass(elem) {
        return elem.getAttribute && elem.getAttribute('class') || '';
    }
    function classesToArray(value) {
        if (Array.isArray(value)) {
            return value;
        }
        if (typeof value === 'string') {
            return value.match(rnothtmlwhite) || [];
        }
        return [];
    }
    jQuery.fn.extend({
        addClass: function (value) {
            var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
            if (isFunction(value)) {
                return this.each(function (j) {
                    jQuery(this).addClass(value.call(this, j, getClass(this)));
                });
            }
            classes = classesToArray(value);
            if (classes.length) {
                while (elem = this[i++]) {
                    curValue = getClass(elem);
                    cur = elem.nodeType === 1 && ' ' + stripAndCollapse(curValue) + ' ';
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) {
                            if (cur.indexOf(' ' + clazz + ' ') < 0) {
                                cur += clazz + ' ';
                            }
                        }
                        finalValue = stripAndCollapse(cur);
                        if (curValue !== finalValue) {
                            elem.setAttribute('class', finalValue);
                        }
                    }
                }
            }
            return this;
        },
        removeClass: function (value) {
            var classes, elem, cur, curValue, clazz, j, finalValue, i = 0;
            if (isFunction(value)) {
                return this.each(function (j) {
                    jQuery(this).removeClass(value.call(this, j, getClass(this)));
                });
            }
            if (!arguments.length) {
                return this.attr('class', '');
            }
            classes = classesToArray(value);
            if (classes.length) {
                while (elem = this[i++]) {
                    curValue = getClass(elem);
                    cur = elem.nodeType === 1 && ' ' + stripAndCollapse(curValue) + ' ';
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) {
                            while (cur.indexOf(' ' + clazz + ' ') > -1) {
                                cur = cur.replace(' ' + clazz + ' ', ' ');
                            }
                        }
                        finalValue = stripAndCollapse(cur);
                        if (curValue !== finalValue) {
                            elem.setAttribute('class', finalValue);
                        }
                    }
                }
            }
            return this;
        },
        toggleClass: function (value, stateVal) {
            var type = typeof value, isValidValue = type === 'string' || Array.isArray(value);
            if (typeof stateVal === 'boolean' && isValidValue) {
                return stateVal ? this.addClass(value) : this.removeClass(value);
            }
            if (isFunction(value)) {
                return this.each(function (i) {
                    jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
                });
            }
            return this.each(function () {
                var className, i, self, classNames;
                if (isValidValue) {
                    i = 0;
                    self = jQuery(this);
                    classNames = classesToArray(value);
                    while (className = classNames[i++]) {
                        if (self.hasClass(className)) {
                            self.removeClass(className);
                        } else {
                            self.addClass(className);
                        }
                    }
                } else if (value === undefined || type === 'boolean') {
                    className = getClass(this);
                    if (className) {
                        dataPriv.set(this, '__className__', className);
                    }
                    if (this.setAttribute) {
                        this.setAttribute('class', className || value === false ? '' : dataPriv.get(this, '__className__') || '');
                    }
                }
            });
        },
        hasClass: function (selector) {
            var className, elem, i = 0;
            className = ' ' + selector + ' ';
            while (elem = this[i++]) {
                if (elem.nodeType === 1 && (' ' + stripAndCollapse(getClass(elem)) + ' ').indexOf(className) > -1) {
                    return true;
                }
            }
            return false;
        }
    });
    var rreturn = /\r/g;
    jQuery.fn.extend({
        val: function (value) {
            var hooks, ret, valueIsFunction, elem = this[0];
            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                    if (hooks && 'get' in hooks && (ret = hooks.get(elem, 'value')) !== undefined) {
                        return ret;
                    }
                    ret = elem.value;
                    if (typeof ret === 'string') {
                        return ret.replace(rreturn, '');
                    }
                    return ret == null ? '' : ret;
                }
                return;
            }
            valueIsFunction = isFunction(value);
            return this.each(function (i) {
                var val;
                if (this.nodeType !== 1) {
                    return;
                }
                if (valueIsFunction) {
                    val = value.call(this, i, jQuery(this).val());
                } else {
                    val = value;
                }
                if (val == null) {
                    val = '';
                } else if (typeof val === 'number') {
                    val += '';
                } else if (Array.isArray(val)) {
                    val = jQuery.map(val, function (value) {
                        return value == null ? '' : value + '';
                    });
                }
                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                if (!hooks || !('set' in hooks) || hooks.set(this, val, 'value') === undefined) {
                    this.value = val;
                }
            });
        }
    });
    jQuery.extend({
        valHooks: {
            option: {
                get: function (elem) {
                    var val = jQuery.find.attr(elem, 'value');
                    return val != null ? val : stripAndCollapse(jQuery.text(elem));
                }
            },
            select: {
                get: function (elem) {
                    var value, option, i, options = elem.options, index = elem.selectedIndex, one = elem.type === 'select-one', values = one ? null : [], max = one ? index + 1 : options.length;
                    if (index < 0) {
                        i = max;
                    } else {
                        i = one ? index : 0;
                    }
                    for (; i < max; i++) {
                        option = options[i];
                        if ((option.selected || i === index) && !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, 'optgroup'))) {
                            value = jQuery(option).val();
                            if (one) {
                                return value;
                            }
                            values.push(value);
                        }
                    }
                    return values;
                },
                set: function (elem, value) {
                    var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
                    while (i--) {
                        option = options[i];
                        if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
                            optionSet = true;
                        }
                    }
                    if (!optionSet) {
                        elem.selectedIndex = -1;
                    }
                    return values;
                }
            }
        }
    });
    jQuery.each([
        'radio',
        'checkbox'
    ], function () {
        jQuery.valHooks[this] = {
            set: function (elem, value) {
                if (Array.isArray(value)) {
                    return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
                }
            }
        };
        if (!support.checkOn) {
            jQuery.valHooks[this].get = function (elem) {
                return elem.getAttribute('value') === null ? 'on' : elem.value;
            };
        }
    });
    support.focusin = 'onfocusin' in window;
    var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, stopPropagationCallback = function (e) {
            e.stopPropagation();
        };
    jQuery.extend(jQuery.event, {
        trigger: function (event, data, elem, onlyHandlers) {
            var i, cur, tmp, bubbleType, ontype, handle, special, lastElement, eventPath = [elem || document], type = hasOwn.call(event, 'type') ? event.type : event, namespaces = hasOwn.call(event, 'namespace') ? event.namespace.split('.') : [];
            cur = lastElement = tmp = elem = elem || document;
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
            }
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
            }
            if (type.indexOf('.') > -1) {
                namespaces = type.split('.');
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(':') < 0 && 'on' + type;
            event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === 'object' && event);
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join('.');
            event.rnamespace = event.namespace ? new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)') : null;
            event.result = undefined;
            if (!event.target) {
                event.target = elem;
            }
            data = data == null ? [event] : jQuery.makeArray(data, [event]);
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                return;
            }
            if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode;
                }
                for (; cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                }
                if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
            }
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                lastElement = cur;
                event.type = i > 1 ? bubbleType : special.bindType || type;
                handle = (dataPriv.get(cur, 'events') || {})[event.type] && dataPriv.get(cur, 'handle');
                if (handle) {
                    handle.apply(cur, data);
                }
                handle = ontype && cur[ontype];
                if (handle && handle.apply && acceptData(cur)) {
                    event.result = handle.apply(cur, data);
                    if (event.result === false) {
                        event.preventDefault();
                    }
                }
            }
            event.type = type;
            if (!onlyHandlers && !event.isDefaultPrevented()) {
                if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
                    if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                        tmp = elem[ontype];
                        if (tmp) {
                            elem[ontype] = null;
                        }
                        jQuery.event.triggered = type;
                        if (event.isPropagationStopped()) {
                            lastElement.addEventListener(type, stopPropagationCallback);
                        }
                        elem[type]();
                        if (event.isPropagationStopped()) {
                            lastElement.removeEventListener(type, stopPropagationCallback);
                        }
                        jQuery.event.triggered = undefined;
                        if (tmp) {
                            elem[ontype] = tmp;
                        }
                    }
                }
            }
            return event.result;
        },
        simulate: function (type, elem, event) {
            var e = jQuery.extend(new jQuery.Event(), event, {
                type: type,
                isSimulated: true
            });
            jQuery.event.trigger(e, null, elem);
        }
    });
    jQuery.fn.extend({
        trigger: function (type, data) {
            return this.each(function () {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function (type, data) {
            var elem = this[0];
            if (elem) {
                return jQuery.event.trigger(type, data, elem, true);
            }
        }
    });
    if (!support.focusin) {
        jQuery.each({
            focus: 'focusin',
            blur: 'focusout'
        }, function (orig, fix) {
            var handler = function (event) {
                jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
            };
            jQuery.event.special[fix] = {
                setup: function () {
                    var doc = this.ownerDocument || this, attaches = dataPriv.access(doc, fix);
                    if (!attaches) {
                        doc.addEventListener(orig, handler, true);
                    }
                    dataPriv.access(doc, fix, (attaches || 0) + 1);
                },
                teardown: function () {
                    var doc = this.ownerDocument || this, attaches = dataPriv.access(doc, fix) - 1;
                    if (!attaches) {
                        doc.removeEventListener(orig, handler, true);
                        dataPriv.remove(doc, fix);
                    } else {
                        dataPriv.access(doc, fix, attaches);
                    }
                }
            };
        });
    }
    var location = window.location;
    var nonce = Date.now();
    var rquery = /\?/;
    jQuery.parseXML = function (data) {
        var xml;
        if (!data || typeof data !== 'string') {
            return null;
        }
        try {
            xml = new window.DOMParser().parseFromString(data, 'text/xml');
        } catch (e) {
            xml = undefined;
        }
        if (!xml || xml.getElementsByTagName('parsererror').length) {
            jQuery.error('Invalid XML: ' + data);
        }
        return xml;
    };
    var rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
    function buildParams(prefix, obj, traditional, add) {
        var name;
        if (Array.isArray(obj)) {
            jQuery.each(obj, function (i, v) {
                if (traditional || rbracket.test(prefix)) {
                    add(prefix, v);
                } else {
                    buildParams(prefix + '[' + (typeof v === 'object' && v != null ? i : '') + ']', v, traditional, add);
                }
            });
        } else if (!traditional && toType(obj) === 'object') {
            for (name in obj) {
                buildParams(prefix + '[' + name + ']', obj[name], traditional, add);
            }
        } else {
            add(prefix, obj);
        }
    }
    jQuery.param = function (a, traditional) {
        var prefix, s = [], add = function (key, valueOrFunction) {
                var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
                s[s.length] = encodeURIComponent(key) + '=' + encodeURIComponent(value == null ? '' : value);
            };
        if (a == null) {
            return '';
        }
        if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
            jQuery.each(a, function () {
                add(this.name, this.value);
            });
        } else {
            for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add);
            }
        }
        return s.join('&');
    };
    jQuery.fn.extend({
        serialize: function () {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function () {
            return this.map(function () {
                var elements = jQuery.prop(this, 'elements');
                return elements ? jQuery.makeArray(elements) : this;
            }).filter(function () {
                var type = this.type;
                return this.name && !jQuery(this).is(':disabled') && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
            }).map(function (i, elem) {
                var val = jQuery(this).val();
                if (val == null) {
                    return null;
                }
                if (Array.isArray(val)) {
                    return jQuery.map(val, function (val) {
                        return {
                            name: elem.name,
                            value: val.replace(rCRLF, '\r\n')
                        };
                    });
                }
                return {
                    name: elem.name,
                    value: val.replace(rCRLF, '\r\n')
                };
            }).get();
        }
    });
    var r20 = /%20/g, rhash = /#.*$/, rantiCache = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, prefilters = {}, transports = {}, allTypes = '*/'.concat('*'), originAnchor = document.createElement('a');
    originAnchor.href = location.href;
    function addToPrefiltersOrTransports(structure) {
        return function (dataTypeExpression, func) {
            if (typeof dataTypeExpression !== 'string') {
                func = dataTypeExpression;
                dataTypeExpression = '*';
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
            if (isFunction(func)) {
                while (dataType = dataTypes[i++]) {
                    if (dataType[0] === '+') {
                        dataType = dataType.slice(1) || '*';
                        (structure[dataType] = structure[dataType] || []).unshift(func);
                    } else {
                        (structure[dataType] = structure[dataType] || []).push(func);
                    }
                }
            }
        };
    }
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === 'string' && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                } else if (seekingTransport) {
                    return !(selected = dataTypeOrTransport);
                }
            });
            return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected['*'] && inspect('*');
    }
    function ajaxExtend(target, src) {
        var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
            if (src[key] !== undefined) {
                (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
            }
        }
        if (deep) {
            jQuery.extend(true, target, deep);
        }
        return target;
    }
    function ajaxHandleResponses(s, jqXHR, responses) {
        var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
        while (dataTypes[0] === '*') {
            dataTypes.shift();
            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader('Content-Type');
            }
        }
        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }
        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
        } else {
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + ' ' + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    firstDataType = type;
                }
            }
            finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
        }
    }
    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
        if (dataTypes[1]) {
            for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
            }
        }
        current = dataTypes.shift();
        while (current) {
            if (s.responseFields[current]) {
                jqXHR[s.responseFields[current]] = response;
            }
            if (!prev && isSuccess && s.dataFilter) {
                response = s.dataFilter(response, s.dataType);
            }
            prev = current;
            current = dataTypes.shift();
            if (current) {
                if (current === '*') {
                    current = prev;
                } else if (prev !== '*' && prev !== current) {
                    conv = converters[prev + ' ' + current] || converters['* ' + current];
                    if (!conv) {
                        for (conv2 in converters) {
                            tmp = conv2.split(' ');
                            if (tmp[1] === current) {
                                conv = converters[prev + ' ' + tmp[0]] || converters['* ' + tmp[0]];
                                if (conv) {
                                    if (conv === true) {
                                        conv = converters[conv2];
                                    } else if (converters[conv2] !== true) {
                                        current = tmp[0];
                                        dataTypes.unshift(tmp[1]);
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    if (conv !== true) {
                        if (conv && s.throws) {
                            response = conv(response);
                        } else {
                            try {
                                response = conv(response);
                            } catch (e) {
                                return {
                                    state: 'parsererror',
                                    error: conv ? e : 'No conversion from ' + prev + ' to ' + current
                                };
                            }
                        }
                    }
                }
            }
        }
        return {
            state: 'success',
            data: response
        };
    }
    jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: location.href,
            type: 'GET',
            isLocal: rlocalProtocol.test(location.protocol),
            global: true,
            processData: true,
            async: true,
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            accepts: {
                '*': allTypes,
                text: 'text/plain',
                html: 'text/html',
                xml: 'application/xml, text/xml',
                json: 'application/json, text/javascript'
            },
            contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
            },
            responseFields: {
                xml: 'responseXML',
                text: 'responseText',
                json: 'responseJSON'
            },
            converters: {
                '* text': String,
                'text html': true,
                'text json': JSON.parse,
                'text xml': jQuery.parseXML
            },
            flatOptions: {
                url: true,
                context: true
            }
        },
        ajaxSetup: function (target, settings) {
            return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function (url, options) {
            if (typeof url === 'object') {
                options = url;
                url = undefined;
            }
            options = options || {};
            var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, urlAnchor, completed, fireGlobals, i, uncached, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks('once memory'), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, strAbort = 'canceled', jqXHR = {
                    readyState: 0,
                    getResponseHeader: function (key) {
                        var match;
                        if (completed) {
                            if (!responseHeaders) {
                                responseHeaders = {};
                                while (match = rheaders.exec(responseHeadersString)) {
                                    responseHeaders[match[1].toLowerCase() + ' '] = (responseHeaders[match[1].toLowerCase() + ' '] || []).concat(match[2]);
                                }
                            }
                            match = responseHeaders[key.toLowerCase() + ' '];
                        }
                        return match == null ? null : match.join(', ');
                    },
                    getAllResponseHeaders: function () {
                        return completed ? responseHeadersString : null;
                    },
                    setRequestHeader: function (name, value) {
                        if (completed == null) {
                            name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                            requestHeaders[name] = value;
                        }
                        return this;
                    },
                    overrideMimeType: function (type) {
                        if (completed == null) {
                            s.mimeType = type;
                        }
                        return this;
                    },
                    statusCode: function (map) {
                        var code;
                        if (map) {
                            if (completed) {
                                jqXHR.always(map[jqXHR.status]);
                            } else {
                                for (code in map) {
                                    statusCode[code] = [
                                        statusCode[code],
                                        map[code]
                                    ];
                                }
                            }
                        }
                        return this;
                    },
                    abort: function (statusText) {
                        var finalText = statusText || strAbort;
                        if (transport) {
                            transport.abort(finalText);
                        }
                        done(0, finalText);
                        return this;
                    }
                };
            deferred.promise(jqXHR);
            s.url = ((url || s.url || location.href) + '').replace(rprotocol, location.protocol + '//');
            s.type = options.method || options.type || s.method || s.type;
            s.dataTypes = (s.dataType || '*').toLowerCase().match(rnothtmlwhite) || [''];
            if (s.crossDomain == null) {
                urlAnchor = document.createElement('a');
                try {
                    urlAnchor.href = s.url;
                    urlAnchor.href = urlAnchor.href;
                    s.crossDomain = originAnchor.protocol + '//' + originAnchor.host !== urlAnchor.protocol + '//' + urlAnchor.host;
                } catch (e) {
                    s.crossDomain = true;
                }
            }
            if (s.data && s.processData && typeof s.data !== 'string') {
                s.data = jQuery.param(s.data, s.traditional);
            }
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            if (completed) {
                return jqXHR;
            }
            fireGlobals = jQuery.event && s.global;
            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger('ajaxStart');
            }
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url.replace(rhash, '');
            if (!s.hasContent) {
                uncached = s.url.slice(cacheURL.length);
                if (s.data && (s.processData || typeof s.data === 'string')) {
                    cacheURL += (rquery.test(cacheURL) ? '&' : '?') + s.data;
                    delete s.data;
                }
                if (s.cache === false) {
                    cacheURL = cacheURL.replace(rantiCache, '$1');
                    uncached = (rquery.test(cacheURL) ? '&' : '?') + '_=' + nonce++ + uncached;
                }
                s.url = cacheURL + uncached;
            } else if (s.data && s.processData && (s.contentType || '').indexOf('application/x-www-form-urlencoded') === 0) {
                s.data = s.data.replace(r20, '+');
            }
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader('If-Modified-Since', jQuery.lastModified[cacheURL]);
                }
                if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader('If-None-Match', jQuery.etag[cacheURL]);
                }
            }
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader('Content-Type', s.contentType);
            }
            jqXHR.setRequestHeader('Accept', s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== '*' ? ', ' + allTypes + '; q=0.01' : '') : s.accepts['*']);
            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
            }
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {
                return jqXHR.abort();
            }
            strAbort = 'abort';
            completeDeferred.add(s.complete);
            jqXHR.done(s.success);
            jqXHR.fail(s.error);
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            if (!transport) {
                done(-1, 'No Transport');
            } else {
                jqXHR.readyState = 1;
                if (fireGlobals) {
                    globalEventContext.trigger('ajaxSend', [
                        jqXHR,
                        s
                    ]);
                }
                if (completed) {
                    return jqXHR;
                }
                if (s.async && s.timeout > 0) {
                    timeoutTimer = window.setTimeout(function () {
                        jqXHR.abort('timeout');
                    }, s.timeout);
                }
                try {
                    completed = false;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    if (completed) {
                        throw e;
                    }
                    done(-1, e);
                }
            }
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                if (completed) {
                    return;
                }
                completed = true;
                if (timeoutTimer) {
                    window.clearTimeout(timeoutTimer);
                }
                transport = undefined;
                responseHeadersString = headers || '';
                jqXHR.readyState = status > 0 ? 4 : 0;
                isSuccess = status >= 200 && status < 300 || status === 304;
                if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses);
                }
                response = ajaxConvert(s, response, jqXHR, isSuccess);
                if (isSuccess) {
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader('Last-Modified');
                        if (modified) {
                            jQuery.lastModified[cacheURL] = modified;
                        }
                        modified = jqXHR.getResponseHeader('etag');
                        if (modified) {
                            jQuery.etag[cacheURL] = modified;
                        }
                    }
                    if (status === 204 || s.type === 'HEAD') {
                        statusText = 'nocontent';
                    } else if (status === 304) {
                        statusText = 'notmodified';
                    } else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {
                    error = statusText;
                    if (status || !statusText) {
                        statusText = 'error';
                        if (status < 0) {
                            status = 0;
                        }
                    }
                }
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + '';
                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [
                        success,
                        statusText,
                        jqXHR
                    ]);
                } else {
                    deferred.rejectWith(callbackContext, [
                        jqXHR,
                        statusText,
                        error
                    ]);
                }
                jqXHR.statusCode(statusCode);
                statusCode = undefined;
                if (fireGlobals) {
                    globalEventContext.trigger(isSuccess ? 'ajaxSuccess' : 'ajaxError', [
                        jqXHR,
                        s,
                        isSuccess ? success : error
                    ]);
                }
                completeDeferred.fireWith(callbackContext, [
                    jqXHR,
                    statusText
                ]);
                if (fireGlobals) {
                    globalEventContext.trigger('ajaxComplete', [
                        jqXHR,
                        s
                    ]);
                    if (!--jQuery.active) {
                        jQuery.event.trigger('ajaxStop');
                    }
                }
            }
            return jqXHR;
        },
        getJSON: function (url, data, callback) {
            return jQuery.get(url, data, callback, 'json');
        },
        getScript: function (url, callback) {
            return jQuery.get(url, undefined, callback, 'script');
        }
    });
    jQuery.each([
        'get',
        'post'
    ], function (i, method) {
        jQuery[method] = function (url, data, callback, type) {
            if (isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }
            return jQuery.ajax(jQuery.extend({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            }, jQuery.isPlainObject(url) && url));
        };
    });
    jQuery._evalUrl = function (url, options) {
        return jQuery.ajax({
            url: url,
            type: 'GET',
            dataType: 'script',
            cache: true,
            async: false,
            global: false,
            converters: {
                'text script': function () {
                }
            },
            dataFilter: function (response) {
                jQuery.globalEval(response, options);
            }
        });
    };
    jQuery.fn.extend({
        wrapAll: function (html) {
            var wrap;
            if (this[0]) {
                if (isFunction(html)) {
                    html = html.call(this[0]);
                }
                wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                }
                wrap.map(function () {
                    var elem = this;
                    while (elem.firstElementChild) {
                        elem = elem.firstElementChild;
                    }
                    return elem;
                }).append(this);
            }
            return this;
        },
        wrapInner: function (html) {
            if (isFunction(html)) {
                return this.each(function (i) {
                    jQuery(this).wrapInner(html.call(this, i));
                });
            }
            return this.each(function () {
                var self = jQuery(this), contents = self.contents();
                if (contents.length) {
                    contents.wrapAll(html);
                } else {
                    self.append(html);
                }
            });
        },
        wrap: function (html) {
            var htmlIsFunction = isFunction(html);
            return this.each(function (i) {
                jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
            });
        },
        unwrap: function (selector) {
            this.parent(selector).not('body').each(function () {
                jQuery(this).replaceWith(this.childNodes);
            });
            return this;
        }
    });
    jQuery.expr.pseudos.hidden = function (elem) {
        return !jQuery.expr.pseudos.visible(elem);
    };
    jQuery.expr.pseudos.visible = function (elem) {
        return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
    };
    jQuery.ajaxSettings.xhr = function () {
        try {
            return new window.XMLHttpRequest();
        } catch (e) {
        }
    };
    var xhrSuccessStatus = {
            0: 200,
            1223: 204
        }, xhrSupported = jQuery.ajaxSettings.xhr();
    support.cors = !!xhrSupported && 'withCredentials' in xhrSupported;
    support.ajax = xhrSupported = !!xhrSupported;
    jQuery.ajaxTransport(function (options) {
        var callback, errorCallback;
        if (support.cors || xhrSupported && !options.crossDomain) {
            return {
                send: function (headers, complete) {
                    var i, xhr = options.xhr();
                    xhr.open(options.type, options.url, options.async, options.username, options.password);
                    if (options.xhrFields) {
                        for (i in options.xhrFields) {
                            xhr[i] = options.xhrFields[i];
                        }
                    }
                    if (options.mimeType && xhr.overrideMimeType) {
                        xhr.overrideMimeType(options.mimeType);
                    }
                    if (!options.crossDomain && !headers['X-Requested-With']) {
                        headers['X-Requested-With'] = 'XMLHttpRequest';
                    }
                    for (i in headers) {
                        xhr.setRequestHeader(i, headers[i]);
                    }
                    callback = function (type) {
                        return function () {
                            if (callback) {
                                callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;
                                if (type === 'abort') {
                                    xhr.abort();
                                } else if (type === 'error') {
                                    if (typeof xhr.status !== 'number') {
                                        complete(0, 'error');
                                    } else {
                                        complete(xhr.status, xhr.statusText);
                                    }
                                } else {
                                    complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, (xhr.responseType || 'text') !== 'text' || typeof xhr.responseText !== 'string' ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders());
                                }
                            }
                        };
                    };
                    xhr.onload = callback();
                    errorCallback = xhr.onerror = xhr.ontimeout = callback('error');
                    if (xhr.onabort !== undefined) {
                        xhr.onabort = errorCallback;
                    } else {
                        xhr.onreadystatechange = function () {
                            if (xhr.readyState === 4) {
                                window.setTimeout(function () {
                                    if (callback) {
                                        errorCallback();
                                    }
                                });
                            }
                        };
                    }
                    callback = callback('abort');
                    try {
                        xhr.send(options.hasContent && options.data || null);
                    } catch (e) {
                        if (callback) {
                            throw e;
                        }
                    }
                },
                abort: function () {
                    if (callback) {
                        callback();
                    }
                }
            };
        }
    });
    jQuery.ajaxPrefilter(function (s) {
        if (s.crossDomain) {
            s.contents.script = false;
        }
    });
    jQuery.ajaxSetup({
        accepts: { script: 'text/javascript, application/javascript, ' + 'application/ecmascript, application/x-ecmascript' },
        contents: { script: /\b(?:java|ecma)script\b/ },
        converters: {
            'text script': function (text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });
    jQuery.ajaxPrefilter('script', function (s) {
        if (s.cache === undefined) {
            s.cache = false;
        }
        if (s.crossDomain) {
            s.type = 'GET';
        }
    });
    jQuery.ajaxTransport('script', function (s) {
        if (s.crossDomain || s.scriptAttrs) {
            var script, callback;
            return {
                send: function (_, complete) {
                    script = jQuery('<script>').attr(s.scriptAttrs || {}).prop({
                        charset: s.scriptCharset,
                        src: s.url
                    }).on('load error', callback = function (evt) {
                        script.remove();
                        callback = null;
                        if (evt) {
                            complete(evt.type === 'error' ? 404 : 200, evt.type);
                        }
                    });
                    document.head.appendChild(script[0]);
                },
                abort: function () {
                    if (callback) {
                        callback();
                    }
                }
            };
        }
    });
    var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
    jQuery.ajaxSetup({
        jsonp: 'callback',
        jsonpCallback: function () {
            var callback = oldCallbacks.pop() || jQuery.expando + '_' + nonce++;
            this[callback] = true;
            return callback;
        }
    });
    jQuery.ajaxPrefilter('json jsonp', function (s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? 'url' : typeof s.data === 'string' && (s.contentType || '').indexOf('application/x-www-form-urlencoded') === 0 && rjsonp.test(s.data) && 'data');
        if (jsonProp || s.dataTypes[0] === 'jsonp') {
            callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            if (jsonProp) {
                s[jsonProp] = s[jsonProp].replace(rjsonp, '$1' + callbackName);
            } else if (s.jsonp !== false) {
                s.url += (rquery.test(s.url) ? '&' : '?') + s.jsonp + '=' + callbackName;
            }
            s.converters['script json'] = function () {
                if (!responseContainer) {
                    jQuery.error(callbackName + ' was not called');
                }
                return responseContainer[0];
            };
            s.dataTypes[0] = 'json';
            overwritten = window[callbackName];
            window[callbackName] = function () {
                responseContainer = arguments;
            };
            jqXHR.always(function () {
                if (overwritten === undefined) {
                    jQuery(window).removeProp(callbackName);
                } else {
                    window[callbackName] = overwritten;
                }
                if (s[callbackName]) {
                    s.jsonpCallback = originalSettings.jsonpCallback;
                    oldCallbacks.push(callbackName);
                }
                if (responseContainer && isFunction(overwritten)) {
                    overwritten(responseContainer[0]);
                }
                responseContainer = overwritten = undefined;
            });
            return 'script';
        }
    });
    support.createHTMLDocument = function () {
        var body = document.implementation.createHTMLDocument('').body;
        body.innerHTML = '<form></form><form></form>';
        return body.childNodes.length === 2;
    }();
    jQuery.parseHTML = function (data, context, keepScripts) {
        if (typeof data !== 'string') {
            return [];
        }
        if (typeof context === 'boolean') {
            keepScripts = context;
            context = false;
        }
        var base, parsed, scripts;
        if (!context) {
            if (support.createHTMLDocument) {
                context = document.implementation.createHTMLDocument('');
                base = context.createElement('base');
                base.href = document.location.href;
                context.head.appendChild(base);
            } else {
                context = document;
            }
        }
        parsed = rsingleTag.exec(data);
        scripts = !keepScripts && [];
        if (parsed) {
            return [context.createElement(parsed[1])];
        }
        parsed = buildFragment([data], context, scripts);
        if (scripts && scripts.length) {
            jQuery(scripts).remove();
        }
        return jQuery.merge([], parsed.childNodes);
    };
    jQuery.fn.load = function (url, params, callback) {
        var selector, type, response, self = this, off = url.indexOf(' ');
        if (off > -1) {
            selector = stripAndCollapse(url.slice(off));
            url = url.slice(0, off);
        }
        if (isFunction(params)) {
            callback = params;
            params = undefined;
        } else if (params && typeof params === 'object') {
            type = 'POST';
        }
        if (self.length > 0) {
            jQuery.ajax({
                url: url,
                type: type || 'GET',
                dataType: 'html',
                data: params
            }).done(function (responseText) {
                response = arguments;
                self.html(selector ? jQuery('<div>').append(jQuery.parseHTML(responseText)).find(selector) : responseText);
            }).always(callback && function (jqXHR, status) {
                self.each(function () {
                    callback.apply(this, response || [
                        jqXHR.responseText,
                        status,
                        jqXHR
                    ]);
                });
            });
        }
        return this;
    };
    jQuery.each([
        'ajaxStart',
        'ajaxStop',
        'ajaxComplete',
        'ajaxError',
        'ajaxSuccess',
        'ajaxSend'
    ], function (i, type) {
        jQuery.fn[type] = function (fn) {
            return this.on(type, fn);
        };
    });
    jQuery.expr.pseudos.animated = function (elem) {
        return jQuery.grep(jQuery.timers, function (fn) {
            return elem === fn.elem;
        }).length;
    };
    jQuery.offset = {
        setOffset: function (elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, 'position'), curElem = jQuery(elem), props = {};
            if (position === 'static') {
                elem.style.position = 'relative';
            }
            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, 'top');
            curCSSLeft = jQuery.css(elem, 'left');
            calculatePosition = (position === 'absolute' || position === 'fixed') && (curCSSTop + curCSSLeft).indexOf('auto') > -1;
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (isFunction(options)) {
                options = options.call(elem, i, jQuery.extend({}, curOffset));
            }
            if (options.top != null) {
                props.top = options.top - curOffset.top + curTop;
            }
            if (options.left != null) {
                props.left = options.left - curOffset.left + curLeft;
            }
            if ('using' in options) {
                options.using.call(elem, props);
            } else {
                curElem.css(props);
            }
        }
    };
    jQuery.fn.extend({
        offset: function (options) {
            if (arguments.length) {
                return options === undefined ? this : this.each(function (i) {
                    jQuery.offset.setOffset(this, options, i);
                });
            }
            var rect, win, elem = this[0];
            if (!elem) {
                return;
            }
            if (!elem.getClientRects().length) {
                return {
                    top: 0,
                    left: 0
                };
            }
            rect = elem.getBoundingClientRect();
            win = elem.ownerDocument.defaultView;
            return {
                top: rect.top + win.pageYOffset,
                left: rect.left + win.pageXOffset
            };
        },
        position: function () {
            if (!this[0]) {
                return;
            }
            var offsetParent, offset, doc, elem = this[0], parentOffset = {
                    top: 0,
                    left: 0
                };
            if (jQuery.css(elem, 'position') === 'fixed') {
                offset = elem.getBoundingClientRect();
            } else {
                offset = this.offset();
                doc = elem.ownerDocument;
                offsetParent = elem.offsetParent || doc.documentElement;
                while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, 'position') === 'static') {
                    offsetParent = offsetParent.parentNode;
                }
                if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
                    parentOffset = jQuery(offsetParent).offset();
                    parentOffset.top += jQuery.css(offsetParent, 'borderTopWidth', true);
                    parentOffset.left += jQuery.css(offsetParent, 'borderLeftWidth', true);
                }
            }
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, 'marginTop', true),
                left: offset.left - parentOffset.left - jQuery.css(elem, 'marginLeft', true)
            };
        },
        offsetParent: function () {
            return this.map(function () {
                var offsetParent = this.offsetParent;
                while (offsetParent && jQuery.css(offsetParent, 'position') === 'static') {
                    offsetParent = offsetParent.offsetParent;
                }
                return offsetParent || documentElement;
            });
        }
    });
    jQuery.each({
        scrollLeft: 'pageXOffset',
        scrollTop: 'pageYOffset'
    }, function (method, prop) {
        var top = 'pageYOffset' === prop;
        jQuery.fn[method] = function (val) {
            return access(this, function (elem, method, val) {
                var win;
                if (isWindow(elem)) {
                    win = elem;
                } else if (elem.nodeType === 9) {
                    win = elem.defaultView;
                }
                if (val === undefined) {
                    return win ? win[prop] : elem[method];
                }
                if (win) {
                    win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
                } else {
                    elem[method] = val;
                }
            }, method, val, arguments.length);
        };
    });
    jQuery.each([
        'top',
        'left'
    ], function (i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
            if (computed) {
                computed = curCSS(elem, prop);
                return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + 'px' : computed;
            }
        });
    });
    jQuery.each({
        Height: 'height',
        Width: 'width'
    }, function (name, type) {
        jQuery.each({
            padding: 'inner' + name,
            content: type,
            '': 'outer' + name
        }, function (defaultExtra, funcName) {
            jQuery.fn[funcName] = function (margin, value) {
                var chainable = arguments.length && (defaultExtra || typeof margin !== 'boolean'), extra = defaultExtra || (margin === true || value === true ? 'margin' : 'border');
                return access(this, function (elem, type, value) {
                    var doc;
                    if (isWindow(elem)) {
                        return funcName.indexOf('outer') === 0 ? elem['inner' + name] : elem.document.documentElement['client' + name];
                    }
                    if (elem.nodeType === 9) {
                        doc = elem.documentElement;
                        return Math.max(elem.body['scroll' + name], doc['scroll' + name], elem.body['offset' + name], doc['offset' + name], doc['client' + name]);
                    }
                    return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
                }, type, chainable ? margin : undefined, chainable);
            };
        });
    });
    jQuery.each(('blur focus focusin focusout resize scroll click dblclick ' + 'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' + 'change select submit keydown keypress keyup contextmenu').split(' '), function (i, name) {
        jQuery.fn[name] = function (data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
    });
    jQuery.fn.extend({
        hover: function (fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }
    });
    jQuery.fn.extend({
        bind: function (types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function (types, fn) {
            return this.off(types, null, fn);
        },
        delegate: function (selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function (selector, types, fn) {
            return arguments.length === 1 ? this.off(selector, '**') : this.off(types, selector || '**', fn);
        }
    });
    jQuery.proxy = function (fn, context) {
        var tmp, args, proxy;
        if (typeof context === 'string') {
            tmp = fn[context];
            context = fn;
            fn = tmp;
        }
        if (!isFunction(fn)) {
            return undefined;
        }
        args = slice.call(arguments, 2);
        proxy = function () {
            return fn.apply(context || this, args.concat(slice.call(arguments)));
        };
        proxy.guid = fn.guid = fn.guid || jQuery.guid++;
        return proxy;
    };
    jQuery.holdReady = function (hold) {
        if (hold) {
            jQuery.readyWait++;
        } else {
            jQuery.ready(true);
        }
    };
    jQuery.isArray = Array.isArray;
    jQuery.parseJSON = JSON.parse;
    jQuery.nodeName = nodeName;
    jQuery.isFunction = isFunction;
    jQuery.isWindow = isWindow;
    jQuery.camelCase = camelCase;
    jQuery.type = toType;
    jQuery.now = Date.now;
    jQuery.isNumeric = function (obj) {
        var type = jQuery.type(obj);
        return (type === 'number' || type === 'string') && !isNaN(obj - parseFloat(obj));
    };
    if (typeof define === 'function' && define.amd) {
        define('jquery@3.4.0#dist/jquery', [], function () {
            return jQuery;
        });
    }
    var _jQuery = window.jQuery, _$ = window.$;
    jQuery.noConflict = function (deep) {
        if (window.$ === jQuery) {
            window.$ = _$;
        }
        if (deep && window.jQuery === jQuery) {
            window.jQuery = _jQuery;
        }
        return jQuery;
    };
    if (!noGlobal) {
        window.jQuery = window.$ = jQuery;
    }
    return jQuery;
}));
/*app/config/routes*/
define('app/config/routes', [
    'can-define/map/map',
    'can-route',
    'can-route-pushstate',
    'jquery'
], function (_map, _canRoute, _canRoutePushstate, _jquery) {
    'use strict';
    var _map2 = _interopRequireDefault(_map);
    var _canRoute2 = _interopRequireDefault(_canRoute);
    var _canRoutePushstate2 = _interopRequireDefault(_canRoutePushstate);
    var _jquery2 = _interopRequireDefault(_jquery);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var AppViewModel = _map2.default.extend({
        controller: 'string',
        action: 'string'
    });
    var appState = new AppViewModel();
    _canRoute2.default.data = appState;
    _canRoute2.default.urlData = new _canRoutePushstate2.default();
    var appUrl = new URL((0, _jquery2.default)('base').attr('href'));
    _canRoute2.default.urlData.root = appUrl.pathname;
    _canRoute2.default.register('/app/administration/users-directory/edit', {
        controller: 'Administration',
        action: 'usersDirectory/edit'
    });
    _canRoute2.default.register('/app/administration/users-directory', {
        controller: 'Administration',
        action: 'usersDirectory'
    });
    _canRoute2.default.register('/app/administration/mfa', {
        controller: 'Administration',
        action: 'mfa'
    });
    _canRoute2.default.register('/app/administration/email-notification', {
        controller: 'Administration',
        action: 'emailNotification'
    });
    _canRoute2.default.register('/app/administration', {
        controller: 'Administration',
        action: 'mfa'
    });
    _canRoute2.default.register('/app/groups/delete/{id}', {
        controller: 'User',
        action: 'groupDelete'
    });
    _canRoute2.default.register('/app/groups/edit/{id}', {
        controller: 'User',
        action: 'groupEdit'
    });
    _canRoute2.default.register('/app/groups/view/{id}', {
        controller: 'User',
        action: 'groupView'
    });
    _canRoute2.default.register('/app/groups/view/{id}/membership', {
        controller: 'User',
        action: 'groupViewMembership'
    });
    _canRoute2.default.register('/app/passwords/view/{id}', {
        controller: 'Password',
        action: 'view'
    });
    _canRoute2.default.register('/app/passwords', {
        controller: 'Password',
        action: 'index'
    });
    _canRoute2.default.register('/app/users/add', {
        controller: 'User',
        action: 'add'
    });
    _canRoute2.default.register('/app/users/edit/{id}', {
        controller: 'User',
        action: 'edit'
    });
    _canRoute2.default.register('/app/users/delete/{id}', {
        controller: 'User',
        action: 'delete'
    });
    _canRoute2.default.register('/app/users/view/{id}', {
        controller: 'User',
        action: 'view'
    });
    _canRoute2.default.register('/app/users', {
        controller: 'User',
        action: 'index'
    });
    _canRoute2.default.register('/app/settings/keys', {
        controller: 'Settings',
        action: 'keys'
    });
    _canRoute2.default.register('/app/settings/profile', {
        controller: 'Settings',
        action: 'profile'
    });
    _canRoute2.default.register('/app/settings/theme', {
        controller: 'Settings',
        action: 'theme'
    });
    _canRoute2.default.register('/app/settings/mfa', {
        controller: 'Settings',
        action: 'mfa'
    });
    _canRoute2.default.register('/app/settings', {
        controller: 'Settings',
        action: 'profile'
    });
    _canRoute2.default.register('', {
        controller: 'Password',
        action: 'index'
    });
    _canRoute2.default.start();
});
/*can-parse-uri@1.2.0#can-parse-uri*/
define('can-parse-uri@1.2.0#can-parse-uri', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    module.exports = namespace.parseURI = function (url) {
        var m = String(url).replace(/^\s+|\s+$/g, '').match(/^([^:\/?#]+:)?(\/\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);
        return m ? {
            href: m[0] || '',
            protocol: m[1] || '',
            authority: m[2] || '',
            host: m[3] || '',
            hostname: m[4] || '',
            port: m[5] || '',
            pathname: m[6] || '',
            search: m[7] || '',
            hash: m[8] || ''
        } : null;
    };
});
/*can-ajax@2.0.0#can-ajax*/
define('can-ajax@2.0.0#can-ajax', [
    'require',
    'exports',
    'module',
    'can-globals/global/global',
    'can-reflect',
    'can-namespace',
    'can-parse-uri',
    'can-param'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var Global = require('can-globals/global/global');
        var canReflect = require('can-reflect');
        var namespace = require('can-namespace');
        var parseURI = require('can-parse-uri');
        var param = require('can-param');
        var xhrs = [
                function () {
                    return new XMLHttpRequest();
                },
                function () {
                    return new ActiveXObject('Microsoft.XMLHTTP');
                },
                function () {
                    return new ActiveXObject('MSXML2.XMLHTTP.3.0');
                },
                function () {
                    return new ActiveXObject('MSXML2.XMLHTTP');
                }
            ], _xhrf = null;
        var originUrl = parseURI(Global().location.href);
        var globalSettings = {};
        var makeXhr = function () {
            if (_xhrf != null) {
                return _xhrf();
            }
            for (var i = 0, l = xhrs.length; i < l; i++) {
                try {
                    var f = xhrs[i], req = f();
                    if (req != null) {
                        _xhrf = f;
                        return req;
                    }
                } catch (e) {
                    continue;
                }
            }
            return function () {
            };
        };
        var contentTypes = {
            json: 'application/json',
            form: 'application/x-www-form-urlencoded'
        };
        var _xhrResp = function (xhr, options) {
            var type = options.dataType || xhr.getResponseHeader('Content-Type').split(';')[0];
            if (type && (xhr.responseText || xhr.responseXML)) {
                switch (type) {
                case 'text/xml':
                case 'xml':
                    return xhr.responseXML;
                case 'text/json':
                case 'application/json':
                case 'text/javascript':
                case 'application/javascript':
                case 'application/x-javascript':
                case 'json':
                    return xhr.responseText && JSON.parse(xhr.responseText);
                default:
                    return xhr.responseText;
                }
            } else {
                return xhr;
            }
        };
        function ajax(o) {
            var xhr = makeXhr(), timer, n = 0;
            var deferred = {}, isFormData;
            var promise = new Promise(function (resolve, reject) {
                deferred.resolve = resolve;
                deferred.reject = reject;
            });
            var requestUrl;
            promise.abort = function () {
                xhr.abort();
            };
            o = [
                {
                    userAgent: 'XMLHttpRequest',
                    lang: 'en',
                    type: 'GET',
                    data: null,
                    dataType: 'json'
                },
                globalSettings,
                o
            ].reduce(function (a, b, i) {
                return canReflect.assignDeep(a, b);
            });
            if (!o.contentType) {
                o.contentType = o.type.toUpperCase() === 'GET' ? contentTypes.form : contentTypes.json;
            }
            if (o.crossDomain == null) {
                try {
                    requestUrl = parseURI(o.url);
                    o.crossDomain = !!(requestUrl.protocol && requestUrl.protocol !== originUrl.protocol || requestUrl.host && requestUrl.host !== originUrl.host);
                } catch (e) {
                    o.crossDomain = true;
                }
            }
            if (o.timeout) {
                timer = setTimeout(function () {
                    xhr.abort();
                    if (o.timeoutFn) {
                        o.timeoutFn(o.url);
                    }
                }, o.timeout);
            }
            xhr.onreadystatechange = function () {
                try {
                    if (xhr.readyState === 4) {
                        if (timer) {
                            clearTimeout(timer);
                        }
                        if (xhr.status < 300) {
                            if (o.success) {
                                o.success(_xhrResp(xhr, o));
                            }
                        } else if (o.error) {
                            o.error(xhr, xhr.status, xhr.statusText);
                        }
                        if (o.complete) {
                            o.complete(xhr, xhr.statusText);
                        }
                        if (xhr.status >= 200 && xhr.status < 300) {
                            deferred.resolve(_xhrResp(xhr, o));
                        } else {
                            deferred.reject(_xhrResp(xhr, o));
                        }
                    } else if (o.progress) {
                        o.progress(++n);
                    }
                } catch (e) {
                    deferred.reject(e);
                }
            };
            var url = o.url, data = null, type = o.type.toUpperCase();
            var isJsonContentType = o.contentType === contentTypes.json;
            var isPost = type === 'POST' || type === 'PUT';
            if (!isPost && o.data) {
                url += '?' + (isJsonContentType ? JSON.stringify(o.data) : param(o.data));
            }
            xhr.open(type, url);
            var isSimpleCors = o.crossDomain && [
                'GET',
                'POST',
                'HEAD'
            ].indexOf(type) !== -1;
            isFormData = typeof FormData !== 'undefined' && o.data instanceof FormData;
            if (isPost) {
                if (isFormData) {
                    data = o.data;
                } else {
                    data = isJsonContentType && !isSimpleCors ? typeof o.data === 'object' ? JSON.stringify(o.data) : o.data : param(o.data);
                }
                var setContentType = isJsonContentType && !isSimpleCors ? 'application/json' : 'application/x-www-form-urlencoded';
                xhr.setRequestHeader('Content-Type', setContentType);
            } else {
                xhr.setRequestHeader('Content-Type', o.contentType);
            }
            if (!isSimpleCors) {
                xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            }
            if (o.beforeSend) {
                o.beforeSend.call(o, xhr, o);
            }
            if (o.xhrFields) {
                for (var f in o.xhrFields) {
                    xhr[f] = o.xhrFields[f];
                }
            }
            xhr.send(data);
            return promise;
        }
        module.exports = namespace.ajax = ajax;
        module.exports.ajaxSetup = function (o) {
            globalSettings = o || {};
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-simple-observable@2.2.0#settable/settable*/
define('can-simple-observable@2.2.0#settable/settable', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-observation-recorder',
    '../can-simple-observable',
    'can-observation',
    'can-queues',
    '../log',
    'can-event-queue/value/value'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var ObservationRecorder = require('can-observation-recorder');
    var SimpleObservable = require('../can-simple-observable');
    var Observation = require('can-observation');
    var queues = require('can-queues');
    var log = require('../log');
    var valueEventBindings = require('can-event-queue/value/value');
    var peek = ObservationRecorder.ignore(canReflect.getValue.bind(canReflect));
    function SettableObservable(fn, context, initialValue) {
        this.lastSetValue = new SimpleObservable(initialValue);
        function observe() {
            return fn.call(context, this.lastSetValue.get());
        }
        this.handler = this.handler.bind(this);
        this.observation = new Observation(observe, this);
    }
    valueEventBindings(SettableObservable.prototype);
    Object.assign(SettableObservable.prototype, {
        log: log,
        constructor: SettableObservable,
        handler: function (newVal) {
            var old = this.value;
            this.value = newVal;
            queues.enqueueByQueue(this.handlers.getNode([]), this, [
                newVal,
                old
            ], function () {
                return {};
            });
        },
        onBound: function () {
            if (!this.bound) {
                this.bound = true;
                this.activate();
            }
        },
        activate: function () {
            canReflect.onValue(this.observation, this.handler, 'notify');
            this.value = peek(this.observation);
        },
        onUnbound: function () {
            this.bound = false;
            canReflect.offValue(this.observation, this.handler, 'notify');
        },
        set: function (newVal) {
            var oldVal = this.lastSetValue.get();
            if (canReflect.isObservableLike(oldVal) && canReflect.isValueLike(oldVal) && !canReflect.isObservableLike(newVal)) {
                canReflect.setValue(oldVal, newVal);
            } else {
                if (newVal !== oldVal) {
                    this.lastSetValue.set(newVal);
                }
            }
        },
        get: function () {
            if (ObservationRecorder.isRecording()) {
                ObservationRecorder.add(this);
                if (!this.bound) {
                    this.onBound();
                }
            }
            if (this.bound === true) {
                return this.value;
            } else {
                return this.observation.get();
            }
        },
        hasDependencies: function () {
            return canReflect.valueHasDependencies(this.observation);
        },
        getValueDependencies: function () {
            return canReflect.getValueDependencies(this.observation);
        }
    });
    canReflect.assignSymbols(SettableObservable.prototype, {
        'can.getValue': SettableObservable.prototype.get,
        'can.setValue': SettableObservable.prototype.set,
        'can.isMapLike': false,
        'can.getPriority': function () {
            return canReflect.getPriority(this.observation);
        },
        'can.setPriority': function (newPriority) {
            canReflect.setPriority(this.observation, newPriority);
        },
        'can.valueHasDependencies': SettableObservable.prototype.hasDependencies,
        'can.getValueDependencies': SettableObservable.prototype.getValueDependencies
    });
    module.exports = SettableObservable;
});
/*can-simple-observable@2.2.0#async/async*/
define('can-simple-observable@2.2.0#async/async', [
    'require',
    'exports',
    'module',
    '../can-simple-observable',
    'can-observation',
    'can-queues',
    '../settable/settable',
    'can-reflect',
    'can-observation-recorder',
    'can-event-queue/value/value'
], function (require, exports, module) {
    'use strict';
    var SimpleObservable = require('../can-simple-observable');
    var Observation = require('can-observation');
    var queues = require('can-queues');
    var SettableObservable = require('../settable/settable');
    var canReflect = require('can-reflect');
    var ObservationRecorder = require('can-observation-recorder');
    var valueEventBindings = require('can-event-queue/value/value');
    function AsyncObservable(fn, context, initialValue) {
        this.resolve = this.resolve.bind(this);
        this.lastSetValue = new SimpleObservable(initialValue);
        this.handler = this.handler.bind(this);
        function observe() {
            this.resolveCalled = false;
            this.inGetter = true;
            var newVal = fn.call(context, this.lastSetValue.get(), this.bound === true ? this.resolve : undefined);
            this.inGetter = false;
            if (newVal !== undefined) {
                this.resolve(newVal);
            } else if (this.resolveCalled) {
                this.resolve(this.value);
            }
            if (this.bound !== true) {
                return newVal;
            }
        }
        this.observation = new Observation(observe, this);
    }
    AsyncObservable.prototype = Object.create(SettableObservable.prototype);
    AsyncObservable.prototype.constructor = AsyncObservable;
    AsyncObservable.prototype.handler = function (newVal) {
        if (newVal !== undefined) {
            SettableObservable.prototype.handler.apply(this, arguments);
        }
    };
    var peek = ObservationRecorder.ignore(canReflect.getValue.bind(canReflect));
    AsyncObservable.prototype.activate = function () {
        canReflect.onValue(this.observation, this.handler, 'notify');
        if (!this.resolveCalled) {
            this.value = peek(this.observation);
        }
    };
    AsyncObservable.prototype.resolve = function resolve(newVal) {
        this.resolveCalled = true;
        var old = this.value;
        this.value = newVal;
        if (!this.inGetter) {
            var queuesArgs = [
                this.handlers.getNode([]),
                this,
                [
                    newVal,
                    old
                ],
                null
            ];
            queues.enqueueByQueue.apply(queues, queuesArgs);
        }
    };
    module.exports = AsyncObservable;
});
/*can-simple-observable@2.2.0#resolver/resolver*/
define('can-simple-observable@2.2.0#resolver/resolver', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-symbol',
    'can-observation-recorder',
    'can-observation',
    'can-queues',
    'can-event-queue/map/map',
    '../settable/settable',
    '../can-simple-observable'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var ObservationRecorder = require('can-observation-recorder');
    var Observation = require('can-observation');
    var queues = require('can-queues');
    var mapEventBindings = require('can-event-queue/map/map');
    var SettableObservable = require('../settable/settable');
    var SimpleObservable = require('../can-simple-observable');
    var getChangesSymbol = canSymbol.for('can.getChangesDependencyRecord');
    function ResolverObservable(resolver, context) {
        this.resolver = ObservationRecorder.ignore(resolver);
        this.context = context;
        this.valueOptions = {
            resolve: this.resolve.bind(this),
            listenTo: this.listenTo.bind(this),
            stopListening: this.stopListening.bind(this),
            lastSet: new SimpleObservable(undefined)
        };
        this.update = this.update.bind(this);
        this.contextHandlers = new WeakMap();
        this.teardown = null;
        this.binder = {};
    }
    ResolverObservable.prototype = Object.create(SettableObservable.prototype);
    function deleteHandler(bindTarget, event, queue, handler) {
        mapEventBindings.off.call(bindTarget, event, handler, queue);
    }
    canReflect.assignMap(ResolverObservable.prototype, {
        constructor: ResolverObservable,
        listenTo: function (bindTarget, event, handler, queueName) {
            if (canReflect.isPrimitive(bindTarget)) {
                handler = event;
                event = bindTarget;
                bindTarget = this.context;
            }
            if (typeof event === 'function') {
                handler = event;
                event = undefined;
            }
            var resolverInstance = this;
            var contextHandler = handler.bind(this.context);
            contextHandler[getChangesSymbol] = function getChangesDependencyRecord() {
                return { valueDependencies: new Set([resolverInstance]) };
            };
            this.contextHandlers.set(handler, contextHandler);
            mapEventBindings.listenTo.call(this.binder, bindTarget, event, contextHandler, queueName || 'notify');
        },
        stopListening: function () {
            var meta = this.binder[canSymbol.for('can.meta')];
            var listenHandlers = meta && meta.listenHandlers;
            if (listenHandlers) {
                var keys = mapEventBindings.stopListeningArgumentsToKeys.call({
                    context: this.context,
                    defaultQueue: 'notify'
                });
                listenHandlers.delete(keys, deleteHandler);
            }
            return this;
        },
        resolve: function (newVal) {
            this.value = newVal;
            if (this.isBinding) {
                this.lastValue = this.value;
                return newVal;
            }
            if (this.value !== this.lastValue) {
                var enqueueMeta = {};
                queues.batch.start();
                queues.deriveQueue.enqueue(this.update, this, [], enqueueMeta);
                queues.batch.stop();
            }
            return newVal;
        },
        update: function () {
            if (this.lastValue !== this.value) {
                var old = this.lastValue;
                this.lastValue = this.value;
                queues.enqueueByQueue(this.handlers.getNode([]), this, [
                    this.value,
                    old
                ]);
            }
        },
        activate: function () {
            this.isBinding = true;
            this.teardown = this.resolver.call(this.context, this.valueOptions);
            this.isBinding = false;
        },
        onUnbound: function () {
            this.bound = false;
            mapEventBindings.stopListening.call(this.binder);
            if (this.teardown != null) {
                this.teardown();
                this.teardown = null;
            }
        },
        set: function (value) {
            this.valueOptions.lastSet.set(value);
        },
        get: function () {
            if (ObservationRecorder.isRecording()) {
                ObservationRecorder.add(this);
                if (!this.bound) {
                    this.onBound();
                }
            }
            if (this.bound === true) {
                return this.value;
            } else {
                var handler = function () {
                };
                this.on(handler);
                var val = this.value;
                this.off(handler);
                return val;
            }
        },
        hasDependencies: function hasDependencies() {
            var hasDependencies = false;
            if (this.bound) {
                var meta = this.binder[canSymbol.for('can.meta')];
                var listenHandlers = meta && meta.listenHandlers;
                hasDependencies = !!listenHandlers.size();
            }
            return hasDependencies;
        },
        getValueDependencies: function getValueDependencies() {
            if (this.bound) {
                var meta = this.binder[canSymbol.for('can.meta')];
                var listenHandlers = meta && meta.listenHandlers;
                var keyDeps = new Map();
                var valueDeps = new Set();
                if (listenHandlers) {
                    canReflect.each(listenHandlers.root, function (events, obj) {
                        canReflect.each(events, function (queues, eventName) {
                            if (eventName === undefined) {
                                valueDeps.add(obj);
                            } else {
                                var entry = keyDeps.get(obj);
                                if (!entry) {
                                    entry = new Set();
                                    keyDeps.set(obj, entry);
                                }
                                entry.add(eventName);
                            }
                        });
                    });
                    if (valueDeps.size || keyDeps.size) {
                        var result = {};
                        if (keyDeps.size) {
                            result.keyDependencies = keyDeps;
                        }
                        if (valueDeps.size) {
                            result.valueDependencies = valueDeps;
                        }
                        return result;
                    }
                }
            }
        }
    });
    canReflect.assignSymbols(ResolverObservable.prototype, {
        'can.getValue': ResolverObservable.prototype.get,
        'can.setValue': ResolverObservable.prototype.set,
        'can.isMapLike': false,
        'can.getPriority': function () {
            return this.priority || 0;
        },
        'can.setPriority': function (newPriority) {
            this.priority = newPriority;
        },
        'can.valueHasDependencies': ResolverObservable.prototype.hasDependencies,
        'can.getValueDependencies': ResolverObservable.prototype.getValueDependencies
    });
    module.exports = ResolverObservable;
});
/*can-define@2.4.0#can-define*/
define('can-define@2.4.0#can-define', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-symbol',
    'can-reflect',
    'can-observation',
    'can-observation-recorder',
    'can-simple-observable/async/async',
    'can-simple-observable/settable/settable',
    'can-simple-observable/resolver/resolver',
    'can-event-queue/map/map',
    'can-event-queue/type/type',
    'can-queues',
    'can-assign',
    'can-log/dev/dev',
    'can-string-to-any',
    'can-define-lazy-value',
    'can-data-types/maybe-boolean/maybe-boolean',
    'can-data-types/maybe-date/maybe-date',
    'can-data-types/maybe-number/maybe-number',
    'can-data-types/maybe-string/maybe-string'
], function (require, exports, module) {
    'use strict';
    'format cjs';
    var ns = require('can-namespace');
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    var Observation = require('can-observation');
    var ObservationRecorder = require('can-observation-recorder');
    var AsyncObservable = require('can-simple-observable/async/async');
    var SettableObservable = require('can-simple-observable/settable/settable');
    var ResolverObservable = require('can-simple-observable/resolver/resolver');
    var eventQueue = require('can-event-queue/map/map');
    var addTypeEvents = require('can-event-queue/type/type');
    var queues = require('can-queues');
    var assign = require('can-assign');
    var canLogDev = require('can-log/dev/dev');
    var stringToAny = require('can-string-to-any');
    var defineLazyValue = require('can-define-lazy-value');
    var MaybeBoolean = require('can-data-types/maybe-boolean/maybe-boolean'), MaybeDate = require('can-data-types/maybe-date/maybe-date'), MaybeNumber = require('can-data-types/maybe-number/maybe-number'), MaybeString = require('can-data-types/maybe-string/maybe-string');
    var newSymbol = canSymbol.for('can.new'), serializeSymbol = canSymbol.for('can.serialize');
    var eventsProto, define, make, makeDefinition, getDefinitionsAndMethods, getDefinitionOrMethod;
    function isDefineType(func) {
        return func && (func.canDefineType === true || func[newSymbol]);
    }
    var peek = ObservationRecorder.ignore(canReflect.getValue.bind(canReflect));
    var Object_defineNamedPrototypeProperty = Object.defineProperty;
    function defineConfigurableAndNotEnumerable(obj, prop, value) {
        Object.defineProperty(obj, prop, {
            configurable: true,
            enumerable: false,
            writable: true,
            value: value
        });
    }
    function eachPropertyDescriptor(map, cb) {
        for (var prop in map) {
            if (map.hasOwnProperty(prop)) {
                cb.call(map, prop, Object.getOwnPropertyDescriptor(map, prop));
            }
        }
    }
    function cleanUpDefinition(prop, definition, shouldWarn) {
        if (definition.value !== undefined && (typeof definition.value !== 'function' || definition.value.length === 0)) {
            definition.default = definition.value;
            delete definition.value;
        }
        if (definition.Value !== undefined) {
            definition.Default = definition.Value;
            delete definition.Value;
        }
    }
    function isValueResolver(definition) {
        return typeof definition.value === 'function' && definition.value.length;
    }
    module.exports = define = ns.define = function (typePrototype, defines, baseDefine) {
        var prop, dataInitializers = Object.create(baseDefine ? baseDefine.dataInitializers : null), computedInitializers = Object.create(baseDefine ? baseDefine.computedInitializers : null);
        var result = getDefinitionsAndMethods(defines, baseDefine);
        result.dataInitializers = dataInitializers;
        result.computedInitializers = computedInitializers;
        canReflect.eachKey(result.definitions, function (definition, property) {
            define.property(typePrototype, property, definition, dataInitializers, computedInitializers, result.defaultDefinition);
        });
        if (typePrototype.hasOwnProperty('_data')) {
            for (prop in dataInitializers) {
                defineLazyValue(typePrototype._data, prop, dataInitializers[prop].bind(typePrototype), true);
            }
        } else {
            defineLazyValue(typePrototype, '_data', function () {
                var map = this;
                var data = {};
                for (var prop in dataInitializers) {
                    defineLazyValue(data, prop, dataInitializers[prop].bind(map), true);
                }
                return data;
            });
        }
        if (typePrototype.hasOwnProperty('_computed')) {
            for (prop in computedInitializers) {
                defineLazyValue(typePrototype._computed, prop, computedInitializers[prop].bind(typePrototype));
            }
        } else {
            defineLazyValue(typePrototype, '_computed', function () {
                var map = this;
                var data = Object.create(null);
                for (var prop in computedInitializers) {
                    defineLazyValue(data, prop, computedInitializers[prop].bind(map));
                }
                return data;
            });
        }
        for (prop in eventsProto) {
            Object.defineProperty(typePrototype, prop, {
                enumerable: false,
                value: eventsProto[prop],
                configurable: true,
                writable: true
            });
        }
        Object.defineProperty(typePrototype, '_define', {
            enumerable: false,
            value: result,
            configurable: true,
            writable: true
        });
        var iteratorSymbol = canSymbol.iterator || canSymbol.for('iterator');
        if (!typePrototype[iteratorSymbol]) {
            defineConfigurableAndNotEnumerable(typePrototype, iteratorSymbol, function () {
                return new define.Iterator(this);
            });
        }
        return result;
    };
    var onlyType = function (obj) {
        for (var prop in obj) {
            if (prop !== 'type') {
                return false;
            }
        }
        return true;
    };
    define.extensions = function () {
    };
    define.property = function (typePrototype, prop, definition, dataInitializers, computedInitializers, defaultDefinition) {
        var propertyDefinition = define.extensions.apply(this, arguments);
        if (propertyDefinition) {
            definition = makeDefinition(prop, propertyDefinition, defaultDefinition || {});
        }
        var type = definition.type;
        if (type && onlyType(definition) && type === define.types['*']) {
            Object_defineNamedPrototypeProperty(typePrototype, prop, {
                get: make.get.data(prop),
                set: make.set.events(prop, make.get.data(prop), make.set.data(prop), make.eventType.data(prop)),
                enumerable: true,
                configurable: true
            });
            return;
        }
        definition.type = type;
        var dataProperty = definition.get || isValueResolver(definition) ? 'computed' : 'data', reader = make.read[dataProperty](prop), getter = make.get[dataProperty](prop), setter = make.set[dataProperty](prop), getInitialValue;
        var typeConvert = function (val) {
            return val;
        };
        if (definition.Type) {
            typeConvert = make.set.Type(prop, definition.Type, typeConvert);
        }
        if (type) {
            typeConvert = make.set.type(prop, type, typeConvert);
        }
        var eventsSetter = make.set.events(prop, reader, setter, make.eventType[dataProperty](prop));
        if (isValueResolver(definition)) {
            computedInitializers[prop] = make.valueResolver(prop, definition, typeConvert);
        } else if (definition.default !== undefined || definition.Default !== undefined) {
            getInitialValue = ObservationRecorder.ignore(make.get.defaultValue(prop, definition, typeConvert, eventsSetter));
        }
        if (definition.get) {
            computedInitializers[prop] = make.compute(prop, definition.get, getInitialValue);
        } else if (getInitialValue) {
            dataInitializers[prop] = getInitialValue;
        }
        if (definition.get && definition.set) {
            setter = make.set.setter(prop, definition.set, make.read.lastSet(prop), setter, true);
        } else if (definition.set) {
            setter = make.set.setter(prop, definition.set, reader, eventsSetter, false);
        } else if (dataProperty === 'data') {
            setter = eventsSetter;
        } else if (definition.get && definition.get.length < 1) {
            setter = function () {
            };
        }
        if (type) {
            setter = make.set.type(prop, type, setter);
        }
        if (definition.Type) {
            setter = make.set.Type(prop, definition.Type, setter);
        }
        Object_defineNamedPrototypeProperty(typePrototype, prop, {
            get: getter,
            set: setter,
            enumerable: 'serialize' in definition ? !!definition.serialize : !definition.get,
            configurable: true
        });
    };
    define.makeDefineInstanceKey = function (constructor) {
        constructor[canSymbol.for('can.defineInstanceKey')] = function (property, value) {
            var defineResult = this.prototype._define;
            if (typeof value === 'object') {
                cleanUpDefinition(property, value, false);
            }
            var definition = getDefinitionOrMethod(property, value, defineResult.defaultDefinition);
            if (definition && typeof definition === 'object') {
                define.property(constructor.prototype, property, definition, defineResult.dataInitializers, defineResult.computedInitializers, defineResult.defaultDefinition);
                defineResult.definitions[property] = definition;
            } else {
                defineResult.methods[property] = definition;
            }
        };
    };
    define.Constructor = function (defines, sealed) {
        var constructor = function (props) {
            Object.defineProperty(this, '__inSetup', {
                configurable: true,
                enumerable: false,
                value: true,
                writable: true
            });
            define.setup.call(this, props, sealed);
            this.__inSetup = false;
        };
        var result = define(constructor.prototype, defines);
        addTypeEvents(constructor);
        define.makeDefineInstanceKey(constructor, result);
        return constructor;
    };
    make = {
        computeObj: function (map, prop, observable) {
            var computeObj = {
                oldValue: undefined,
                compute: observable,
                count: 0,
                handler: function (newVal) {
                    var oldValue = computeObj.oldValue;
                    computeObj.oldValue = newVal;
                    map.dispatch({
                        type: prop,
                        target: map
                    }, [
                        newVal,
                        oldValue
                    ]);
                }
            };
            return computeObj;
        },
        valueResolver: function (prop, definition, typeConvert) {
            return function () {
                var map = this;
                var computeObj = make.computeObj(map, prop, new ResolverObservable(definition.value, map));
                return computeObj;
            };
        },
        compute: function (prop, get, defaultValueFn) {
            return function () {
                var map = this, defaultValue = defaultValueFn && defaultValueFn.call(this), observable, computeObj;
                if (get.length === 0) {
                    observable = new Observation(get, map);
                } else if (get.length === 1) {
                    observable = new SettableObservable(get, map, defaultValue);
                } else {
                    observable = new AsyncObservable(get, map, defaultValue);
                }
                computeObj = make.computeObj(map, prop, observable);
                return computeObj;
            };
        },
        set: {
            data: function (prop) {
                return function (newVal) {
                    this._data[prop] = newVal;
                };
            },
            computed: function (prop) {
                return function (val) {
                    canReflect.setValue(this._computed[prop].compute, val);
                };
            },
            events: function (prop, getCurrent, setData, eventType) {
                return function (newVal) {
                    if (this.__inSetup) {
                        setData.call(this, newVal);
                    } else {
                        var current = getCurrent.call(this);
                        if (newVal !== current) {
                            var dispatched;
                            setData.call(this, newVal);
                            dispatched = {
                                patches: [{
                                        type: 'set',
                                        key: prop,
                                        value: newVal
                                    }],
                                type: prop,
                                target: this
                            };
                            this.dispatch(dispatched, [
                                newVal,
                                current
                            ]);
                        }
                    }
                };
            },
            setter: function (prop, setter, getCurrent, setEvents, hasGetter) {
                return function (value) {
                    var self = this;
                    queues.batch.start();
                    var setterCalled = false, current = getCurrent.call(this), setValue = setter.call(this, value, function (value) {
                            setEvents.call(self, value);
                            setterCalled = true;
                        }, current);
                    if (setterCalled) {
                        queues.batch.stop();
                    } else {
                        if (hasGetter) {
                            if (setValue !== undefined) {
                                if (current !== setValue) {
                                    setEvents.call(this, setValue);
                                }
                                queues.batch.stop();
                            } else if (setter.length === 0) {
                                setEvents.call(this, value);
                                queues.batch.stop();
                                return;
                            } else if (setter.length === 1) {
                                queues.batch.stop();
                            } else {
                                queues.batch.stop();
                                return;
                            }
                        } else {
                            if (setValue !== undefined) {
                                setEvents.call(this, setValue);
                                queues.batch.stop();
                            } else if (setter.length === 0) {
                                setEvents.call(this, value);
                                queues.batch.stop();
                                return;
                            } else if (setter.length === 1) {
                                setEvents.call(this, undefined);
                                queues.batch.stop();
                            } else {
                                queues.batch.stop();
                                return;
                            }
                        }
                    }
                };
            },
            type: function (prop, type, set) {
                function setter(newValue) {
                    return set.call(this, type.call(this, newValue, prop));
                }
                if (isDefineType(type)) {
                    if (type.canDefineType) {
                        return setter;
                    } else {
                        return function setter(newValue) {
                            return set.call(this, canReflect.convert(newValue, type));
                        };
                    }
                }
                if (typeof type === 'object') {
                    return make.set.Type(prop, type, set);
                } else {
                    return setter;
                }
            },
            Type: function (prop, Type, set) {
                if (Array.isArray(Type) && define.DefineList) {
                    Type = define.DefineList.extend({ '#': Type[0] });
                } else if (typeof Type === 'object') {
                    if (define.DefineMap) {
                        Type = define.DefineMap.extend(Type);
                    } else {
                        Type = define.Constructor(Type);
                    }
                }
                return function (newValue) {
                    if (newValue instanceof Type || newValue == null) {
                        return set.call(this, newValue);
                    } else {
                        return set.call(this, new Type(newValue));
                    }
                };
            }
        },
        eventType: {
            data: function (prop) {
                return function (newVal, oldVal) {
                    return oldVal !== undefined || this._data.hasOwnProperty(prop) ? 'set' : 'add';
                };
            },
            computed: function () {
                return function () {
                    return 'set';
                };
            }
        },
        read: {
            data: function (prop) {
                return function () {
                    return this._data[prop];
                };
            },
            computed: function (prop) {
                return function () {
                    return canReflect.getValue(this._computed[prop].compute);
                };
            },
            lastSet: function (prop) {
                return function () {
                    var observable = this._computed[prop].compute;
                    if (observable.lastSetValue) {
                        return canReflect.getValue(observable.lastSetValue);
                    }
                };
            }
        },
        get: {
            defaultValue: function (prop, definition, typeConvert, callSetter) {
                return function () {
                    var value = definition.default;
                    if (value !== undefined) {
                        if (typeof value === 'function') {
                            value = value.call(this);
                        }
                        value = typeConvert(value);
                    } else {
                        var Default = definition.Default;
                        if (Default) {
                            value = typeConvert(new Default());
                        }
                    }
                    if (definition.set) {
                        var VALUE;
                        var sync = true;
                        var setter = make.set.setter(prop, definition.set, function () {
                        }, function (value) {
                            if (sync) {
                                VALUE = value;
                            } else {
                                callSetter.call(this, value);
                            }
                        }, definition.get);
                        setter.call(this, value);
                        sync = false;
                        return VALUE;
                    }
                    return value;
                };
            },
            data: function (prop) {
                return function () {
                    if (!this.__inSetup) {
                        ObservationRecorder.add(this, prop);
                    }
                    return this._data[prop];
                };
            },
            computed: function (prop) {
                return function (val) {
                    var compute = this._computed[prop].compute;
                    if (ObservationRecorder.isRecording()) {
                        ObservationRecorder.add(this, prop);
                        if (!canReflect.isBound(compute)) {
                            Observation.temporarilyBind(compute);
                        }
                    }
                    return peek(compute);
                };
            }
        }
    };
    define.behaviors = [
        'get',
        'set',
        'value',
        'Value',
        'type',
        'Type',
        'serialize'
    ];
    var addBehaviorToDefinition = function (definition, behavior, value) {
        if (behavior === 'enumerable') {
            definition.serialize = !!value;
        } else if (behavior === 'type') {
            var behaviorDef = value;
            if (typeof behaviorDef === 'string') {
                behaviorDef = define.types[behaviorDef];
                if (typeof behaviorDef === 'object' && !isDefineType(behaviorDef)) {
                    assign(definition, behaviorDef);
                    behaviorDef = behaviorDef[behavior];
                }
            }
            if (typeof behaviorDef !== 'undefined') {
                definition[behavior] = behaviorDef;
            }
        } else {
            definition[behavior] = value;
        }
    };
    makeDefinition = function (prop, def, defaultDefinition) {
        var definition = {};
        canReflect.eachKey(def, function (value, behavior) {
            addBehaviorToDefinition(definition, behavior, value);
        });
        canReflect.eachKey(defaultDefinition, function (value, prop) {
            if (definition[prop] === undefined) {
                if (prop !== 'type' && prop !== 'Type') {
                    definition[prop] = value;
                }
            }
        });
        if (def.Type) {
            var value = def.Type;
            var serialize = value[serializeSymbol];
            if (serialize) {
                definition.serialize = function (val) {
                    return serialize.call(val);
                };
            }
            if (value[newSymbol]) {
                definition.type = value[newSymbol];
                delete definition.Type;
            }
        }
        if (typeof def.type !== 'string') {
            if (!definition.type && !definition.Type) {
                var defaultsCopy = canReflect.assignMap({}, defaultDefinition);
                definition = canReflect.assignMap(defaultsCopy, definition);
            }
            if (canReflect.size(definition) === 0) {
                definition.type = define.types['*'];
            }
        }
        cleanUpDefinition(prop, definition, true);
        return definition;
    };
    getDefinitionOrMethod = function (prop, value, defaultDefinition) {
        var definition;
        if (typeof value === 'string') {
            definition = { type: value };
        } else if (value && (value[serializeSymbol] || value[newSymbol])) {
            definition = { Type: value };
        } else if (typeof value === 'function') {
            if (canReflect.isConstructorLike(value)) {
                definition = { Type: value };
            }
        } else if (Array.isArray(value)) {
            definition = { Type: value };
        } else if (canReflect.isPlainObject(value)) {
            definition = value;
        }
        if (definition) {
            return makeDefinition(prop, definition, defaultDefinition);
        } else {
            return value;
        }
    };
    getDefinitionsAndMethods = function (defines, baseDefines) {
        var definitions = Object.create(baseDefines ? baseDefines.definitions : null);
        var methods = {};
        var defaults = defines['*'], defaultDefinition;
        if (defaults) {
            delete defines['*'];
            defaultDefinition = getDefinitionOrMethod('*', defaults, {});
        } else {
            defaultDefinition = Object.create(null);
        }
        eachPropertyDescriptor(defines, function (prop, propertyDescriptor) {
            var value;
            if (propertyDescriptor.get || propertyDescriptor.set) {
                value = {
                    get: propertyDescriptor.get,
                    set: propertyDescriptor.set
                };
            } else {
                value = propertyDescriptor.value;
            }
            if (prop === 'constructor') {
                methods[prop] = value;
                return;
            } else {
                var result = getDefinitionOrMethod(prop, value, defaultDefinition);
                if (result && typeof result === 'object' && canReflect.size(result) > 0) {
                    definitions[prop] = result;
                } else {
                    if (typeof result === 'function') {
                        methods[prop] = result;
                    }
                }
            }
        });
        if (defaults) {
            defines['*'] = defaults;
        }
        return {
            definitions: definitions,
            methods: methods,
            defaultDefinition: defaultDefinition
        };
    };
    eventsProto = eventQueue({});
    function setupComputed(instance, eventName) {
        var computedBinding = instance._computed && instance._computed[eventName];
        if (computedBinding && computedBinding.compute) {
            if (!computedBinding.count) {
                computedBinding.count = 1;
                canReflect.onValue(computedBinding.compute, computedBinding.handler, 'notify');
                computedBinding.oldValue = canReflect.getValue(computedBinding.compute);
            } else {
                computedBinding.count++;
            }
        }
    }
    function teardownComputed(instance, eventName) {
        var computedBinding = instance._computed && instance._computed[eventName];
        if (computedBinding) {
            if (computedBinding.count === 1) {
                computedBinding.count = 0;
                canReflect.offValue(computedBinding.compute, computedBinding.handler, 'notify');
            } else {
                computedBinding.count--;
            }
        }
    }
    var canMetaSymbol = canSymbol.for('can.meta');
    assign(eventsProto, {
        _eventSetup: function () {
        },
        _eventTeardown: function () {
        },
        addEventListener: function (eventName, handler, queue) {
            setupComputed(this, eventName);
            return eventQueue.addEventListener.apply(this, arguments);
        },
        removeEventListener: function (eventName, handler) {
            teardownComputed(this, eventName);
            return eventQueue.removeEventListener.apply(this, arguments);
        }
    });
    eventsProto.on = eventsProto.bind = eventsProto.addEventListener;
    eventsProto.off = eventsProto.unbind = eventsProto.removeEventListener;
    var onKeyValueSymbol = canSymbol.for('can.onKeyValue');
    var offKeyValueSymbol = canSymbol.for('can.offKeyValue');
    canReflect.assignSymbols(eventsProto, {
        'can.onKeyValue': function (key) {
            setupComputed(this, key);
            return eventQueue[onKeyValueSymbol].apply(this, arguments);
        },
        'can.offKeyValue': function (key) {
            teardownComputed(this, key);
            return eventQueue[offKeyValueSymbol].apply(this, arguments);
        }
    });
    delete eventsProto.one;
    define.setup = function (props, sealed) {
        Object.defineProperty(this, 'constructor', {
            value: this.constructor,
            enumerable: false,
            writable: false
        });
        Object.defineProperty(this, canMetaSymbol, {
            value: Object.create(null),
            enumerable: false,
            writable: false
        });
        var definitions = this._define.definitions;
        var instanceDefinitions = Object.create(null);
        var map = this;
        canReflect.eachKey(props, function (value, prop) {
            if (definitions[prop] !== undefined) {
                map[prop] = value;
            } else {
                var def = define.makeSimpleGetterSetter(prop);
                instanceDefinitions[prop] = {};
                Object_defineNamedPrototypeProperty(map, prop, def);
                map[prop] = define.types.observable(value);
            }
        });
        if (canReflect.size(instanceDefinitions) > 0) {
            defineConfigurableAndNotEnumerable(this, '_instanceDefinitions', instanceDefinitions);
        }
    };
    define.replaceWith = defineLazyValue;
    define.eventsProto = eventsProto;
    define.defineConfigurableAndNotEnumerable = defineConfigurableAndNotEnumerable;
    define.make = make;
    define.getDefinitionOrMethod = getDefinitionOrMethod;
    var simpleGetterSetters = {};
    define.makeSimpleGetterSetter = function (prop) {
        if (simpleGetterSetters[prop] === undefined) {
            var setter = make.set.events(prop, make.get.data(prop), make.set.data(prop), make.eventType.data(prop));
            simpleGetterSetters[prop] = {
                get: make.get.data(prop),
                set: function (newVal) {
                    return setter.call(this, define.types.observable(newVal));
                },
                enumerable: true
            };
        }
        return simpleGetterSetters[prop];
    };
    define.Iterator = function (obj) {
        this.obj = obj;
        this.definitions = Object.keys(obj._define.definitions);
        this.instanceDefinitions = obj._instanceDefinitions ? Object.keys(obj._instanceDefinitions) : Object.keys(obj);
        this.hasGet = typeof obj.get === 'function';
    };
    define.Iterator.prototype.next = function () {
        var key;
        if (this.definitions.length) {
            key = this.definitions.shift();
            var def = this.obj._define.definitions[key];
            if (def.get) {
                return this.next();
            }
        } else if (this.instanceDefinitions.length) {
            key = this.instanceDefinitions.shift();
        } else {
            return {
                value: undefined,
                done: true
            };
        }
        return {
            value: [
                key,
                this.hasGet ? this.obj.get(key) : this.obj[key]
            ],
            done: false
        };
    };
    function isObservableValue(obj) {
        return canReflect.isValueLike(obj) && canReflect.isObservableLike(obj);
    }
    define.types = {
        'date': MaybeDate,
        'number': MaybeNumber,
        'boolean': MaybeBoolean,
        'observable': function (newVal) {
            if (Array.isArray(newVal) && define.DefineList) {
                newVal = new define.DefineList(newVal);
            } else if (canReflect.isPlainObject(newVal) && define.DefineMap) {
                newVal = new define.DefineMap(newVal);
            }
            return newVal;
        },
        'stringOrObservable': function (newVal) {
            if (Array.isArray(newVal)) {
                return new define.DefaultList(newVal);
            } else if (canReflect.isPlainObject(newVal)) {
                return new define.DefaultMap(newVal);
            } else {
                return canReflect.convert(newVal, define.types.string);
            }
        },
        'htmlbool': function (val) {
            if (val === '') {
                return true;
            }
            return !!stringToAny(val);
        },
        '*': function (val) {
            return val;
        },
        'any': function (val) {
            return val;
        },
        'string': MaybeString,
        'compute': {
            set: function (newValue, setVal, setErr, oldValue) {
                if (isObservableValue(newValue)) {
                    return newValue;
                }
                if (isObservableValue(oldValue)) {
                    canReflect.setValue(oldValue, newValue);
                    return oldValue;
                }
                return newValue;
            },
            get: function (value) {
                return isObservableValue(value) ? canReflect.getValue(value) : value;
            }
        }
    };
    define.updateSchemaKeys = function (schema, definitions) {
        for (var prop in definitions) {
            var definition = definitions[prop];
            if (definition.serialize !== false) {
                if (definition.type) {
                    schema.keys[prop] = definition.type;
                } else {
                    schema.keys[prop] = function (val) {
                        return val;
                    };
                }
                if (definitions[prop].identity === true) {
                    schema.identity.push(prop);
                }
            }
        }
        return schema;
    };
});
/*can-define@2.4.0#ensure-meta*/
define('can-define@2.4.0#ensure-meta', [
    'require',
    'exports',
    'module',
    'can-symbol',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    module.exports = function ensureMeta(obj) {
        var metaSymbol = canSymbol.for('can.meta');
        var meta = obj[metaSymbol];
        if (!meta) {
            meta = {};
            canReflect.setKeyValue(obj, metaSymbol, meta);
        }
        return meta;
    };
});
/*can-define@2.4.0#define-helpers/define-helpers*/
define('can-define@2.4.0#define-helpers/define-helpers', [
    'require',
    'exports',
    'module',
    'can-define',
    'can-reflect',
    'can-queues',
    'can-log/dev/dev',
    '../ensure-meta'
], function (require, exports, module) {
    'use strict';
    var define = require('can-define');
    var canReflect = require('can-reflect');
    var queues = require('can-queues');
    var dev = require('can-log/dev/dev');
    var ensureMeta = require('../ensure-meta');
    var returnFirstArg = function (arg) {
        return arg;
    };
    var defineHelpers = {
        defineExpando: function (map, prop, value) {
            var constructorDefines = map._define.definitions;
            if (constructorDefines && constructorDefines[prop]) {
                return;
            }
            var instanceDefines = map._instanceDefinitions;
            if (!instanceDefines) {
                if (Object.isSealed(map)) {
                    return;
                }
                Object.defineProperty(map, '_instanceDefinitions', {
                    configurable: true,
                    enumerable: false,
                    value: {}
                });
                instanceDefines = map._instanceDefinitions;
            }
            if (!instanceDefines[prop]) {
                var defaultDefinition = map._define.defaultDefinition || { type: define.types.observable };
                define.property(map, prop, defaultDefinition, {}, {});
                if (defaultDefinition.type) {
                    map._data[prop] = define.make.set.type(prop, defaultDefinition.type, returnFirstArg).call(map, value);
                } else {
                    map._data[prop] = define.types.observable(value);
                }
                instanceDefines[prop] = defaultDefinition;
                queues.batch.start();
                map.dispatch({
                    type: 'can.keys',
                    target: map
                });
                if (map._data[prop] !== undefined) {
                    map.dispatch({
                        type: prop,
                        target: map,
                        patches: [{
                                type: 'set',
                                key: prop,
                                value: map._data[prop]
                            }]
                    }, [
                        map._data[prop],
                        undefined
                    ]);
                }
                queues.batch.stop();
                return true;
            }
        },
        reflectSerialize: function (unwrapped) {
            var constructorDefinitions = this._define.definitions;
            var defaultDefinition = this._define.defaultDefinition;
            this.forEach(function (val, name) {
                var propDef = constructorDefinitions[name];
                if (propDef && typeof propDef.serialize === 'function') {
                    val = propDef.serialize.call(this, val, name);
                } else if (defaultDefinition && typeof defaultDefinition.serialize === 'function') {
                    val = defaultDefinition.serialize.call(this, val, name);
                } else {
                    val = canReflect.serialize(val);
                }
                if (val !== undefined) {
                    unwrapped[name] = val;
                }
            }, this);
            return unwrapped;
        },
        reflectUnwrap: function (unwrapped) {
            this.forEach(function (value, key) {
                if (value !== undefined) {
                    unwrapped[key] = canReflect.unwrap(value);
                }
            });
            return unwrapped;
        },
        log: function (key) {
            var instance = this;
            var quoteString = function quoteString(x) {
                return typeof x === 'string' ? JSON.stringify(x) : x;
            };
            var meta = ensureMeta(instance);
            var allowed = meta.allowedLogKeysSet || new Set();
            meta.allowedLogKeysSet = allowed;
            if (key) {
                allowed.add(key);
            }
            meta._log = function (event, data) {
                var type = event.type;
                if (type === 'can.onPatches' || key && !allowed.has(type) || type === 'can.keys' || key && !allowed.has(type)) {
                    return;
                }
                if (type === 'add' || type === 'remove') {
                    dev.log(canReflect.getName(instance), '\n how   ', quoteString(type), '\n what  ', quoteString(data[0]), '\n index ', quoteString(data[1]));
                } else {
                    dev.log(canReflect.getName(instance), '\n key ', quoteString(type), '\n is  ', quoteString(data[0]), '\n was ', quoteString(data[1]));
                }
            };
        }
    };
    module.exports = defineHelpers;
});
/*can-cid@1.3.0#can-cid*/
define('can-cid@1.3.0#can-cid', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var _cid = 0;
    var domExpando = 'can' + new Date();
    var cid = function (object, name) {
        var propertyName = object.nodeName ? domExpando : '_cid';
        if (!object[propertyName]) {
            _cid++;
            object[propertyName] = (name || '') + _cid;
        }
        return object[propertyName];
    };
    cid.domExpando = domExpando;
    cid.get = function (object) {
        var type = typeof object;
        var isObject = type !== null && (type === 'object' || type === 'function');
        return isObject ? cid(object) : type + ':' + object;
    };
    if (namespace.cid) {
        throw new Error('You can\'t have two versions of can-cid, check your dependencies');
    } else {
        module.exports = namespace.cid = cid;
    }
});
/*can-single-reference@1.2.0#can-single-reference*/
define('can-single-reference@1.2.0#can-single-reference', [
    'require',
    'exports',
    'module',
    'can-cid'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var CID = require('can-cid');
        var singleReference;
        function getKeyName(key, extraKey) {
            var keyName = extraKey ? CID(key) + ':' + extraKey : CID(key);
            return keyName || key;
        }
        singleReference = {
            set: function (obj, key, value, extraKey) {
                obj[getKeyName(key, extraKey)] = value;
            },
            getAndDelete: function (obj, key, extraKey) {
                var keyName = getKeyName(key, extraKey);
                var value = obj[keyName];
                delete obj[keyName];
                return value;
            }
        };
        module.exports = singleReference;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-define@2.4.0#list/list*/
define('can-define@2.4.0#list/list', [
    'require',
    'exports',
    'module',
    'can-construct',
    'can-define',
    'can-queues',
    'can-event-queue/type/type',
    'can-observation-recorder',
    'can-log',
    'can-log/dev/dev',
    '../define-helpers/define-helpers',
    'can-assign',
    'can-diff/list/list',
    'can-namespace',
    'can-reflect',
    'can-symbol',
    'can-single-reference'
], function (require, exports, module) {
    'use strict';
    var Construct = require('can-construct');
    var define = require('can-define');
    var make = define.make;
    var queues = require('can-queues');
    var addTypeEvents = require('can-event-queue/type/type');
    var ObservationRecorder = require('can-observation-recorder');
    var canLog = require('can-log');
    var canLogDev = require('can-log/dev/dev');
    var defineHelpers = require('../define-helpers/define-helpers');
    var assign = require('can-assign');
    var diff = require('can-diff/list/list');
    var ns = require('can-namespace');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var singleReference = require('can-single-reference');
    var splice = [].splice;
    var runningNative = false;
    var identity = function (x) {
        return x;
    };
    var localOnPatchesSymbol = 'can.patches';
    var makeFilterCallback = function (props) {
        return function (item) {
            for (var prop in props) {
                if (item[prop] !== props[prop]) {
                    return false;
                }
            }
            return true;
        };
    };
    var onKeyValue = define.eventsProto[canSymbol.for('can.onKeyValue')];
    var offKeyValue = define.eventsProto[canSymbol.for('can.offKeyValue')];
    var getSchemaSymbol = canSymbol.for('can.getSchema');
    function getSchema() {
        var definitions = this.prototype._define.definitions;
        var schema = {
            type: 'list',
            keys: {}
        };
        schema = define.updateSchemaKeys(schema, definitions);
        if (schema.keys['#']) {
            schema.values = definitions['#'].Type;
            delete schema.keys['#'];
        }
        return schema;
    }
    var DefineList = Construct.extend('DefineList', {
        setup: function (base) {
            if (DefineList) {
                addTypeEvents(this);
                var prototype = this.prototype;
                var result = define(prototype, prototype, base.prototype._define);
                define.makeDefineInstanceKey(this, result);
                var itemsDefinition = result.definitions['#'] || result.defaultDefinition;
                if (itemsDefinition) {
                    if (itemsDefinition.Type) {
                        this.prototype.__type = make.set.Type('*', itemsDefinition.Type, identity);
                    } else if (itemsDefinition.type) {
                        this.prototype.__type = make.set.type('*', itemsDefinition.type, identity);
                    }
                }
                this[getSchemaSymbol] = getSchema;
            }
        }
    }, {
        setup: function (items) {
            if (!this._define) {
                Object.defineProperty(this, '_define', {
                    enumerable: false,
                    value: {
                        definitions: {
                            length: { type: 'number' },
                            _length: { type: 'number' }
                        }
                    }
                });
                Object.defineProperty(this, '_data', {
                    enumerable: false,
                    value: {}
                });
            }
            define.setup.call(this, {}, false);
            Object.defineProperty(this, '_length', {
                enumerable: false,
                configurable: true,
                writable: true,
                value: 0
            });
            if (items) {
                this.splice.apply(this, [
                    0,
                    0
                ].concat(canReflect.toArray(items)));
            }
        },
        __type: define.types.observable,
        _triggerChange: function (attr, how, newVal, oldVal) {
            var index = +attr;
            if (!isNaN(index)) {
                var itemsDefinition = this._define.definitions['#'];
                var patches, dispatched;
                if (how === 'add') {
                    if (itemsDefinition && typeof itemsDefinition.added === 'function') {
                        ObservationRecorder.ignore(itemsDefinition.added).call(this, newVal, index);
                    }
                    patches = [{
                            type: 'splice',
                            insert: newVal,
                            index: index,
                            deleteCount: 0
                        }];
                    dispatched = {
                        type: how,
                        patches: patches
                    };
                    this.dispatch(dispatched, [
                        newVal,
                        index
                    ]);
                } else if (how === 'remove') {
                    if (itemsDefinition && typeof itemsDefinition.removed === 'function') {
                        ObservationRecorder.ignore(itemsDefinition.removed).call(this, oldVal, index);
                    }
                    patches = [{
                            type: 'splice',
                            index: index,
                            deleteCount: oldVal.length
                        }];
                    dispatched = {
                        type: how,
                        patches: patches
                    };
                    this.dispatch(dispatched, [
                        oldVal,
                        index
                    ]);
                } else {
                    this.dispatch(how, [
                        newVal,
                        index
                    ]);
                }
            } else {
                this.dispatch({
                    type: '' + attr,
                    target: this
                }, [
                    newVal,
                    oldVal
                ]);
            }
        },
        get: function (index) {
            if (arguments.length) {
                if (isNaN(index)) {
                    ObservationRecorder.add(this, index);
                } else {
                    ObservationRecorder.add(this, 'length');
                }
                return this[index];
            } else {
                return canReflect.unwrap(this, Map);
            }
        },
        set: function (prop, value) {
            if (typeof prop !== 'object') {
                prop = isNaN(+prop) || prop % 1 ? prop : +prop;
                if (typeof prop === 'number') {
                    if (typeof prop === 'number' && prop > this._length - 1) {
                        var newArr = new Array(prop + 1 - this._length);
                        newArr[newArr.length - 1] = value;
                        this.push.apply(this, newArr);
                        return newArr;
                    }
                    this.splice(prop, 1, value);
                } else {
                    var defined = defineHelpers.defineExpando(this, prop, value);
                    if (!defined) {
                        this[prop] = value;
                    }
                }
            } else {
                if (canReflect.isListLike(prop)) {
                    if (value) {
                        this.replace(prop);
                    } else {
                        canReflect.assignList(this, prop);
                    }
                } else {
                    canReflect.assignMap(this, prop);
                }
            }
            return this;
        },
        assign: function (prop) {
            if (canReflect.isListLike(prop)) {
                canReflect.assignList(this, prop);
            } else {
                canReflect.assignMap(this, prop);
            }
            return this;
        },
        update: function (prop) {
            if (canReflect.isListLike(prop)) {
                canReflect.updateList(this, prop);
            } else {
                canReflect.updateMap(this, prop);
            }
            return this;
        },
        assignDeep: function (prop) {
            if (canReflect.isListLike(prop)) {
                canReflect.assignDeepList(this, prop);
            } else {
                canReflect.assignDeepMap(this, prop);
            }
            return this;
        },
        updateDeep: function (prop) {
            if (canReflect.isListLike(prop)) {
                canReflect.updateDeepList(this, prop);
            } else {
                canReflect.updateDeepMap(this, prop);
            }
            return this;
        },
        _items: function () {
            var arr = [];
            this._each(function (item) {
                arr.push(item);
            });
            return arr;
        },
        _each: function (callback) {
            for (var i = 0, len = this._length; i < len; i++) {
                callback(this[i], i);
            }
        },
        splice: function (index, howMany) {
            var args = canReflect.toArray(arguments), added = [], i, len, listIndex, allSame = args.length > 2, oldLength = this._length;
            index = index || 0;
            for (i = 0, len = args.length - 2; i < len; i++) {
                listIndex = i + 2;
                args[listIndex] = this.__type(args[listIndex], listIndex);
                added.push(args[listIndex]);
                if (this[i + index] !== args[listIndex]) {
                    allSame = false;
                }
            }
            if (allSame && this._length <= added.length) {
                return added;
            }
            if (howMany === undefined) {
                howMany = args[1] = this._length - index;
            }
            runningNative = true;
            var removed = splice.apply(this, args);
            runningNative = false;
            queues.batch.start();
            if (howMany > 0) {
                this._triggerChange('' + index, 'remove', undefined, removed);
            }
            if (args.length > 2) {
                this._triggerChange('' + index, 'add', added, removed);
            }
            this.dispatch('length', [
                this._length,
                oldLength
            ]);
            queues.batch.stop();
            return removed;
        },
        serialize: function () {
            return canReflect.serialize(this, Map);
        }
    });
    for (var prop in define.eventsProto) {
        Object.defineProperty(DefineList.prototype, prop, {
            enumerable: false,
            value: define.eventsProto[prop],
            writable: true
        });
    }
    var eventsProtoSymbols = 'getOwnPropertySymbols' in Object ? Object.getOwnPropertySymbols(define.eventsProto) : [
        canSymbol.for('can.onKeyValue'),
        canSymbol.for('can.offKeyValue')
    ];
    eventsProtoSymbols.forEach(function (sym) {
        Object.defineProperty(DefineList.prototype, sym, {
            enumerable: false,
            value: define.eventsProto[sym],
            writable: true
        });
    });
    var getArgs = function (args) {
        return args[0] && Array.isArray(args[0]) ? args[0] : canReflect.toArray(args);
    };
    canReflect.eachKey({
        push: 'length',
        unshift: 0
    }, function (where, name) {
        var orig = [][name];
        DefineList.prototype[name] = function () {
            var args = [], len = where ? this._length : 0, i = arguments.length, res, val;
            while (i--) {
                val = arguments[i];
                args[i] = this.__type(val, i);
            }
            runningNative = true;
            res = orig.apply(this, args);
            runningNative = false;
            if (!this.comparator || args.length) {
                queues.batch.start();
                this._triggerChange('' + len, 'add', args, undefined);
                this.dispatch('length', [
                    this._length,
                    len
                ]);
                queues.batch.stop();
            }
            return res;
        };
    });
    canReflect.eachKey({
        pop: 'length',
        shift: 0
    }, function (where, name) {
        var orig = [][name];
        DefineList.prototype[name] = function () {
            if (!this._length) {
                return undefined;
            }
            var args = getArgs(arguments), len = where && this._length ? this._length - 1 : 0, oldLength = this._length ? this._length : 0, res;
            runningNative = true;
            res = orig.apply(this, args);
            runningNative = false;
            queues.batch.start();
            this._triggerChange('' + len, 'remove', undefined, [res]);
            this.dispatch('length', [
                this._length,
                oldLength
            ]);
            queues.batch.stop();
            return res;
        };
    });
    canReflect.eachKey({
        'map': 3,
        'filter': 3,
        'reduce': 4,
        'reduceRight': 4,
        'every': 3,
        'some': 3
    }, function a(fnLength, fnName) {
        DefineList.prototype[fnName] = function () {
            var self = this;
            var args = [].slice.call(arguments, 0);
            var callback = args[0];
            var thisArg = args[fnLength - 1] || self;
            if (typeof callback === 'object') {
                callback = makeFilterCallback(callback);
            }
            args[0] = function () {
                var cbArgs = [].slice.call(arguments, 0);
                cbArgs[fnLength - 3] = self.get(cbArgs[fnLength - 2]);
                return callback.apply(thisArg, cbArgs);
            };
            var ret = Array.prototype[fnName].apply(this, args);
            if (fnName === 'map') {
                return new DefineList(ret);
            } else if (fnName === 'filter') {
                return new self.constructor(ret);
            } else {
                return ret;
            }
        };
    });
    assign(DefineList.prototype, {
        indexOf: function (item, fromIndex) {
            for (var i = fromIndex || 0, len = this.length; i < len; i++) {
                if (this.get(i) === item) {
                    return i;
                }
            }
            return -1;
        },
        lastIndexOf: function (item, fromIndex) {
            fromIndex = typeof fromIndex === 'undefined' ? this.length - 1 : fromIndex;
            for (var i = fromIndex; i >= 0; i--) {
                if (this.get(i) === item) {
                    return i;
                }
            }
            return -1;
        },
        join: function () {
            ObservationRecorder.add(this, 'length');
            return [].join.apply(this, arguments);
        },
        reverse: function () {
            var list = [].reverse.call(this._items());
            return this.replace(list);
        },
        slice: function () {
            ObservationRecorder.add(this, 'length');
            var temp = Array.prototype.slice.apply(this, arguments);
            return new this.constructor(temp);
        },
        concat: function () {
            var args = [];
            canReflect.eachIndex(arguments, function (arg) {
                if (canReflect.isListLike(arg)) {
                    var arr = Array.isArray(arg) ? arg : canReflect.toArray(arg);
                    arr.forEach(function (innerArg) {
                        args.push(this.__type(innerArg));
                    }, this);
                } else {
                    args.push(this.__type(arg));
                }
            }, this);
            return new this.constructor(Array.prototype.concat.apply(canReflect.toArray(this), args));
        },
        forEach: function (cb, thisarg) {
            var item;
            for (var i = 0, len = this.length; i < len; i++) {
                item = this.get(i);
                if (cb.call(thisarg || item, item, i, this) === false) {
                    break;
                }
            }
            return this;
        },
        replace: function (newList) {
            var patches = diff(this, newList);
            queues.batch.start();
            for (var i = 0, len = patches.length; i < len; i++) {
                this.splice.apply(this, [
                    patches[i].index,
                    patches[i].deleteCount
                ].concat(patches[i].insert));
            }
            queues.batch.stop();
            return this;
        },
        sort: function (compareFunction) {
            var sorting = Array.prototype.slice.call(this);
            Array.prototype.sort.call(sorting, compareFunction);
            this.splice.apply(this, [
                0,
                sorting.length
            ].concat(sorting));
            return this;
        }
    });
    for (var prop in define.eventsProto) {
        DefineList[prop] = define.eventsProto[prop];
        Object.defineProperty(DefineList.prototype, prop, {
            enumerable: false,
            value: define.eventsProto[prop],
            writable: true
        });
    }
    Object.defineProperty(DefineList.prototype, 'length', {
        get: function () {
            if (!this.__inSetup) {
                ObservationRecorder.add(this, 'length');
            }
            return this._length;
        },
        set: function (newVal) {
            if (runningNative) {
                this._length = newVal;
                return;
            }
            if (newVal == null || isNaN(+newVal) || newVal === this._length) {
                return;
            }
            if (newVal > this._length - 1) {
                var newArr = new Array(newVal - this._length);
                this.push.apply(this, newArr);
            } else {
                this.splice(newVal);
            }
        },
        enumerable: true
    });
    DefineList.prototype.attr = function (prop, value) {
        canLog.warn('DefineMap::attr shouldn\'t be called');
        if (arguments.length === 0) {
            return this.get();
        } else if (prop && typeof prop === 'object') {
            return this.set.apply(this, arguments);
        } else if (arguments.length === 1) {
            return this.get(prop);
        } else {
            return this.set(prop, value);
        }
    };
    DefineList.prototype.item = function (index, value) {
        if (arguments.length === 1) {
            return this.get(index);
        } else {
            return this.set(index, value);
        }
    };
    DefineList.prototype.items = function () {
        canLog.warn('DefineList::get should should be used instead of DefineList::items');
        return this.get();
    };
    var defineListProto = {
        'can.isMoreListLikeThanMapLike': true,
        'can.isMapLike': true,
        'can.isListLike': true,
        'can.isValueLike': false,
        'can.getKeyValue': DefineList.prototype.get,
        'can.setKeyValue': DefineList.prototype.set,
        'can.onKeyValue': function (key, handler, queue) {
            var translationHandler;
            if (isNaN(key)) {
                return onKeyValue.apply(this, arguments);
            } else {
                translationHandler = function () {
                    handler(this[key]);
                };
                singleReference.set(handler, this, translationHandler, key);
                return onKeyValue.call(this, 'length', translationHandler, queue);
            }
        },
        'can.offKeyValue': function (key, handler, queue) {
            var translationHandler;
            if (isNaN(key)) {
                return offKeyValue.apply(this, arguments);
            } else {
                translationHandler = singleReference.getAndDelete(handler, this, key);
                return offKeyValue.call(this, 'length', translationHandler, queue);
            }
        },
        'can.deleteKeyValue': function (prop) {
            prop = isNaN(+prop) || prop % 1 ? prop : +prop;
            if (typeof prop === 'number') {
                this.splice(prop, 1);
            } else if (prop === 'length' || prop === '_length') {
                return;
            } else {
                this.set(prop, undefined);
            }
            return this;
        },
        'can.assignDeep': function (source) {
            queues.batch.start();
            canReflect.assignList(this, source);
            queues.batch.stop();
        },
        'can.updateDeep': function (source) {
            queues.batch.start();
            this.replace(source);
            queues.batch.stop();
        },
        'can.keyHasDependencies': function (key) {
            return !!(this._computed && this._computed[key] && this._computed[key].compute);
        },
        'can.getKeyDependencies': function (key) {
            var ret;
            if (this._computed && this._computed[key] && this._computed[key].compute) {
                ret = {};
                ret.valueDependencies = new Set([this._computed[key].compute]);
            }
            return ret;
        },
        'can.splice': function (index, deleteCount, insert) {
            this.splice.apply(this, [
                index,
                deleteCount
            ].concat(insert));
        },
        'can.onPatches': function (handler, queue) {
            this[canSymbol.for('can.onKeyValue')](localOnPatchesSymbol, handler, queue);
        },
        'can.offPatches': function (handler, queue) {
            this[canSymbol.for('can.offKeyValue')](localOnPatchesSymbol, handler, queue);
        }
    };
    canReflect.assignSymbols(DefineList.prototype, defineListProto);
    canReflect.setKeyValue(DefineList.prototype, canSymbol.iterator, function () {
        var index = -1;
        if (typeof this._length !== 'number') {
            this._length = 0;
        }
        return {
            next: function () {
                index++;
                return {
                    value: this[index],
                    done: index >= this._length
                };
            }.bind(this)
        };
    });
    define.DefineList = DefineList;
    module.exports = ns.DefineList = DefineList;
});
/*passbolt-mad@2.10.0#model/list/list*/
define('passbolt-mad@2.10.0#model/list/list', [
    'exports',
    'can-define/list/list',
    'can-util/js/get/get'
], function (exports, _list, _get) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _list2 = _interopRequireDefault(_list);
    var _get2 = _interopRequireDefault(_get);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
    };
    var DefineMadList = _list2.default.extend({
        indexOf: function indexOf(item, fromIndex, options) {
            var key = (0, _get2.default)(options, 'key') || 'id';
            for (var i = fromIndex || 0, len = this.length; i < len; i++) {
                if (this.get(i)[key] === item[key]) {
                    return i;
                }
            }
            return -1;
        },
        filterContain: function filterContain(needle, fields) {
            var keywords = needle.split(/\s+/);
            var filteredItems = new DefineMadList();
            this.forEach(function (item) {
                var _loop = function _loop(j) {
                    var found = false;
                    var field = null;
                    var i = 0;
                    while (!found && (field = fields[i])) {
                        if (/(\[\])+/.test(field)) {
                            (function () {
                                var crumbs = field.split('[].');
                                var objects = (0, _get2.default)(item, crumbs[0]);
                                objects.forEach(function (object) {
                                    if (!found) {
                                        var fieldValue = (0, _get2.default)(object, crumbs[1]);
                                        if (fieldValue) {
                                            found = fieldValue.toLowerCase().indexOf(keywords[j].toLowerCase()) != -1;
                                        }
                                    }
                                });
                            }());
                        } else {
                            var object = (0, _get2.default)(item, field);
                            if (object) {
                                found = object.toLowerCase().indexOf(keywords[j].toLowerCase()) != -1;
                            }
                        }
                        i++;
                    }
                    if (!found) {
                        return { v: void 0 };
                    }
                };
                for (var j in keywords) {
                    var _ret = _loop(j);
                    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === 'object')
                        return _ret.v;
                }
                filteredItems.push(item);
            });
            return filteredItems;
        },
        filterRange: function filterRange(first, last) {
            var inRange = false;
            var firstFound = false;
            return this.filter(function (item) {
                if (item.id == first.id || item.id == last.id) {
                    if (!firstFound) {
                        firstFound = true;
                        inRange = true;
                    } else {
                        inRange = false;
                        return true;
                    }
                }
                return inRange;
            });
        },
        remove: function remove(item) {
            var index = this.indexOf(item);
            if (index != -1) {
                this.splice(index, 1);
            }
        }
    });
    exports.default = DefineMadList;
});
/*can-define@2.4.0#map/map*/
define('can-define@2.4.0#map/map', [
    'require',
    'exports',
    'module',
    'can-construct',
    'can-define',
    '../define-helpers/define-helpers',
    'can-observation-recorder',
    'can-namespace',
    'can-log',
    'can-log/dev/dev',
    'can-reflect',
    'can-symbol',
    'can-queues',
    'can-event-queue/type/type'
], function (require, exports, module) {
    'use strict';
    var Construct = require('can-construct');
    var define = require('can-define');
    var defineHelpers = require('../define-helpers/define-helpers');
    var ObservationRecorder = require('can-observation-recorder');
    var ns = require('can-namespace');
    var canLog = require('can-log');
    var canLogDev = require('can-log/dev/dev');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var queues = require('can-queues');
    var addTypeEvents = require('can-event-queue/type/type');
    var keysForDefinition = function (definitions) {
        var keys = [];
        for (var prop in definitions) {
            var definition = definitions[prop];
            if (typeof definition !== 'object' || ('serialize' in definition ? !!definition.serialize : !definition.get)) {
                keys.push(prop);
            }
        }
        return keys;
    };
    function assign(source) {
        queues.batch.start();
        canReflect.assignMap(this, source || {});
        queues.batch.stop();
    }
    function update(source) {
        queues.batch.start();
        canReflect.updateMap(this, source || {});
        queues.batch.stop();
    }
    function assignDeep(source) {
        queues.batch.start();
        canReflect.assignDeepMap(this, source || {});
        queues.batch.stop();
    }
    function updateDeep(source) {
        queues.batch.start();
        canReflect.updateDeepMap(this, source || {});
        queues.batch.stop();
    }
    function setKeyValue(key, value) {
        var defined = defineHelpers.defineExpando(this, key, value);
        if (!defined) {
            this[key] = value;
        }
    }
    function getKeyValue(key) {
        var value = this[key];
        if (value !== undefined || key in this || Object.isSealed(this)) {
            return value;
        } else {
            ObservationRecorder.add(this, key);
            return this[key];
        }
    }
    var getSchemaSymbol = canSymbol.for('can.getSchema');
    function getSchema() {
        var def = this.prototype._define;
        var definitions = def ? def.definitions : {};
        var schema = {
            type: 'map',
            identity: [],
            keys: {}
        };
        return define.updateSchemaKeys(schema, definitions);
    }
    var DefineMap = Construct.extend('DefineMap', {
        setup: function (base) {
            var key, prototype = this.prototype;
            if (DefineMap) {
                var result = define(prototype, prototype, base.prototype._define);
                define.makeDefineInstanceKey(this, result);
                addTypeEvents(this);
                for (key in DefineMap.prototype) {
                    define.defineConfigurableAndNotEnumerable(prototype, key, prototype[key]);
                }
                this.prototype.setup = function (props) {
                    define.setup.call(this, props || {}, this.constructor.seal);
                };
            } else {
                for (key in prototype) {
                    define.defineConfigurableAndNotEnumerable(prototype, key, prototype[key]);
                }
            }
            define.defineConfigurableAndNotEnumerable(prototype, 'constructor', this);
            this[getSchemaSymbol] = getSchema;
        }
    }, {
        setup: function (props, sealed) {
            if (!this._define) {
                Object.defineProperty(this, '_define', {
                    enumerable: false,
                    value: { definitions: {} }
                });
                Object.defineProperty(this, '_data', {
                    enumerable: false,
                    value: {}
                });
            }
            define.setup.call(this, props || {}, sealed === true);
        },
        get: function (prop) {
            if (prop) {
                return getKeyValue.call(this, prop);
            } else {
                return canReflect.unwrap(this, Map);
            }
        },
        set: function (prop, value) {
            if (typeof prop === 'object') {
                if (value === true) {
                    updateDeep.call(this, prop);
                } else {
                    assignDeep.call(this, prop);
                }
            } else {
                setKeyValue.call(this, prop, value);
            }
            return this;
        },
        assignDeep: function (prop) {
            assignDeep.call(this, prop);
            return this;
        },
        updateDeep: function (prop) {
            updateDeep.call(this, prop);
            return this;
        },
        assign: function (prop) {
            assign.call(this, prop);
            return this;
        },
        update: function (prop) {
            update.call(this, prop);
            return this;
        },
        serialize: function () {
            return canReflect.serialize(this, Map);
        },
        forEach: function () {
            var forEach = function (list, cb, thisarg) {
                    return canReflect.eachKey(list, cb, thisarg);
                }, noObserve = ObservationRecorder.ignore(forEach);
            return function (cb, thisarg, observe) {
                return observe === false ? noObserve(this, cb, thisarg) : forEach(this, cb, thisarg);
            };
        }(),
        '*': { type: define.types.observable }
    });
    var defineMapProto = {
        'can.isMapLike': true,
        'can.isListLike': false,
        'can.isValueLike': false,
        'can.getKeyValue': getKeyValue,
        'can.setKeyValue': setKeyValue,
        'can.deleteKeyValue': function (prop) {
            this.set(prop, undefined);
            return this;
        },
        'can.getOwnKeys': function () {
            var keys = canReflect.getOwnEnumerableKeys(this);
            if (this._computed) {
                var computedKeys = canReflect.getOwnKeys(this._computed);
                var key;
                for (var i = 0; i < computedKeys.length; i++) {
                    key = computedKeys[i];
                    if (keys.indexOf(key) < 0) {
                        keys.push(key);
                    }
                }
            }
            return keys;
        },
        'can.getOwnEnumerableKeys': function () {
            ObservationRecorder.add(this, 'can.keys');
            return keysForDefinition(this._define.definitions).concat(keysForDefinition(this._instanceDefinitions));
        },
        'can.hasOwnKey': function (key) {
            return Object.hasOwnProperty.call(this._define.definitions, key);
        },
        'can.hasKey': function (key) {
            return !!this._define.definitions[key];
        },
        'can.assignDeep': assignDeep,
        'can.updateDeep': updateDeep,
        'can.unwrap': defineHelpers.reflectUnwrap,
        'can.serialize': defineHelpers.reflectSerialize,
        'can.keyHasDependencies': function (key) {
            return !!(this._computed && this._computed[key] && this._computed[key].compute);
        },
        'can.getKeyDependencies': function (key) {
            var ret;
            if (this._computed && this._computed[key] && this._computed[key].compute) {
                ret = {};
                ret.valueDependencies = new Set([this._computed[key].compute]);
            }
            return ret;
        }
    };
    canReflect.assignSymbols(DefineMap.prototype, defineMapProto);
    canReflect.setKeyValue(DefineMap.prototype, canSymbol.iterator, function () {
        return new define.Iterator(this);
    });
    for (var prop in define.eventsProto) {
        DefineMap[prop] = define.eventsProto[prop];
        Object.defineProperty(DefineMap.prototype, prop, {
            enumerable: false,
            value: define.eventsProto[prop],
            writable: true
        });
    }
    var eventsProtoSymbols = 'getOwnPropertySymbols' in Object ? Object.getOwnPropertySymbols(define.eventsProto) : [
        canSymbol.for('can.onKeyValue'),
        canSymbol.for('can.offKeyValue')
    ];
    eventsProtoSymbols.forEach(function (sym) {
        Object.defineProperty(DefineMap.prototype, sym, {
            enumerable: false,
            value: define.eventsProto[sym],
            writable: true
        });
    });
    define.DefineMap = DefineMap;
    Object.defineProperty(DefineMap.prototype, 'toObject', {
        enumerable: false,
        writable: true,
        value: function () {
            canLog.warn('Use DefineMap::get instead of DefineMap::toObject');
            return this.get();
        }
    });
    module.exports = ns.DefineMap = DefineMap;
});
/*passbolt-mad@2.10.0#util/set/set*/
define('passbolt-mad@2.10.0#util/set/set', ['exports'], function (exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    function set(obj, name, value) {
        var parts = typeof name !== 'undefined' ? String(name).replace(/\[/g, '.').replace(/]/g, '').split('.') : [];
        var length = parts.length;
        var current = void 0, i = void 0;
        if (!length) {
            return obj;
        }
        current = obj;
        for (i = 0; i < length - 1; i++) {
            if (current[parts[i]] == undefined) {
                current[parts[i]] = {};
            }
            current = current[parts[i]];
        }
        current[parts[length - 1]] = value;
    }
    exports.default = set;
});
/*xregexp@3.2.0#xregexp-all*/
(function (f) {
    if (typeof exports === 'object' && typeof module !== 'undefined') {
        module.exports = f();
    } else if (typeof define === 'function' && define.amd) {
        define('xregexp@3.2.0#xregexp-all', [], f);
    } else {
        var g;
        if (typeof window !== 'undefined') {
            g = window;
        } else if (typeof global !== 'undefined') {
            g = global;
        } else if (typeof self !== 'undefined') {
            g = self;
        } else {
            g = this;
        }
        g.XRegExp = f();
    }
}(function () {
    var define, module, exports;
    return function e(t, n, r) {
        function s(o, u) {
            if (!n[o]) {
                if (!t[o]) {
                    var a = typeof require == 'function' && require;
                    if (!u && a)
                        return a(o, !0);
                    if (i)
                        return i(o, !0);
                    var f = new Error('Cannot find module \'' + o + '\'');
                    throw f.code = 'MODULE_NOT_FOUND', f;
                }
                var l = n[o] = { exports: {} };
                t[o][0].call(l.exports, function (e) {
                    var n = t[o][1][e];
                    return s(n ? n : e);
                }, l, l.exports, e, t, n, r);
            }
            return n[o].exports;
        }
        var i = typeof require == 'function' && require;
        for (var o = 0; o < r.length; o++)
            s(r[o]);
        return s;
    }({
        1: [
            function (require, module, exports) {
                module.exports = function (XRegExp) {
                    'use strict';
                    var REGEX_DATA = 'xregexp';
                    var subParts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*\]/g;
                    var parts = XRegExp.union([
                        /\({{([\w$]+)}}\)|{{([\w$]+)}}/,
                        subParts
                    ], 'g', { conjunction: 'or' });
                    function deanchor(pattern) {
                        var leadingAnchor = /^(?:\(\?:\))*\^/;
                        var trailingAnchor = /\$(?:\(\?:\))*$/;
                        if (leadingAnchor.test(pattern) && trailingAnchor.test(pattern) && trailingAnchor.test(pattern.replace(/\\[\s\S]/g, ''))) {
                            return pattern.replace(leadingAnchor, '').replace(trailingAnchor, '');
                        }
                        return pattern;
                    }
                    function asXRegExp(value, addFlagX) {
                        var flags = addFlagX ? 'x' : '';
                        return XRegExp.isRegExp(value) ? value[REGEX_DATA] && value[REGEX_DATA].captureNames ? value : XRegExp(value.source, flags) : XRegExp(value, flags);
                    }
                    XRegExp.build = function (pattern, subs, flags) {
                        flags = flags || '';
                        var addFlagX = flags.indexOf('x') > -1;
                        var inlineFlags = /^\(\?([\w$]+)\)/.exec(pattern);
                        if (inlineFlags) {
                            flags = XRegExp._clipDuplicates(flags + inlineFlags[1]);
                        }
                        var data = {};
                        for (var p in subs) {
                            if (subs.hasOwnProperty(p)) {
                                var sub = asXRegExp(subs[p], addFlagX);
                                data[p] = {
                                    pattern: deanchor(sub.source),
                                    names: sub[REGEX_DATA].captureNames || []
                                };
                            }
                        }
                        var patternAsRegex = asXRegExp(pattern, addFlagX);
                        var numCaps = 0;
                        var numPriorCaps;
                        var numOuterCaps = 0;
                        var outerCapsMap = [0];
                        var outerCapNames = patternAsRegex[REGEX_DATA].captureNames || [];
                        var output = patternAsRegex.source.replace(parts, function ($0, $1, $2, $3, $4) {
                            var subName = $1 || $2;
                            var capName;
                            var intro;
                            var localCapIndex;
                            if (subName) {
                                if (!data.hasOwnProperty(subName)) {
                                    throw new ReferenceError('Undefined property ' + $0);
                                }
                                if ($1) {
                                    capName = outerCapNames[numOuterCaps];
                                    outerCapsMap[++numOuterCaps] = ++numCaps;
                                    intro = '(?<' + (capName || subName) + '>';
                                } else {
                                    intro = '(?:';
                                }
                                numPriorCaps = numCaps;
                                return intro + data[subName].pattern.replace(subParts, function (match, paren, backref) {
                                    if (paren) {
                                        capName = data[subName].names[numCaps - numPriorCaps];
                                        ++numCaps;
                                        if (capName) {
                                            return '(?<' + capName + '>';
                                        }
                                    } else if (backref) {
                                        localCapIndex = +backref - 1;
                                        return data[subName].names[localCapIndex] ? '\\k<' + data[subName].names[localCapIndex] + '>' : '\\' + (+backref + numPriorCaps);
                                    }
                                    return match;
                                }) + ')';
                            }
                            if ($3) {
                                capName = outerCapNames[numOuterCaps];
                                outerCapsMap[++numOuterCaps] = ++numCaps;
                                if (capName) {
                                    return '(?<' + capName + '>';
                                }
                            } else if ($4) {
                                localCapIndex = +$4 - 1;
                                return outerCapNames[localCapIndex] ? '\\k<' + outerCapNames[localCapIndex] + '>' : '\\' + outerCapsMap[+$4];
                            }
                            return $0;
                        });
                        return XRegExp(output, flags);
                    };
                };
            },
            {}
        ],
        2: [
            function (require, module, exports) {
                module.exports = function (XRegExp) {
                    'use strict';
                    function row(name, value, start, end) {
                        return {
                            name: name,
                            value: value,
                            start: start,
                            end: end
                        };
                    }
                    XRegExp.matchRecursive = function (str, left, right, flags, options) {
                        flags = flags || '';
                        options = options || {};
                        var global = flags.indexOf('g') > -1;
                        var sticky = flags.indexOf('y') > -1;
                        var basicFlags = flags.replace(/y/g, '');
                        var escapeChar = options.escapeChar;
                        var vN = options.valueNames;
                        var output = [];
                        var openTokens = 0;
                        var delimStart = 0;
                        var delimEnd = 0;
                        var lastOuterEnd = 0;
                        var outerStart;
                        var innerStart;
                        var leftMatch;
                        var rightMatch;
                        var esc;
                        left = XRegExp(left, basicFlags);
                        right = XRegExp(right, basicFlags);
                        if (escapeChar) {
                            if (escapeChar.length > 1) {
                                throw new Error('Cannot use more than one escape character');
                            }
                            escapeChar = XRegExp.escape(escapeChar);
                            esc = new RegExp('(?:' + escapeChar + '[\\S\\s]|(?:(?!' + XRegExp.union([
                                left,
                                right
                            ], '', { conjunction: 'or' }).source + ')[^' + escapeChar + '])+)+', flags.replace(/[^imu]+/g, ''));
                        }
                        while (true) {
                            if (escapeChar) {
                                delimEnd += (XRegExp.exec(str, esc, delimEnd, 'sticky') || [''])[0].length;
                            }
                            leftMatch = XRegExp.exec(str, left, delimEnd);
                            rightMatch = XRegExp.exec(str, right, delimEnd);
                            if (leftMatch && rightMatch) {
                                if (leftMatch.index <= rightMatch.index) {
                                    rightMatch = null;
                                } else {
                                    leftMatch = null;
                                }
                            }
                            if (leftMatch || rightMatch) {
                                delimStart = (leftMatch || rightMatch).index;
                                delimEnd = delimStart + (leftMatch || rightMatch)[0].length;
                            } else if (!openTokens) {
                                break;
                            }
                            if (sticky && !openTokens && delimStart > lastOuterEnd) {
                                break;
                            }
                            if (leftMatch) {
                                if (!openTokens) {
                                    outerStart = delimStart;
                                    innerStart = delimEnd;
                                }
                                ++openTokens;
                            } else if (rightMatch && openTokens) {
                                if (!--openTokens) {
                                    if (vN) {
                                        if (vN[0] && outerStart > lastOuterEnd) {
                                            output.push(row(vN[0], str.slice(lastOuterEnd, outerStart), lastOuterEnd, outerStart));
                                        }
                                        if (vN[1]) {
                                            output.push(row(vN[1], str.slice(outerStart, innerStart), outerStart, innerStart));
                                        }
                                        if (vN[2]) {
                                            output.push(row(vN[2], str.slice(innerStart, delimStart), innerStart, delimStart));
                                        }
                                        if (vN[3]) {
                                            output.push(row(vN[3], str.slice(delimStart, delimEnd), delimStart, delimEnd));
                                        }
                                    } else {
                                        output.push(str.slice(innerStart, delimStart));
                                    }
                                    lastOuterEnd = delimEnd;
                                    if (!global) {
                                        break;
                                    }
                                }
                            } else {
                                throw new Error('Unbalanced delimiter found in string');
                            }
                            if (delimStart === delimEnd) {
                                ++delimEnd;
                            }
                        }
                        if (global && !sticky && vN && vN[0] && str.length > lastOuterEnd) {
                            output.push(row(vN[0], str.slice(lastOuterEnd), lastOuterEnd, str.length));
                        }
                        return output;
                    };
                };
            },
            {}
        ],
        3: [
            function (require, module, exports) {
                module.exports = function (XRegExp) {
                    'use strict';
                    var unicode = {};
                    var dec = XRegExp._dec;
                    var hex = XRegExp._hex;
                    var pad4 = XRegExp._pad4;
                    function normalize(name) {
                        return name.replace(/[- _]+/g, '').toLowerCase();
                    }
                    function charCode(chr) {
                        var esc = /^\\[xu](.+)/.exec(chr);
                        return esc ? dec(esc[1]) : chr.charCodeAt(chr.charAt(0) === '\\' ? 1 : 0);
                    }
                    function invertBmp(range) {
                        var output = '';
                        var lastEnd = -1;
                        XRegExp.forEach(range, /(\\x..|\\u....|\\?[\s\S])(?:-(\\x..|\\u....|\\?[\s\S]))?/, function (m) {
                            var start = charCode(m[1]);
                            if (start > lastEnd + 1) {
                                output += '\\u' + pad4(hex(lastEnd + 1));
                                if (start > lastEnd + 2) {
                                    output += '-\\u' + pad4(hex(start - 1));
                                }
                            }
                            lastEnd = charCode(m[2] || m[1]);
                        });
                        if (lastEnd < 65535) {
                            output += '\\u' + pad4(hex(lastEnd + 1));
                            if (lastEnd < 65534) {
                                output += '-\\uFFFF';
                            }
                        }
                        return output;
                    }
                    function cacheInvertedBmp(slug) {
                        var prop = 'b!';
                        return unicode[slug][prop] || (unicode[slug][prop] = invertBmp(unicode[slug].bmp));
                    }
                    function buildAstral(slug, isNegated) {
                        var item = unicode[slug];
                        var combined = '';
                        if (item.bmp && !item.isBmpLast) {
                            combined = '[' + item.bmp + ']' + (item.astral ? '|' : '');
                        }
                        if (item.astral) {
                            combined += item.astral;
                        }
                        if (item.isBmpLast && item.bmp) {
                            combined += (item.astral ? '|' : '') + '[' + item.bmp + ']';
                        }
                        return isNegated ? '(?:(?!' + combined + ')(?:[\uD800-\uDBFF][\uDC00-\uDFFF]|[\0-\uFFFF]))' : '(?:' + combined + ')';
                    }
                    function cacheAstral(slug, isNegated) {
                        var prop = isNegated ? 'a!' : 'a=';
                        return unicode[slug][prop] || (unicode[slug][prop] = buildAstral(slug, isNegated));
                    }
                    XRegExp.addToken(/\\([pP])(?:{(\^?)([^}]*)}|([A-Za-z]))/, function (match, scope, flags) {
                        var ERR_DOUBLE_NEG = 'Invalid double negation ';
                        var ERR_UNKNOWN_NAME = 'Unknown Unicode token ';
                        var ERR_UNKNOWN_REF = 'Unicode token missing data ';
                        var ERR_ASTRAL_ONLY = 'Astral mode required for Unicode token ';
                        var ERR_ASTRAL_IN_CLASS = 'Astral mode does not support Unicode tokens within character classes';
                        var isNegated = match[1] === 'P' || !!match[2];
                        var isAstralMode = flags.indexOf('A') > -1;
                        var slug = normalize(match[4] || match[3]);
                        var item = unicode[slug];
                        if (match[1] === 'P' && match[2]) {
                            throw new SyntaxError(ERR_DOUBLE_NEG + match[0]);
                        }
                        if (!unicode.hasOwnProperty(slug)) {
                            throw new SyntaxError(ERR_UNKNOWN_NAME + match[0]);
                        }
                        if (item.inverseOf) {
                            slug = normalize(item.inverseOf);
                            if (!unicode.hasOwnProperty(slug)) {
                                throw new ReferenceError(ERR_UNKNOWN_REF + match[0] + ' -> ' + item.inverseOf);
                            }
                            item = unicode[slug];
                            isNegated = !isNegated;
                        }
                        if (!(item.bmp || isAstralMode)) {
                            throw new SyntaxError(ERR_ASTRAL_ONLY + match[0]);
                        }
                        if (isAstralMode) {
                            if (scope === 'class') {
                                throw new SyntaxError(ERR_ASTRAL_IN_CLASS);
                            }
                            return cacheAstral(slug, isNegated);
                        }
                        return scope === 'class' ? isNegated ? cacheInvertedBmp(slug) : item.bmp : (isNegated ? '[^' : '[') + item.bmp + ']';
                    }, {
                        scope: 'all',
                        optionalFlags: 'A',
                        leadChar: '\\'
                    });
                    XRegExp.addUnicodeData = function (data) {
                        var ERR_NO_NAME = 'Unicode token requires name';
                        var ERR_NO_DATA = 'Unicode token has no character data ';
                        var item;
                        for (var i = 0; i < data.length; ++i) {
                            item = data[i];
                            if (!item.name) {
                                throw new Error(ERR_NO_NAME);
                            }
                            if (!(item.inverseOf || item.bmp || item.astral)) {
                                throw new Error(ERR_NO_DATA + item.name);
                            }
                            unicode[normalize(item.name)] = item;
                            if (item.alias) {
                                unicode[normalize(item.alias)] = item;
                            }
                        }
                        XRegExp.cache.flush('patterns');
                    };
                    XRegExp._getUnicodeProperty = function (name) {
                        var slug = normalize(name);
                        return unicode[slug];
                    };
                };
            },
            {}
        ],
        4: [
            function (require, module, exports) {
                module.exports = function (XRegExp) {
                    'use strict';
                    if (!XRegExp.addUnicodeData) {
                        throw new ReferenceError('Unicode Base must be loaded before Unicode Blocks');
                    }
                    XRegExp.addUnicodeData([
                        {
                            name: 'InAdlam',
                            astral: '\uD83A[\uDD00-\uDD5F]'
                        },
                        {
                            name: 'InAegean_Numbers',
                            astral: '\uD800[\uDD00-\uDD3F]'
                        },
                        {
                            name: 'InAhom',
                            astral: '\uD805[\uDF00-\uDF3F]'
                        },
                        {
                            name: 'InAlchemical_Symbols',
                            astral: '\uD83D[\uDF00-\uDF7F]'
                        },
                        {
                            name: 'InAlphabetic_Presentation_Forms',
                            bmp: 'ﬀ-ﭏ'
                        },
                        {
                            name: 'InAnatolian_Hieroglyphs',
                            astral: '\uD811[\uDC00-\uDE7F]'
                        },
                        {
                            name: 'InAncient_Greek_Musical_Notation',
                            astral: '\uD834[\uDE00-\uDE4F]'
                        },
                        {
                            name: 'InAncient_Greek_Numbers',
                            astral: '\uD800[\uDD40-\uDD8F]'
                        },
                        {
                            name: 'InAncient_Symbols',
                            astral: '\uD800[\uDD90-\uDDCF]'
                        },
                        {
                            name: 'InArabic',
                            bmp: '\u0600-ۿ'
                        },
                        {
                            name: 'InArabic_Extended_A',
                            bmp: 'ࢠ-ࣿ'
                        },
                        {
                            name: 'InArabic_Mathematical_Alphabetic_Symbols',
                            astral: '\uD83B[\uDE00-\uDEFF]'
                        },
                        {
                            name: 'InArabic_Presentation_Forms_A',
                            bmp: 'ﭐ-\uFDFF'
                        },
                        {
                            name: 'InArabic_Presentation_Forms_B',
                            bmp: 'ﹰ-\uFEFF'
                        },
                        {
                            name: 'InArabic_Supplement',
                            bmp: 'ݐ-ݿ'
                        },
                        {
                            name: 'InArmenian',
                            bmp: '\u0530-\u058F'
                        },
                        {
                            name: 'InArrows',
                            bmp: '\u2190-\u21FF'
                        },
                        {
                            name: 'InAvestan',
                            astral: '\uD802[\uDF00-\uDF3F]'
                        },
                        {
                            name: 'InBalinese',
                            bmp: 'ᬀ-\u1B7F'
                        },
                        {
                            name: 'InBamum',
                            bmp: 'ꚠ-\uA6FF'
                        },
                        {
                            name: 'InBamum_Supplement',
                            astral: '\uD81A[\uDC00-\uDE3F]'
                        },
                        {
                            name: 'InBasic_Latin',
                            bmp: '\0-\x7F'
                        },
                        {
                            name: 'InBassa_Vah',
                            astral: '\uD81A[\uDED0-\uDEFF]'
                        },
                        {
                            name: 'InBatak',
                            bmp: 'ᯀ-\u1BFF'
                        },
                        {
                            name: 'InBengali',
                            bmp: 'ঀ-\u09FF'
                        },
                        {
                            name: 'InBhaiksuki',
                            astral: '\uD807[\uDC00-\uDC6F]'
                        },
                        {
                            name: 'InBlock_Elements',
                            bmp: '\u2580-\u259F'
                        },
                        {
                            name: 'InBopomofo',
                            bmp: '\u3100-\u312F'
                        },
                        {
                            name: 'InBopomofo_Extended',
                            bmp: 'ㆠ-\u31BF'
                        },
                        {
                            name: 'InBox_Drawing',
                            bmp: '\u2500-\u257F'
                        },
                        {
                            name: 'InBrahmi',
                            astral: '\uD804[\uDC00-\uDC7F]'
                        },
                        {
                            name: 'InBraille_Patterns',
                            bmp: '\u2800-\u28FF'
                        },
                        {
                            name: 'InBuginese',
                            bmp: 'ᨀ-\u1A1F'
                        },
                        {
                            name: 'InBuhid',
                            bmp: 'ᝀ-\u175F'
                        },
                        {
                            name: 'InByzantine_Musical_Symbols',
                            astral: '\uD834[\uDC00-\uDCFF]'
                        },
                        {
                            name: 'InCJK_Compatibility',
                            bmp: '\u3300-\u33FF'
                        },
                        {
                            name: 'InCJK_Compatibility_Forms',
                            bmp: '\uFE30-﹏'
                        },
                        {
                            name: 'InCJK_Compatibility_Ideographs',
                            bmp: '豈-\uFAFF'
                        },
                        {
                            name: 'InCJK_Compatibility_Ideographs_Supplement',
                            astral: '\uD87E[\uDC00-\uDE1F]'
                        },
                        {
                            name: 'InCJK_Radicals_Supplement',
                            bmp: '\u2E80-\u2EFF'
                        },
                        {
                            name: 'InCJK_Strokes',
                            bmp: '\u31C0-\u31EF'
                        },
                        {
                            name: 'InCJK_Symbols_and_Punctuation',
                            bmp: '\u3000-\u303F'
                        },
                        {
                            name: 'InCJK_Unified_Ideographs',
                            bmp: '一-\u9FFF'
                        },
                        {
                            name: 'InCJK_Unified_Ideographs_Extension_A',
                            bmp: '㐀-\u4DBF'
                        },
                        {
                            name: 'InCJK_Unified_Ideographs_Extension_B',
                            astral: '[\uD840-\uD868][\uDC00-\uDFFF]|\uD869[\uDC00-\uDEDF]'
                        },
                        {
                            name: 'InCJK_Unified_Ideographs_Extension_C',
                            astral: '\uD869[\uDF00-\uDFFF]|[\uD86A-\uD86C][\uDC00-\uDFFF]|\uD86D[\uDC00-\uDF3F]'
                        },
                        {
                            name: 'InCJK_Unified_Ideographs_Extension_D',
                            astral: '\uD86D[\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1F]'
                        },
                        {
                            name: 'InCJK_Unified_Ideographs_Extension_E',
                            astral: '\uD86E[\uDC20-\uDFFF]|[\uD86F-\uD872][\uDC00-\uDFFF]|\uD873[\uDC00-\uDEAF]'
                        },
                        {
                            name: 'InCarian',
                            astral: '\uD800[\uDEA0-\uDEDF]'
                        },
                        {
                            name: 'InCaucasian_Albanian',
                            astral: '\uD801[\uDD30-\uDD6F]'
                        },
                        {
                            name: 'InChakma',
                            astral: '\uD804[\uDD00-\uDD4F]'
                        },
                        {
                            name: 'InCham',
                            bmp: 'ꨀ-\uAA5F'
                        },
                        {
                            name: 'InCherokee',
                            bmp: 'Ꭰ-\u13FF'
                        },
                        {
                            name: 'InCherokee_Supplement',
                            bmp: '\uAB70-\uABBF'
                        },
                        {
                            name: 'InCombining_Diacritical_Marks',
                            bmp: '̀-ͯ'
                        },
                        {
                            name: 'InCombining_Diacritical_Marks_Extended',
                            bmp: '᪰-\u1AFF'
                        },
                        {
                            name: 'InCombining_Diacritical_Marks_Supplement',
                            bmp: '᷀-᷿'
                        },
                        {
                            name: 'InCombining_Diacritical_Marks_for_Symbols',
                            bmp: '⃐-\u20FF'
                        },
                        {
                            name: 'InCombining_Half_Marks',
                            bmp: '︠-\uFE2F'
                        },
                        {
                            name: 'InCommon_Indic_Number_Forms',
                            bmp: '\uA830-\uA83F'
                        },
                        {
                            name: 'InControl_Pictures',
                            bmp: '\u2400-\u243F'
                        },
                        {
                            name: 'InCoptic',
                            bmp: 'Ⲁ-\u2CFF'
                        },
                        {
                            name: 'InCoptic_Epact_Numbers',
                            astral: '\uD800[\uDEE0-\uDEFF]'
                        },
                        {
                            name: 'InCounting_Rod_Numerals',
                            astral: '\uD834[\uDF60-\uDF7F]'
                        },
                        {
                            name: 'InCuneiform',
                            astral: '\uD808[\uDC00-\uDFFF]'
                        },
                        {
                            name: 'InCuneiform_Numbers_and_Punctuation',
                            astral: '\uD809[\uDC00-\uDC7F]'
                        },
                        {
                            name: 'InCurrency_Symbols',
                            bmp: '\u20A0-\u20CF'
                        },
                        {
                            name: 'InCypriot_Syllabary',
                            astral: '\uD802[\uDC00-\uDC3F]'
                        },
                        {
                            name: 'InCyrillic',
                            bmp: 'Ѐ-ӿ'
                        },
                        {
                            name: 'InCyrillic_Extended_A',
                            bmp: 'ⷠ-ⷿ'
                        },
                        {
                            name: 'InCyrillic_Extended_B',
                            bmp: 'Ꙁ-ꚟ'
                        },
                        {
                            name: 'InCyrillic_Extended_C',
                            bmp: '\u1C80-\u1C8F'
                        },
                        {
                            name: 'InCyrillic_Supplement',
                            bmp: 'Ԁ-ԯ'
                        },
                        {
                            name: 'InDeseret',
                            astral: '\uD801[\uDC00-\uDC4F]'
                        },
                        {
                            name: 'InDevanagari',
                            bmp: 'ऀ-ॿ'
                        },
                        {
                            name: 'InDevanagari_Extended',
                            bmp: '꣠-\uA8FF'
                        },
                        {
                            name: 'InDingbats',
                            bmp: '\u2700-\u27BF'
                        },
                        {
                            name: 'InDomino_Tiles',
                            astral: '\uD83C[\uDC30-\uDC9F]'
                        },
                        {
                            name: 'InDuployan',
                            astral: '\uD82F[\uDC00-\uDC9F]'
                        },
                        {
                            name: 'InEarly_Dynastic_Cuneiform',
                            astral: '\uD809[\uDC80-\uDD4F]'
                        },
                        {
                            name: 'InEgyptian_Hieroglyphs',
                            astral: '\uD80C[\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F]'
                        },
                        {
                            name: 'InElbasan',
                            astral: '\uD801[\uDD00-\uDD2F]'
                        },
                        {
                            name: 'InEmoticons',
                            astral: '\uD83D[\uDE00-\uDE4F]'
                        },
                        {
                            name: 'InEnclosed_Alphanumeric_Supplement',
                            astral: '\uD83C[\uDD00-\uDDFF]'
                        },
                        {
                            name: 'InEnclosed_Alphanumerics',
                            bmp: '\u2460-\u24FF'
                        },
                        {
                            name: 'InEnclosed_CJK_Letters_and_Months',
                            bmp: '\u3200-\u32FF'
                        },
                        {
                            name: 'InEnclosed_Ideographic_Supplement',
                            astral: '\uD83C[\uDE00-\uDEFF]'
                        },
                        {
                            name: 'InEthiopic',
                            bmp: 'ሀ-\u137F'
                        },
                        {
                            name: 'InEthiopic_Extended',
                            bmp: 'ⶀ-\u2DDF'
                        },
                        {
                            name: 'InEthiopic_Extended_A',
                            bmp: '\uAB00-\uAB2F'
                        },
                        {
                            name: 'InEthiopic_Supplement',
                            bmp: 'ᎀ-\u139F'
                        },
                        {
                            name: 'InGeneral_Punctuation',
                            bmp: '\u2000-\u206F'
                        },
                        {
                            name: 'InGeometric_Shapes',
                            bmp: '\u25A0-\u25FF'
                        },
                        {
                            name: 'InGeometric_Shapes_Extended',
                            astral: '\uD83D[\uDF80-\uDFFF]'
                        },
                        {
                            name: 'InGeorgian',
                            bmp: 'Ⴀ-ჿ'
                        },
                        {
                            name: 'InGeorgian_Supplement',
                            bmp: 'ⴀ-\u2D2F'
                        },
                        {
                            name: 'InGlagolitic',
                            bmp: 'Ⰰ-\u2C5F'
                        },
                        {
                            name: 'InGlagolitic_Supplement',
                            astral: '\uD838[\uDC00-\uDC2F]'
                        },
                        {
                            name: 'InGothic',
                            astral: '\uD800[\uDF30-\uDF4F]'
                        },
                        {
                            name: 'InGrantha',
                            astral: '\uD804[\uDF00-\uDF7F]'
                        },
                        {
                            name: 'InGreek_Extended',
                            bmp: 'ἀ-\u1FFF'
                        },
                        {
                            name: 'InGreek_and_Coptic',
                            bmp: 'Ͱ-Ͽ'
                        },
                        {
                            name: 'InGujarati',
                            bmp: '\u0A80-\u0AFF'
                        },
                        {
                            name: 'InGurmukhi',
                            bmp: '\u0A00-\u0A7F'
                        },
                        {
                            name: 'InHalfwidth_and_Fullwidth_Forms',
                            bmp: '\uFF00-\uFFEF'
                        },
                        {
                            name: 'InHangul_Compatibility_Jamo',
                            bmp: '\u3130-\u318F'
                        },
                        {
                            name: 'InHangul_Jamo',
                            bmp: 'ᄀ-ᇿ'
                        },
                        {
                            name: 'InHangul_Jamo_Extended_A',
                            bmp: 'ꥠ-\uA97F'
                        },
                        {
                            name: 'InHangul_Jamo_Extended_B',
                            bmp: 'ힰ-\uD7FF'
                        },
                        {
                            name: 'InHangul_Syllables',
                            bmp: '가-\uD7AF'
                        },
                        {
                            name: 'InHanunoo',
                            bmp: 'ᜠ-\u173F'
                        },
                        {
                            name: 'InHatran',
                            astral: '\uD802[\uDCE0-\uDCFF]'
                        },
                        {
                            name: 'InHebrew',
                            bmp: '\u0590-\u05FF'
                        },
                        {
                            name: 'InHigh_Private_Use_Surrogates',
                            bmp: '\uDB80-\uDBFF'
                        },
                        {
                            name: 'InHigh_Surrogates',
                            bmp: '\uD800-\uDB7F'
                        },
                        {
                            name: 'InHiragana',
                            bmp: '\u3040-ゟ'
                        },
                        {
                            name: 'InIPA_Extensions',
                            bmp: 'ɐ-ʯ'
                        },
                        {
                            name: 'InIdeographic_Description_Characters',
                            bmp: '\u2FF0-\u2FFF'
                        },
                        {
                            name: 'InIdeographic_Symbols_and_Punctuation',
                            astral: '\uD81B[\uDFE0-\uDFFF]'
                        },
                        {
                            name: 'InImperial_Aramaic',
                            astral: '\uD802[\uDC40-\uDC5F]'
                        },
                        {
                            name: 'InInscriptional_Pahlavi',
                            astral: '\uD802[\uDF60-\uDF7F]'
                        },
                        {
                            name: 'InInscriptional_Parthian',
                            astral: '\uD802[\uDF40-\uDF5F]'
                        },
                        {
                            name: 'InJavanese',
                            bmp: 'ꦀ-\uA9DF'
                        },
                        {
                            name: 'InKaithi',
                            astral: '\uD804[\uDC80-\uDCCF]'
                        },
                        {
                            name: 'InKana_Supplement',
                            astral: '\uD82C[\uDC00-\uDCFF]'
                        },
                        {
                            name: 'InKanbun',
                            bmp: '\u3190-\u319F'
                        },
                        {
                            name: 'InKangxi_Radicals',
                            bmp: '\u2F00-\u2FDF'
                        },
                        {
                            name: 'InKannada',
                            bmp: '\u0C80-\u0CFF'
                        },
                        {
                            name: 'InKatakana',
                            bmp: '\u30A0-ヿ'
                        },
                        {
                            name: 'InKatakana_Phonetic_Extensions',
                            bmp: 'ㇰ-ㇿ'
                        },
                        {
                            name: 'InKayah_Li',
                            bmp: '꤀-\uA92F'
                        },
                        {
                            name: 'InKharoshthi',
                            astral: '\uD802[\uDE00-\uDE5F]'
                        },
                        {
                            name: 'InKhmer',
                            bmp: 'ក-\u17FF'
                        },
                        {
                            name: 'InKhmer_Symbols',
                            bmp: '\u19E0-\u19FF'
                        },
                        {
                            name: 'InKhojki',
                            astral: '\uD804[\uDE00-\uDE4F]'
                        },
                        {
                            name: 'InKhudawadi',
                            astral: '\uD804[\uDEB0-\uDEFF]'
                        },
                        {
                            name: 'InLao',
                            bmp: '\u0E80-\u0EFF'
                        },
                        {
                            name: 'InLatin_Extended_Additional',
                            bmp: 'Ḁ-ỿ'
                        },
                        {
                            name: 'InLatin_Extended_A',
                            bmp: 'Ā-ſ'
                        },
                        {
                            name: 'InLatin_Extended_B',
                            bmp: 'ƀ-ɏ'
                        },
                        {
                            name: 'InLatin_Extended_C',
                            bmp: 'Ⱡ-Ɀ'
                        },
                        {
                            name: 'InLatin_Extended_D',
                            bmp: '\uA720-ꟿ'
                        },
                        {
                            name: 'InLatin_Extended_E',
                            bmp: 'ꬰ-\uAB6F'
                        },
                        {
                            name: 'InLatin_1_Supplement',
                            bmp: '\x80-ÿ'
                        },
                        {
                            name: 'InLepcha',
                            bmp: 'ᰀ-ᱏ'
                        },
                        {
                            name: 'InLetterlike_Symbols',
                            bmp: '\u2100-\u214F'
                        },
                        {
                            name: 'InLimbu',
                            bmp: 'ᤀ-᥏'
                        },
                        {
                            name: 'InLinear_A',
                            astral: '\uD801[\uDE00-\uDF7F]'
                        },
                        {
                            name: 'InLinear_B_Ideograms',
                            astral: '\uD800[\uDC80-\uDCFF]'
                        },
                        {
                            name: 'InLinear_B_Syllabary',
                            astral: '\uD800[\uDC00-\uDC7F]'
                        },
                        {
                            name: 'InLisu',
                            bmp: 'ꓐ-\uA4FF'
                        },
                        {
                            name: 'InLow_Surrogates',
                            bmp: '\uDC00-\uDFFF'
                        },
                        {
                            name: 'InLycian',
                            astral: '\uD800[\uDE80-\uDE9F]'
                        },
                        {
                            name: 'InLydian',
                            astral: '\uD802[\uDD20-\uDD3F]'
                        },
                        {
                            name: 'InMahajani',
                            astral: '\uD804[\uDD50-\uDD7F]'
                        },
                        {
                            name: 'InMahjong_Tiles',
                            astral: '\uD83C[\uDC00-\uDC2F]'
                        },
                        {
                            name: 'InMalayalam',
                            bmp: '\u0D00-ൿ'
                        },
                        {
                            name: 'InMandaic',
                            bmp: 'ࡀ-\u085F'
                        },
                        {
                            name: 'InManichaean',
                            astral: '\uD802[\uDEC0-\uDEFF]'
                        },
                        {
                            name: 'InMarchen',
                            astral: '\uD807[\uDC70-\uDCBF]'
                        },
                        {
                            name: 'InMathematical_Alphanumeric_Symbols',
                            astral: '\uD835[\uDC00-\uDFFF]'
                        },
                        {
                            name: 'InMathematical_Operators',
                            bmp: '\u2200-\u22FF'
                        },
                        {
                            name: 'InMeetei_Mayek',
                            bmp: 'ꯀ-\uABFF'
                        },
                        {
                            name: 'InMeetei_Mayek_Extensions',
                            bmp: 'ꫠ-\uAAFF'
                        },
                        {
                            name: 'InMende_Kikakui',
                            astral: '\uD83A[\uDC00-\uDCDF]'
                        },
                        {
                            name: 'InMeroitic_Cursive',
                            astral: '\uD802[\uDDA0-\uDDFF]'
                        },
                        {
                            name: 'InMeroitic_Hieroglyphs',
                            astral: '\uD802[\uDD80-\uDD9F]'
                        },
                        {
                            name: 'InMiao',
                            astral: '\uD81B[\uDF00-\uDF9F]'
                        },
                        {
                            name: 'InMiscellaneous_Mathematical_Symbols_A',
                            bmp: '\u27C0-\u27EF'
                        },
                        {
                            name: 'InMiscellaneous_Mathematical_Symbols_B',
                            bmp: '\u2980-\u29FF'
                        },
                        {
                            name: 'InMiscellaneous_Symbols',
                            bmp: '\u2600-\u26FF'
                        },
                        {
                            name: 'InMiscellaneous_Symbols_and_Arrows',
                            bmp: '\u2B00-\u2BFF'
                        },
                        {
                            name: 'InMiscellaneous_Symbols_and_Pictographs',
                            astral: '\uD83C[\uDF00-\uDFFF]|\uD83D[\uDC00-\uDDFF]'
                        },
                        {
                            name: 'InMiscellaneous_Technical',
                            bmp: '\u2300-\u23FF'
                        },
                        {
                            name: 'InModi',
                            astral: '\uD805[\uDE00-\uDE5F]'
                        },
                        {
                            name: 'InModifier_Tone_Letters',
                            bmp: '\uA700-ꜟ'
                        },
                        {
                            name: 'InMongolian',
                            bmp: '\u1800-\u18AF'
                        },
                        {
                            name: 'InMongolian_Supplement',
                            astral: '\uD805[\uDE60-\uDE7F]'
                        },
                        {
                            name: 'InMro',
                            astral: '\uD81A[\uDE40-\uDE6F]'
                        },
                        {
                            name: 'InMultani',
                            astral: '\uD804[\uDE80-\uDEAF]'
                        },
                        {
                            name: 'InMusical_Symbols',
                            astral: '\uD834[\uDD00-\uDDFF]'
                        },
                        {
                            name: 'InMyanmar',
                            bmp: 'က-\u109F'
                        },
                        {
                            name: 'InMyanmar_Extended_A',
                            bmp: 'ꩠ-ꩿ'
                        },
                        {
                            name: 'InMyanmar_Extended_B',
                            bmp: 'ꧠ-\uA9FF'
                        },
                        {
                            name: 'InNKo',
                            bmp: '߀-\u07FF'
                        },
                        {
                            name: 'InNabataean',
                            astral: '\uD802[\uDC80-\uDCAF]'
                        },
                        {
                            name: 'InNew_Tai_Lue',
                            bmp: 'ᦀ-\u19DF'
                        },
                        {
                            name: 'InNewa',
                            astral: '\uD805[\uDC00-\uDC7F]'
                        },
                        {
                            name: 'InNumber_Forms',
                            bmp: '\u2150-\u218F'
                        },
                        {
                            name: 'InOgham',
                            bmp: '\u1680-\u169F'
                        },
                        {
                            name: 'InOl_Chiki',
                            bmp: '᱐-\u1C7F'
                        },
                        {
                            name: 'InOld_Hungarian',
                            astral: '\uD803[\uDC80-\uDCFF]'
                        },
                        {
                            name: 'InOld_Italic',
                            astral: '\uD800[\uDF00-\uDF2F]'
                        },
                        {
                            name: 'InOld_North_Arabian',
                            astral: '\uD802[\uDE80-\uDE9F]'
                        },
                        {
                            name: 'InOld_Permic',
                            astral: '\uD800[\uDF50-\uDF7F]'
                        },
                        {
                            name: 'InOld_Persian',
                            astral: '\uD800[\uDFA0-\uDFDF]'
                        },
                        {
                            name: 'InOld_South_Arabian',
                            astral: '\uD802[\uDE60-\uDE7F]'
                        },
                        {
                            name: 'InOld_Turkic',
                            astral: '\uD803[\uDC00-\uDC4F]'
                        },
                        {
                            name: 'InOptical_Character_Recognition',
                            bmp: '\u2440-\u245F'
                        },
                        {
                            name: 'InOriya',
                            bmp: '\u0B00-\u0B7F'
                        },
                        {
                            name: 'InOrnamental_Dingbats',
                            astral: '\uD83D[\uDE50-\uDE7F]'
                        },
                        {
                            name: 'InOsage',
                            astral: '\uD801[\uDCB0-\uDCFF]'
                        },
                        {
                            name: 'InOsmanya',
                            astral: '\uD801[\uDC80-\uDCAF]'
                        },
                        {
                            name: 'InPahawh_Hmong',
                            astral: '\uD81A[\uDF00-\uDF8F]'
                        },
                        {
                            name: 'InPalmyrene',
                            astral: '\uD802[\uDC60-\uDC7F]'
                        },
                        {
                            name: 'InPau_Cin_Hau',
                            astral: '\uD806[\uDEC0-\uDEFF]'
                        },
                        {
                            name: 'InPhags_pa',
                            bmp: 'ꡀ-\uA87F'
                        },
                        {
                            name: 'InPhaistos_Disc',
                            astral: '\uD800[\uDDD0-\uDDFF]'
                        },
                        {
                            name: 'InPhoenician',
                            astral: '\uD802[\uDD00-\uDD1F]'
                        },
                        {
                            name: 'InPhonetic_Extensions',
                            bmp: 'ᴀ-ᵿ'
                        },
                        {
                            name: 'InPhonetic_Extensions_Supplement',
                            bmp: 'ᶀ-ᶿ'
                        },
                        {
                            name: 'InPlaying_Cards',
                            astral: '\uD83C[\uDCA0-\uDCFF]'
                        },
                        {
                            name: 'InPrivate_Use_Area',
                            bmp: '\uE000-\uF8FF'
                        },
                        {
                            name: 'InPsalter_Pahlavi',
                            astral: '\uD802[\uDF80-\uDFAF]'
                        },
                        {
                            name: 'InRejang',
                            bmp: 'ꤰ-\uA95F'
                        },
                        {
                            name: 'InRumi_Numeral_Symbols',
                            astral: '\uD803[\uDE60-\uDE7F]'
                        },
                        {
                            name: 'InRunic',
                            bmp: 'ᚠ-\u16FF'
                        },
                        {
                            name: 'InSamaritan',
                            bmp: 'ࠀ-\u083F'
                        },
                        {
                            name: 'InSaurashtra',
                            bmp: 'ꢀ-\uA8DF'
                        },
                        {
                            name: 'InSharada',
                            astral: '\uD804[\uDD80-\uDDDF]'
                        },
                        {
                            name: 'InShavian',
                            astral: '\uD801[\uDC50-\uDC7F]'
                        },
                        {
                            name: 'InShorthand_Format_Controls',
                            astral: '\uD82F[\uDCA0-\uDCAF]'
                        },
                        {
                            name: 'InSiddham',
                            astral: '\uD805[\uDD80-\uDDFF]'
                        },
                        {
                            name: 'InSinhala',
                            bmp: '\u0D80-\u0DFF'
                        },
                        {
                            name: 'InSinhala_Archaic_Numbers',
                            astral: '\uD804[\uDDE0-\uDDFF]'
                        },
                        {
                            name: 'InSmall_Form_Variants',
                            bmp: '\uFE50-\uFE6F'
                        },
                        {
                            name: 'InSora_Sompeng',
                            astral: '\uD804[\uDCD0-\uDCFF]'
                        },
                        {
                            name: 'InSpacing_Modifier_Letters',
                            bmp: 'ʰ-\u02FF'
                        },
                        {
                            name: 'InSpecials',
                            bmp: '\uFFF0-\uFFFF'
                        },
                        {
                            name: 'InSundanese',
                            bmp: 'ᮀ-ᮿ'
                        },
                        {
                            name: 'InSundanese_Supplement',
                            bmp: '\u1CC0-\u1CCF'
                        },
                        {
                            name: 'InSuperscripts_and_Subscripts',
                            bmp: '\u2070-\u209F'
                        },
                        {
                            name: 'InSupplemental_Arrows_A',
                            bmp: '\u27F0-\u27FF'
                        },
                        {
                            name: 'InSupplemental_Arrows_B',
                            bmp: '\u2900-\u297F'
                        },
                        {
                            name: 'InSupplemental_Arrows_C',
                            astral: '\uD83E[\uDC00-\uDCFF]'
                        },
                        {
                            name: 'InSupplemental_Mathematical_Operators',
                            bmp: '\u2A00-\u2AFF'
                        },
                        {
                            name: 'InSupplemental_Punctuation',
                            bmp: '\u2E00-\u2E7F'
                        },
                        {
                            name: 'InSupplemental_Symbols_and_Pictographs',
                            astral: '\uD83E[\uDD00-\uDDFF]'
                        },
                        {
                            name: 'InSupplementary_Private_Use_Area_A',
                            astral: '[\uDB80-\uDBBF][\uDC00-\uDFFF]'
                        },
                        {
                            name: 'InSupplementary_Private_Use_Area_B',
                            astral: '[\uDBC0-\uDBFF][\uDC00-\uDFFF]'
                        },
                        {
                            name: 'InSutton_SignWriting',
                            astral: '\uD836[\uDC00-\uDEAF]'
                        },
                        {
                            name: 'InSyloti_Nagri',
                            bmp: 'ꠀ-\uA82F'
                        },
                        {
                            name: 'InSyriac',
                            bmp: '\u0700-ݏ'
                        },
                        {
                            name: 'InTagalog',
                            bmp: 'ᜀ-\u171F'
                        },
                        {
                            name: 'InTagbanwa',
                            bmp: 'ᝠ-\u177F'
                        },
                        {
                            name: 'InTags',
                            astral: '\uDB40[\uDC00-\uDC7F]'
                        },
                        {
                            name: 'InTai_Le',
                            bmp: 'ᥐ-\u197F'
                        },
                        {
                            name: 'InTai_Tham',
                            bmp: 'ᨠ-\u1AAF'
                        },
                        {
                            name: 'InTai_Viet',
                            bmp: 'ꪀ-\uAADF'
                        },
                        {
                            name: 'InTai_Xuan_Jing_Symbols',
                            astral: '\uD834[\uDF00-\uDF5F]'
                        },
                        {
                            name: 'InTakri',
                            astral: '\uD805[\uDE80-\uDECF]'
                        },
                        {
                            name: 'InTamil',
                            bmp: '\u0B80-\u0BFF'
                        },
                        {
                            name: 'InTangut',
                            astral: '[\uD81C-\uD821][\uDC00-\uDFFF]'
                        },
                        {
                            name: 'InTangut_Components',
                            astral: '\uD822[\uDC00-\uDEFF]'
                        },
                        {
                            name: 'InTelugu',
                            bmp: 'ఀ-\u0C7F'
                        },
                        {
                            name: 'InThaana',
                            bmp: 'ހ-\u07BF'
                        },
                        {
                            name: 'InThai',
                            bmp: '\u0E00-\u0E7F'
                        },
                        {
                            name: 'InTibetan',
                            bmp: 'ༀ-\u0FFF'
                        },
                        {
                            name: 'InTifinagh',
                            bmp: 'ⴰ-⵿'
                        },
                        {
                            name: 'InTirhuta',
                            astral: '\uD805[\uDC80-\uDCDF]'
                        },
                        {
                            name: 'InTransport_and_Map_Symbols',
                            astral: '\uD83D[\uDE80-\uDEFF]'
                        },
                        {
                            name: 'InUgaritic',
                            astral: '\uD800[\uDF80-\uDF9F]'
                        },
                        {
                            name: 'InUnified_Canadian_Aboriginal_Syllabics',
                            bmp: '\u1400-ᙿ'
                        },
                        {
                            name: 'InUnified_Canadian_Aboriginal_Syllabics_Extended',
                            bmp: 'ᢰ-\u18FF'
                        },
                        {
                            name: 'InVai',
                            bmp: 'ꔀ-\uA63F'
                        },
                        {
                            name: 'InVariation_Selectors',
                            bmp: '︀-️'
                        },
                        {
                            name: 'InVariation_Selectors_Supplement',
                            astral: '\uDB40[\uDD00-\uDDEF]'
                        },
                        {
                            name: 'InVedic_Extensions',
                            bmp: '᳐-\u1CFF'
                        },
                        {
                            name: 'InVertical_Forms',
                            bmp: '\uFE10-\uFE1F'
                        },
                        {
                            name: 'InWarang_Citi',
                            astral: '\uD806[\uDCA0-\uDCFF]'
                        },
                        {
                            name: 'InYi_Radicals',
                            bmp: '\uA490-\uA4CF'
                        },
                        {
                            name: 'InYi_Syllables',
                            bmp: 'ꀀ-\uA48F'
                        },
                        {
                            name: 'InYijing_Hexagram_Symbols',
                            bmp: '\u4DC0-\u4DFF'
                        }
                    ]);
                };
            },
            {}
        ],
        5: [
            function (require, module, exports) {
                module.exports = function (XRegExp) {
                    'use strict';
                    if (!XRegExp.addUnicodeData) {
                        throw new ReferenceError('Unicode Base must be loaded before Unicode Categories');
                    }
                    XRegExp.addUnicodeData([
                        {
                            name: 'C',
                            alias: 'Other',
                            isBmpLast: true,
                            bmp: '\0-\x1F\x7F-\x9F\xAD\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u0560\u0588\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EF\u05F5-\u0605\u061C\u061D\u06DD\u070E\u070F\u074B\u074C\u07B2-\u07BF\u07FB-\u07FF\u082E\u082F\u083F\u085C\u085D\u085F-\u089F\u08B5\u08BE-\u08D3\u08E2\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FC-\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A76-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0AFA-\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B55\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C04\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C77\u0C84\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0D00\u0D04\u0D0D\u0D11\u0D3B\u0D3C\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D81\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E86\u0E89\u0E8B\u0E8C\u0E8E-\u0E93\u0E98\u0EA0\u0EA4\u0EA6\u0EA8\u0EA9\u0EAC\u0EBA\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u170D\u1715-\u171F\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180E\u180F\u181A-\u181F\u1878-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ABF-\u1AFF\u1B4C-\u1B4F\u1B7D-\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1CBF\u1CC8-\u1CCF\u1CF7\u1CFA-\u1CFF\u1DF6-\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u200B-\u200F\u202A-\u202E\u2060-\u206F\u2072\u2073\u208F\u209D-\u209F\u20BF-\u20CF\u20F1-\u20FF\u218C-\u218F\u23FF\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2B97\u2BBA-\u2BBC\u2BC9\u2BD2-\u2BEB\u2BF0-\u2BFF\u2C2F\u2C5F\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E45-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u312E-\u3130\u318F\u31BB-\u31BF\u31E4-\u31EF\u321F\u32FF\u4DB6-\u4DBF\u9FD6-\u9FFF\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7AF\uA7B8-\uA7F6\uA82C-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA8FE\uA8FF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB66-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC2-\uFBD2\uFD40-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFE\uFDFF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD-\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFFB\uFFFE\uFFFF',
                            astral: '\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9C-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2F\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD70-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE34-\uDE37\uDE3B-\uDE3E\uDE48-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD00-\uDE5F\uDE7F-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC70-\uDC7E\uDCBD\uDCC2-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD44-\uDD4F\uDD77-\uDD7F\uDDCE\uDDCF\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF3B\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5A\uDC5C\uDC5E-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEB8-\uDEBF\uDECA-\uDEFF\uDF1A-\uDF1C\uDF2C-\uDF2F\uDF40-\uDFFF]|\uD806[\uDC00-\uDC9F\uDCF3-\uDCFE\uDD00-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDFFF]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD823-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83F\uD874-\uD87D\uD87F-\uDB3F\uDB41-\uDBFF][\uDC00-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDE70-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDEFF\uDF45-\uDF4F\uDF7F-\uDF8E\uDFA0-\uDFDF\uDFE1-\uDFFF]|\uD821[\uDFED-\uDFFF]|\uD822[\uDEF3-\uDFFF]|\uD82C[\uDC02-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA0-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDD73-\uDD7A\uDDE9-\uDDFF\uDE46-\uDEFF\uDF57-\uDF5F\uDF72-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4B-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD6F\uDDAD-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDEFF]|\uD83D[\uDED3-\uDEDF\uDEED-\uDEEF\uDEF7-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDD0F\uDD1F\uDD28-\uDD2F\uDD31\uDD32\uDD3F\uDD4C-\uDD4F\uDD5F-\uDD7F\uDD92-\uDDBF\uDDC1-\uDFFF]|\uD869[\uDED7-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uDB40[\uDC00-\uDCFF\uDDF0-\uDFFF]'
                        },
                        {
                            name: 'Cc',
                            alias: 'Control',
                            bmp: '\0-\x1F\x7F-\x9F'
                        },
                        {
                            name: 'Cf',
                            alias: 'Format',
                            bmp: '\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB',
                            astral: '\uD804\uDCBD|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]'
                        },
                        {
                            name: 'Cn',
                            alias: 'Unassigned',
                            bmp: '\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u0560\u0588\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EF\u05F5-\u05FF\u061D\u070E\u074B\u074C\u07B2-\u07BF\u07FB-\u07FF\u082E\u082F\u083F\u085C\u085D\u085F-\u089F\u08B5\u08BE-\u08D3\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FC-\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A76-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0AFA-\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B55\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C04\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C77\u0C84\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0D00\u0D04\u0D0D\u0D11\u0D3B\u0D3C\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D81\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E86\u0E89\u0E8B\u0E8C\u0E8E-\u0E93\u0E98\u0EA0\u0EA4\u0EA6\u0EA8\u0EA9\u0EAC\u0EBA\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u170D\u1715-\u171F\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180F\u181A-\u181F\u1878-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ABF-\u1AFF\u1B4C-\u1B4F\u1B7D-\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1CBF\u1CC8-\u1CCF\u1CF7\u1CFA-\u1CFF\u1DF6-\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u2065\u2072\u2073\u208F\u209D-\u209F\u20BF-\u20CF\u20F1-\u20FF\u218C-\u218F\u23FF\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2B97\u2BBA-\u2BBC\u2BC9\u2BD2-\u2BEB\u2BF0-\u2BFF\u2C2F\u2C5F\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E45-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u312E-\u3130\u318F\u31BB-\u31BF\u31E4-\u31EF\u321F\u32FF\u4DB6-\u4DBF\u9FD6-\u9FFF\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7AF\uA7B8-\uA7F6\uA82C-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA8FE\uA8FF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB66-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC2-\uFBD2\uFD40-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFE\uFDFF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD\uFEFE\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFF8\uFFFE\uFFFF',
                            astral: '\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9C-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2F\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD70-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE34-\uDE37\uDE3B-\uDE3E\uDE48-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD00-\uDE5F\uDE7F-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC70-\uDC7E\uDCC2-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD44-\uDD4F\uDD77-\uDD7F\uDDCE\uDDCF\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF3B\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5A\uDC5C\uDC5E-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEB8-\uDEBF\uDECA-\uDEFF\uDF1A-\uDF1C\uDF2C-\uDF2F\uDF40-\uDFFF]|\uD806[\uDC00-\uDC9F\uDCF3-\uDCFE\uDD00-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDFFF]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD823-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83F\uD874-\uD87D\uD87F-\uDB3F\uDB41-\uDB7F][\uDC00-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDE70-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDEFF\uDF45-\uDF4F\uDF7F-\uDF8E\uDFA0-\uDFDF\uDFE1-\uDFFF]|\uD821[\uDFED-\uDFFF]|\uD822[\uDEF3-\uDFFF]|\uD82C[\uDC02-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA4-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDDE9-\uDDFF\uDE46-\uDEFF\uDF57-\uDF5F\uDF72-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4B-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD6F\uDDAD-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDEFF]|\uD83D[\uDED3-\uDEDF\uDEED-\uDEEF\uDEF7-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDD0F\uDD1F\uDD28-\uDD2F\uDD31\uDD32\uDD3F\uDD4C-\uDD4F\uDD5F-\uDD7F\uDD92-\uDDBF\uDDC1-\uDFFF]|\uD869[\uDED7-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uDB40[\uDC00\uDC02-\uDC1F\uDC80-\uDCFF\uDDF0-\uDFFF]|[\uDBBF\uDBFF][\uDFFE\uDFFF]'
                        },
                        {
                            name: 'Co',
                            alias: 'Private_Use',
                            bmp: '\uE000-\uF8FF',
                            astral: '[\uDB80-\uDBBE\uDBC0-\uDBFE][\uDC00-\uDFFF]|[\uDBBF\uDBFF][\uDC00-\uDFFD]'
                        },
                        {
                            name: 'Cs',
                            alias: 'Surrogate',
                            bmp: '\uD800-\uDFFF'
                        },
                        {
                            name: 'L',
                            alias: 'Letter',
                            bmp: 'A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-\u08B4\u08B6-\u08BDऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡ\u0AF9ଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-\u0C5Aౠౡ\u0C80ಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎ\u0D54-\u0D56\u0D5F-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-\u13F5\u13F8-\u13FDᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛱ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢄᢇ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽ\u1C80-\u1C88ᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎↃↄⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々〆〱-〵〻〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-\u9FD5ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛥꜗ-ꜟꜢ-ꞈꞋ-\uA7AEꞰ-\uA7B7ꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻ\uA8FDꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭥ\uAB70-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ',
                            astral: '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]'
                        },
                        {
                            name: 'Ll',
                            alias: 'Lowercase_Letter',
                            bmp: 'a-zµß-öø-ÿāăąćĉċčďđēĕėęěĝğġģĥħĩīĭįıĳĵķĸĺļľŀłńņňŉŋōŏőœŕŗřśŝşšţťŧũūŭůűųŵŷźżž-ƀƃƅƈƌƍƒƕƙ-ƛƞơƣƥƨƪƫƭưƴƶƹƺƽ-ƿǆǉǌǎǐǒǔǖǘǚǜǝǟǡǣǥǧǩǫǭǯǰǳǵǹǻǽǿȁȃȅȇȉȋȍȏȑȓȕȗșțȝȟȡȣȥȧȩȫȭȯȱȳ-ȹȼȿɀɂɇɉɋɍɏ-ʓʕ-ʯͱͳͷͻ-ͽΐά-ώϐϑϕ-ϗϙϛϝϟϡϣϥϧϩϫϭϯ-ϳϵϸϻϼа-џѡѣѥѧѩѫѭѯѱѳѵѷѹѻѽѿҁҋҍҏґғҕҗҙқҝҟҡңҥҧҩҫҭүұҳҵҷҹһҽҿӂӄӆӈӊӌӎӏӑӓӕӗәӛӝӟӡӣӥӧөӫӭӯӱӳӵӷӹӻӽӿԁԃԅԇԉԋԍԏԑԓԕԗԙԛԝԟԡԣԥԧԩԫԭԯա-և\u13F8-\u13FD\u1C80-\u1C88ᴀ-ᴫᵫ-ᵷᵹ-ᶚḁḃḅḇḉḋḍḏḑḓḕḗḙḛḝḟḡḣḥḧḩḫḭḯḱḳḵḷḹḻḽḿṁṃṅṇṉṋṍṏṑṓṕṗṙṛṝṟṡṣṥṧṩṫṭṯṱṳṵṷṹṻṽṿẁẃẅẇẉẋẍẏẑẓẕ-ẝẟạảấầẩẫậắằẳẵặẹẻẽếềểễệỉịọỏốồổỗộớờởỡợụủứừửữựỳỵỷỹỻỽỿ-ἇἐ-ἕἠ-ἧἰ-ἷὀ-ὅὐ-ὗὠ-ὧὰ-ώᾀ-ᾇᾐ-ᾗᾠ-ᾧᾰ-ᾴᾶᾷιῂ-ῄῆῇῐ-ΐῖῗῠ-ῧῲ-ῴῶῷℊℎℏℓℯℴℹℼℽⅆ-ⅉⅎↄⰰ-ⱞⱡⱥⱦⱨⱪⱬⱱⱳⱴⱶ-ⱻⲁⲃⲅⲇⲉⲋⲍⲏⲑⲓⲕⲗⲙⲛⲝⲟⲡⲣⲥⲧⲩⲫⲭⲯⲱⲳⲵⲷⲹⲻⲽⲿⳁⳃⳅⳇⳉⳋⳍⳏⳑⳓⳕⳗⳙⳛⳝⳟⳡⳣⳤⳬⳮⳳⴀ-ⴥⴧⴭꙁꙃꙅꙇꙉꙋꙍꙏꙑꙓꙕꙗꙙꙛꙝꙟꙡꙣꙥꙧꙩꙫꙭꚁꚃꚅꚇꚉꚋꚍꚏꚑꚓꚕꚗꚙꚛꜣꜥꜧꜩꜫꜭꜯ-ꜱꜳꜵꜷꜹꜻꜽꜿꝁꝃꝅꝇꝉꝋꝍꝏꝑꝓꝕꝗꝙꝛꝝꝟꝡꝣꝥꝧꝩꝫꝭꝯꝱ-ꝸꝺꝼꝿꞁꞃꞅꞇꞌꞎꞑꞓ-ꞕꞗꞙꞛꞝꞟꞡꞣꞥꞧꞩ\uA7B5\uA7B7ꟺꬰ-ꭚ\uAB60-ꭥ\uAB70-\uABBFﬀ-ﬆﬓ-ﬗａ-ｚ',
                            astral: '\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD83A[\uDD22-\uDD43]'
                        },
                        {
                            name: 'Lm',
                            alias: 'Modifier_Letter',
                            bmp: 'ʰ-ˁˆ-ˑˠ-ˤˬˮʹͺՙـۥۦߴߵߺࠚࠤࠨॱๆໆჼៗᡃᪧᱸ-ᱽᴬ-ᵪᵸᶛ-ᶿⁱⁿₐ-ₜⱼⱽⵯⸯ々〱-〵〻ゝゞー-ヾꀕꓸ-ꓽꘌꙿꚜꚝꜗ-ꜟꝰꞈꟸꟹꧏꧦꩰꫝꫳꫴꭜ-ꭟｰﾞﾟ',
                            astral: '\uD81A[\uDF40-\uDF43]|\uD81B[\uDF93-\uDF9F\uDFE0]'
                        },
                        {
                            name: 'Lo',
                            alias: 'Other_Letter',
                            bmp: 'ªºƻǀ-ǃʔא-תװ-ײؠ-ؿف-يٮٯٱ-ۓەۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪࠀ-ࠕࡀ-ࡘࢠ-\u08B4\u08B6-\u08BDऄ-हऽॐक़-ॡॲ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡ\u0AF9ଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-\u0C5Aౠౡ\u0C80ಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎ\u0D54-\u0D56\u0D5F-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๅກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎა-ჺჽ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛱ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៜᠠ-ᡂᡄ-ᡷᢀ-ᢄᢇ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱷᳩ-ᳬᳮ-ᳱᳵᳶℵ-ℸⴰ-ⵧⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ〆〼ぁ-ゖゟァ-ヺヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-\u9FD5ꀀ-ꀔꀖ-ꒌꓐ-ꓷꔀ-ꘋꘐ-ꘟꘪꘫꙮꚠ-ꛥ\uA78Fꟷꟻ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻ\uA8FDꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧠ-ꧤꧧ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩯꩱ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛꫜꫠ-ꫪꫲꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎יִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼｦ-ｯｱ-ﾝﾠ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ',
                            astral: '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC50-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]'
                        },
                        {
                            name: 'Lt',
                            alias: 'Titlecase_Letter',
                            bmp: 'ǅǈǋǲᾈ-ᾏᾘ-ᾟᾨ-ᾯᾼῌῼ'
                        },
                        {
                            name: 'Lu',
                            alias: 'Uppercase_Letter',
                            bmp: 'A-ZÀ-ÖØ-ÞĀĂĄĆĈĊČĎĐĒĔĖĘĚĜĞĠĢĤĦĨĪĬĮİĲĴĶĹĻĽĿŁŃŅŇŊŌŎŐŒŔŖŘŚŜŞŠŢŤŦŨŪŬŮŰŲŴŶŸŹŻŽƁƂƄƆƇƉ-ƋƎ-ƑƓƔƖ-ƘƜƝƟƠƢƤƦƧƩƬƮƯƱ-ƳƵƷƸƼǄǇǊǍǏǑǓǕǗǙǛǞǠǢǤǦǨǪǬǮǱǴǶ-ǸǺǼǾȀȂȄȆȈȊȌȎȐȒȔȖȘȚȜȞȠȢȤȦȨȪȬȮȰȲȺȻȽȾɁɃ-ɆɈɊɌɎͰͲͶͿΆΈ-ΊΌΎΏΑ-ΡΣ-ΫϏϒ-ϔϘϚϜϞϠϢϤϦϨϪϬϮϴϷϹϺϽ-ЯѠѢѤѦѨѪѬѮѰѲѴѶѸѺѼѾҀҊҌҎҐҒҔҖҘҚҜҞҠҢҤҦҨҪҬҮҰҲҴҶҸҺҼҾӀӁӃӅӇӉӋӍӐӒӔӖӘӚӜӞӠӢӤӦӨӪӬӮӰӲӴӶӸӺӼӾԀԂԄԆԈԊԌԎԐԒԔԖԘԚԜԞԠԢԤԦԨԪԬԮԱ-ՖႠ-ჅჇჍᎠ-\u13F5ḀḂḄḆḈḊḌḎḐḒḔḖḘḚḜḞḠḢḤḦḨḪḬḮḰḲḴḶḸḺḼḾṀṂṄṆṈṊṌṎṐṒṔṖṘṚṜṞṠṢṤṦṨṪṬṮṰṲṴṶṸṺṼṾẀẂẄẆẈẊẌẎẐẒẔẞẠẢẤẦẨẪẬẮẰẲẴẶẸẺẼẾỀỂỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪỬỮỰỲỴỶỸỺỼỾἈ-ἏἘ-ἝἨ-ἯἸ-ἿὈ-ὍὙὛὝὟὨ-ὯᾸ-ΆῈ-ΉῘ-ΊῨ-ῬῸ-Ώℂℇℋ-ℍℐ-ℒℕℙ-ℝℤΩℨK-ℭℰ-ℳℾℿⅅↃⰀ-ⰮⱠⱢ-ⱤⱧⱩⱫⱭ-ⱰⱲⱵⱾ-ⲀⲂⲄⲆⲈⲊⲌⲎⲐⲒⲔⲖⲘⲚⲜⲞⲠⲢⲤⲦⲨⲪⲬⲮⲰⲲⲴⲶⲸⲺⲼⲾⳀⳂⳄⳆⳈⳊⳌⳎⳐⳒⳔⳖⳘⳚⳜⳞⳠⳢⳫⳭⳲꙀꙂꙄꙆꙈꙊꙌꙎꙐꙒꙔꙖꙘꙚꙜꙞꙠꙢꙤꙦꙨꙪꙬꚀꚂꚄꚆꚈꚊꚌꚎꚐꚒꚔꚖꚘꚚꜢꜤꜦꜨꜪꜬꜮꜲꜴꜶꜸꜺꜼꜾꝀꝂꝄꝆꝈꝊꝌꝎꝐꝒꝔꝖꝘꝚꝜꝞꝠꝢꝤꝦꝨꝪꝬꝮꝹꝻꝽꝾꞀꞂꞄꞆꞋꞍꞐꞒꞖꞘꞚꞜꞞꞠꞢꞤꞦꞨꞪ-\uA7AEꞰ-\uA7B4\uA7B6Ａ-Ｚ',
                            astral: '\uD801[\uDC00-\uDC27\uDCB0-\uDCD3]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]'
                        },
                        {
                            name: 'M',
                            alias: 'Mark',
                            bmp: '̀-ͯ҃-\u0489֑-ׇֽֿׁׂׅׄؐ-ًؚ-ٰٟۖ-ۜ۟-۪ۤۧۨ-ܑۭܰ-݊ަ-ް߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛\u08D4-\u08E1\u08E3-ःऺ-़ा-ॏ॑-ॗॢॣঁ-ঃ়া-ৄেৈো-্ৗৢৣਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑੰੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣஂா-ூெ-ைொ-்ௗఀ-ఃా-ౄె-ైొ-్ౕౖౢౣಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣංඃ්ා-ුූෘ-ෟෲෳัิ-ฺ็-๎ັິ-ູົຼ່-ໍ༹༘༙༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏႚ-ႝ፝-፟ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝᠋-᠍ᢅᢆᢩᤠ-ᤫᤰ-᤻ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼᪰-\u1ABEᬀ-ᬄ᬴-᭄᭫-᭳ᮀ-ᮂᮡ-ᮭ᯦-᯳ᰤ-᰷᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵\u1DFB-᷿⃐-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꙯-\uA672ꙴ-꙽\uA69Eꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-\uA8C5꣠-꣱ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀ꧥꨩ-ꨶꩃꩌꩍꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭ﬞ︀-️︠-\uFE2F',
                            astral: '\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDDCA-\uDDCC\uDE2C-\uDE37\uDE3E\uDEDF-\uDEEA\uDF00-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC35-\uDC46\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDDDC\uDDDD\uDE30-\uDE40\uDEAB-\uDEB7\uDF1D-\uDF2B]|\uD807[\uDC2F-\uDC36\uDC38-\uDC3F\uDC92-\uDCA7\uDCA9-\uDCB6]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]'
                        },
                        {
                            name: 'Mc',
                            alias: 'Spacing_Mark',
                            bmp: 'ःऻा-ीॉ-ौॎॏংঃা-ীেৈোৌৗਃਾ-ੀઃા-ીૉોૌଂଃାୀେୈୋୌୗாிுூெ-ைொ-ௌௗఁ-ఃు-ౄಂಃಾೀ-ೄೇೈೊೋೕೖംഃാ-ീെ-ൈൊ-ൌൗංඃා-ෑෘ-ෟෲෳ༾༿ཿါာေးျြၖၗၢ-ၤၧ-ၭႃႄႇ-ႌႏႚ-ႜាើ-ៅះៈᤣ-ᤦᤩ-ᤫᤰᤱᤳ-ᤸᨙᨚᩕᩗᩡᩣᩤᩭ-ᩲᬄᬵᬻᬽ-ᭁᭃ᭄ᮂᮡᮦᮧ᮪ᯧᯪ-ᯬᯮ᯲᯳ᰤ-ᰫᰴᰵ᳡ᳲᳳ〮〯ꠣꠤꠧꢀꢁꢴ-ꣃꥒ꥓ꦃꦴꦵꦺꦻꦽ-꧀ꨯꨰꨳꨴꩍꩻꩽꫫꫮꫯꫵꯣꯤꯦꯧꯩꯪ꯬',
                            astral: '\uD804[\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8\uDD2C\uDD82\uDDB3-\uDDB5\uDDBF\uDDC0\uDE2C-\uDE2E\uDE32\uDE33\uDE35\uDEE0-\uDEE2\uDF02\uDF03\uDF3E\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63]|\uD805[\uDC35-\uDC37\uDC40\uDC41\uDC45\uDCB0-\uDCB2\uDCB9\uDCBB-\uDCBE\uDCC1\uDDAF-\uDDB1\uDDB8-\uDDBB\uDDBE\uDE30-\uDE32\uDE3B\uDE3C\uDE3E\uDEAC\uDEAE\uDEAF\uDEB6\uDF20\uDF21\uDF26]|\uD807[\uDC2F\uDC3E\uDCA9\uDCB1\uDCB4]|\uD81B[\uDF51-\uDF7E]|\uD834[\uDD65\uDD66\uDD6D-\uDD72]'
                        },
                        {
                            name: 'Me',
                            alias: 'Enclosing_Mark',
                            bmp: '\u0488\u0489\u1ABE\u20DD-\u20E0\u20E2-\u20E4\uA670-\uA672'
                        },
                        {
                            name: 'Mn',
                            alias: 'Nonspacing_Mark',
                            bmp: '̀-ͯ҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-ٰٟۖ-ۜ۟-۪ۤۧۨ-ܑۭܰ-݊ަ-ް߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛\u08D4-\u08E1\u08E3-ंऺ़ु-ै्॑-ॗॢॣঁ়ু-ৄ্ৢৣਁਂ਼ੁੂੇੈੋ-੍ੑੰੱੵઁં઼ુ-ૅેૈ્ૢૣଁ଼ିୁ-ୄ୍ୖୢୣஂீ்ఀా-ీె-ైొ-్ౕౖౢౣಁ಼ಿೆೌ್ೢೣഁു-ൄ്ൢൣ්ි-ුූัิ-ฺ็-๎ັິ-ູົຼ່-ໍཱ༹༘༙༵༷-ཾྀ-྄྆྇ྍ-ྗྙ-ྼ࿆ိ-ူဲ-့္်ွှၘၙၞ-ၠၱ-ၴႂႅႆႍႝ፝-፟ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴឵ិ-ួំ៉-៓៝᠋-᠍ᢅᢆᢩᤠ-ᤢᤧᤨᤲ᤹-᤻ᨘᨗᨛᩖᩘ-ᩞ᩠ᩢᩥ-ᩬᩳ-᩿᩼᪰-᪽ᬀ-ᬃ᬴ᬶ-ᬺᬼᭂ᭫-᭳ᮀᮁᮢ-ᮥᮨᮩ᮫-ᮭ᯦ᯨᯩᯭᯯ-ᯱᰬ-ᰳᰶ᰷᳐-᳔᳒-᳢᳠-᳨᳭᳴᳸᳹᷀-᷵\u1DFB-᷿⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〭꙯ꙴ-꙽\uA69Eꚟ꛰꛱ꠂ꠆ꠋꠥꠦ꣄\uA8C5꣠-꣱ꤦ-꤭ꥇ-ꥑꦀ-ꦂ꦳ꦶ-ꦹꦼꧥꨩ-ꨮꨱꨲꨵꨶꩃꩌꩼꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫬꫭ꫶ꯥꯨ꯭ﬞ︀-️︠-\uFE2F',
                            astral: '\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDCA-\uDDCC\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]'
                        },
                        {
                            name: 'N',
                            alias: 'Number',
                            bmp: '0-9\xB2\xB3\xB9\xBC-\xBE٠-٩۰-۹߀-߉०-९০-৯\u09F4-\u09F9੦-੯૦-૯୦-୯\u0B72-\u0B77௦-\u0BF2౦-౯\u0C78-\u0C7E೦-೯\u0D58-\u0D5E൦-\u0D78෦-෯๐-๙໐-໙༠-\u0F33၀-၉႐-႙\u1369-\u137Cᛮ-ᛰ០-៩\u17F0-\u17F9᠐-᠙᥆-᥏᧐-\u19DA᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙\u2070\u2074-\u2079\u2080-\u2089\u2150-ↂↅ-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD〇〡-〩〸-〺\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF꘠-꘩ꛦ-ꛯ\uA830-\uA835꣐-꣙꤀-꤉꧐-꧙꧰-꧹꩐-꩙꯰-꯹０-９',
                            astral: '\uD800[\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23\uDF41\uDF4A\uDFD1-\uDFD5]|\uD801[\uDCA0-\uDCA9]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE47\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDE60-\uDE7E]|\uD804[\uDC52-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDDE1-\uDDF4\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF3B]|\uD806[\uDCE0-\uDCF2]|\uD807[\uDC50-\uDC6C]|\uD809[\uDC00-\uDC6E]|\uD81A[\uDE60-\uDE69\uDF50-\uDF59\uDF5B-\uDF61]|\uD834[\uDF60-\uDF71]|\uD835[\uDFCE-\uDFFF]|\uD83A[\uDCC7-\uDCCF\uDD50-\uDD59]|\uD83C[\uDD00-\uDD0C]'
                        },
                        {
                            name: 'Nd',
                            alias: 'Decimal_Number',
                            bmp: '0-9٠-٩۰-۹߀-߉०-९০-৯੦-੯૦-૯୦-୯௦-௯౦-౯೦-೯൦-൯෦-෯๐-๙໐-໙༠-༩၀-၉႐-႙០-៩᠐-᠙᥆-᥏᧐-᧙᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙꘠-꘩꣐-꣙꤀-꤉꧐-꧙꧰-꧹꩐-꩙꯰-꯹０-９',
                            astral: '\uD801[\uDCA0-\uDCA9]|\uD804[\uDC66-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF39]|\uD806[\uDCE0-\uDCE9]|\uD807[\uDC50-\uDC59]|\uD81A[\uDE60-\uDE69\uDF50-\uDF59]|\uD835[\uDFCE-\uDFFF]|\uD83A[\uDD50-\uDD59]'
                        },
                        {
                            name: 'Nl',
                            alias: 'Letter_Number',
                            bmp: 'ᛮ-ᛰⅠ-ↂↅ-ↈ〇〡-〩〸-〺ꛦ-ꛯ',
                            astral: '\uD800[\uDD40-\uDD74\uDF41\uDF4A\uDFD1-\uDFD5]|\uD809[\uDC00-\uDC6E]'
                        },
                        {
                            name: 'No',
                            alias: 'Other_Number',
                            bmp: '\xB2\xB3\xB9\xBC-\xBE\u09F4-\u09F9\u0B72-\u0B77\u0BF0-\u0BF2\u0C78-\u0C7E\u0D58-\u0D5E\u0D70-\u0D78\u0F2A-\u0F33\u1369-\u137C\u17F0-\u17F9\u19DA\u2070\u2074-\u2079\u2080-\u2089\u2150-\u215F\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA830-\uA835',
                            astral: '\uD800[\uDD07-\uDD33\uDD75-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE47\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDE60-\uDE7E]|\uD804[\uDC52-\uDC65\uDDE1-\uDDF4]|\uD805[\uDF3A\uDF3B]|\uD806[\uDCEA-\uDCF2]|\uD807[\uDC5A-\uDC6C]|\uD81A[\uDF5B-\uDF61]|\uD834[\uDF60-\uDF71]|\uD83A[\uDCC7-\uDCCF]|\uD83C[\uDD00-\uDD0C]'
                        },
                        {
                            name: 'P',
                            alias: 'Punctuation',
                            bmp: '!-#%-\\x2A,-/:;\\x3F@\\x5B-\\x5D_\\x7B}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E44\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D＿\uFF5B\uFF5D\uFF5F-\uFF65',
                            astral: '\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC9\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD807[\uDC41-\uDC45\uDC70\uDC71]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]'
                        },
                        {
                            name: 'Pc',
                            alias: 'Connector_Punctuation',
                            bmp: '_‿⁀⁔︳︴﹍-﹏＿'
                        },
                        {
                            name: 'Pd',
                            alias: 'Dash_Punctuation',
                            bmp: '\\x2D\u058A\u05BE\u1400\u1806\u2010-\u2015\u2E17\u2E1A\u2E3A\u2E3B\u2E40\u301C\u3030\u30A0\uFE31\uFE32\uFE58\uFE63\uFF0D'
                        },
                        {
                            name: 'Pe',
                            alias: 'Close_Punctuation',
                            bmp: '\\x29\\x5D}\u0F3B\u0F3D\u169C\u2046\u207E\u208E\u2309\u230B\u232A\u2769\u276B\u276D\u276F\u2771\u2773\u2775\u27C6\u27E7\u27E9\u27EB\u27ED\u27EF\u2984\u2986\u2988\u298A\u298C\u298E\u2990\u2992\u2994\u2996\u2998\u29D9\u29DB\u29FD\u2E23\u2E25\u2E27\u2E29\u3009\u300B\u300D\u300F\u3011\u3015\u3017\u3019\u301B\u301E\u301F\uFD3E\uFE18\uFE36\uFE38\uFE3A\uFE3C\uFE3E\uFE40\uFE42\uFE44\uFE48\uFE5A\uFE5C\uFE5E\uFF09\uFF3D\uFF5D\uFF60\uFF63'
                        },
                        {
                            name: 'Pf',
                            alias: 'Final_Punctuation',
                            bmp: '\xBB\u2019\u201D\u203A\u2E03\u2E05\u2E0A\u2E0D\u2E1D\u2E21'
                        },
                        {
                            name: 'Pi',
                            alias: 'Initial_Punctuation',
                            bmp: '\xAB\u2018\u201B\u201C\u201F\u2039\u2E02\u2E04\u2E09\u2E0C\u2E1C\u2E20'
                        },
                        {
                            name: 'Po',
                            alias: 'Other_Punctuation',
                            bmp: '!-#%-\'\\x2A,\\x2E/:;\\x3F@\\x5C\xA1\xA7\xB6\xB7\xBF\u037E\u0387\u055A-\u055F\u0589\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u166D\u166E\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u1805\u1807-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2016\u2017\u2020-\u2027\u2030-\u2038\u203B-\u203E\u2041-\u2043\u2047-\u2051\u2053\u2055-\u205E\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00\u2E01\u2E06-\u2E08\u2E0B\u2E0E-\u2E16\u2E18\u2E19\u2E1B\u2E1E\u2E1F\u2E2A-\u2E2E\u2E30-\u2E39\u2E3C-\u2E3F\u2E41\u2E43\u2E44\u3001-\u3003\u303D\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFE10-\uFE16\uFE19\uFE30\uFE45\uFE46\uFE49-\uFE4C\uFE50-\uFE52\uFE54-\uFE57\uFE5F-\uFE61\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF07\uFF0A\uFF0C\uFF0E\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3C\uFF61\uFF64\uFF65',
                            astral: '\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC9\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD807[\uDC41-\uDC45\uDC70\uDC71]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]'
                        },
                        {
                            name: 'Ps',
                            alias: 'Open_Punctuation',
                            bmp: '\\x28\\x5B\\x7B\u0F3A\u0F3C\u169B\u201A\u201E\u2045\u207D\u208D\u2308\u230A\u2329\u2768\u276A\u276C\u276E\u2770\u2772\u2774\u27C5\u27E6\u27E8\u27EA\u27EC\u27EE\u2983\u2985\u2987\u2989\u298B\u298D\u298F\u2991\u2993\u2995\u2997\u29D8\u29DA\u29FC\u2E22\u2E24\u2E26\u2E28\u2E42\u3008\u300A\u300C\u300E\u3010\u3014\u3016\u3018\u301A\u301D\uFD3F\uFE17\uFE35\uFE37\uFE39\uFE3B\uFE3D\uFE3F\uFE41\uFE43\uFE47\uFE59\uFE5B\uFE5D\uFF08\uFF3B\uFF5B\uFF5F\uFF62'
                        },
                        {
                            name: 'S',
                            alias: 'Symbol',
                            bmp: '\\x24\\x2B<->\\x5E`\\x7C~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20BE\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u23FE\u2400-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B98-\u2BB9\u2BBD-\u2BC8\u2BCA-\u2BD1\u2BEC-\u2BEF\u2CE5-\u2CEA\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u32FE\u3300-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uFB29\uFBB2-\uFBC1\uFDFC\uFDFD\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD',
                            astral: '\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9B\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD83B[\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD10-\uDD2E\uDD30-\uDD6B\uDD70-\uDDAC\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED2\uDEE0-\uDEEC\uDEF0-\uDEF6\uDF00-\uDF73\uDF80-\uDFD4]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDD10-\uDD1E\uDD20-\uDD27\uDD30\uDD33-\uDD3E\uDD40-\uDD4B\uDD50-\uDD5E\uDD80-\uDD91\uDDC0]'
                        },
                        {
                            name: 'Sc',
                            alias: 'Currency_Symbol',
                            bmp: '\\x24\xA2-\xA5\u058F\u060B\u09F2\u09F3\u09FB\u0AF1\u0BF9\u0E3F\u17DB\u20A0-\u20BE\uA838\uFDFC\uFE69\uFF04\uFFE0\uFFE1\uFFE5\uFFE6'
                        },
                        {
                            name: 'Sk',
                            alias: 'Modifier_Symbol',
                            bmp: '\\x5E`\xA8\xAF\xB4\xB8\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u309B\u309C\uA700-\uA716\uA720\uA721\uA789\uA78A\uAB5B\uFBB2-\uFBC1\uFF3E\uFF40\uFFE3',
                            astral: '\uD83C[\uDFFB-\uDFFF]'
                        },
                        {
                            name: 'Sm',
                            alias: 'Math_Symbol',
                            bmp: '\\x2B<->\\x7C~\xAC\xB1\xD7\xF7\u03F6\u0606-\u0608\u2044\u2052\u207A-\u207C\u208A-\u208C\u2118\u2140-\u2144\u214B\u2190-\u2194\u219A\u219B\u21A0\u21A3\u21A6\u21AE\u21CE\u21CF\u21D2\u21D4\u21F4-\u22FF\u2320\u2321\u237C\u239B-\u23B3\u23DC-\u23E1\u25B7\u25C1\u25F8-\u25FF\u266F\u27C0-\u27C4\u27C7-\u27E5\u27F0-\u27FF\u2900-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2AFF\u2B30-\u2B44\u2B47-\u2B4C\uFB29\uFE62\uFE64-\uFE66\uFF0B\uFF1C-\uFF1E\uFF5C\uFF5E\uFFE2\uFFE9-\uFFEC',
                            astral: '\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD83B[\uDEF0\uDEF1]'
                        },
                        {
                            name: 'So',
                            alias: 'Other_Symbol',
                            bmp: '\xA6\xA9\xAE\xB0\u0482\u058D\u058E\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u09FA\u0B70\u0BF3-\u0BF8\u0BFA\u0C7F\u0D4F\u0D79\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116\u2117\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u214A\u214C\u214D\u214F\u218A\u218B\u2195-\u2199\u219C-\u219F\u21A1\u21A2\u21A4\u21A5\u21A7-\u21AD\u21AF-\u21CD\u21D0\u21D1\u21D3\u21D5-\u21F3\u2300-\u2307\u230C-\u231F\u2322-\u2328\u232B-\u237B\u237D-\u239A\u23B4-\u23DB\u23E2-\u23FE\u2400-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u25B6\u25B8-\u25C0\u25C2-\u25F7\u2600-\u266E\u2670-\u2767\u2794-\u27BF\u2800-\u28FF\u2B00-\u2B2F\u2B45\u2B46\u2B4D-\u2B73\u2B76-\u2B95\u2B98-\u2BB9\u2BBD-\u2BC8\u2BCA-\u2BD1\u2BEC-\u2BEF\u2CE5-\u2CEA\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u32FE\u3300-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA828-\uA82B\uA836\uA837\uA839\uAA77-\uAA79\uFDFD\uFFE4\uFFE8\uFFED\uFFEE\uFFFC\uFFFD',
                            astral: '\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9B\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD10-\uDD2E\uDD30-\uDD6B\uDD70-\uDDAC\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDF00-\uDFFA]|\uD83D[\uDC00-\uDED2\uDEE0-\uDEEC\uDEF0-\uDEF6\uDF00-\uDF73\uDF80-\uDFD4]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDD10-\uDD1E\uDD20-\uDD27\uDD30\uDD33-\uDD3E\uDD40-\uDD4B\uDD50-\uDD5E\uDD80-\uDD91\uDDC0]'
                        },
                        {
                            name: 'Z',
                            alias: 'Separator',
                            bmp: ' \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000'
                        },
                        {
                            name: 'Zl',
                            alias: 'Line_Separator',
                            bmp: '\u2028'
                        },
                        {
                            name: 'Zp',
                            alias: 'Paragraph_Separator',
                            bmp: '\u2029'
                        },
                        {
                            name: 'Zs',
                            alias: 'Space_Separator',
                            bmp: ' \xA0\u1680\u2000-\u200A\u202F\u205F\u3000'
                        }
                    ]);
                };
            },
            {}
        ],
        6: [
            function (require, module, exports) {
                module.exports = function (XRegExp) {
                    'use strict';
                    if (!XRegExp.addUnicodeData) {
                        throw new ReferenceError('Unicode Base must be loaded before Unicode Properties');
                    }
                    var unicodeData = [
                        {
                            name: 'ASCII',
                            bmp: '\0-\x7F'
                        },
                        {
                            name: 'Alphabetic',
                            bmp: 'A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͅͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևְ-ׇֽֿׁׂׅׄא-תװ-ײؐ-ؚؠ-ٗٙ-ٟٮ-ۓە-ۜۡ-ۭۨ-ۯۺ-ۼۿܐ-ܿݍ-ޱߊ-ߪߴߵߺࠀ-ࠗࠚ-ࠬࡀ-ࡘࢠ-\u08B4\u08B6-\u08BD\u08D4-\u08DF\u08E3-ࣰࣩ-ऻऽ-ौॎ-ॐॕ-ॣॱ-ঃঅ-ঌএঐও-নপ-রলশ-হঽ-ৄেৈোৌৎৗড়ঢ়য়-ৣৰৱਁ-ਃਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਾ-ੂੇੈੋੌੑਖ਼-ੜਫ਼ੰ-ੵઁ-ઃઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽ-ૅે-ૉોૌૐૠ-ૣ\u0AF9ଁ-ଃଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽ-ୄେୈୋୌୖୗଡ଼ଢ଼ୟ-ୣୱஂஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹா-ூெ-ைொ-ௌௐௗఀ-ఃఅ-ఌఎ-ఐఒ-నప-హఽ-ౄె-ైొ-ౌౕౖౘ-\u0C5Aౠ-ౣ\u0C80-ಃಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽ-ೄೆ-ೈೊ-ೌೕೖೞೠ-ೣೱೲഁ-ഃഅ-ഌഎ-ഐഒ-ഺഽ-ൄെ-ൈൊ-ൌൎ\u0D54-ൗ\u0D5F-ൣൺ-ൿංඃඅ-ඖක-නඳ-රලව-ෆා-ුූෘ-ෟෲෳก-ฺเ-ๆํກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ູົ-ຽເ-ໄໆໍໜ-ໟༀཀ-ཇཉ-ཬཱ-ཱྀྈ-ྗྙ-ྼက-ံးျ-ဿၐ-ၢၥ-ၨၮ-ႆႎႜႝႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚ፟ᎀ-ᎏᎠ-\u13F5\u13F8-\u13FDᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜓᜠ-ᜳᝀ-ᝓᝠ-ᝬᝮ-ᝰᝲᝳក-ឳា-ៈៗៜᠠ-ᡷᢀ-ᢪᢰ-ᣵᤀ-ᤞᤠ-ᤫᤰ-ᤸᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨛᨠ-ᩞᩡ-ᩴᪧᬀ-ᬳᬵ-ᭃᭅ-ᭋᮀ-ᮩᮬ-ᮯᮺ-ᯥᯧ-ᯱᰀ-ᰵᱍ-ᱏᱚ-ᱽ\u1C80-\u1C88ᳩ-ᳬᳮ-ᳳᳵᳶᴀ-ᶿᷧ-ᷴḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈ\u24B6-\u24E9Ⰰ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⷠ-ⷿⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-\u9FD5ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙴ-ꙻꙿ-ꛯꜗ-ꜟꜢ-ꞈꞋ-\uA7AEꞰ-\uA7B7ꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠧꡀ-ꡳꢀ-ꣃ\uA8C5ꣲ-ꣷꣻ\uA8FDꤊ-ꤪꤰ-ꥒꥠ-ꥼꦀ-ꦲꦴ-ꦿꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨶꩀ-ꩍꩠ-ꩶꩺꩾ-ꪾꫀꫂꫛ-ꫝꫠ-ꫯꫲ-ꫵꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭥ\uAB70-ꯪ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ',
                            astral: '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC45\uDC82-\uDCB8\uDCD0-\uDCE8\uDD00-\uDD32\uDD50-\uDD72\uDD76\uDD80-\uDDBF\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE34\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEE8\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D-\uDF44\uDF47\uDF48\uDF4B\uDF4C\uDF50\uDF57\uDF5D-\uDF63]|\uD805[\uDC00-\uDC41\uDC43-\uDC45\uDC47-\uDC4A\uDC80-\uDCC1\uDCC4\uDCC5\uDCC7\uDD80-\uDDB5\uDDB8-\uDDBE\uDDD8-\uDDDD\uDE00-\uDE3E\uDE40\uDE44\uDE80-\uDEB5\uDF00-\uDF19\uDF1D-\uDF2A]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC3E\uDC40\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF36\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF93-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9E]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD47]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]'
                        },
                        {
                            name: 'Any',
                            isBmpLast: true,
                            bmp: '\0-\uFFFF',
                            astral: '[\uD800-\uDBFF][\uDC00-\uDFFF]'
                        },
                        {
                            name: 'Default_Ignorable_Code_Point',
                            bmp: '\xAD͏\u061Cᅟᅠ឴឵᠋-\u180E\u200B-\u200F\u202A-\u202E\u2060-\u206Fㅤ︀-️\uFEFFﾠ\uFFF0-\uFFF8',
                            astral: '\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|[\uDB40-\uDB43][\uDC00-\uDFFF]'
                        },
                        {
                            name: 'Lowercase',
                            bmp: 'a-zªµºß-öø-ÿāăąćĉċčďđēĕėęěĝğġģĥħĩīĭįıĳĵķĸĺļľŀłńņňŉŋōŏőœŕŗřśŝşšţťŧũūŭůűųŵŷźżž-ƀƃƅƈƌƍƒƕƙ-ƛƞơƣƥƨƪƫƭưƴƶƹƺƽ-ƿǆǉǌǎǐǒǔǖǘǚǜǝǟǡǣǥǧǩǫǭǯǰǳǵǹǻǽǿȁȃȅȇȉȋȍȏȑȓȕȗșțȝȟȡȣȥȧȩȫȭȯȱȳ-ȹȼȿɀɂɇɉɋɍɏ-ʓʕ-ʸˀˁˠ-ˤͅͱͳͷͺ-ͽΐά-ώϐϑϕ-ϗϙϛϝϟϡϣϥϧϩϫϭϯ-ϳϵϸϻϼа-џѡѣѥѧѩѫѭѯѱѳѵѷѹѻѽѿҁҋҍҏґғҕҗҙқҝҟҡңҥҧҩҫҭүұҳҵҷҹһҽҿӂӄӆӈӊӌӎӏӑӓӕӗәӛӝӟӡӣӥӧөӫӭӯӱӳӵӷӹӻӽӿԁԃԅԇԉԋԍԏԑԓԕԗԙԛԝԟԡԣԥԧԩԫԭԯա-և\u13F8-\u13FD\u1C80-\u1C88ᴀ-ᶿḁḃḅḇḉḋḍḏḑḓḕḗḙḛḝḟḡḣḥḧḩḫḭḯḱḳḵḷḹḻḽḿṁṃṅṇṉṋṍṏṑṓṕṗṙṛṝṟṡṣṥṧṩṫṭṯṱṳṵṷṹṻṽṿẁẃẅẇẉẋẍẏẑẓẕ-ẝẟạảấầẩẫậắằẳẵặẹẻẽếềểễệỉịọỏốồổỗộớờởỡợụủứừửữựỳỵỷỹỻỽỿ-ἇἐ-ἕἠ-ἧἰ-ἷὀ-ὅὐ-ὗὠ-ὧὰ-ώᾀ-ᾇᾐ-ᾗᾠ-ᾧᾰ-ᾴᾶᾷιῂ-ῄῆῇῐ-ΐῖῗῠ-ῧῲ-ῴῶῷⁱⁿₐ-ₜℊℎℏℓℯℴℹℼℽⅆ-ⅉⅎⅰ-ⅿↄ\u24D0-\u24E9ⰰ-ⱞⱡⱥⱦⱨⱪⱬⱱⱳⱴⱶ-ⱽⲁⲃⲅⲇⲉⲋⲍⲏⲑⲓⲕⲗⲙⲛⲝⲟⲡⲣⲥⲧⲩⲫⲭⲯⲱⲳⲵⲷⲹⲻⲽⲿⳁⳃⳅⳇⳉⳋⳍⳏⳑⳓⳕⳗⳙⳛⳝⳟⳡⳣⳤⳬⳮⳳⴀ-ⴥⴧⴭꙁꙃꙅꙇꙉꙋꙍꙏꙑꙓꙕꙗꙙꙛꙝꙟꙡꙣꙥꙧꙩꙫꙭꚁꚃꚅꚇꚉꚋꚍꚏꚑꚓꚕꚗꚙꚛ-ꚝꜣꜥꜧꜩꜫꜭꜯ-ꜱꜳꜵꜷꜹꜻꜽꜿꝁꝃꝅꝇꝉꝋꝍꝏꝑꝓꝕꝗꝙꝛꝝꝟꝡꝣꝥꝧꝩꝫꝭꝯ-ꝸꝺꝼꝿꞁꞃꞅꞇꞌꞎꞑꞓ-ꞕꞗꞙꞛꞝꞟꞡꞣꞥꞧꞩ\uA7B5\uA7B7ꟸ-ꟺꬰ-ꭚꭜ-ꭥ\uAB70-\uABBFﬀ-ﬆﬓ-ﬗａ-ｚ',
                            astral: '\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD83A[\uDD22-\uDD43]'
                        },
                        {
                            name: 'Noncharacter_Code_Point',
                            bmp: '\uFDD0-\uFDEF\uFFFE\uFFFF',
                            astral: '[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]'
                        },
                        {
                            name: 'Uppercase',
                            bmp: 'A-ZÀ-ÖØ-ÞĀĂĄĆĈĊČĎĐĒĔĖĘĚĜĞĠĢĤĦĨĪĬĮİĲĴĶĹĻĽĿŁŃŅŇŊŌŎŐŒŔŖŘŚŜŞŠŢŤŦŨŪŬŮŰŲŴŶŸŹŻŽƁƂƄƆƇƉ-ƋƎ-ƑƓƔƖ-ƘƜƝƟƠƢƤƦƧƩƬƮƯƱ-ƳƵƷƸƼǄǇǊǍǏǑǓǕǗǙǛǞǠǢǤǦǨǪǬǮǱǴǶ-ǸǺǼǾȀȂȄȆȈȊȌȎȐȒȔȖȘȚȜȞȠȢȤȦȨȪȬȮȰȲȺȻȽȾɁɃ-ɆɈɊɌɎͰͲͶͿΆΈ-ΊΌΎΏΑ-ΡΣ-ΫϏϒ-ϔϘϚϜϞϠϢϤϦϨϪϬϮϴϷϹϺϽ-ЯѠѢѤѦѨѪѬѮѰѲѴѶѸѺѼѾҀҊҌҎҐҒҔҖҘҚҜҞҠҢҤҦҨҪҬҮҰҲҴҶҸҺҼҾӀӁӃӅӇӉӋӍӐӒӔӖӘӚӜӞӠӢӤӦӨӪӬӮӰӲӴӶӸӺӼӾԀԂԄԆԈԊԌԎԐԒԔԖԘԚԜԞԠԢԤԦԨԪԬԮԱ-ՖႠ-ჅჇჍᎠ-\u13F5ḀḂḄḆḈḊḌḎḐḒḔḖḘḚḜḞḠḢḤḦḨḪḬḮḰḲḴḶḸḺḼḾṀṂṄṆṈṊṌṎṐṒṔṖṘṚṜṞṠṢṤṦṨṪṬṮṰṲṴṶṸṺṼṾẀẂẄẆẈẊẌẎẐẒẔẞẠẢẤẦẨẪẬẮẰẲẴẶẸẺẼẾỀỂỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪỬỮỰỲỴỶỸỺỼỾἈ-ἏἘ-ἝἨ-ἯἸ-ἿὈ-ὍὙὛὝὟὨ-ὯᾸ-ΆῈ-ΉῘ-ΊῨ-ῬῸ-Ώℂℇℋ-ℍℐ-ℒℕℙ-ℝℤΩℨK-ℭℰ-ℳℾℿⅅⅠ-ⅯↃ\u24B6-\u24CFⰀ-ⰮⱠⱢ-ⱤⱧⱩⱫⱭ-ⱰⱲⱵⱾ-ⲀⲂⲄⲆⲈⲊⲌⲎⲐⲒⲔⲖⲘⲚⲜⲞⲠⲢⲤⲦⲨⲪⲬⲮⲰⲲⲴⲶⲸⲺⲼⲾⳀⳂⳄⳆⳈⳊⳌⳎⳐⳒⳔⳖⳘⳚⳜⳞⳠⳢⳫⳭⳲꙀꙂꙄꙆꙈꙊꙌꙎꙐꙒꙔꙖꙘꙚꙜꙞꙠꙢꙤꙦꙨꙪꙬꚀꚂꚄꚆꚈꚊꚌꚎꚐꚒꚔꚖꚘꚚꜢꜤꜦꜨꜪꜬꜮꜲꜴꜶꜸꜺꜼꜾꝀꝂꝄꝆꝈꝊꝌꝎꝐꝒꝔꝖꝘꝚꝜꝞꝠꝢꝤꝦꝨꝪꝬꝮꝹꝻꝽꝾꞀꞂꞄꞆꞋꞍꞐꞒꞖꞘꞚꞜꞞꞠꞢꞤꞦꞨꞪ-\uA7AEꞰ-\uA7B4\uA7B6Ａ-Ｚ',
                            astral: '\uD801[\uDC00-\uDC27\uDCB0-\uDCD3]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]|\uD83C[\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]'
                        },
                        {
                            name: 'White_Space',
                            bmp: '\t-\r \x85\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000'
                        }
                    ];
                    unicodeData.push({
                        name: 'Assigned',
                        inverseOf: 'Cn'
                    });
                    XRegExp.addUnicodeData(unicodeData);
                };
            },
            {}
        ],
        7: [
            function (require, module, exports) {
                module.exports = function (XRegExp) {
                    'use strict';
                    if (!XRegExp.addUnicodeData) {
                        throw new ReferenceError('Unicode Base must be loaded before Unicode Scripts');
                    }
                    XRegExp.addUnicodeData([
                        {
                            name: 'Adlam',
                            astral: '\uD83A[\uDD00-\uDD4A\uDD50-\uDD59\uDD5E\uDD5F]'
                        },
                        {
                            name: 'Ahom',
                            astral: '\uD805[\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF3F]'
                        },
                        {
                            name: 'Anatolian_Hieroglyphs',
                            astral: '\uD811[\uDC00-\uDE46]'
                        },
                        {
                            name: 'Arabic',
                            bmp: '\u0600-\u0604\u0606-\u060B\u060D-ؚ\u061Eؠ-ؿف-يٖ-ٯٱ-ۜ\u06DE-ۿݐ-ݿࢠ-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-ࣿﭐ-\uFBC1ﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-\uFDFDﹰ-ﹴﹶ-ﻼ',
                            astral: '\uD803[\uDE60-\uDE7E]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB\uDEF0\uDEF1]'
                        },
                        {
                            name: 'Armenian',
                            bmp: 'Ա-Ֆՙ-\u055Fա-և\u058A\u058D-\u058Fﬓ-ﬗ'
                        },
                        {
                            name: 'Avestan',
                            astral: '\uD802[\uDF00-\uDF35\uDF39-\uDF3F]'
                        },
                        {
                            name: 'Balinese',
                            bmp: 'ᬀ-ᭋ᭐-\u1B7C'
                        },
                        {
                            name: 'Bamum',
                            bmp: 'ꚠ-\uA6F7',
                            astral: '\uD81A[\uDC00-\uDE38]'
                        },
                        {
                            name: 'Bassa_Vah',
                            astral: '\uD81A[\uDED0-\uDEED\uDEF0-\uDEF5]'
                        },
                        {
                            name: 'Batak',
                            bmp: 'ᯀ-᯳\u1BFC-\u1BFF'
                        },
                        {
                            name: 'Bengali',
                            bmp: 'ঀ-ঃঅ-ঌএঐও-নপ-রলশ-হ়-ৄেৈো-ৎৗড়ঢ়য়-ৣ০-\u09FB'
                        },
                        {
                            name: 'Bhaiksuki',
                            astral: '\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC45\uDC50-\uDC6C]'
                        },
                        {
                            name: 'Bopomofo',
                            bmp: '\u02EA\u02EBㄅ-ㄭㆠ-ㆺ'
                        },
                        {
                            name: 'Brahmi',
                            astral: '\uD804[\uDC00-\uDC4D\uDC52-\uDC6F\uDC7F]'
                        },
                        {
                            name: 'Braille',
                            bmp: '\u2800-\u28FF'
                        },
                        {
                            name: 'Buginese',
                            bmp: 'ᨀ-ᨛ\u1A1E\u1A1F'
                        },
                        {
                            name: 'Buhid',
                            bmp: 'ᝀ-ᝓ'
                        },
                        {
                            name: 'Canadian_Aboriginal',
                            bmp: '\u1400-ᙿᢰ-ᣵ'
                        },
                        {
                            name: 'Carian',
                            astral: '\uD800[\uDEA0-\uDED0]'
                        },
                        {
                            name: 'Caucasian_Albanian',
                            astral: '\uD801[\uDD30-\uDD63\uDD6F]'
                        },
                        {
                            name: 'Chakma',
                            astral: '\uD804[\uDD00-\uDD34\uDD36-\uDD43]'
                        },
                        {
                            name: 'Cham',
                            bmp: 'ꨀ-ꨶꩀ-ꩍ꩐-꩙\uAA5C-\uAA5F'
                        },
                        {
                            name: 'Cherokee',
                            bmp: 'Ꭰ-\u13F5\u13F8-\u13FD\uAB70-\uABBF'
                        },
                        {
                            name: 'Common',
                            bmp: '\0-@\\x5B-`\\x7B-\xA9\xAB-\xB9\xBB-\xBF\xD7\xF7ʹ-\u02DF\u02E5-\u02E9ˬ-\u02FFʹ\u037E\u0385\u0387\u0589\u0605\u060C\u061B\u061C\u061Fـ\u06DD\u08E2\u0964\u0965\u0E3F\u0FD5-\u0FD8\u10FB\u16EB-\u16ED\u1735\u1736\u1802\u1803\u1805\u1CD3᳡ᳩ-ᳬᳮ-ᳳᳵᳶ\u2000-\u200B\u200E-\u2064\u2066-\u2070\u2074-\u207E\u2080-\u208E\u20A0-\u20BE\u2100-\u2125\u2127-\u2129ℬ-ℱℳ-\u214D\u214F-\u215F\u2189-\u218B\u2190-\u23FE\u2400-\u2426\u2440-\u244A\u2460-\u27FF\u2900-\u2B73\u2B76-\u2B95\u2B98-\u2BB9\u2BBD-\u2BC8\u2BCA-\u2BD1\u2BEC-\u2BEF\u2E00-\u2E44\u2FF0-\u2FFB\u3000-\u3004〆\u3008-\u3020\u3030-\u3037〼-\u303F\u309B\u309C\u30A0\u30FBー\u3190-\u319F\u31C0-\u31E3\u3220-\u325F\u327F-\u32CF\u3358-\u33FF\u4DC0-\u4DFF\uA700-\uA721ꞈ-\uA78A\uA830-\uA839\uA92Eꧏ\uAB5B\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE66\uFE68-\uFE6B\uFEFF\uFF01-\uFF20\uFF3B-\uFF40\uFF5B-\uFF65ｰﾞﾟ\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFF9-\uFFFD',
                            astral: '\uD800[\uDD00-\uDD02\uDD07-\uDD33\uDD37-\uDD3F\uDD90-\uDD9B\uDDD0-\uDDFC\uDEE1-\uDEFB]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD66\uDD6A-\uDD7A\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDF00-\uDF56\uDF60-\uDF71]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDFCB\uDFCE-\uDFFF]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD00-\uDD0C\uDD10-\uDD2E\uDD30-\uDD6B\uDD70-\uDDAC\uDDE6-\uDDFF\uDE01\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED2\uDEE0-\uDEEC\uDEF0-\uDEF6\uDF00-\uDF73\uDF80-\uDFD4]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDD10-\uDD1E\uDD20-\uDD27\uDD30\uDD33-\uDD3E\uDD40-\uDD4B\uDD50-\uDD5E\uDD80-\uDD91\uDDC0]|\uDB40[\uDC01\uDC20-\uDC7F]'
                        },
                        {
                            name: 'Coptic',
                            bmp: 'Ϣ-ϯⲀ-ⳳ\u2CF9-\u2CFF'
                        },
                        {
                            name: 'Cuneiform',
                            astral: '\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC70-\uDC74\uDC80-\uDD43]'
                        },
                        {
                            name: 'Cypriot',
                            astral: '\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F]'
                        },
                        {
                            name: 'Cyrillic',
                            bmp: 'Ѐ-҄҇-ԯ\u1C80-\u1C88ᴫᵸⷠ-ⷿꙀ-ꚟ\uFE2E\uFE2F'
                        },
                        {
                            name: 'Deseret',
                            astral: '\uD801[\uDC00-\uDC4F]'
                        },
                        {
                            name: 'Devanagari',
                            bmp: 'ऀ-ॐ॓-ॣ०-ॿ꣠-\uA8FD'
                        },
                        {
                            name: 'Duployan',
                            astral: '\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9C-\uDC9F]'
                        },
                        {
                            name: 'Egyptian_Hieroglyphs',
                            astral: '\uD80C[\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]'
                        },
                        {
                            name: 'Elbasan',
                            astral: '\uD801[\uDD00-\uDD27]'
                        },
                        {
                            name: 'Ethiopic',
                            bmp: 'ሀ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚ፝-\u137Cᎀ-\u1399ⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮ'
                        },
                        {
                            name: 'Georgian',
                            bmp: 'Ⴀ-ჅჇჍა-ჺჼ-ჿⴀ-ⴥⴧⴭ'
                        },
                        {
                            name: 'Glagolitic',
                            bmp: 'Ⰰ-Ⱞⰰ-ⱞ',
                            astral: '\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]'
                        },
                        {
                            name: 'Gothic',
                            astral: '\uD800[\uDF30-\uDF4A]'
                        },
                        {
                            name: 'Grantha',
                            astral: '\uD804[\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]'
                        },
                        {
                            name: 'Greek',
                            bmp: 'Ͱ-ͳ\u0375-ͷͺ-ͽͿ\u0384ΆΈ-ΊΌΎ-ΡΣ-ϡϰ-Ͽᴦ-ᴪᵝ-ᵡᵦ-ᵪᶿἀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ῄῆ-ΐῖ-Ί\u1FDD-\u1FEFῲ-ῴῶ-\u1FFEΩꭥ',
                            astral: '\uD800[\uDD40-\uDD8E\uDDA0]|\uD834[\uDE00-\uDE45]'
                        },
                        {
                            name: 'Gujarati',
                            bmp: 'ઁ-ઃઅ-ઍએ-ઑઓ-નપ-રલળવ-હ઼-ૅે-ૉો-્ૐૠ-ૣ૦-\u0AF1\u0AF9'
                        },
                        {
                            name: 'Gurmukhi',
                            bmp: 'ਁ-ਃਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹ਼ਾ-ੂੇੈੋ-੍ੑਖ਼-ੜਫ਼੦-ੵ'
                        },
                        {
                            name: 'Han',
                            bmp: '\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5々〇〡-〩〸-〻㐀-䶵一-\u9FD5豈-舘並-龎',
                            astral: '[\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]'
                        },
                        {
                            name: 'Hangul',
                            bmp: 'ᄀ-ᇿ〮〯ㄱ-ㆎ\u3200-\u321E\u3260-\u327Eꥠ-ꥼ가-힣ힰ-ퟆퟋ-ퟻﾠ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ'
                        },
                        {
                            name: 'Hanunoo',
                            bmp: 'ᜠ-᜴'
                        },
                        {
                            name: 'Hatran',
                            astral: '\uD802[\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDCFF]'
                        },
                        {
                            name: 'Hebrew',
                            bmp: '֑-ׇא-תװ-\u05F4יִ-זּטּ-לּמּנּסּףּפּצּ-ﭏ'
                        },
                        {
                            name: 'Hiragana',
                            bmp: 'ぁ-ゖゝ-ゟ',
                            astral: '\uD82C\uDC01|\uD83C\uDE00'
                        },
                        {
                            name: 'Imperial_Aramaic',
                            astral: '\uD802[\uDC40-\uDC55\uDC57-\uDC5F]'
                        },
                        {
                            name: 'Inherited',
                            bmp: '̀-ًͯ҅҆-ٰٕ॒॑᪰-\u1ABE᳐-᳔᳒-᳢᳠-᳨᳭᳴᳸᳹᷀-᷵\u1DFB-᷿‌‍⃐-〪⃰-゙゚〭︀-️︠-︭',
                            astral: '\uD800[\uDDFD\uDEE0]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD]|\uDB40[\uDD00-\uDDEF]'
                        },
                        {
                            name: 'Inscriptional_Pahlavi',
                            astral: '\uD802[\uDF60-\uDF72\uDF78-\uDF7F]'
                        },
                        {
                            name: 'Inscriptional_Parthian',
                            astral: '\uD802[\uDF40-\uDF55\uDF58-\uDF5F]'
                        },
                        {
                            name: 'Javanese',
                            bmp: 'ꦀ-\uA9CD꧐-꧙\uA9DE\uA9DF'
                        },
                        {
                            name: 'Kaithi',
                            astral: '\uD804[\uDC80-\uDCC1]'
                        },
                        {
                            name: 'Kannada',
                            bmp: '\u0C80-ಃಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹ಼-ೄೆ-ೈೊ-್ೕೖೞೠ-ೣ೦-೯ೱೲ'
                        },
                        {
                            name: 'Katakana',
                            bmp: 'ァ-ヺヽ-ヿㇰ-ㇿ\u32D0-\u32FE\u3300-\u3357ｦ-ｯｱ-ﾝ',
                            astral: '\uD82C\uDC00'
                        },
                        {
                            name: 'Kayah_Li',
                            bmp: '꤀-꤭\uA92F'
                        },
                        {
                            name: 'Kharoshthi',
                            astral: '\uD802[\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F-\uDE47\uDE50-\uDE58]'
                        },
                        {
                            name: 'Khmer',
                            bmp: 'ក-៝០-៩\u17F0-\u17F9\u19E0-\u19FF'
                        },
                        {
                            name: 'Khojki',
                            astral: '\uD804[\uDE00-\uDE11\uDE13-\uDE3E]'
                        },
                        {
                            name: 'Khudawadi',
                            astral: '\uD804[\uDEB0-\uDEEA\uDEF0-\uDEF9]'
                        },
                        {
                            name: 'Lao',
                            bmp: 'ກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ູົ-ຽເ-ໄໆ່-ໍ໐-໙ໜ-ໟ'
                        },
                        {
                            name: 'Latin',
                            bmp: 'A-Za-zªºÀ-ÖØ-öø-ʸˠ-ˤᴀ-ᴥᴬ-ᵜᵢ-ᵥᵫ-ᵷᵹ-ᶾḀ-ỿⁱⁿₐ-ₜKÅℲⅎⅠ-ↈⱠ-ⱿꜢ-ꞇꞋ-\uA7AEꞰ-\uA7B7ꟷ-ꟿꬰ-ꭚꭜ-ꭤﬀ-ﬆＡ-Ｚａ-ｚ'
                        },
                        {
                            name: 'Lepcha',
                            bmp: 'ᰀ-᰷\u1C3B-᱉ᱍ-ᱏ'
                        },
                        {
                            name: 'Limbu',
                            bmp: 'ᤀ-ᤞᤠ-ᤫᤰ-᤻\u1940\u1944-᥏'
                        },
                        {
                            name: 'Linear_A',
                            astral: '\uD801[\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]'
                        },
                        {
                            name: 'Linear_B',
                            astral: '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA]'
                        },
                        {
                            name: 'Lisu',
                            bmp: 'ꓐ-\uA4FF'
                        },
                        {
                            name: 'Lycian',
                            astral: '\uD800[\uDE80-\uDE9C]'
                        },
                        {
                            name: 'Lydian',
                            astral: '\uD802[\uDD20-\uDD39\uDD3F]'
                        },
                        {
                            name: 'Mahajani',
                            astral: '\uD804[\uDD50-\uDD76]'
                        },
                        {
                            name: 'Malayalam',
                            bmp: 'ഁ-ഃഅ-ഌഎ-ഐഒ-ഺഽ-ൄെ-ൈൊ-\u0D4F\u0D54-ൣ൦-ൿ'
                        },
                        {
                            name: 'Mandaic',
                            bmp: 'ࡀ-࡛\u085E'
                        },
                        {
                            name: 'Manichaean',
                            astral: '\uD802[\uDEC0-\uDEE6\uDEEB-\uDEF6]'
                        },
                        {
                            name: 'Marchen',
                            astral: '\uD807[\uDC70-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]'
                        },
                        {
                            name: 'Meetei_Mayek',
                            bmp: 'ꫠ-꫶ꯀ-꯭꯰-꯹'
                        },
                        {
                            name: 'Mende_Kikakui',
                            astral: '\uD83A[\uDC00-\uDCC4\uDCC7-\uDCD6]'
                        },
                        {
                            name: 'Meroitic_Cursive',
                            astral: '\uD802[\uDDA0-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDDFF]'
                        },
                        {
                            name: 'Meroitic_Hieroglyphs',
                            astral: '\uD802[\uDD80-\uDD9F]'
                        },
                        {
                            name: 'Miao',
                            astral: '\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]'
                        },
                        {
                            name: 'Modi',
                            astral: '\uD805[\uDE00-\uDE44\uDE50-\uDE59]'
                        },
                        {
                            name: 'Mongolian',
                            bmp: '\u1800\u1801\u1804\u1806-\u180E᠐-᠙ᠠ-ᡷᢀ-ᢪ',
                            astral: '\uD805[\uDE60-\uDE6C]'
                        },
                        {
                            name: 'Mro',
                            astral: '\uD81A[\uDE40-\uDE5E\uDE60-\uDE69\uDE6E\uDE6F]'
                        },
                        {
                            name: 'Multani',
                            astral: '\uD804[\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA9]'
                        },
                        {
                            name: 'Myanmar',
                            bmp: 'က-\u109Fꧠ-ꧾꩠ-ꩿ'
                        },
                        {
                            name: 'Nabataean',
                            astral: '\uD802[\uDC80-\uDC9E\uDCA7-\uDCAF]'
                        },
                        {
                            name: 'New_Tai_Lue',
                            bmp: 'ᦀ-ᦫᦰ-ᧉ᧐-\u19DA\u19DE\u19DF'
                        },
                        {
                            name: 'Newa',
                            astral: '\uD805[\uDC00-\uDC59\uDC5B\uDC5D]'
                        },
                        {
                            name: 'Nko',
                            bmp: '߀-ߺ'
                        },
                        {
                            name: 'Ogham',
                            bmp: '\u1680-\u169C'
                        },
                        {
                            name: 'Ol_Chiki',
                            bmp: '᱐-\u1C7F'
                        },
                        {
                            name: 'Old_Hungarian',
                            astral: '\uD803[\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDCFF]'
                        },
                        {
                            name: 'Old_Italic',
                            astral: '\uD800[\uDF00-\uDF23]'
                        },
                        {
                            name: 'Old_North_Arabian',
                            astral: '\uD802[\uDE80-\uDE9F]'
                        },
                        {
                            name: 'Old_Permic',
                            astral: '\uD800[\uDF50-\uDF7A]'
                        },
                        {
                            name: 'Old_Persian',
                            astral: '\uD800[\uDFA0-\uDFC3\uDFC8-\uDFD5]'
                        },
                        {
                            name: 'Old_South_Arabian',
                            astral: '\uD802[\uDE60-\uDE7F]'
                        },
                        {
                            name: 'Old_Turkic',
                            astral: '\uD803[\uDC00-\uDC48]'
                        },
                        {
                            name: 'Oriya',
                            bmp: 'ଁ-ଃଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହ଼-ୄେୈୋ-୍ୖୗଡ଼ଢ଼ୟ-ୣ୦-\u0B77'
                        },
                        {
                            name: 'Osage',
                            astral: '\uD801[\uDCB0-\uDCD3\uDCD8-\uDCFB]'
                        },
                        {
                            name: 'Osmanya',
                            astral: '\uD801[\uDC80-\uDC9D\uDCA0-\uDCA9]'
                        },
                        {
                            name: 'Pahawh_Hmong',
                            astral: '\uD81A[\uDF00-\uDF45\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]'
                        },
                        {
                            name: 'Palmyrene',
                            astral: '\uD802[\uDC60-\uDC7F]'
                        },
                        {
                            name: 'Pau_Cin_Hau',
                            astral: '\uD806[\uDEC0-\uDEF8]'
                        },
                        {
                            name: 'Phags_Pa',
                            bmp: 'ꡀ-\uA877'
                        },
                        {
                            name: 'Phoenician',
                            astral: '\uD802[\uDD00-\uDD1B\uDD1F]'
                        },
                        {
                            name: 'Psalter_Pahlavi',
                            astral: '\uD802[\uDF80-\uDF91\uDF99-\uDF9C\uDFA9-\uDFAF]'
                        },
                        {
                            name: 'Rejang',
                            bmp: 'ꤰ-꥓\uA95F'
                        },
                        {
                            name: 'Runic',
                            bmp: 'ᚠ-ᛪᛮ-ᛸ'
                        },
                        {
                            name: 'Samaritan',
                            bmp: 'ࠀ-࠭\u0830-\u083E'
                        },
                        {
                            name: 'Saurashtra',
                            bmp: 'ꢀ-\uA8C5\uA8CE-꣙'
                        },
                        {
                            name: 'Sharada',
                            astral: '\uD804[\uDD80-\uDDCD\uDDD0-\uDDDF]'
                        },
                        {
                            name: 'Shavian',
                            astral: '\uD801[\uDC50-\uDC7F]'
                        },
                        {
                            name: 'Siddham',
                            astral: '\uD805[\uDD80-\uDDB5\uDDB8-\uDDDD]'
                        },
                        {
                            name: 'SignWriting',
                            astral: '\uD836[\uDC00-\uDE8B\uDE9B-\uDE9F\uDEA1-\uDEAF]'
                        },
                        {
                            name: 'Sinhala',
                            bmp: 'ංඃඅ-ඖක-නඳ-රලව-ෆ්ා-ුූෘ-ෟ෦-෯ෲ-\u0DF4',
                            astral: '\uD804[\uDDE1-\uDDF4]'
                        },
                        {
                            name: 'Sora_Sompeng',
                            astral: '\uD804[\uDCD0-\uDCE8\uDCF0-\uDCF9]'
                        },
                        {
                            name: 'Sundanese',
                            bmp: 'ᮀ-ᮿ\u1CC0-\u1CC7'
                        },
                        {
                            name: 'Syloti_Nagri',
                            bmp: 'ꠀ-\uA82B'
                        },
                        {
                            name: 'Syriac',
                            bmp: '\u0700-\u070D\u070F-݊ݍ-ݏ'
                        },
                        {
                            name: 'Tagalog',
                            bmp: 'ᜀ-ᜌᜎ-᜔'
                        },
                        {
                            name: 'Tagbanwa',
                            bmp: 'ᝠ-ᝬᝮ-ᝰᝲᝳ'
                        },
                        {
                            name: 'Tai_Le',
                            bmp: 'ᥐ-ᥭᥰ-ᥴ'
                        },
                        {
                            name: 'Tai_Tham',
                            bmp: 'ᨠ-ᩞ᩠-᩿᩼-᪉᪐-᪙\u1AA0-\u1AAD'
                        },
                        {
                            name: 'Tai_Viet',
                            bmp: 'ꪀ-ꫂꫛ-\uAADF'
                        },
                        {
                            name: 'Takri',
                            astral: '\uD805[\uDE80-\uDEB7\uDEC0-\uDEC9]'
                        },
                        {
                            name: 'Tamil',
                            bmp: 'ஂஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹா-ூெ-ைொ-்ௐௗ௦-\u0BFA'
                        },
                        {
                            name: 'Tangut',
                            astral: '\uD81B\uDFE0|[\uD81C-\uD820][\uDC00-\uDFFF]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]'
                        },
                        {
                            name: 'Telugu',
                            bmp: 'ఀ-ఃఅ-ఌఎ-ఐఒ-నప-హఽ-ౄె-ైొ-్ౕౖౘ-\u0C5Aౠ-ౣ౦-౯\u0C78-\u0C7F'
                        },
                        {
                            name: 'Thaana',
                            bmp: 'ހ-ޱ'
                        },
                        {
                            name: 'Thai',
                            bmp: 'ก-ฺเ-\u0E5B'
                        },
                        {
                            name: 'Tibetan',
                            bmp: 'ༀ-ཇཉ-ཬཱ-ྗྙ-ྼ\u0FBE-\u0FCC\u0FCE-\u0FD4\u0FD9\u0FDA'
                        },
                        {
                            name: 'Tifinagh',
                            bmp: 'ⴰ-ⵧⵯ\u2D70⵿'
                        },
                        {
                            name: 'Tirhuta',
                            astral: '\uD805[\uDC80-\uDCC7\uDCD0-\uDCD9]'
                        },
                        {
                            name: 'Ugaritic',
                            astral: '\uD800[\uDF80-\uDF9D\uDF9F]'
                        },
                        {
                            name: 'Vai',
                            bmp: 'ꔀ-ꘫ'
                        },
                        {
                            name: 'Warang_Citi',
                            astral: '\uD806[\uDCA0-\uDCF2\uDCFF]'
                        },
                        {
                            name: 'Yi',
                            bmp: 'ꀀ-ꒌ\uA490-\uA4C6'
                        }
                    ]);
                };
            },
            {}
        ],
        8: [
            function (require, module, exports) {
                var XRegExp = require('./xregexp');
                require('./addons/build')(XRegExp);
                require('./addons/matchrecursive')(XRegExp);
                require('./addons/unicode-base')(XRegExp);
                require('./addons/unicode-blocks')(XRegExp);
                require('./addons/unicode-categories')(XRegExp);
                require('./addons/unicode-properties')(XRegExp);
                require('./addons/unicode-scripts')(XRegExp);
                module.exports = XRegExp;
            },
            {
                './addons/build': 1,
                './addons/matchrecursive': 2,
                './addons/unicode-base': 3,
                './addons/unicode-blocks': 4,
                './addons/unicode-categories': 5,
                './addons/unicode-properties': 6,
                './addons/unicode-scripts': 7,
                './xregexp': 9
            }
        ],
        9: [
            function (require, module, exports) {
                'use strict';
                var REGEX_DATA = 'xregexp';
                var features = {
                    astral: false,
                    natives: false
                };
                var nativ = {
                    exec: RegExp.prototype.exec,
                    test: RegExp.prototype.test,
                    match: String.prototype.match,
                    replace: String.prototype.replace,
                    split: String.prototype.split
                };
                var fixed = {};
                var regexCache = {};
                var patternCache = {};
                var tokens = [];
                var defaultScope = 'default';
                var classScope = 'class';
                var nativeTokens = {
                    'default': /\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\d*|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|\(\?(?:[:=!]|<[=!])|[?*+]\?|{\d+(?:,\d*)?}\??|[\s\S]/,
                    'class': /\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|[\s\S]/
                };
                var replacementToken = /\$(?:{([\w$]+)}|(\d\d?|[\s\S]))/g;
                var correctExecNpcg = nativ.exec.call(/()??/, '')[1] === undefined;
                var hasFlagsProp = /x/.flags !== undefined;
                var toString = {}.toString;
                function hasNativeFlag(flag) {
                    var isSupported = true;
                    try {
                        new RegExp('', flag);
                    } catch (exception) {
                        isSupported = false;
                    }
                    return isSupported;
                }
                var hasNativeU = hasNativeFlag('u');
                var hasNativeY = hasNativeFlag('y');
                var registeredFlags = {
                    g: true,
                    i: true,
                    m: true,
                    u: hasNativeU,
                    y: hasNativeY
                };
                function augment(regex, captureNames, xSource, xFlags, isInternalOnly) {
                    var p;
                    regex[REGEX_DATA] = { captureNames: captureNames };
                    if (isInternalOnly) {
                        return regex;
                    }
                    if (regex.__proto__) {
                        regex.__proto__ = XRegExp.prototype;
                    } else {
                        for (p in XRegExp.prototype) {
                            regex[p] = XRegExp.prototype[p];
                        }
                    }
                    regex[REGEX_DATA].source = xSource;
                    regex[REGEX_DATA].flags = xFlags ? xFlags.split('').sort().join('') : xFlags;
                    return regex;
                }
                function clipDuplicates(str) {
                    return nativ.replace.call(str, /([\s\S])(?=[\s\S]*\1)/g, '');
                }
                function copyRegex(regex, options) {
                    if (!XRegExp.isRegExp(regex)) {
                        throw new TypeError('Type RegExp expected');
                    }
                    var xData = regex[REGEX_DATA] || {};
                    var flags = getNativeFlags(regex);
                    var flagsToAdd = '';
                    var flagsToRemove = '';
                    var xregexpSource = null;
                    var xregexpFlags = null;
                    options = options || {};
                    if (options.removeG) {
                        flagsToRemove += 'g';
                    }
                    if (options.removeY) {
                        flagsToRemove += 'y';
                    }
                    if (flagsToRemove) {
                        flags = nativ.replace.call(flags, new RegExp('[' + flagsToRemove + ']+', 'g'), '');
                    }
                    if (options.addG) {
                        flagsToAdd += 'g';
                    }
                    if (options.addY) {
                        flagsToAdd += 'y';
                    }
                    if (flagsToAdd) {
                        flags = clipDuplicates(flags + flagsToAdd);
                    }
                    if (!options.isInternalOnly) {
                        if (xData.source !== undefined) {
                            xregexpSource = xData.source;
                        }
                        if (xData.flags != null) {
                            xregexpFlags = flagsToAdd ? clipDuplicates(xData.flags + flagsToAdd) : xData.flags;
                        }
                    }
                    regex = augment(new RegExp(options.source || regex.source, flags), hasNamedCapture(regex) ? xData.captureNames.slice(0) : null, xregexpSource, xregexpFlags, options.isInternalOnly);
                    return regex;
                }
                function dec(hex) {
                    return parseInt(hex, 16);
                }
                function getContextualTokenSeparator(match, scope, flags) {
                    if (match.input.charAt(match.index - 1) === '(' || match.input.charAt(match.index + match[0].length) === ')' || isPatternNext(match.input, match.index + match[0].length, flags, '[?*+]|{\\d+(?:,\\d*)?}')) {
                        return '';
                    }
                    return '(?:)';
                }
                function getNativeFlags(regex) {
                    return hasFlagsProp ? regex.flags : nativ.exec.call(/\/([a-z]*)$/i, RegExp.prototype.toString.call(regex))[1];
                }
                function hasNamedCapture(regex) {
                    return !!(regex[REGEX_DATA] && regex[REGEX_DATA].captureNames);
                }
                function hex(dec) {
                    return parseInt(dec, 10).toString(16);
                }
                function indexOf(array, value) {
                    var len = array.length;
                    var i;
                    for (i = 0; i < len; ++i) {
                        if (array[i] === value) {
                            return i;
                        }
                    }
                    return -1;
                }
                function isPatternNext(pattern, pos, flags, needlePattern) {
                    var inlineCommentPattern = '\\(\\?#[^)]*\\)';
                    var lineCommentPattern = '#[^#\\n]*';
                    var patternsToIgnore = flags.indexOf('x') > -1 ? [
                        '\\s',
                        lineCommentPattern,
                        inlineCommentPattern
                    ] : [inlineCommentPattern];
                    return nativ.test.call(new RegExp('^(?:' + patternsToIgnore.join('|') + ')*(?:' + needlePattern + ')'), pattern.slice(pos));
                }
                function isType(value, type) {
                    return toString.call(value) === '[object ' + type + ']';
                }
                function pad4(str) {
                    while (str.length < 4) {
                        str = '0' + str;
                    }
                    return str;
                }
                function prepareFlags(pattern, flags) {
                    var i;
                    if (clipDuplicates(flags) !== flags) {
                        throw new SyntaxError('Invalid duplicate regex flag ' + flags);
                    }
                    pattern = nativ.replace.call(pattern, /^\(\?([\w$]+)\)/, function ($0, $1) {
                        if (nativ.test.call(/[gy]/, $1)) {
                            throw new SyntaxError('Cannot use flag g or y in mode modifier ' + $0);
                        }
                        flags = clipDuplicates(flags + $1);
                        return '';
                    });
                    for (i = 0; i < flags.length; ++i) {
                        if (!registeredFlags[flags.charAt(i)]) {
                            throw new SyntaxError('Unknown regex flag ' + flags.charAt(i));
                        }
                    }
                    return {
                        pattern: pattern,
                        flags: flags
                    };
                }
                function prepareOptions(value) {
                    var options = {};
                    if (isType(value, 'String')) {
                        XRegExp.forEach(value, /[^\s,]+/, function (match) {
                            options[match] = true;
                        });
                        return options;
                    }
                    return value;
                }
                function registerFlag(flag) {
                    if (!/^[\w$]$/.test(flag)) {
                        throw new Error('Flag must be a single character A-Za-z0-9_$');
                    }
                    registeredFlags[flag] = true;
                }
                function runTokens(pattern, flags, pos, scope, context) {
                    var i = tokens.length;
                    var leadChar = pattern.charAt(pos);
                    var result = null;
                    var match;
                    var t;
                    while (i--) {
                        t = tokens[i];
                        if (t.leadChar && t.leadChar !== leadChar || t.scope !== scope && t.scope !== 'all' || t.flag && flags.indexOf(t.flag) === -1) {
                            continue;
                        }
                        match = XRegExp.exec(pattern, t.regex, pos, 'sticky');
                        if (match) {
                            result = {
                                matchLength: match[0].length,
                                output: t.handler.call(context, match, scope, flags),
                                reparse: t.reparse
                            };
                            break;
                        }
                    }
                    return result;
                }
                function setAstral(on) {
                    features.astral = on;
                }
                function setNatives(on) {
                    RegExp.prototype.exec = (on ? fixed : nativ).exec;
                    RegExp.prototype.test = (on ? fixed : nativ).test;
                    String.prototype.match = (on ? fixed : nativ).match;
                    String.prototype.replace = (on ? fixed : nativ).replace;
                    String.prototype.split = (on ? fixed : nativ).split;
                    features.natives = on;
                }
                function toObject(value) {
                    if (value == null) {
                        throw new TypeError('Cannot convert null or undefined to object');
                    }
                    return value;
                }
                function XRegExp(pattern, flags) {
                    if (XRegExp.isRegExp(pattern)) {
                        if (flags !== undefined) {
                            throw new TypeError('Cannot supply flags when copying a RegExp');
                        }
                        return copyRegex(pattern);
                    }
                    pattern = pattern === undefined ? '' : String(pattern);
                    flags = flags === undefined ? '' : String(flags);
                    if (XRegExp.isInstalled('astral') && flags.indexOf('A') === -1) {
                        flags += 'A';
                    }
                    if (!patternCache[pattern]) {
                        patternCache[pattern] = {};
                    }
                    if (!patternCache[pattern][flags]) {
                        var context = {
                            hasNamedCapture: false,
                            captureNames: []
                        };
                        var scope = defaultScope;
                        var output = '';
                        var pos = 0;
                        var result;
                        var applied = prepareFlags(pattern, flags);
                        var appliedPattern = applied.pattern;
                        var appliedFlags = applied.flags;
                        while (pos < appliedPattern.length) {
                            do {
                                result = runTokens(appliedPattern, appliedFlags, pos, scope, context);
                                if (result && result.reparse) {
                                    appliedPattern = appliedPattern.slice(0, pos) + result.output + appliedPattern.slice(pos + result.matchLength);
                                }
                            } while (result && result.reparse);
                            if (result) {
                                output += result.output;
                                pos += result.matchLength || 1;
                            } else {
                                var token = XRegExp.exec(appliedPattern, nativeTokens[scope], pos, 'sticky')[0];
                                output += token;
                                pos += token.length;
                                if (token === '[' && scope === defaultScope) {
                                    scope = classScope;
                                } else if (token === ']' && scope === classScope) {
                                    scope = defaultScope;
                                }
                            }
                        }
                        patternCache[pattern][flags] = {
                            pattern: nativ.replace.call(output, /(?:\(\?:\))+/g, '(?:)'),
                            flags: nativ.replace.call(appliedFlags, /[^gimuy]+/g, ''),
                            captures: context.hasNamedCapture ? context.captureNames : null
                        };
                    }
                    var generated = patternCache[pattern][flags];
                    return augment(new RegExp(generated.pattern, generated.flags), generated.captures, pattern, flags);
                }
                XRegExp.prototype = new RegExp();
                XRegExp.version = '3.2.0';
                XRegExp._clipDuplicates = clipDuplicates;
                XRegExp._hasNativeFlag = hasNativeFlag;
                XRegExp._dec = dec;
                XRegExp._hex = hex;
                XRegExp._pad4 = pad4;
                XRegExp.addToken = function (regex, handler, options) {
                    options = options || {};
                    var optionalFlags = options.optionalFlags;
                    var i;
                    if (options.flag) {
                        registerFlag(options.flag);
                    }
                    if (optionalFlags) {
                        optionalFlags = nativ.split.call(optionalFlags, '');
                        for (i = 0; i < optionalFlags.length; ++i) {
                            registerFlag(optionalFlags[i]);
                        }
                    }
                    tokens.push({
                        regex: copyRegex(regex, {
                            addG: true,
                            addY: hasNativeY,
                            isInternalOnly: true
                        }),
                        handler: handler,
                        scope: options.scope || defaultScope,
                        flag: options.flag,
                        reparse: options.reparse,
                        leadChar: options.leadChar
                    });
                    XRegExp.cache.flush('patterns');
                };
                XRegExp.cache = function (pattern, flags) {
                    if (!regexCache[pattern]) {
                        regexCache[pattern] = {};
                    }
                    return regexCache[pattern][flags] || (regexCache[pattern][flags] = XRegExp(pattern, flags));
                };
                XRegExp.cache.flush = function (cacheName) {
                    if (cacheName === 'patterns') {
                        patternCache = {};
                    } else {
                        regexCache = {};
                    }
                };
                XRegExp.escape = function (str) {
                    return nativ.replace.call(toObject(str), /[-\[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
                };
                XRegExp.exec = function (str, regex, pos, sticky) {
                    var cacheKey = 'g';
                    var addY = false;
                    var fakeY = false;
                    var match;
                    var r2;
                    addY = hasNativeY && !!(sticky || regex.sticky && sticky !== false);
                    if (addY) {
                        cacheKey += 'y';
                    } else if (sticky) {
                        fakeY = true;
                        cacheKey += 'FakeY';
                    }
                    regex[REGEX_DATA] = regex[REGEX_DATA] || {};
                    r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {
                        addG: true,
                        addY: addY,
                        source: fakeY ? regex.source + '|()' : undefined,
                        removeY: sticky === false,
                        isInternalOnly: true
                    }));
                    pos = pos || 0;
                    r2.lastIndex = pos;
                    match = fixed.exec.call(r2, str);
                    if (fakeY && match && match.pop() === '') {
                        match = null;
                    }
                    if (regex.global) {
                        regex.lastIndex = match ? r2.lastIndex : 0;
                    }
                    return match;
                };
                XRegExp.forEach = function (str, regex, callback) {
                    var pos = 0;
                    var i = -1;
                    var match;
                    while (match = XRegExp.exec(str, regex, pos)) {
                        callback(match, ++i, str, regex);
                        pos = match.index + (match[0].length || 1);
                    }
                };
                XRegExp.globalize = function (regex) {
                    return copyRegex(regex, { addG: true });
                };
                XRegExp.install = function (options) {
                    options = prepareOptions(options);
                    if (!features.astral && options.astral) {
                        setAstral(true);
                    }
                    if (!features.natives && options.natives) {
                        setNatives(true);
                    }
                };
                XRegExp.isInstalled = function (feature) {
                    return !!features[feature];
                };
                XRegExp.isRegExp = function (value) {
                    return toString.call(value) === '[object RegExp]';
                };
                XRegExp.match = function (str, regex, scope) {
                    var global = regex.global && scope !== 'one' || scope === 'all';
                    var cacheKey = (global ? 'g' : '') + (regex.sticky ? 'y' : '') || 'noGY';
                    var result;
                    var r2;
                    regex[REGEX_DATA] = regex[REGEX_DATA] || {};
                    r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {
                        addG: !!global,
                        removeG: scope === 'one',
                        isInternalOnly: true
                    }));
                    result = nativ.match.call(toObject(str), r2);
                    if (regex.global) {
                        regex.lastIndex = scope === 'one' && result ? result.index + result[0].length : 0;
                    }
                    return global ? result || [] : result && result[0];
                };
                XRegExp.matchChain = function (str, chain) {
                    return function recurseChain(values, level) {
                        var item = chain[level].regex ? chain[level] : { regex: chain[level] };
                        var matches = [];
                        function addMatch(match) {
                            if (item.backref) {
                                if (!(match.hasOwnProperty(item.backref) || +item.backref < match.length)) {
                                    throw new ReferenceError('Backreference to undefined group: ' + item.backref);
                                }
                                matches.push(match[item.backref] || '');
                            } else {
                                matches.push(match[0]);
                            }
                        }
                        for (var i = 0; i < values.length; ++i) {
                            XRegExp.forEach(values[i], item.regex, addMatch);
                        }
                        return level === chain.length - 1 || !matches.length ? matches : recurseChain(matches, level + 1);
                    }([str], 0);
                };
                XRegExp.replace = function (str, search, replacement, scope) {
                    var isRegex = XRegExp.isRegExp(search);
                    var global = search.global && scope !== 'one' || scope === 'all';
                    var cacheKey = (global ? 'g' : '') + (search.sticky ? 'y' : '') || 'noGY';
                    var s2 = search;
                    var result;
                    if (isRegex) {
                        search[REGEX_DATA] = search[REGEX_DATA] || {};
                        s2 = search[REGEX_DATA][cacheKey] || (search[REGEX_DATA][cacheKey] = copyRegex(search, {
                            addG: !!global,
                            removeG: scope === 'one',
                            isInternalOnly: true
                        }));
                    } else if (global) {
                        s2 = new RegExp(XRegExp.escape(String(search)), 'g');
                    }
                    result = fixed.replace.call(toObject(str), s2, replacement);
                    if (isRegex && search.global) {
                        search.lastIndex = 0;
                    }
                    return result;
                };
                XRegExp.replaceEach = function (str, replacements) {
                    var i;
                    var r;
                    for (i = 0; i < replacements.length; ++i) {
                        r = replacements[i];
                        str = XRegExp.replace(str, r[0], r[1], r[2]);
                    }
                    return str;
                };
                XRegExp.split = function (str, separator, limit) {
                    return fixed.split.call(toObject(str), separator, limit);
                };
                XRegExp.test = function (str, regex, pos, sticky) {
                    return !!XRegExp.exec(str, regex, pos, sticky);
                };
                XRegExp.uninstall = function (options) {
                    options = prepareOptions(options);
                    if (features.astral && options.astral) {
                        setAstral(false);
                    }
                    if (features.natives && options.natives) {
                        setNatives(false);
                    }
                };
                XRegExp.union = function (patterns, flags, options) {
                    options = options || {};
                    var conjunction = options.conjunction || 'or';
                    var numCaptures = 0;
                    var numPriorCaptures;
                    var captureNames;
                    function rewrite(match, paren, backref) {
                        var name = captureNames[numCaptures - numPriorCaptures];
                        if (paren) {
                            ++numCaptures;
                            if (name) {
                                return '(?<' + name + '>';
                            }
                        } else if (backref) {
                            return '\\' + (+backref + numPriorCaptures);
                        }
                        return match;
                    }
                    if (!(isType(patterns, 'Array') && patterns.length)) {
                        throw new TypeError('Must provide a nonempty array of patterns to merge');
                    }
                    var parts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*\]/g;
                    var output = [];
                    var pattern;
                    for (var i = 0; i < patterns.length; ++i) {
                        pattern = patterns[i];
                        if (XRegExp.isRegExp(pattern)) {
                            numPriorCaptures = numCaptures;
                            captureNames = pattern[REGEX_DATA] && pattern[REGEX_DATA].captureNames || [];
                            output.push(nativ.replace.call(XRegExp(pattern.source).source, parts, rewrite));
                        } else {
                            output.push(XRegExp.escape(pattern));
                        }
                    }
                    var separator = conjunction === 'none' ? '' : '|';
                    return XRegExp(output.join(separator), flags);
                };
                fixed.exec = function (str) {
                    var origLastIndex = this.lastIndex;
                    var match = nativ.exec.apply(this, arguments);
                    var name;
                    var r2;
                    var i;
                    if (match) {
                        if (!correctExecNpcg && match.length > 1 && indexOf(match, '') > -1) {
                            r2 = copyRegex(this, {
                                removeG: true,
                                isInternalOnly: true
                            });
                            nativ.replace.call(String(str).slice(match.index), r2, function () {
                                var len = arguments.length;
                                var i;
                                for (i = 1; i < len - 2; ++i) {
                                    if (arguments[i] === undefined) {
                                        match[i] = undefined;
                                    }
                                }
                            });
                        }
                        if (this[REGEX_DATA] && this[REGEX_DATA].captureNames) {
                            for (i = 1; i < match.length; ++i) {
                                name = this[REGEX_DATA].captureNames[i - 1];
                                if (name) {
                                    match[name] = match[i];
                                }
                            }
                        }
                        if (this.global && !match[0].length && this.lastIndex > match.index) {
                            this.lastIndex = match.index;
                        }
                    }
                    if (!this.global) {
                        this.lastIndex = origLastIndex;
                    }
                    return match;
                };
                fixed.test = function (str) {
                    return !!fixed.exec.call(this, str);
                };
                fixed.match = function (regex) {
                    var result;
                    if (!XRegExp.isRegExp(regex)) {
                        regex = new RegExp(regex);
                    } else if (regex.global) {
                        result = nativ.match.apply(this, arguments);
                        regex.lastIndex = 0;
                        return result;
                    }
                    return fixed.exec.call(regex, toObject(this));
                };
                fixed.replace = function (search, replacement) {
                    var isRegex = XRegExp.isRegExp(search);
                    var origLastIndex;
                    var captureNames;
                    var result;
                    if (isRegex) {
                        if (search[REGEX_DATA]) {
                            captureNames = search[REGEX_DATA].captureNames;
                        }
                        origLastIndex = search.lastIndex;
                    } else {
                        search += '';
                    }
                    if (isType(replacement, 'Function')) {
                        result = nativ.replace.call(String(this), search, function () {
                            var args = arguments;
                            var i;
                            if (captureNames) {
                                args[0] = new String(args[0]);
                                for (i = 0; i < captureNames.length; ++i) {
                                    if (captureNames[i]) {
                                        args[0][captureNames[i]] = args[i + 1];
                                    }
                                }
                            }
                            if (isRegex && search.global) {
                                search.lastIndex = args[args.length - 2] + args[0].length;
                            }
                            return replacement.apply(undefined, args);
                        });
                    } else {
                        result = nativ.replace.call(this == null ? this : String(this), search, function () {
                            var args = arguments;
                            return nativ.replace.call(String(replacement), replacementToken, function ($0, $1, $2) {
                                var n;
                                if ($1) {
                                    n = +$1;
                                    if (n <= args.length - 3) {
                                        return args[n] || '';
                                    }
                                    n = captureNames ? indexOf(captureNames, $1) : -1;
                                    if (n < 0) {
                                        throw new SyntaxError('Backreference to undefined group ' + $0);
                                    }
                                    return args[n + 1] || '';
                                }
                                if ($2 === '$') {
                                    return '$';
                                }
                                if ($2 === '&' || +$2 === 0) {
                                    return args[0];
                                }
                                if ($2 === '`') {
                                    return args[args.length - 1].slice(0, args[args.length - 2]);
                                }
                                if ($2 === '\'') {
                                    return args[args.length - 1].slice(args[args.length - 2] + args[0].length);
                                }
                                $2 = +$2;
                                if (!isNaN($2)) {
                                    if ($2 > args.length - 3) {
                                        throw new SyntaxError('Backreference to undefined group ' + $0);
                                    }
                                    return args[$2] || '';
                                }
                                throw new SyntaxError('Invalid token ' + $0);
                            });
                        });
                    }
                    if (isRegex) {
                        if (search.global) {
                            search.lastIndex = 0;
                        } else {
                            search.lastIndex = origLastIndex;
                        }
                    }
                    return result;
                };
                fixed.split = function (separator, limit) {
                    if (!XRegExp.isRegExp(separator)) {
                        return nativ.split.apply(this, arguments);
                    }
                    var str = String(this);
                    var output = [];
                    var origLastIndex = separator.lastIndex;
                    var lastLastIndex = 0;
                    var lastLength;
                    limit = (limit === undefined ? -1 : limit) >>> 0;
                    XRegExp.forEach(str, separator, function (match) {
                        if (match.index + match[0].length > lastLastIndex) {
                            output.push(str.slice(lastLastIndex, match.index));
                            if (match.length > 1 && match.index < str.length) {
                                Array.prototype.push.apply(output, match.slice(1));
                            }
                            lastLength = match[0].length;
                            lastLastIndex = match.index + lastLength;
                        }
                    });
                    if (lastLastIndex === str.length) {
                        if (!nativ.test.call(separator, '') || lastLength) {
                            output.push('');
                        }
                    } else {
                        output.push(str.slice(lastLastIndex));
                    }
                    separator.lastIndex = origLastIndex;
                    return output.length > limit ? output.slice(0, limit) : output;
                };
                XRegExp.addToken(/\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\dA-Fa-f]{4}|{[\dA-Fa-f]+})|x(?![\dA-Fa-f]{2}))/, function (match, scope) {
                    if (match[1] === 'B' && scope === defaultScope) {
                        return match[0];
                    }
                    throw new SyntaxError('Invalid escape ' + match[0]);
                }, {
                    scope: 'all',
                    leadChar: '\\'
                });
                XRegExp.addToken(/\\u{([\dA-Fa-f]+)}/, function (match, scope, flags) {
                    var code = dec(match[1]);
                    if (code > 1114111) {
                        throw new SyntaxError('Invalid Unicode code point ' + match[0]);
                    }
                    if (code <= 65535) {
                        return '\\u' + pad4(hex(code));
                    }
                    if (hasNativeU && flags.indexOf('u') > -1) {
                        return match[0];
                    }
                    throw new SyntaxError('Cannot use Unicode code point above \\u{FFFF} without flag u');
                }, {
                    scope: 'all',
                    leadChar: '\\'
                });
                XRegExp.addToken(/\[(\^?)\]/, function (match) {
                    return match[1] ? '[\\s\\S]' : '\\b\\B';
                }, { leadChar: '[' });
                XRegExp.addToken(/\(\?#[^)]*\)/, getContextualTokenSeparator, { leadChar: '(' });
                XRegExp.addToken(/\s+|#[^\n]*\n?/, getContextualTokenSeparator, { flag: 'x' });
                XRegExp.addToken(/\./, function () {
                    return '[\\s\\S]';
                }, {
                    flag: 's',
                    leadChar: '.'
                });
                XRegExp.addToken(/\\k<([\w$]+)>/, function (match) {
                    var index = isNaN(match[1]) ? indexOf(this.captureNames, match[1]) + 1 : +match[1];
                    var endIndex = match.index + match[0].length;
                    if (!index || index > this.captureNames.length) {
                        throw new SyntaxError('Backreference to undefined group ' + match[0]);
                    }
                    return '\\' + index + (endIndex === match.input.length || isNaN(match.input.charAt(endIndex)) ? '' : '(?:)');
                }, { leadChar: '\\' });
                XRegExp.addToken(/\\(\d+)/, function (match, scope) {
                    if (!(scope === defaultScope && /^[1-9]/.test(match[1]) && +match[1] <= this.captureNames.length) && match[1] !== '0') {
                        throw new SyntaxError('Cannot use octal escape or backreference to undefined group ' + match[0]);
                    }
                    return match[0];
                }, {
                    scope: 'all',
                    leadChar: '\\'
                });
                XRegExp.addToken(/\(\?P?<([\w$]+)>/, function (match) {
                    if (!isNaN(match[1])) {
                        throw new SyntaxError('Cannot use integer as capture name ' + match[0]);
                    }
                    if (match[1] === 'length' || match[1] === '__proto__') {
                        throw new SyntaxError('Cannot use reserved word as capture name ' + match[0]);
                    }
                    if (indexOf(this.captureNames, match[1]) > -1) {
                        throw new SyntaxError('Cannot use same name for multiple groups ' + match[0]);
                    }
                    this.captureNames.push(match[1]);
                    this.hasNamedCapture = true;
                    return '(';
                }, { leadChar: '(' });
                XRegExp.addToken(/\((?!\?)/, function (match, scope, flags) {
                    if (flags.indexOf('n') > -1) {
                        return '(?:';
                    }
                    this.captureNames.push(null);
                    return '(';
                }, {
                    optionalFlags: 'n',
                    leadChar: '('
                });
                module.exports = XRegExp;
            },
            {}
        ]
    }, {}, [8])(8);
}));
/*passbolt-mad@2.10.0#util/validation*/
define('passbolt-mad@2.10.0#util/validation', [
    'exports',
    'can-construct',
    'xregexp'
], function (exports, _canConstruct, _xregexp) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canConstruct2 = _interopRequireDefault(_canConstruct);
    var _xregexp2 = _interopRequireDefault(_xregexp);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
    };
    var Validation = _canConstruct2.default.extend('mad.Validation', {
        validate: function validate(rule, value, values, options) {
            if ((typeof rule === 'undefined' ? 'undefined' : _typeof(rule)) == 'object') {
                options = rule;
                if (typeof rule.rule == 'undefined') {
                    throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'rule.rule');
                }
                if (rule.rule.indexOf('/') == '0') {
                    rule = 'regex';
                } else if ($.isArray(rule.rule)) {
                    options.params = rule.rule.slice(1);
                    rule = rule.rule[0];
                } else {
                    rule = rule.rule;
                }
            }
            if (typeof Validation[rule] == 'undefined') {
                throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'rule');
            }
            return Validation[rule](value, values, options);
        },
        _getAlphaRegExp: function _getAlphaRegExp(type) {
            var returnValue = '\\p{L}';
            if (type) {
                switch (type) {
                case 'ASCII':
                    returnValue = 'a-zA-Z';
                    break;
                default:
                    returnValue = '\\p{' + type + '}';
                }
            }
            return returnValue;
        },
        regex: function regex(value, values, options) {
            options = options || {};
            var returnValue = true;
            var regexp = options.rule;
            var not = options.not || false;
            if (regexp.indexOf('/') == 0) {
                regexp = regexp.substr(1, regexp.length - (regexp.length - regexp.lastIndexOf('/') + 1));
            }
            var xregexp = new _xregexp2.default(regexp);
            var match = xregexp.test(value);
            if (not && match || !not && !match) {
                returnValue = options.message || __('The regex is not validated');
            }
            return returnValue;
        },
        notEmpty: function notEmpty(value, values, options) {
            options = options || {};
            if (typeof value == 'undefined' || value == null || $.isArray(value) && !value.length || $.trim(value) == '') {
                return options.message || __('Should not be empty');
            }
            return true;
        },
        notBlank: function notBlank(value, values, options) {
            return this.notEmpty(value, values, options);
        },
        uuid: function uuid(value, values, options) {
            options = options || {};
            var regexp = '^[abcdef0-9]{8}-[abcdef0-9]{4}-[abcdef0-9]{4}-[abcdef0-9]{4}-[abcdef0-9]{12}$';
            var xregexp = new _xregexp2.default(regexp);
            if (!xregexp.test(value)) {
                return options.message || __('Not valid uuid');
            }
            return true;
        },
        alphaNumeric: function alphaNumeric(value, values, options) {
            options = options || {};
            var alphaRegExp = Validation._getAlphaRegExp(options.type);
            var xregexp = new _xregexp2.default('^[' + alphaRegExp + ' \'0-9]*$');
            if (!xregexp.test(value)) {
                return __('Only alpha-numeric characters allowed');
            }
            return true;
        },
        alpha: function alpha(value, values, options) {
            options = options || {};
            var alphaRegExp = Validation._getAlphaRegExp(options.type);
            var xregexp = (0, _xregexp2.default)('^[' + alphaRegExp + ' \']*$');
            if (!xregexp.test(value)) {
                return __('Only ' + options.type + ' characters allowed');
            }
            return true;
        },
        utf8Extended: function utf8Extended(value, values, options) {
            options = options || {};
            var message = options.message || __('Only utf8 characters allowed.');
            if (typeof value !== 'string') {
                return message;
            }
            return true;
        },
        utf8: function utf8(value, values, options) {
            options = options || {};
            var message = options.message || __('Only utf8 characters allowed (except emoticons).');
            if (typeof value !== 'string') {
                return message;
            }
            if (/(?:[\uD800-\uDBFF][\uDC00-\uDFFF])/.test(value)) {
                return message;
            }
            return true;
        },
        num: function num(value) {
            var xregexp = (0, _xregexp2.default)('^-?[0-9]+.?[0-9]*$');
            if (!xregexp.test(value)) {
                return __('Only numeric characters allowed');
            }
            return true;
        },
        required: function required(value, values, options) {
            options = options || {};
            var xregexp = (0, _xregexp2.default)('^[s\n\t ]*$');
            if (typeof value == 'undefined' || value === null || xregexp.test(value)) {
                return options.message || __('This information is required');
            }
            return true;
        },
        text: function text(value) {
            var xregexp = (0, _xregexp2.default)('<(.|\n)*?>');
            if (xregexp.test(value)) {
                return __('No HTML tags allowed');
            }
            return true;
        },
        url: function url(value) {
            var regex = '^\t\t\t\t([a-z0-9+.-]+):\t\t\t\t\t(?:\t\t\t\t\t\t(?:((?:[a-z0-9-._~!$&\'()*+,;=:]|%[0-9A-F]{2})*)@)?\t\t\t\t\t\t((?:[a-z0-9-._~!$&\'()*+,;=]|%[0-9A-F]{2})*)\t\t\t\t\t\t(?::(d*))?\t\t\t\t\t\t(/(?:[a-z0-9-._~!$&\'()*+,;=:@/]|%[0-9A-F]{2})*)?\t\t\t\t\t|\t\t\t\t\t\t(/?(?:[a-z0-9-._~!$&\'()*+,;=:@]|%[0-9A-F]{2})+(?:[a-z0-9-._~!$&\'()*+,;=:@/]|%[0-9A-F]{2})*)?\t\t\t\t)\t\t\t\t(?:\t\t\t\t\t((?:[a-z0-9-._~!$&\'()*+,;=:/?@]|%[0-9A-F]{2})*)\t\t\t\t)?\t\t\t\t(?:\t\t\t\t\t#((?:[a-z0-9-._~!$&\'()*+,;=:/?@]|%[0-9A-F]{2})*)\t\t\t\t)?\t\t\t$';
            var xregexp = (0, _xregexp2.default)(regex);
            if (xregexp.test(value)) {
                return __('Not valid url.');
            }
            return true;
        },
        nospace: function nospace(value) {
            var xregexp = (0, _xregexp2.default)('[ ]+');
            if (xregexp.test(value)) {
                return __('No space are allowed');
            }
            return true;
        },
        email: function email(value, values, options) {
            options = options || {};
            var hostnameRegexp = '(?:[_\\p{L}0-9][-_\\p{L}0-9]*\\.)*(?:[\\p{L}0-9][-\\p{L}0-9]{0,62})\\.(?:(?:[a-z]{2}\\.)?[a-z]{2,})';
            var emailRegexp = '^[\\p{L}0-9!#$%&\'*+/=?^_`{|}~-]+(?:\\.[\\p{L}0-9!#$%&\'*+/=?^_`{|}~-]+)*@' + hostnameRegexp + '$';
            var xregexp = (0, _xregexp2.default)(emailRegexp);
            if (!xregexp.test(value)) {
                return options.message || __('Only email format is allowed');
            }
            return true;
        },
        date: function date(value, values, options) {
            value = value || '';
            options = options || {};
            var format = options.format || 'dd/mm/yyyy';
            var yearPos = null;
            var monthPos = null;
            var dayPos = null;
            var days = [
                0,
                31,
                29,
                31,
                30,
                31,
                30,
                31,
                31,
                30,
                31,
                30,
                31
            ];
            var dateRegExp = '';
            var returnValue = true;
            switch (format) {
            case 'm/d/y':
                dateRegExp = /^(\d{1,2})[.\/-](\d{1,2})[.\/-](\d{2}|\d{4})$/;
                monthPos = 1;
                dayPos = 2;
                yearPos = 3;
                break;
            case 'mm/dd/yy':
                dateRegExp = /^(\d{1,2})[.\/-](\d{1,2})[.\/-](\d{2})$/;
                monthPos = 1;
                dayPos = 2;
                yearPos = 3;
                break;
            case 'mm/dd/yyyy':
                dateRegExp = /^(\d{1,2})[.\/-](\d{1,2})[.\/-](\d{4})$/;
                monthPos = 1;
                dayPos = 2;
                yearPos = 3;
                break;
            case 'dd/mm/yyyy':
                dateRegExp = /^(\d{1,2})[.\/-](\d{1,2})[.\/-](\d{4})$/;
                monthPos = 2;
                dayPos = 1;
                yearPos = 3;
                break;
            case 'd/m/yy':
                dateRegExp = /^(\d{1,2})[.\/-](\d{1,2})[.\/-](\d{2}|\d{4})$/;
                monthPos = 2;
                dayPos = 1;
                yearPos = 3;
                break;
            case 'y/m/d':
                dateRegExp = /^(\d{2}|\d{4})[.\/-](\d{1,2})[.\/-](\d{1,2})$/;
                monthPos = 2;
                dayPos = 3;
                yearPos = 1;
                break;
            case 'yy/mm/dd':
                dateRegExp = /^(\d{4}|\d{1,2})[.\/-](\d{1,2})[.\/-](\d{1,2})$/;
                monthPos = 2;
                dayPos = 3;
                yearPos = 1;
                break;
            case 'yyyy/mm/dd':
                dateRegExp = /^(\d{4})[.\/-](\d{1,2})[.\/-](\d{1,2})$/;
                monthPos = 2;
                dayPos = 3;
                yearPos = 1;
                break;
            }
            var dateParts = value.match(dateRegExp);
            if (!dateParts) {
                returnValue = __('The date format is incorect, expected : ') + format;
            } else {
                var year = Number(dateParts[yearPos]);
                var month = Number(dateParts[monthPos]);
                var day = Number(dateParts[dayPos]);
                if (day < 1 || day > days[month] || month < 1 || month > 12) {
                    returnValue = __('The date format is incorect, expected : ') + format;
                }
                if (month == 2 && day == 29) {
                    var isLeapYear = year % 4 != 0 ? false : year % 100 != 0 ? true : year % 1000 != 0 ? false : true;
                    if (!isLeapYear) {
                        returnValue = __('The year %s is not a leap year', year);
                    }
                }
            }
            return returnValue;
        },
        lengthBetween: function lengthBetween(value, values, options) {
            value = value || '';
            options = options || [];
            var returnValue = true;
            var min = options.params[0] || null;
            var max = options.params[1] || null;
            if (min != null && value.length < min || max != null && value.length > max) {
                returnValue = options.message ? __(options.message, min, max) : __('Must be between %s and %s characters long', min, max);
            }
            return returnValue;
        },
        maxLength: function maxLength(value, values, options) {
            value = value || '';
            options = options || [];
            var returnValue = true;
            var max = options.params[0] || null;
            if (value.length > max) {
                returnValue = options.message ? __(options.message, max) : __('The length should be maximum %s characters long', max);
            }
            return returnValue;
        },
        foreignRule: function foreignRule(value, options) {
            var returnValue = true;
            if (options.model && options.model.validateRules && options.attribute) {
                for (var i in options.model.validateRules[options.attribute]) {
                    var rule = options.model.validateRules[options.attribute][i];
                    var foreignReturnValue = Validation.validate(rule, value);
                    if (foreignReturnValue !== true) {
                        returnValue = foreignReturnValue;
                        break;
                    }
                }
            }
            return returnValue;
        },
        choice: function choice(value, options) {
            var returnValue = true;
            var choices = [];
            value = typeof value == 'undefined' ? null : value;
            if (options.choices) {
                choices = options.choices;
            } else if (options.callback) {
                choices = options.callback.apply(this);
            }
            if (choices.indexOf(value) == -1) {
                returnValue = __('%s is not a valid value', value);
            }
            return returnValue;
        }
    }, {});
    exports.default = Validation;
});
/*passbolt-mad@2.10.0#model/map/map*/
define('passbolt-mad@2.10.0#model/map/map', [
    'exports',
    'can-define/map/map',
    'passbolt-mad/model/list/list',
    'can-util/js/get/get',
    'passbolt-mad/util/set/set',
    'passbolt-mad/util/validation'
], function (exports, _map, _list, _get, _set, _validation) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _map2 = _interopRequireDefault(_map);
    var _list2 = _interopRequireDefault(_list);
    var _get2 = _interopRequireDefault(_get);
    var _set2 = _interopRequireDefault(_set);
    var _validation2 = _interopRequireDefault(_validation);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var DefineMap = _map2.default.extend('passbolt.model.Map', {
        __FILTER_CASE__: 'string',
        __SILENT_NOTIFY__: 'boolean'
    });
    DefineMap.List = _list2.default.extend({ '#': DefineMap });
    DefineMap.validationRules = {};
    DefineMap._references = {};
    DefineMap.getReference = function (name) {
        return DefineMap._references[name];
    };
    DefineMap.setReference = function (name, ref) {
        DefineMap._references[name] = ref;
    };
    DefineMap.getValidationRules = function (validationCase) {
        return this.validationRules;
    };
    DefineMap.validateAttribute = function (attrName, value, values, validationCase) {
        var returnValue = [];
        if (typeof validationCase == 'undefined') {
            validationCase = 'default';
        }
        var rules = this.getValidationRules(validationCase);
        if (rules[attrName]) {
            var requiredRule = this.getAttributeRule(attrName, 'required', validationCase);
            if (requiredRule != null) {
                var requiredResult = _validation2.default.validate(requiredRule, value);
                if (requiredResult !== true) {
                    returnValue.push(requiredResult);
                    return returnValue;
                }
            } else {
                var _requiredResult = _validation2.default.validate('required', value);
                if (_requiredResult !== true) {
                    return returnValue;
                }
            }
            var attributeRules = rules[attrName];
            for (var i in attributeRules) {
                var validateResult = _validation2.default.validate(attributeRules[i], value, values);
                if (validateResult !== true) {
                    returnValue.push(validateResult);
                }
            }
        }
        return returnValue;
    };
    DefineMap.getAttributeRule = function (attrName, ruleName, validationCase) {
        var rules = this.getValidationRules(validationCase);
        var rule = null;
        if ($.isArray(rules[attrName])) {
            for (var i in rules[attrName]) {
                if (rules[attrName][i].rule && rules[attrName][i].rule == 'required') {
                    rule = rules[attrName][i];
                }
            }
        }
        return rule;
    };
    DefineMap.getFilteredFields = function (filteredCase) {
        return false;
    };
    DefineMap.filterAttributes = function (attrs) {
        var filteredAttrs = {};
        if (typeof attrs.__FILTER_CASE__ != 'undefined') {
            var fields = this.getFilteredFields(attrs.__FILTER_CASE__);
            if (fields !== false) {
                for (var i in fields) {
                    var value = (0, _get2.default)(attrs, fields[i]);
                    (0, _set2.default)(filteredAttrs, fields[i], value);
                }
            } else {
                filteredAttrs = attrs;
                delete filteredAttrs.__FILTER_CASE__;
            }
        } else {
            filteredAttrs = attrs;
        }
        return filteredAttrs;
    };
    exports.default = DefineMap;
});
/*passbolt-mad@2.10.0#net/response*/
define('passbolt-mad@2.10.0#net/response', [
    'exports',
    'passbolt-mad/model/map/map'
], function (exports, _map) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _map2 = _interopRequireDefault(_map);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Response = _map2.default.extend('mad.net.Response', {
        header: {
            type: 'any',
            value: {}
        },
        body: {
            type: 'any',
            value: {}
        },
        code: 'number'
    });
    Response.STATUS_ERROR = 'error';
    Response.STATUS_NOTICE = 'notice';
    Response.STATUS_SUCCESS = 'success';
    Response.STATUS_WARNING = 'warning';
    Response.RESPONSE_ID_UNDEFINED = 'undefined';
    Response.RESPONSE_CONTROLLER_UNDEFINED = 'undefined';
    Response.RESPONSE_ACTION_UNDEFINED = 'undefined';
    Response.isResponse = function (data) {
        var returnValue = false;
        if (typeof data != 'undefined' && data != null) {
            if (data.header) {
                returnValue = true;
            }
        }
        return returnValue;
    };
    Response.getResponse = function (type, data) {
        var header = {
            id: Response.RESPONSE_ID_UNDEFINED,
            status: Response.STATUS_ERROR,
            controller: Response.RESPONSE_CONTROLLER_UNDEFINED,
            action: Response.RESPONSE_ACTION_UNDEFINED,
            title: __('Something went wrong sparkly'),
            message: __('Check your request')
        };
        var body = null;
        var code = null;
        switch (type) {
        case 413:
            header.title = __('Request entity too large');
            header.message = __('Request entity too large');
            code = type;
            break;
        case 0:
            header.title = __('Something went wrong sparkly');
            header.message = __('Check your request');
            code = type;
            body = data;
            break;
        }
        return new Response({
            header: header,
            body: body,
            code: code
        });
    };
    exports.default = Response;
});
/*uuid@3.3.2#lib/rng-browser*/
define('uuid@3.3.2#lib/rng-browser', function (require, exports, module) {
    var getRandomValues = typeof crypto != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto);
    if (getRandomValues) {
        var rnds8 = new Uint8Array(16);
        module.exports = function whatwgRNG() {
            getRandomValues(rnds8);
            return rnds8;
        };
    } else {
        var rnds = new Array(16);
        module.exports = function mathRNG() {
            for (var i = 0, r; i < 16; i++) {
                if ((i & 3) === 0)
                    r = Math.random() * 4294967296;
                rnds[i] = r >>> ((i & 3) << 3) & 255;
            }
            return rnds;
        };
    }
});
/*uuid@3.3.2#lib/bytesToUuid*/
define('uuid@3.3.2#lib/bytesToUuid', function (require, exports, module) {
    var byteToHex = [];
    for (var i = 0; i < 256; ++i) {
        byteToHex[i] = (i + 256).toString(16).substr(1);
    }
    function bytesToUuid(buf, offset) {
        var i = offset || 0;
        var bth = byteToHex;
        return [
            bth[buf[i++]],
            bth[buf[i++]],
            bth[buf[i++]],
            bth[buf[i++]],
            '-',
            bth[buf[i++]],
            bth[buf[i++]],
            '-',
            bth[buf[i++]],
            bth[buf[i++]],
            '-',
            bth[buf[i++]],
            bth[buf[i++]],
            '-',
            bth[buf[i++]],
            bth[buf[i++]],
            bth[buf[i++]],
            bth[buf[i++]],
            bth[buf[i++]],
            bth[buf[i++]]
        ].join('');
    }
    module.exports = bytesToUuid;
});
/*uuid@3.3.2#v4*/
define('uuid@3.3.2#v4', [
    'require',
    'exports',
    'module',
    './lib/rng',
    './lib/bytesToUuid'
], function (require, exports, module) {
    var rng = require('./lib/rng');
    var bytesToUuid = require('./lib/bytesToUuid');
    function v4(options, buf, offset) {
        var i = buf && offset || 0;
        if (typeof options == 'string') {
            buf = options === 'binary' ? new Array(16) : null;
            options = null;
        }
        options = options || {};
        var rnds = options.random || (options.rng || rng)();
        rnds[6] = rnds[6] & 15 | 64;
        rnds[8] = rnds[8] & 63 | 128;
        if (buf) {
            for (var ii = 0; ii < 16; ++ii) {
                buf[i + ii] = rnds[ii];
            }
        }
        return buf || bytesToUuid(rnds);
    }
    module.exports = v4;
});
/*passbolt-mad@2.10.0#net/ajax*/
define('passbolt-mad@2.10.0#net/ajax', [
    'exports',
    'jquery',
    'can-ajax',
    'can-construct',
    'passbolt-mad/model/list/list',
    'passbolt-mad/net/response',
    'can-util/js/string/string',
    'uuid/v4'
], function (exports, _jquery, _canAjax, _canConstruct, _list, _response, _string, _v) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _jquery2 = _interopRequireDefault(_jquery);
    var _canAjax2 = _interopRequireDefault(_canAjax);
    var _canConstruct2 = _interopRequireDefault(_canConstruct);
    var _list2 = _interopRequireDefault(_list);
    var _response2 = _interopRequireDefault(_response);
    var _string2 = _interopRequireDefault(_string);
    var _v2 = _interopRequireDefault(_v);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Ajax = _canConstruct2.default.extend('mad.net.Ajax', {
        _requests: new _list2.default(),
        request: function request(_request) {
            var _this = this;
            _request.id = (0, _v2.default)();
            _request.originParams = _jquery2.default.extend({}, _request.params);
            _request.url = _string2.default.sub(_request.url, _request.params, true);
            if (/^\//.test(_request.url) && typeof APP_URL != 'undefined') {
                _request.url = APP_URL + _request.url.slice(1);
            }
            _request.dataType = _request.dataType || 'json';
            _request.data = _request.params;
            _request.type = _request.type ? _request.type.toUpperCase() : 'GET';
            if (typeof _request.silentLoading == 'undefined') {
                _request.silentLoading = true;
                if (_request.type == 'POST' || _request.type == 'DELETE' || _request.type == 'PUT') {
                    _request.silentLoading = false;
                }
            }
            if (!_request.beforeSend) {
                _request.beforeSend = function (xhr) {
                    _request._xhr = xhr;
                };
            }
            this._registerRequest(_request);
            return (0, _canAjax2.default)(_request).then(function (data) {
                return _this.handleSuccess(_request, data);
            }, function (data) {
                return _this.handleError(_request, data);
            });
        },
        _registerRequest: function _registerRequest(request) {
            if (request.register === false) {
                return;
            }
            Ajax._requests.push(request);
        },
        _unregisterRequest: function _unregisterRequest(request) {
            if (request.register === false) {
                return;
            }
            var id = request.id;
            var index = Ajax._requests.indexOf({ id: id });
            if (index != -1) {
                Ajax._requests.splice(index, 1);
            }
        },
        handleSuccess: function handleSuccess(request, data) {
            var response = null;
            if (_response2.default.isResponse(data)) {
                response = new _response2.default(data);
            } else {
                response = data;
            }
            request._response = response;
            this._unregisterRequest(request);
            if (response instanceof _response2.default) {
                return Promise.resolve(response.body);
            }
            return Promise.resolve(response);
        },
        handleError: function handleError(request, data) {
            var response = null;
            if (_response2.default.isResponse(data)) {
                data.code = request._xhr.status;
                response = new _response2.default(data);
            } else {
                response = _response2.default.getResponse(request._xhr.status);
            }
            request._response = response;
            this._unregisterRequest(request);
            return Promise.reject(response);
        }
    }, {});
    exports.default = Ajax;
});
/*passbolt-mad@2.10.0#util/util*/
define('passbolt-mad@2.10.0#util/util', ['exports'], function (exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var glbl = typeof window !== 'undefined' ? window : global;
    var mad = {};
    glbl.mad = mad;
    mad.global = mad;
    mad.config = { rootElement: $('body') };
    mad._controls = {};
    mad.getControl = function (id, controlName) {
        if (controlName == undefined) {
            for (controlName in mad._controls[id]) {
                break;
            }
        }
        return mad._controls[id][controlName];
    };
    mad.referenceControl = function (control) {
        var id = control.getId();
        if (mad._controls[id] == undefined) {
            mad._controls[id] = {};
        }
        mad._controls[id][control.constructor.fullName] = control;
    };
    mad.unreferenceControl = function (control) {
        delete mad._controls[control.getId()][control.constructor.fullName];
    };
    mad.setGlobal = function (name, value) {
        glbl[name] = value;
    };
    exports.default = mad;
});
/*passbolt-mad@2.10.0#config/config*/
define('passbolt-mad@2.10.0#config/config', [
    'exports',
    'can-construct',
    'can-util/js/get/get',
    'passbolt-mad/util/set/set',
    'passbolt-mad/util/util'
], function (exports, _canConstruct, _get, _set, _util) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canConstruct2 = _interopRequireDefault(_canConstruct);
    var _get2 = _interopRequireDefault(_get);
    var _set2 = _interopRequireDefault(_set);
    var _util2 = _interopRequireDefault(_util);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    _util2.default.config = _util2.default.config || {};
    var MadConfig = _canConstruct2.default.extend('mad.Config', {
        loadFile: function loadFile(url, key) {
            var self = this;
            return $.ajax({
                url: url,
                async: false,
                dataType: 'json',
                success: function success(data) {
                    if (key !== undefined) {
                        var dataWithKey = {};
                        dataWithKey[key] = data;
                        data = dataWithKey;
                    }
                    self.load(data);
                }
            });
        },
        load: function load(config) {
            $.extend(true, _util2.default.config, config);
        },
        read: function read(name) {
            return (0, _get2.default)(_util2.default.config, name);
        },
        write: function write(name, value) {
            (0, _set2.default)(_util2.default.config, name, value);
        },
        flush: function flush() {
            for (var i in _util2.default.config) {
                delete _util2.default.config[i];
            }
        }
    }, {});
    exports.default = MadConfig;
});
/*can-reflect-promise@2.1.0#can-reflect-promise*/
define('can-reflect-promise@2.1.0#can-reflect-promise', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-symbol',
    'can-observation-recorder',
    'can-queues',
    'can-key-tree',
    'can-log/dev/dev'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var ObservationRecorder = require('can-observation-recorder');
    var queues = require('can-queues');
    var KeyTree = require('can-key-tree');
    var dev = require('can-log/dev/dev');
    var getKeyValueSymbol = canSymbol.for('can.getKeyValue'), observeDataSymbol = canSymbol.for('can.meta');
    var promiseDataPrototype = {
        isPending: true,
        state: 'pending',
        isResolved: false,
        isRejected: false,
        value: undefined,
        reason: undefined
    };
    function setVirtualProp(promise, property, value) {
        var observeData = promise[observeDataSymbol];
        var old = observeData[property];
        observeData[property] = value;
        queues.enqueueByQueue(observeData.handlers.getNode([property]), promise, [
            value,
            old
        ], function () {
            return {};
        }, [
            'Promise',
            promise,
            'resolved with value',
            value,
            'and changed virtual property: ' + property
        ]);
    }
    function initPromise(promise) {
        var observeData = promise[observeDataSymbol];
        if (!observeData) {
            Object.defineProperty(promise, observeDataSymbol, {
                enumerable: false,
                configurable: false,
                writable: false,
                value: Object.create(promiseDataPrototype)
            });
            observeData = promise[observeDataSymbol];
            observeData.handlers = new KeyTree([
                Object,
                Object,
                Array
            ]);
        }
        promise.then(function (value) {
            queues.batch.start();
            setVirtualProp(promise, 'isPending', false);
            setVirtualProp(promise, 'isResolved', true);
            setVirtualProp(promise, 'value', value);
            setVirtualProp(promise, 'state', 'resolved');
            queues.batch.stop();
        }, function (reason) {
            queues.batch.start();
            setVirtualProp(promise, 'isPending', false);
            setVirtualProp(promise, 'isRejected', true);
            setVirtualProp(promise, 'reason', reason);
            setVirtualProp(promise, 'state', 'rejected');
            queues.batch.stop();
        });
    }
    function setupPromise(value) {
        var oldPromiseFn;
        var proto = 'getPrototypeOf' in Object ? Object.getPrototypeOf(value) : value.__proto__;
        if (value[getKeyValueSymbol] && value[observeDataSymbol]) {
            return;
        }
        if (proto === null || proto === Object.prototype) {
            proto = value;
            if (typeof proto.promise === 'function') {
                oldPromiseFn = proto.promise;
                proto.promise = function () {
                    var result = oldPromiseFn.call(proto);
                    setupPromise(result);
                    return result;
                };
            }
        }
        canReflect.assignSymbols(proto, {
            'can.getKeyValue': function (key) {
                if (!this[observeDataSymbol]) {
                    initPromise(this);
                }
                ObservationRecorder.add(this, key);
                switch (key) {
                case 'state':
                case 'isPending':
                case 'isResolved':
                case 'isRejected':
                case 'value':
                case 'reason':
                    return this[observeDataSymbol][key];
                default:
                    return this[key];
                }
            },
            'can.getValue': function () {
                return this[getKeyValueSymbol]('value');
            },
            'can.isValueLike': false,
            'can.onKeyValue': function (key, handler, queue) {
                if (!this[observeDataSymbol]) {
                    initPromise(this);
                }
                this[observeDataSymbol].handlers.add([
                    key,
                    queue || 'mutate',
                    handler
                ]);
            },
            'can.offKeyValue': function (key, handler, queue) {
                if (!this[observeDataSymbol]) {
                    initPromise(this);
                }
                this[observeDataSymbol].handlers.delete([
                    key,
                    queue || 'mutate',
                    handler
                ]);
            }
        });
    }
    module.exports = setupPromise;
});
/*can-stache-key@1.4.0#can-stache-key*/
define('can-stache-key@1.4.0#can-stache-key', [
    'require',
    'exports',
    'module',
    'can-observation-recorder',
    'can-log/dev/dev',
    'can-symbol',
    'can-reflect',
    'can-reflect-promise'
], function (require, exports, module) {
    'use strict';
    var ObservationRecorder = require('can-observation-recorder');
    var dev = require('can-log/dev/dev');
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    var canReflectPromise = require('can-reflect-promise');
    var getValueSymbol = canSymbol.for('can.getValue');
    var setValueSymbol = canSymbol.for('can.setValue');
    var isValueLikeSymbol = canSymbol.for('can.isValueLike');
    var peek = ObservationRecorder.ignore(canReflect.getKeyValue.bind(canReflect));
    var observeReader;
    var bindName = Function.prototype.bind;
    var isAt = function (index, reads) {
        var prevRead = reads[index - 1];
        return prevRead && prevRead.at;
    };
    var readValue = function (value, index, reads, options, state, prev) {
        var usedValueReader;
        do {
            usedValueReader = false;
            for (var i = 0, len = observeReader.valueReaders.length; i < len; i++) {
                if (observeReader.valueReaders[i].test(value, index, reads, options)) {
                    value = observeReader.valueReaders[i].read(value, index, reads, options, state, prev);
                }
            }
        } while (usedValueReader);
        return value;
    };
    var specialRead = {
        index: true,
        key: true,
        event: true,
        element: true,
        viewModel: true
    };
    var checkForObservableAndNotify = function (options, state, getObserves, value, index) {
        if (options.foundObservable && !state.foundObservable) {
            if (ObservationRecorder.trapsCount()) {
                ObservationRecorder.addMany(getObserves());
                options.foundObservable(value, index);
                state.foundObservable = true;
            }
        }
    };
    var objHasKeyAtIndex = function (obj, reads, index) {
        return !!(reads && reads.length && canReflect.hasKey(obj, reads[index].key));
    };
    observeReader = {
        read: function (parent, reads, options) {
            options = options || {};
            var state = { foundObservable: false };
            var getObserves;
            if (options.foundObservable) {
                getObserves = ObservationRecorder.trap();
            }
            var cur = readValue(parent, 0, reads, options, state), type, prev, readLength = reads.length, i = 0, last, parentHasKey;
            checkForObservableAndNotify(options, state, getObserves, parent, 0);
            while (i < readLength) {
                prev = cur;
                for (var r = 0, readersLength = observeReader.propertyReaders.length; r < readersLength; r++) {
                    var reader = observeReader.propertyReaders[r];
                    if (reader.test(cur)) {
                        cur = reader.read(cur, reads[i], i, options, state);
                        break;
                    }
                }
                checkForObservableAndNotify(options, state, getObserves, prev, i);
                last = cur;
                i = i + 1;
                cur = readValue(cur, i, reads, options, state, prev);
                checkForObservableAndNotify(options, state, getObserves, prev, i - 1);
                type = typeof cur;
                if (i < reads.length && (cur === null || cur === undefined)) {
                    parentHasKey = objHasKeyAtIndex(prev, reads, i - 1);
                    if (options.earlyExit && !parentHasKey) {
                        options.earlyExit(prev, i - 1, cur);
                    }
                    return {
                        value: undefined,
                        parent: prev,
                        parentHasKey: parentHasKey,
                        foundLastParent: false
                    };
                }
            }
            parentHasKey = objHasKeyAtIndex(prev, reads, reads.length - 1);
            if (cur === undefined && !parentHasKey) {
                if (options.earlyExit) {
                    options.earlyExit(prev, i - 1);
                }
            }
            return {
                value: cur,
                parent: prev,
                parentHasKey: parentHasKey,
                foundLastParent: true
            };
        },
        get: function (parent, reads, options) {
            return observeReader.read(parent, observeReader.reads(reads), options || {}).value;
        },
        valueReadersMap: {},
        valueReaders: [
            {
                name: 'function',
                test: function (value) {
                    return value && canReflect.isFunctionLike(value) && !canReflect.isConstructorLike(value);
                },
                read: function (value, i, reads, options, state, prev) {
                    if (options.callMethodsOnObservables && canReflect.isObservableLike(prev) && canReflect.isMapLike(prev)) {
                        dev.warn('can-stache-key: read() called with `callMethodsOnObservables: true`.');
                        return value.apply(prev, options.args || []);
                    }
                    return options.proxyMethods !== false ? bindName.call(value, prev) : value;
                }
            },
            {
                name: 'isValueLike',
                test: function (value, i, reads, options) {
                    return value && value[getValueSymbol] && value[isValueLikeSymbol] !== false && (options.foundAt || !isAt(i, reads));
                },
                read: function (value, i, reads, options) {
                    if (options.readCompute === false && i === reads.length) {
                        return value;
                    }
                    return canReflect.getValue(value);
                },
                write: function (base, newVal) {
                    if (base[setValueSymbol]) {
                        base[setValueSymbol](newVal);
                    } else if (base.set) {
                        base.set(newVal);
                    } else {
                        base(newVal);
                    }
                }
            }
        ],
        propertyReadersMap: {},
        propertyReaders: [
            {
                name: 'map',
                test: function (value) {
                    if (canReflect.isPromise(value) || typeof value === 'object' && value && typeof value.then === 'function') {
                        canReflectPromise(value);
                    }
                    return canReflect.isObservableLike(value) && canReflect.isMapLike(value);
                },
                read: function (value, prop) {
                    var res = canReflect.getKeyValue(value, prop.key);
                    if (res !== undefined) {
                        return res;
                    } else {
                        return value[prop.key];
                    }
                },
                write: canReflect.setKeyValue
            },
            {
                name: 'object',
                test: function () {
                    return true;
                },
                read: function (value, prop, i, options) {
                    if (value == null) {
                        return undefined;
                    } else {
                        if (typeof value === 'object') {
                            if (prop.key in value) {
                                return value[prop.key];
                            }
                        } else {
                            return value[prop.key];
                        }
                    }
                },
                write: function (base, prop, newVal) {
                    var propValue = base[prop];
                    if (newVal != null && typeof newVal === 'object' && canReflect.isMapLike(propValue)) {
                        dev.warn('can-stache-key: Merging data into "' + prop + '" because its parent is non-observable');
                        canReflect.update(propValue, newVal);
                    } else if (propValue != null && propValue[setValueSymbol] !== undefined) {
                        canReflect.setValue(propValue, newVal);
                    } else {
                        base[prop] = newVal;
                    }
                }
            }
        ],
        reads: function (keyArg) {
            var key = '' + keyArg;
            var keys = [];
            var last = 0;
            var at = false;
            if (key.charAt(0) === '@') {
                last = 1;
                at = true;
            }
            var keyToAdd = '';
            for (var i = last; i < key.length; i++) {
                var character = key.charAt(i);
                if (character === '.' || character === '@') {
                    if (key.charAt(i - 1) !== '\\') {
                        keys.push({
                            key: keyToAdd,
                            at: at
                        });
                        at = character === '@';
                        keyToAdd = '';
                    } else {
                        keyToAdd = keyToAdd.substr(0, keyToAdd.length - 1) + '.';
                    }
                } else {
                    keyToAdd += character;
                }
            }
            keys.push({
                key: keyToAdd,
                at: at
            });
            return keys;
        },
        write: function (parent, key, value, options) {
            var keys = typeof key === 'string' ? observeReader.reads(key) : key;
            var last;
            options = options || {};
            if (keys.length > 1) {
                last = keys.pop();
                parent = observeReader.read(parent, keys, options).value;
                keys.push(last);
            } else {
                last = keys[0];
            }
            if (!parent) {
                return;
            }
            var keyValue = peek(parent, last.key);
            if (observeReader.valueReadersMap.isValueLike.test(keyValue, keys.length - 1, keys, options)) {
                observeReader.valueReadersMap.isValueLike.write(keyValue, value, options);
            } else {
                if (observeReader.valueReadersMap.isValueLike.test(parent, keys.length - 1, keys, options)) {
                    parent = parent[getValueSymbol]();
                }
                if (observeReader.propertyReadersMap.map.test(parent)) {
                    observeReader.propertyReadersMap.map.write(parent, last.key, value, options);
                } else if (observeReader.propertyReadersMap.object.test(parent)) {
                    observeReader.propertyReadersMap.object.write(parent, last.key, value, options);
                    if (options.observation) {
                        options.observation.update();
                    }
                }
            }
        }
    };
    observeReader.propertyReaders.forEach(function (reader) {
        observeReader.propertyReadersMap[reader.name] = reader;
    });
    observeReader.valueReaders.forEach(function (reader) {
        observeReader.valueReadersMap[reader.name] = reader;
    });
    observeReader.set = observeReader.write;
    module.exports = observeReader;
});
/*can-key@1.0.0#utils*/
define('can-key@1.0.0#utils', function (require, exports, module) {
    var utils = {
        isContainer: function (current) {
            var type = typeof current;
            return current && (type === 'object' || type === 'function');
        },
        strReplacer: /\{([^\}]+)\}/g,
        parts: function (name) {
            if (Array.isArray(name)) {
                return name;
            } else {
                return typeof name !== 'undefined' ? (name + '').replace(/\[/g, '.').replace(/]/g, '').split('.') : [];
            }
        }
    };
    module.exports = utils;
});
/*can-key@1.0.0#get/get*/
define('can-key@1.0.0#get/get', [
    'require',
    'exports',
    'module',
    'can-reflect',
    '../utils'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var utils = require('../utils');
    function get(obj, name) {
        var parts = utils.parts(name);
        var length = parts.length, current, i, container;
        if (!length) {
            return obj;
        }
        current = obj;
        for (i = 0; i < length && utils.isContainer(current) && current !== null; i++) {
            container = current;
            current = canReflect.getKeyValue(container, parts[i]);
        }
        return current;
    }
    module.exports = get;
});
/*can-globals@1.2.0#mutation-observer/mutation-observer*/
define('can-globals@1.2.0#mutation-observer/mutation-observer', [
    'require',
    'exports',
    'module',
    'can-globals/global/global',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        require('can-globals/global/global');
        var globals = require('can-globals/can-globals-instance');
        globals.define('MutationObserver', function () {
            var GLOBAL = globals.getKeyValue('global');
            return GLOBAL.MutationObserver || GLOBAL.WebKitMutationObserver || GLOBAL.MozMutationObserver;
        });
        module.exports = globals.makeExport('MutationObserver');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.0#custom-elements/custom-elements*/
define('can-globals@1.2.0#custom-elements/custom-elements', [
    'require',
    'exports',
    'module',
    'can-globals/global/global',
    'can-globals/can-globals-instance'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        require('can-globals/global/global');
        var globals = require('can-globals/can-globals-instance');
        globals.define('customElements', function () {
            var GLOBAL = globals.getKeyValue('global');
            return GLOBAL.customElements;
        });
        module.exports = globals.makeExport('customElements');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.0#can-globals*/
define('can-globals@1.2.0#can-globals', [
    'require',
    'exports',
    'module',
    'can-globals/can-globals-instance',
    './global/global',
    './document/document',
    './location/location',
    './mutation-observer/mutation-observer',
    './is-browser-window/is-browser-window',
    './is-node/is-node',
    './custom-elements/custom-elements'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('can-globals/can-globals-instance');
        require('./global/global');
        require('./document/document');
        require('./location/location');
        require('./mutation-observer/mutation-observer');
        require('./is-browser-window/is-browser-window');
        require('./is-node/is-node');
        require('./custom-elements/custom-elements');
        module.exports = globals;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-dom-mutate@1.1.0#-util*/
define('can-dom-mutate@1.1.0#-util', [
    'require',
    'exports',
    'module',
    'can-globals/document/document'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getDocument = require('can-globals/document/document');
        var push = Array.prototype.push;
        function eliminate(array, item) {
            var index = array.indexOf(item);
            if (index >= 0) {
                array.splice(index, 1);
            }
        }
        function isInDocument(node) {
            var root = getDocument().documentElement;
            if (root === node) {
                return true;
            }
            return root.contains(node);
        }
        function isDocumentElement(node) {
            return getDocument().documentElement === node;
        }
        function isFragment(node) {
            return !!(node && node.nodeType === 11);
        }
        function getChildren(parentNode) {
            var nodes = [];
            var node = parentNode.firstChild;
            while (node) {
                nodes.push(node);
                node = node.nextSibling;
            }
            return nodes;
        }
        function getParents(node) {
            var nodes;
            if (isFragment(node)) {
                nodes = getChildren(node);
            } else {
                nodes = [node];
            }
            return nodes;
        }
        function getAllNodes(node) {
            var nodes = getParents(node);
            var cLen = nodes.length;
            for (var c = 0; c < cLen; c++) {
                var element = nodes[c];
                if (element.getElementsByTagName) {
                    var descendants = element.getElementsByTagName('*');
                    push.apply(nodes, descendants);
                }
            }
            return nodes;
        }
        function subscription(fn) {
            return function _subscription() {
                var disposal = fn.apply(this, arguments);
                var isDisposed = false;
                return function _disposal() {
                    if (isDisposed) {
                        var fnName = fn.name || fn.displayName || 'an anonymous function';
                        var message = 'Disposal function returned by ' + fnName + ' called more than once.';
                        throw new Error(message);
                    }
                    disposal.apply(this, arguments);
                    isDisposed = true;
                };
            };
        }
        module.exports = {
            eliminate: eliminate,
            isInDocument: isInDocument,
            getDocument: getDocument,
            isDocumentElement: isDocumentElement,
            isFragment: isFragment,
            getParents: getParents,
            getAllNodes: getAllNodes,
            getChildren: getChildren,
            subscription: subscription
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-dom-mutate@1.1.0#can-dom-mutate*/
define('can-dom-mutate@1.1.0#can-dom-mutate', [
    'require',
    'exports',
    'module',
    'can-globals',
    'can-globals/global/global',
    'can-globals/mutation-observer/mutation-observer',
    './-util'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('can-globals');
        var getRoot = require('can-globals/global/global');
        var getMutationObserver = require('can-globals/mutation-observer/mutation-observer');
        var setImmediate = getRoot().setImmediate || function (cb) {
            return setTimeout(cb, 0);
        };
        var util = require('./-util');
        var getDocument = util.getDocument;
        var eliminate = util.eliminate;
        var subscription = util.subscription;
        var isDocumentElement = util.isDocumentElement;
        var getAllNodes = util.getAllNodes;
        var push = Array.prototype.push;
        var slice = Array.prototype.slice;
        var domMutate;
        var dataStore = new WeakMap();
        function getRelatedData(node, key) {
            var data = dataStore.get(node);
            if (data) {
                return data[key];
            }
        }
        function setRelatedData(node, key, targetListenersMap) {
            var data = dataStore.get(node) || dataStore.set(node, {}).get(node);
            data[key] = targetListenersMap;
        }
        function deleteRelatedData(node, key) {
            var data = dataStore.get(node);
            return delete data[key];
        }
        function batch(processBatchItems, shouldDeduplicate) {
            var waitingBatch = [];
            var waitingCalls = [];
            var dispatchSet = new Set();
            var isPrimed = false;
            return function batchAdd(items, callback) {
                if (shouldDeduplicate) {
                    for (var i = 0; i < items.length; i++) {
                        var item = items[i];
                        var target = item.target;
                        if (!dispatchSet.has(target)) {
                            waitingBatch.push(item);
                            dispatchSet.add(target);
                        }
                    }
                } else {
                    push.apply(waitingBatch, items);
                }
                if (callback) {
                    waitingCalls.push(callback);
                }
                var shouldPrime = !isPrimed && waitingBatch.length > 0;
                if (shouldPrime) {
                    isPrimed = true;
                    setImmediate(function processBatch() {
                        var currentBatch = waitingBatch;
                        waitingBatch = [];
                        var currentCalls = waitingCalls;
                        waitingCalls = [];
                        if (shouldDeduplicate) {
                            dispatchSet = new Set();
                        }
                        isPrimed = false;
                        processBatchItems(currentBatch);
                        var callCount = currentCalls.length;
                        for (var c = 0; c < callCount; c++) {
                            currentCalls[c]();
                        }
                    });
                }
            };
        }
        function getDocumentListeners(target, key) {
            var doc = getDocument();
            var data = getRelatedData(doc, key);
            if (data) {
                return data.listeners;
            }
        }
        function getTargetListeners(target, key) {
            var doc = getDocument();
            var targetListenersMap = getRelatedData(doc, key);
            if (!targetListenersMap) {
                return;
            }
            return targetListenersMap.get(target);
        }
        function addTargetListener(target, key, listener) {
            var doc = getDocument();
            var targetListenersMap = getRelatedData(doc, key);
            if (!targetListenersMap) {
                targetListenersMap = new Map();
                setRelatedData(doc, key, targetListenersMap);
            }
            var targetListeners = targetListenersMap.get(target);
            if (!targetListeners) {
                targetListeners = [];
                targetListenersMap.set(target, targetListeners);
            }
            targetListeners.push(listener);
        }
        function removeTargetListener(target, key, listener) {
            var doc = getDocument();
            var targetListenersMap = getRelatedData(doc, key);
            if (!targetListenersMap) {
                return;
            }
            var targetListeners = targetListenersMap.get(target);
            if (!targetListeners) {
                return;
            }
            eliminate(targetListeners, listener);
            if (targetListeners.length === 0) {
                targetListenersMap['delete'](target);
                if (targetListenersMap.size === 0) {
                    deleteRelatedData(doc, key);
                }
            }
        }
        function fire(callbacks, arg) {
            var safeCallbacks = slice.call(callbacks, 0);
            var safeCallbackCount = safeCallbacks.length;
            for (var i = 0; i < safeCallbackCount; i++) {
                safeCallbacks[i](arg);
            }
        }
        function dispatch(listenerKey, documentDataKey) {
            return function dispatchEvents(events) {
                for (var e = 0; e < events.length; e++) {
                    var event = events[e];
                    var target = event.target;
                    var targetListeners = getTargetListeners(target, listenerKey);
                    if (targetListeners) {
                        fire(targetListeners, event);
                    }
                    if (!documentDataKey) {
                        continue;
                    }
                    var documentListeners = getDocumentListeners(target, documentDataKey);
                    if (documentListeners) {
                        fire(documentListeners, event);
                    }
                }
            };
        }
        function observeMutations(target, observerKey, config, handler) {
            var observerData = getRelatedData(target, observerKey);
            if (!observerData) {
                observerData = { observingCount: 0 };
                setRelatedData(target, observerKey, observerData);
            }
            var setupObserver = function () {
                var MutationObserver = getMutationObserver();
                if (MutationObserver) {
                    var Node = getRoot().Node;
                    var isRealNode = !!(Node && target instanceof Node);
                    if (isRealNode) {
                        var targetObserver = new MutationObserver(handler);
                        targetObserver.observe(target, config);
                        observerData.observer = targetObserver;
                    }
                } else {
                    if (observerData.observer) {
                        observerData.observer.disconnect();
                        observerData.observer = null;
                    }
                }
            };
            if (observerData.observingCount === 0) {
                globals.onKeyValue('MutationObserver', setupObserver);
                setupObserver();
            }
            observerData.observingCount++;
            return function stopObservingMutations() {
                var observerData = getRelatedData(target, observerKey);
                if (observerData) {
                    observerData.observingCount--;
                    if (observerData.observingCount <= 0) {
                        if (observerData.observer) {
                            observerData.observer.disconnect();
                        }
                        deleteRelatedData(target, observerKey);
                        globals.offKeyValue('MutationObserver', setupObserver);
                    }
                }
            };
        }
        function handleTreeMutations(mutations) {
            var mutationCount = mutations.length;
            for (var m = 0; m < mutationCount; m++) {
                var mutation = mutations[m];
                var addedNodes = mutation.addedNodes;
                var addedCount = addedNodes.length;
                for (var a = 0; a < addedCount; a++) {
                    domMutate.dispatchNodeInsertion(addedNodes[a]);
                }
                var removedNodes = mutation.removedNodes;
                var removedCount = removedNodes.length;
                for (var r = 0; r < removedCount; r++) {
                    domMutate.dispatchNodeRemoval(removedNodes[r]);
                }
            }
        }
        function handleAttributeMutations(mutations) {
            var mutationCount = mutations.length;
            for (var m = 0; m < mutationCount; m++) {
                var mutation = mutations[m];
                if (mutation.type === 'attributes') {
                    var node = mutation.target;
                    var attributeName = mutation.attributeName;
                    var oldValue = mutation.oldValue;
                    domMutate.dispatchNodeAttributeChange(node, attributeName, oldValue);
                }
            }
        }
        var treeMutationConfig = {
            subtree: true,
            childList: true
        };
        var attributeMutationConfig = {
            attributes: true,
            attributeOldValue: true
        };
        function addNodeListener(listenerKey, observerKey, isAttributes) {
            return subscription(function _addNodeListener(target, listener) {
                var stopObserving;
                if (isAttributes) {
                    stopObserving = observeMutations(target, observerKey, attributeMutationConfig, handleAttributeMutations);
                } else {
                    stopObserving = observeMutations(getDocument(), observerKey, treeMutationConfig, handleTreeMutations);
                }
                addTargetListener(target, listenerKey, listener);
                return function removeNodeListener() {
                    stopObserving();
                    removeTargetListener(target, listenerKey, listener);
                };
            });
        }
        function addGlobalListener(globalDataKey, addNodeListener) {
            return subscription(function addGlobalGroupListener(documentElement, listener) {
                if (!isDocumentElement(documentElement)) {
                    throw new Error('Global mutation listeners must pass a documentElement');
                }
                var doc = getDocument();
                var documentData = getRelatedData(doc, globalDataKey);
                if (!documentData) {
                    documentData = { listeners: [] };
                    setRelatedData(doc, globalDataKey, documentData);
                }
                var listeners = documentData.listeners;
                if (listeners.length === 0) {
                    documentData.removeListener = addNodeListener(doc, function () {
                    });
                }
                listeners.push(listener);
                return function removeGlobalGroupListener() {
                    var documentData = getRelatedData(doc, globalDataKey);
                    if (!documentData) {
                        return;
                    }
                    var listeners = documentData.listeners;
                    eliminate(listeners, listener);
                    if (listeners.length === 0) {
                        documentData.removeListener();
                        deleteRelatedData(doc, globalDataKey);
                    }
                };
            });
        }
        function toMutationEvents(nodes) {
            var events = [];
            for (var i = 0; i < nodes.length; i++) {
                events.push({ target: nodes[i] });
            }
            return events;
        }
        var domMutationPrefix = 'domMutation';
        var insertionDataKey = domMutationPrefix + 'InsertionData';
        var removalDataKey = domMutationPrefix + 'RemovalData';
        var attributeChangeDataKey = domMutationPrefix + 'AttributeChangeData';
        var documentInsertionDataKey = domMutationPrefix + 'DocumentInsertionData';
        var documentRemovalDataKey = domMutationPrefix + 'DocumentRemovalData';
        var documentAttributeChangeDataKey = domMutationPrefix + 'DocumentAttributeChangeData';
        var treeDataKey = domMutationPrefix + 'TreeData';
        var attributeDataKey = domMutationPrefix + 'AttributeData';
        var dispatchInsertion = batch(dispatch(insertionDataKey, documentInsertionDataKey), true);
        var dispatchRemoval = batch(dispatch(removalDataKey, documentRemovalDataKey), true);
        var dispatchAttributeChange = batch(dispatch(attributeChangeDataKey, documentAttributeChangeDataKey));
        var addNodeInsertionListener = addNodeListener(insertionDataKey, treeDataKey);
        var addNodeRemovalListener = addNodeListener(removalDataKey, treeDataKey);
        var addNodeAttributeChangeListener = addNodeListener(attributeChangeDataKey, attributeDataKey, true);
        var addInsertionListener = addGlobalListener(documentInsertionDataKey, addNodeInsertionListener);
        var addRemovalListener = addGlobalListener(documentRemovalDataKey, addNodeRemovalListener);
        var addAttributeChangeListener = addGlobalListener(documentAttributeChangeDataKey, addNodeAttributeChangeListener);
        domMutate = {
            dispatchNodeInsertion: function (node, callback) {
                var events = toMutationEvents(getAllNodes(node));
                dispatchInsertion(events, callback);
            },
            dispatchNodeRemoval: function (node, callback) {
                var events = toMutationEvents(getAllNodes(node));
                dispatchRemoval(events, callback);
            },
            dispatchNodeAttributeChange: function (target, attributeName, oldValue, callback) {
                dispatchAttributeChange([{
                        target: target,
                        attributeName: attributeName,
                        oldValue: oldValue
                    }], callback);
            },
            onNodeInsertion: addNodeInsertionListener,
            onNodeRemoval: addNodeRemovalListener,
            onNodeAttributeChange: addNodeAttributeChangeListener,
            onRemoval: addRemovalListener,
            onInsertion: addInsertionListener,
            onAttributeChange: addAttributeChangeListener
        };
        module.exports = domMutate;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-control@4.2.0#can-control*/
define('can-control@4.2.0#can-control', [
    'require',
    'exports',
    'module',
    'can-construct',
    'can-namespace',
    'can-assign',
    'can-stache-key',
    'can-reflect',
    'can-observation',
    'can-event-queue/map/map',
    'can-log/dev/dev',
    'can-string',
    'can-key/get/get',
    'can-dom-mutate'
], function (require, exports, module) {
    'use strict';
    var Construct = require('can-construct');
    var namespace = require('can-namespace');
    var assign = require('can-assign');
    var observeReader = require('can-stache-key');
    var canReflect = require('can-reflect');
    var Observation = require('can-observation');
    var canEvent = require('can-event-queue/map/map');
    var dev = require('can-log/dev/dev');
    var string = require('can-string');
    var get = require('can-key/get/get');
    var domMutate = require('can-dom-mutate');
    var processors;
    var controlData = new WeakMap();
    var bind = function (el, ev, callback, queue) {
            canEvent.on.call(el, ev, callback, queue);
            return function () {
                canEvent.off.call(el, ev, callback, queue);
            };
        }, slice = [].slice, paramReplacer = /\{([^\}]+)\}/g, delegate = function (el, selector, ev, callback) {
            canEvent.on.call(el, ev, selector, callback);
            return function () {
                canEvent.off.call(el, ev, selector, callback);
            };
        }, binder = function (el, ev, callback, selector) {
            return selector ? delegate(el, selector.trim(), ev, callback) : bind(el, ev, callback);
        }, basicProcessor;
    var Control = Construct.extend('Control', {
        setup: function () {
            Construct.setup.apply(this, arguments);
            if (Control) {
                var control = this, funcName;
                control.actions = {};
                for (funcName in control.prototype) {
                    if (control._isAction(funcName)) {
                        control.actions[funcName] = control._action(funcName);
                    }
                }
            }
        },
        _shifter: function (context, name) {
            var method = typeof name === 'string' ? context[name] : name;
            if (typeof method !== 'function') {
                method = context[method];
            }
            var Control = this;
            function controlMethod() {
                var wrapped = Control.wrapElement(this);
                context.called = name;
                return method.apply(context, [wrapped].concat(slice.call(arguments, 0)));
            }
            return controlMethod;
        },
        _isAction: function (methodName) {
            var val = this.prototype[methodName], type = typeof val;
            return methodName !== 'constructor' && (type === 'function' || type === 'string' && typeof this.prototype[val] === 'function') && !!(Control.isSpecial(methodName) || processors[methodName] || /[^\w]/.test(methodName));
        },
        _action: function (methodName, options, controlInstance) {
            var readyCompute, unableToBind;
            paramReplacer.lastIndex = 0;
            if (options || !paramReplacer.test(methodName)) {
                var controlActionData = function () {
                    var delegate;
                    var name = methodName.replace(paramReplacer, function (matched, key) {
                        var value, parent;
                        if (this._isDelegate(options, key)) {
                            delegate = this._getDelegate(options, key);
                            return '';
                        }
                        key = this._removeDelegateFromKey(key);
                        parent = this._lookup(options)[0];
                        value = observeReader.read(parent, observeReader.reads(key), { readCompute: false }).value;
                        if (value === undefined && typeof window !== 'undefined') {
                            value = get(window, key);
                        }
                        if (!parent || !(canReflect.isObservableLike(parent) && canReflect.isMapLike(parent)) && !value) {
                            unableToBind = true;
                            return null;
                        }
                        if (typeof value === 'string') {
                            return value;
                        } else {
                            delegate = value;
                            return '';
                        }
                    }.bind(this));
                    name = name.trim();
                    var parts = name.split(/\s+/g), event = parts.pop();
                    return {
                        processor: this.processors[event] || basicProcessor,
                        parts: [
                            name,
                            parts.join(' '),
                            event
                        ],
                        delegate: delegate || undefined
                    };
                };
                readyCompute = new Observation(controlActionData, this);
                if (controlInstance) {
                    var handler = function (actionData) {
                        controlInstance._bindings.control[methodName](controlInstance.element);
                        controlInstance._bindings.control[methodName] = actionData.processor(actionData.delegate || controlInstance.element, actionData.parts[2], actionData.parts[1], methodName, controlInstance);
                    };
                    canReflect.onValue(readyCompute, handler, 'mutate');
                    controlInstance._bindings.readyComputes[methodName] = {
                        compute: readyCompute,
                        handler: handler
                    };
                }
                return readyCompute.get();
            }
        },
        _lookup: function (options) {
            return [
                options,
                window
            ];
        },
        _removeDelegateFromKey: function (key) {
            return key;
        },
        _isDelegate: function (options, key) {
            return key === 'element';
        },
        _getDelegate: function (options, key) {
            return undefined;
        },
        processors: {},
        defaults: {},
        convertElement: function (element) {
            element = typeof element === 'string' ? document.querySelector(element) : element;
            return this.wrapElement(element);
        },
        wrapElement: function (el) {
            return el;
        },
        unwrapElement: function (el) {
            return el;
        },
        isSpecial: function (eventName) {
            return eventName === 'inserted' || eventName === 'removed';
        }
    }, {
        setup: function (element, options) {
            var cls = this.constructor, pluginname = cls.pluginName || cls.shortName, arr;
            if (!element) {
                throw new Error('Creating an instance of a named control without passing an element');
            }
            this.element = cls.convertElement(element);
            if (pluginname && pluginname !== 'Control' && this.element.classList) {
                this.element.classList.add(pluginname);
            }
            arr = controlData.get(this.element);
            if (!arr) {
                arr = [];
                controlData.set(this.element, arr);
            }
            arr.push(this);
            if (canReflect.isObservableLike(options) && canReflect.isMapLike(options)) {
                for (var prop in cls.defaults) {
                    if (!options.hasOwnProperty(prop)) {
                        observeReader.set(options, prop, cls.defaults[prop]);
                    }
                }
                this.options = options;
            } else {
                this.options = assign(assign({}, cls.defaults), options);
            }
            this.on();
            return [
                this.element,
                this.options
            ];
        },
        on: function (el, selector, eventName, func) {
            if (!el) {
                this.off();
                var cls = this.constructor, bindings = this._bindings, actions = cls.actions, element = this.constructor.unwrapElement(this.element), destroyCB = Control._shifter(this, 'destroy'), funcName, ready;
                for (funcName in actions) {
                    if (actions.hasOwnProperty(funcName)) {
                        ready = actions[funcName] || cls._action(funcName, this.options, this);
                        if (ready) {
                            bindings.control[funcName] = ready.processor(ready.delegate || element, ready.parts[2], ready.parts[1], funcName, this);
                        }
                    }
                }
                var removalDisposal = domMutate.onNodeRemoval(element, function () {
                    if (!element.ownerDocument.contains(element)) {
                        destroyCB();
                    }
                });
                bindings.user.push(function () {
                    if (removalDisposal) {
                        removalDisposal();
                        removalDisposal = undefined;
                    }
                });
                return bindings.user.length;
            }
            if (typeof el === 'string') {
                func = eventName;
                eventName = selector;
                selector = el;
                el = this.element;
            }
            if (func === undefined) {
                func = eventName;
                eventName = selector;
                selector = null;
            }
            if (typeof func === 'string') {
                func = Control._shifter(this, func);
            }
            this._bindings.user.push(binder(el, eventName, func, selector));
            return this._bindings.user.length;
        },
        off: function () {
            var el = this.constructor.unwrapElement(this.element), bindings = this._bindings;
            if (bindings) {
                (bindings.user || []).forEach(function (value) {
                    value(el);
                });
                canReflect.eachKey(bindings.control || {}, function (value) {
                    value(el);
                });
                canReflect.eachKey(bindings.readyComputes || {}, function (value) {
                    canReflect.offValue(value.compute, value.handler, 'mutate');
                });
            }
            this._bindings = {
                user: [],
                control: {},
                readyComputes: {}
            };
        },
        destroy: function () {
            if (this.element === null) {
                return;
            }
            var Class = this.constructor, pluginName = Class.pluginName || Class.shortName && string.underscore(Class.shortName), controls;
            this.off();
            if (pluginName && pluginName !== 'can_control' && this.element.classList) {
                this.element.classList.remove(pluginName);
            }
            controls = controlData.get(this.element);
            if (controls) {
                controls.splice(controls.indexOf(this), 1);
            }
            this.element = null;
        }
    });
    processors = Control.processors;
    basicProcessor = function (el, event, selector, methodName, control) {
        return binder(el, event, Control._shifter(control, methodName), selector);
    };
    [
        'beforeremove',
        'change',
        'click',
        'contextmenu',
        'dblclick',
        'keydown',
        'keyup',
        'keypress',
        'mousedown',
        'mousemove',
        'mouseout',
        'mouseover',
        'mouseup',
        'reset',
        'resize',
        'scroll',
        'select',
        'submit',
        'focusin',
        'focusout',
        'mouseenter',
        'mouseleave',
        'touchstart',
        'touchmove',
        'touchcancel',
        'touchend',
        'touchleave',
        'inserted',
        'removed',
        'dragstart',
        'dragenter',
        'dragover',
        'dragleave',
        'drag',
        'drop',
        'dragend'
    ].forEach(function (v) {
        processors[v] = basicProcessor;
    });
    module.exports = namespace.Control = Control;
});
/*can-construct-super@3.2.0#can-construct-super*/
define('can-construct-super@3.2.0#can-construct-super', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-construct'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var canReflect = require('can-reflect');
        var Construct = require('can-construct');
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var isFunction = function (val) {
                return typeof val === 'function';
            }, fnTest = /xyz/.test(function () {
                return this.xyz;
            }) ? /\b_super\b/ : /.*/, getset = [
                'get',
                'set'
            ], getSuper = function (base, name, fn) {
                return function () {
                    var hasExistingValue = false;
                    var existingValue;
                    var prototype = getPrototypeOf(this);
                    var existingPrototypeValue = prototype._super;
                    if (hasOwnProperty.call(this, '_super')) {
                        hasExistingValue = true;
                        existingValue = this._super;
                        delete this._super;
                    }
                    prototype._super = base[name];
                    var ret = fn.apply(this, arguments);
                    prototype._super = existingPrototypeValue;
                    if (hasExistingValue) {
                        this._super = existingValue;
                    }
                    return ret;
                };
            };
        Construct._defineProperty = function (addTo, base, name, descriptor) {
            var _super = Object.getOwnPropertyDescriptor(base, name);
            if (_super) {
                canReflect.each(getset, function (method) {
                    if (isFunction(_super[method]) && isFunction(descriptor[method])) {
                        descriptor[method] = getSuper(_super, method, descriptor[method]);
                    } else if (!isFunction(descriptor[method])) {
                        descriptor[method] = _super[method];
                    }
                });
            }
            Object.defineProperty(addTo, name, descriptor);
        };
        var getPrototypeOf = Object.getPrototypeOf || function (obj) {
            return obj.__proto__;
        };
        var getPropertyDescriptor = Object.getPropertyDescriptor || function (subject, name) {
            if (name in subject) {
                var pd = Object.getOwnPropertyDescriptor(subject, name);
                var proto = getPrototypeOf(subject);
                while (pd === undefined && proto !== null) {
                    pd = Object.getOwnPropertyDescriptor(proto, name);
                    proto = getPrototypeOf(proto);
                }
                return pd;
            }
        };
        Construct._overwrite = function (addTo, base, name, val) {
            var baseDescriptor = getPropertyDescriptor(base, name);
            var baseValue = baseDescriptor && baseDescriptor.value;
            Object.defineProperty(addTo, name, {
                value: isFunction(val) && isFunction(baseValue) && fnTest.test(val) ? getSuper(base, name, val) : val,
                configurable: true,
                enumerable: true,
                writable: true
            });
        };
        module.exports = Construct;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*passbolt-mad@2.10.0#control/control*/
define('passbolt-mad@2.10.0#control/control', [
    'exports',
    'jquery',
    'can-control',
    'uuid/v4',
    'can-construct-super'
], function (exports, _jquery, _canControl, _v) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _jquery2 = _interopRequireDefault(_jquery);
    var _canControl2 = _interopRequireDefault(_canControl);
    var _v2 = _interopRequireDefault(_v);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Control = _canControl2.default.extend('mad.Control', {
        init: function init(el, options) {
            if (!el || !(0, _jquery2.default)(el).length) {
                throw new Error('The parameter "el" (' + el + ') should refer to an existing DOM node.');
            }
            if (!options.id || options.id == null || options.id == '') {
                var elId = (0, _jquery2.default)(this.element).attr('id');
                if (elId && elId != '') {
                    options.id = elId;
                } else {
                    options.id = (0, _v2.default)();
                    (0, _jquery2.default)(this.element).attr('id', options.id);
                }
            } else {
                (0, _jquery2.default)(this.element).attr('id', options.id);
            }
            this.id = options.id;
        },
        getClass: function getClass() {
            return this.constructor;
        },
        getId: function getId() {
            return this.options.id;
        },
        remove: function remove() {
            (0, _jquery2.default)(this.element).remove();
        }
    });
    exports.default = Control;
});
/*passbolt-mad@2.10.0#helper/html*/
define('passbolt-mad@2.10.0#helper/html', [
    'exports',
    'jquery',
    'can-construct'
], function (exports, _jquery, _canConstruct) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _jquery2 = _interopRequireDefault(_jquery);
    var _canConstruct2 = _interopRequireDefault(_canConstruct);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var HtmlHelper = _canConstruct2.default.extend('mad.helper.Html', {
        position: function position(el, options) {
            if (typeof options.coordinates != 'undefined') {
                el.css({
                    position: 'absolute',
                    left: options.coordinates.x + 'px',
                    top: options.coordinates.y + 'px'
                });
            } else if (typeof options.reference != 'undefined') {
                el.position({
                    my: options.reference.my,
                    at: options.reference.at,
                    of: options.reference.of
                });
            }
        },
        create: function create(refElement, position, content) {
            var returnValue = null;
            var element = (0, _jquery2.default)(content);
            if (refElement.length == 0) {
                throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'refElement');
            }
            switch (position) {
            case 'inside_replace':
                refElement.empty();
                returnValue = element.prependTo(refElement);
                break;
            case 'replace_with':
                refElement.replaceWith(element);
                returnValue = element;
                break;
            case 'first':
                returnValue = element.prependTo(refElement);
                break;
            case 'last':
                returnValue = element.appendTo(refElement);
                break;
            case 'before':
                returnValue = element.insertBefore(refElement);
                break;
            case 'after':
                returnValue = element.insertAfter(refElement);
                break;
            default:
                throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'position');
            }
            return returnValue;
        }
    }, {});
    exports.default = HtmlHelper;
});
/*can-attribute-encoder@1.1.0#can-attribute-encoder*/
define('can-attribute-encoder@1.1.0#can-attribute-encoder', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-log/dev/dev'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var dev = require('can-log/dev/dev');
    function each(items, callback) {
        for (var i = 0; i < items.length; i++) {
            callback(items[i], i);
        }
    }
    function makeMap(str) {
        var obj = {}, items = str.split(',');
        each(items, function (name) {
            obj[name] = true;
        });
        return obj;
    }
    var caseMattersAttributes = makeMap('allowReorder,attributeName,attributeType,autoReverse,baseFrequency,baseProfile,calcMode,clipPathUnits,contentScriptType,contentStyleType,diffuseConstant,edgeMode,externalResourcesRequired,filterRes,filterUnits,glyphRef,gradientTransform,gradientUnits,kernelMatrix,kernelUnitLength,keyPoints,keySplines,keyTimes,lengthAdjust,limitingConeAngle,markerHeight,markerUnits,markerWidth,maskContentUnits,maskUnits,patternContentUnits,patternTransform,patternUnits,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,repeatCount,repeatDur,requiredExtensions,requiredFeatures,specularConstant,specularExponent,spreadMethod,startOffset,stdDeviation,stitchTiles,surfaceScale,systemLanguage,tableValues,textLength,viewBox,viewTarget,xChannelSelector,yChannelSelector');
    function camelCaseToSpinalCase(match, lowerCaseChar, upperCaseChar) {
        return lowerCaseChar + '-' + upperCaseChar.toLowerCase();
    }
    function startsWith(allOfIt, startsWith) {
        return allOfIt.indexOf(startsWith) === 0;
    }
    function endsWith(allOfIt, endsWith) {
        return allOfIt.length - allOfIt.indexOf(endsWith) === endsWith.length;
    }
    var regexes = {
        leftParens: /\(/g,
        rightParens: /\)/g,
        leftBrace: /\{/g,
        rightBrace: /\}/g,
        camelCase: /([a-z]|^)([A-Z])/g,
        forwardSlash: /\//g,
        space: /\s/g,
        uppercase: /[A-Z]/g,
        uppercaseDelimiterThenChar: /:u:([a-z])/g,
        caret: /\^/g,
        dollar: /\$/g,
        at: /@/g
    };
    var delimiters = {
        prependUppercase: ':u:',
        replaceSpace: ':s:',
        replaceForwardSlash: ':f:',
        replaceLeftParens: ':lp:',
        replaceRightParens: ':rp:',
        replaceLeftBrace: ':lb:',
        replaceRightBrace: ':rb:',
        replaceCaret: ':c:',
        replaceDollar: ':d:',
        replaceAt: ':at:'
    };
    var encoder = {};
    encoder.encode = function (name) {
        var encoded = name;
        if (!caseMattersAttributes[encoded] && encoded.match(regexes.camelCase)) {
            if (startsWith(encoded, 'on:') || endsWith(encoded, ':to') || endsWith(encoded, ':from') || endsWith(encoded, ':bind') || endsWith(encoded, ':raw')) {
                encoded = encoded.replace(regexes.uppercase, function (char) {
                    return delimiters.prependUppercase + char.toLowerCase();
                });
            } else if (startsWith(encoded, '(') || startsWith(encoded, '{')) {
                encoded = encoded.replace(regexes.camelCase, camelCaseToSpinalCase);
            }
        }
        encoded = encoded.replace(regexes.space, delimiters.replaceSpace).replace(regexes.forwardSlash, delimiters.replaceForwardSlash).replace(regexes.leftParens, delimiters.replaceLeftParens).replace(regexes.rightParens, delimiters.replaceRightParens).replace(regexes.leftBrace, delimiters.replaceLeftBrace).replace(regexes.rightBrace, delimiters.replaceRightBrace).replace(regexes.caret, delimiters.replaceCaret).replace(regexes.dollar, delimiters.replaceDollar).replace(regexes.at, delimiters.replaceAt);
        return encoded;
    };
    encoder.decode = function (name) {
        var decoded = name;
        if (!caseMattersAttributes[decoded] && decoded.match(regexes.uppercaseDelimiterThenChar)) {
            if (startsWith(decoded, 'on:') || endsWith(decoded, ':to') || endsWith(decoded, ':from') || endsWith(decoded, ':bind') || endsWith(decoded, ':raw')) {
                decoded = decoded.replace(regexes.uppercaseDelimiterThenChar, function (match, char) {
                    return char.toUpperCase();
                });
            }
        }
        decoded = decoded.replace(delimiters.replaceLeftParens, '(').replace(delimiters.replaceRightParens, ')').replace(delimiters.replaceLeftBrace, '{').replace(delimiters.replaceRightBrace, '}').replace(delimiters.replaceForwardSlash, '/').replace(delimiters.replaceSpace, ' ').replace(delimiters.replaceCaret, '^').replace(delimiters.replaceDollar, '$').replace(delimiters.replaceAt, '@');
        return decoded;
    };
    if (namespace.encoder) {
        throw new Error('You can\'t have two versions of can-attribute-encoder, check your dependencies');
    } else {
        module.exports = namespace.encoder = encoder;
    }
});
/*can-view-parser@4.1.0#can-view-parser*/
define('can-view-parser@4.1.0#can-view-parser', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-log/dev/dev',
    'can-attribute-encoder'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace'), dev = require('can-log/dev/dev'), encoder = require('can-attribute-encoder');
    function each(items, callback) {
        for (var i = 0; i < items.length; i++) {
            callback(items[i], i);
        }
    }
    function makeMap(str) {
        var obj = {}, items = str.split(',');
        each(items, function (name) {
            obj[name] = true;
        });
        return obj;
    }
    function handleIntermediate(intermediate, handler) {
        for (var i = 0, len = intermediate.length; i < len; i++) {
            var item = intermediate[i];
            handler[item.tokenType].apply(handler, item.args);
        }
        return intermediate;
    }
    var alphaNumeric = 'A-Za-z0-9', alphaNumericHU = '-:_' + alphaNumeric, magicStart = '{{', endTag = new RegExp('^<\\/([' + alphaNumericHU + ']+)[^>]*>'), magicMatch = new RegExp('\\{\\{(![\\s\\S]*?!|[\\s\\S]*?)\\}\\}\\}?', 'g'), space = /\s/, alphaRegex = new RegExp('[' + alphaNumeric + ']'), attributeRegexp = new RegExp('[' + alphaNumericHU + ']+s*=s*("[^"]*"|\'[^\']*\')');
    var empty = makeMap('area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed');
    var caseMattersElements = makeMap('altGlyph,altGlyphDef,altGlyphItem,animateColor,animateMotion,animateTransform,clipPath,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,foreignObject,glyphRef,linearGradient,radialGradient,textPath');
    var closeSelf = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr');
    var special = makeMap('script');
    var tokenTypes = 'start,end,close,attrStart,attrEnd,attrValue,chars,comment,special,done'.split(',');
    var startOppositesMap = {
        '{': '}',
        '(': ')'
    };
    var fn = function () {
    };
    var HTMLParser = function (html, handler, returnIntermediate) {
        if (typeof html === 'object') {
            return handleIntermediate(html, handler);
        }
        var intermediate = [];
        handler = handler || {};
        if (returnIntermediate) {
            each(tokenTypes, function (name) {
                var callback = handler[name] || fn;
                handler[name] = function () {
                    if (callback.apply(this, arguments) !== false) {
                        var end = arguments.length;
                        if (arguments[end - 1] === undefined) {
                            end = arguments.length - 1;
                        }
                        intermediate.push({
                            tokenType: name,
                            args: [].slice.call(arguments, 0, end)
                        });
                    }
                };
            });
        }
        function parseStartTag(tag, tagName, rest, unary) {
            tagName = caseMattersElements[tagName] ? tagName : tagName.toLowerCase();
            if (closeSelf[tagName] && stack.last() === tagName) {
                parseEndTag('', tagName);
            }
            unary = empty[tagName] || !!unary;
            handler.start(tagName, unary, lineNo);
            if (!unary) {
                stack.push(tagName);
            }
            HTMLParser.parseAttrs(rest, handler, lineNo);
            handler.end(tagName, unary, lineNo);
        }
        function parseEndTag(tag, tagName) {
            var pos;
            if (!tagName) {
                pos = 0;
            } else {
                tagName = caseMattersElements[tagName] ? tagName : tagName.toLowerCase();
                for (pos = stack.length - 1; pos >= 0; pos--) {
                    if (stack[pos] === tagName) {
                        break;
                    }
                }
            }
            if (pos >= 0) {
                for (var i = stack.length - 1; i >= pos; i--) {
                    if (handler.close) {
                        handler.close(stack[i], lineNo);
                    }
                }
                stack.length = pos;
            }
        }
        function parseMustache(mustache, inside) {
            if (handler.special) {
                handler.special(inside, lineNo);
            }
        }
        var callChars = function () {
            if (charsText) {
                if (handler.chars) {
                    handler.chars(charsText, lineNo);
                }
            }
            charsText = '';
        };
        var index, chars, match, lineNo, stack = [], last = html, charsText = '';
        stack.last = function () {
            return this[this.length - 1];
        };
        while (html) {
            chars = true;
            if (!stack.last() || !special[stack.last()]) {
                if (html.indexOf('<!--') === 0) {
                    index = html.indexOf('-->');
                    if (index >= 0) {
                        callChars();
                        if (handler.comment) {
                            handler.comment(html.substring(4, index), lineNo);
                        }
                        html = html.substring(index + 3);
                        chars = false;
                    }
                } else if (html.indexOf('</') === 0) {
                    match = html.match(endTag);
                    if (match) {
                        callChars();
                        match[0].replace(endTag, parseEndTag);
                        html = html.substring(match[0].length);
                        chars = false;
                    }
                } else if (html.indexOf('<') === 0) {
                    var res = HTMLParser.searchStartTag(html);
                    if (res) {
                        callChars();
                        parseStartTag.apply(null, res.match);
                        html = res.html;
                        chars = false;
                    }
                } else if (html.indexOf(magicStart) === 0) {
                    match = html.match(magicMatch);
                    if (match) {
                        callChars();
                        match[0].replace(magicMatch, parseMustache);
                        html = html.substring(match[0].length);
                    }
                }
                if (chars) {
                    index = findBreak(html, magicStart);
                    if (index === 0 && html === last) {
                        charsText += html.charAt(0);
                        html = html.substr(1);
                        index = findBreak(html, magicStart);
                    }
                    var text = index < 0 ? html : html.substring(0, index);
                    html = index < 0 ? '' : html.substring(index);
                    if (text) {
                        charsText += text;
                    }
                }
            } else {
                html = html.replace(new RegExp('([\\s\\S]*?)</' + stack.last() + '[^>]*>'), function (all, text) {
                    text = text.replace(/<!--([\s\S]*?)-->|<!\[CDATA\[([\s\S]*?)]]>/g, '$1$2');
                    if (handler.chars) {
                        handler.chars(text, lineNo);
                    }
                    return '';
                });
                parseEndTag('', stack.last());
            }
            if (html === last) {
                throw new Error('Parse Error: ' + html);
            }
            last = html;
        }
        callChars();
        parseEndTag();
        handler.done(lineNo);
        return intermediate;
    };
    var callAttrStart = function (state, curIndex, handler, rest, lineNo) {
        var attrName = rest.substring(typeof state.nameStart === 'number' ? state.nameStart : curIndex, curIndex), newAttrName = encoder.encode(attrName);
        state.attrStart = newAttrName;
        handler.attrStart(state.attrStart, lineNo);
        state.inName = false;
    };
    var callAttrEnd = function (state, curIndex, handler, rest, lineNo) {
        if (state.valueStart !== undefined && state.valueStart < curIndex) {
            var val = rest.substring(state.valueStart, curIndex);
            handler.attrValue(val, lineNo);
        }
        handler.attrEnd(state.attrStart, lineNo);
        state.attrStart = undefined;
        state.valueStart = undefined;
        state.inValue = false;
        state.inName = false;
        state.lookingForEq = false;
        state.inQuote = false;
        state.lookingForName = true;
    };
    var findBreak = function (str, magicStart) {
        var magicLength = magicStart.length;
        for (var i = 0, len = str.length; i < len; i++) {
            if (str[i] === '<' || str.substr(i, magicLength) === magicStart) {
                return i;
            }
        }
        return -1;
    };
    HTMLParser.parseAttrs = function (rest, handler, lineNo) {
        if (!rest) {
            return;
        }
        var i = 0;
        var curIndex;
        var state = {
            inName: false,
            nameStart: undefined,
            inValue: false,
            valueStart: undefined,
            inQuote: false,
            attrStart: undefined,
            lookingForName: true,
            lookingForValue: false,
            lookingForEq: false
        };
        while (i < rest.length) {
            curIndex = i;
            var cur = rest.charAt(i);
            i++;
            if (magicStart === rest.substr(curIndex, magicStart.length)) {
                if (state.inValue && curIndex > state.valueStart) {
                    handler.attrValue(rest.substring(state.valueStart, curIndex), lineNo);
                } else if (state.inName && state.nameStart < curIndex) {
                    callAttrStart(state, curIndex, handler, rest, lineNo);
                    callAttrEnd(state, curIndex, handler, rest, lineNo);
                } else if (state.lookingForValue) {
                    state.inValue = true;
                } else if (state.lookingForEq && state.attrStart) {
                    callAttrEnd(state, curIndex, handler, rest, lineNo);
                }
                magicMatch.lastIndex = curIndex;
                var match = magicMatch.exec(rest);
                if (match) {
                    handler.special(match[1], lineNo);
                    i = curIndex + match[0].length;
                    if (state.inValue) {
                        state.valueStart = curIndex + match[0].length;
                    }
                }
            } else if (state.inValue) {
                if (state.inQuote) {
                    if (cur === state.inQuote) {
                        callAttrEnd(state, curIndex, handler, rest, lineNo);
                    }
                } else if (space.test(cur)) {
                    callAttrEnd(state, curIndex, handler, rest, lineNo);
                }
            } else if (cur === '=' && (state.lookingForEq || state.lookingForName || state.inName)) {
                if (!state.attrStart) {
                    callAttrStart(state, curIndex, handler, rest, lineNo);
                }
                state.lookingForValue = true;
                state.lookingForEq = false;
                state.lookingForName = false;
            } else if (state.inName) {
                var started = rest[state.nameStart], otherStart, otherOpposite;
                if (startOppositesMap[started] === cur) {
                    otherStart = started === '{' ? '(' : '{';
                    otherOpposite = startOppositesMap[otherStart];
                    if (rest[curIndex + 1] === otherOpposite) {
                        callAttrStart(state, curIndex + 2, handler, rest, lineNo);
                        i++;
                    } else {
                        callAttrStart(state, curIndex + 1, handler, rest, lineNo);
                    }
                    state.lookingForEq = true;
                } else if (space.test(cur) && started !== '{' && started !== '(') {
                    callAttrStart(state, curIndex, handler, rest, lineNo);
                    state.lookingForEq = true;
                }
            } else if (state.lookingForName) {
                if (!space.test(cur)) {
                    if (state.attrStart) {
                        callAttrEnd(state, curIndex, handler, rest, lineNo);
                    }
                    state.nameStart = curIndex;
                    state.inName = true;
                }
            } else if (state.lookingForValue) {
                if (!space.test(cur)) {
                    state.lookingForValue = false;
                    state.inValue = true;
                    if (cur === '\'' || cur === '"') {
                        state.inQuote = cur;
                        state.valueStart = curIndex + 1;
                    } else {
                        state.valueStart = curIndex;
                    }
                } else if (i === rest.length) {
                    callAttrEnd(state, curIndex, handler, rest, lineNo);
                }
            }
        }
        if (state.inName) {
            callAttrStart(state, curIndex + 1, handler, rest, lineNo);
            callAttrEnd(state, curIndex + 1, handler, rest, lineNo);
        } else if (state.lookingForEq || state.lookingForValue || state.inValue) {
            callAttrEnd(state, curIndex + 1, handler, rest, lineNo);
        }
        magicMatch.lastIndex = 0;
    };
    HTMLParser.searchStartTag = function (html) {
        var closingIndex = html.indexOf('>');
        var attributeRange = attributeRegexp.exec(html.substring(1));
        var afterAttributeOffset = 1;
        while (attributeRange && closingIndex >= afterAttributeOffset + attributeRange.index) {
            afterAttributeOffset += attributeRange.index + attributeRange[0].length;
            while (closingIndex < afterAttributeOffset) {
                closingIndex += html.substring(closingIndex + 1).indexOf('>') + 1;
            }
            attributeRange = attributeRegexp.exec(html.substring(afterAttributeOffset));
        }
        if (closingIndex === -1 || !alphaRegex.test(html[1])) {
            return null;
        }
        var tagName, tagContent, match, rest = '', unary = '';
        var startTag = html.substring(0, closingIndex + 1);
        var isUnary = startTag[startTag.length - 2] === '/';
        var spaceIndex = startTag.search(space);
        if (isUnary) {
            unary = '/';
            tagContent = startTag.substring(1, startTag.length - 2).trim();
        } else {
            tagContent = startTag.substring(1, startTag.length - 1).trim();
        }
        if (spaceIndex === -1) {
            tagName = tagContent;
        } else {
            spaceIndex--;
            tagName = tagContent.substring(0, spaceIndex);
            rest = tagContent.substring(spaceIndex);
        }
        match = [
            startTag,
            tagName,
            rest,
            unary
        ];
        return {
            match: match,
            html: html.substring(startTag.length)
        };
    };
    module.exports = namespace.HTMLParser = HTMLParser;
});
/*can-dom-mutate@1.1.0#node*/
define('can-dom-mutate@1.1.0#node', [
    'require',
    'exports',
    'module',
    'can-globals',
    './can-dom-mutate',
    './-util'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('can-globals');
        var domMutate = require('./can-dom-mutate');
        var util = require('./-util');
        var isInDocument = util.isInDocument;
        var getParents = util.getParents;
        var synthetic = {
            dispatchNodeInsertion: function (container, node) {
                if (isInDocument(node)) {
                    domMutate.dispatchNodeInsertion(node);
                }
            },
            dispatchNodeRemoval: function (container, node) {
                if (isInDocument(container) && !isInDocument(node)) {
                    domMutate.dispatchNodeRemoval(node);
                }
            }
        };
        var compat = {
            replaceChild: function (newChild, oldChild) {
                var newChildren = getParents(newChild);
                var result = this.replaceChild(newChild, oldChild);
                synthetic.dispatchNodeRemoval(this, oldChild);
                for (var i = 0; i < newChildren.length; i++) {
                    synthetic.dispatchNodeInsertion(this, newChildren[i]);
                }
                return result;
            },
            setAttribute: function (name, value) {
                var oldAttributeValue = this.getAttribute(name);
                var result = this.setAttribute(name, value);
                var newAttributeValue = this.getAttribute(name);
                if (oldAttributeValue !== newAttributeValue) {
                    domMutate.dispatchNodeAttributeChange(this, name, oldAttributeValue);
                }
                return result;
            },
            removeAttribute: function (name) {
                var oldAttributeValue = this.getAttribute(name);
                var result = this.removeAttribute(name);
                if (oldAttributeValue) {
                    domMutate.dispatchNodeAttributeChange(this, name, oldAttributeValue);
                }
                return result;
            }
        };
        var compatData = [
            [
                'appendChild',
                'Insertion'
            ],
            [
                'insertBefore',
                'Insertion'
            ],
            [
                'removeChild',
                'Removal'
            ]
        ];
        compatData.forEach(function (pair) {
            var nodeMethod = pair[0];
            var dispatchMethod = 'dispatchNode' + pair[1];
            compat[nodeMethod] = function (node) {
                var nodes = getParents(node);
                var result = this[nodeMethod].apply(this, arguments);
                for (var i = 0; i < nodes.length; i++) {
                    synthetic[dispatchMethod](this, nodes[i]);
                }
                return result;
            };
        });
        var normal = {};
        var nodeMethods = [
            'appendChild',
            'insertBefore',
            'removeChild',
            'replaceChild',
            'setAttribute',
            'removeAttribute'
        ];
        nodeMethods.forEach(function (methodName) {
            normal[methodName] = function () {
                return this[methodName].apply(this, arguments);
            };
        });
        var mutate = {};
        function setMutateStrategy(observer) {
            var strategy = observer ? normal : compat;
            for (var key in strategy) {
                mutate[key] = strategy[key];
            }
        }
        var mutationObserverKey = 'MutationObserver';
        setMutateStrategy(globals.getKeyValue(mutationObserverKey));
        globals.onKeyValue(mutationObserverKey, setMutateStrategy);
        module.exports = mutate;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-view-nodelist@4.3.0#can-view-nodelist*/
define('can-view-nodelist@4.3.0#can-view-nodelist', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-dom-mutate/node'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var domMutate = require('can-dom-mutate/node');
    var nodeMap = new Map(), splice = [].splice, push = [].push, itemsInChildListTree = function (list) {
            var count = 0;
            for (var i = 0, len = list.length; i < len; i++) {
                var item = list[i];
                if (item.nodeType) {
                    count++;
                } else {
                    count += itemsInChildListTree(item);
                }
            }
            return count;
        }, replacementMap = function (replacements) {
            var map = new Map();
            for (var i = 0, len = replacements.length; i < len; i++) {
                var node = nodeLists.first(replacements[i]);
                map.set(node, replacements[i]);
            }
            return map;
        }, addUnfoundAsDeepChildren = function (list, rMap) {
            rMap.forEach(function (replacement) {
                list.newDeepChildren.push(replacement);
            });
        };
    var nodeLists = {
        update: function (nodeList, newNodes, oldNodes) {
            if (!oldNodes) {
                oldNodes = nodeLists.unregisterChildren(nodeList);
            }
            var arr = [];
            for (var i = 0, ref = arr.length = newNodes.length; i < ref; i++) {
                arr[i] = newNodes[i];
            }
            newNodes = arr;
            var oldListLength = nodeList.length;
            splice.apply(nodeList, [
                0,
                oldListLength
            ].concat(newNodes));
            if (nodeList.replacements) {
                nodeLists.nestReplacements(nodeList);
                nodeList.deepChildren = nodeList.newDeepChildren;
                nodeList.newDeepChildren = [];
            } else {
                nodeLists.nestList(nodeList);
            }
            return oldNodes;
        },
        nestReplacements: function (list) {
            var index = 0, rMap = replacementMap(list.replacements), rCount = list.replacements.length;
            while (index < list.length && rCount) {
                var node = list[index], replacement = rMap.get(node);
                if (replacement) {
                    rMap['delete'](node);
                    list.splice(index, itemsInChildListTree(replacement), replacement);
                    rCount--;
                }
                index++;
            }
            if (rCount) {
                addUnfoundAsDeepChildren(list, rMap);
            }
            list.replacements = [];
        },
        nestList: function (list) {
            var index = 0;
            while (index < list.length) {
                var node = list[index], childNodeList = nodeMap.get(node);
                if (childNodeList) {
                    if (childNodeList !== list) {
                        list.splice(index, itemsInChildListTree(childNodeList), childNodeList);
                    }
                } else {
                    nodeMap.set(node, list);
                }
                index++;
            }
        },
        last: function (nodeList) {
            var last = nodeList[nodeList.length - 1];
            if (last.nodeType) {
                return last;
            } else {
                return nodeLists.last(last);
            }
        },
        first: function (nodeList) {
            var first = nodeList[0];
            if (first.nodeType) {
                return first;
            } else {
                return nodeLists.first(first);
            }
        },
        flatten: function (nodeList) {
            var items = [];
            for (var i = 0; i < nodeList.length; i++) {
                var item = nodeList[i];
                if (item.nodeType) {
                    items.push(item);
                } else {
                    items.push.apply(items, nodeLists.flatten(item));
                }
            }
            return items;
        },
        register: function (nodeList, unregistered, parent, directlyNested) {
            nodeList.unregistered = unregistered;
            nodeList.parentList = parent;
            nodeList.nesting = parent && typeof parent.nesting !== 'undefined' ? parent.nesting + 1 : 0;
            if (parent) {
                nodeList.deepChildren = [];
                nodeList.newDeepChildren = [];
                nodeList.replacements = [];
                if (parent !== true) {
                    if (directlyNested) {
                        parent.replacements.push(nodeList);
                    } else {
                        parent.newDeepChildren.push(nodeList);
                    }
                }
            } else {
                nodeLists.nestList(nodeList);
            }
            return nodeList;
        },
        unregisterChildren: function (nodeList) {
            var nodes = [];
            for (var n = 0; n < nodeList.length; n++) {
                var node = nodeList[n];
                if (node.nodeType) {
                    if (!nodeList.replacements) {
                        nodeMap['delete'](node);
                    }
                    nodes.push(node);
                } else {
                    push.apply(nodes, nodeLists.unregister(node, true));
                }
            }
            var deepChildren = nodeList.deepChildren;
            if (deepChildren) {
                for (var l = 0; l < deepChildren.length; l++) {
                    nodeLists.unregister(deepChildren[l], true);
                }
            }
            return nodes;
        },
        unregister: function (nodeList, isChild) {
            var nodes = nodeLists.unregisterChildren(nodeList, true);
            nodeList.isUnregistered = true;
            if (nodeList.unregistered) {
                var unregisteredCallback = nodeList.unregistered;
                nodeList.replacements = nodeList.unregistered = null;
                if (!isChild) {
                    var deepChildren = nodeList.parentList && nodeList.parentList.deepChildren;
                    if (deepChildren) {
                        var index = deepChildren.indexOf(nodeList);
                        if (index !== -1) {
                            deepChildren.splice(index, 1);
                        }
                    }
                }
                unregisteredCallback();
            }
            return nodes;
        },
        after: function (oldElements, newFrag) {
            var last = oldElements[oldElements.length - 1];
            if (last.nextSibling) {
                domMutate.insertBefore.call(last.parentNode, newFrag, last.nextSibling);
            } else {
                domMutate.appendChild.call(last.parentNode, newFrag);
            }
        },
        replace: function (oldElements, newFrag) {
            var selectedValue, parentNode = oldElements[0].parentNode;
            if (parentNode.nodeName.toUpperCase() === 'SELECT' && parentNode.selectedIndex >= 0) {
                selectedValue = parentNode.value;
            }
            if (oldElements.length === 1) {
                domMutate.replaceChild.call(parentNode, newFrag, oldElements[0]);
            } else {
                nodeLists.after(oldElements, newFrag);
                nodeLists.remove(oldElements);
            }
            if (selectedValue !== undefined) {
                parentNode.value = selectedValue;
            }
        },
        remove: function (elementsToBeRemoved) {
            var parent = elementsToBeRemoved[0] && elementsToBeRemoved[0].parentNode;
            for (var i = 0; i < elementsToBeRemoved.length; i++) {
                domMutate.removeChild.call(parent, elementsToBeRemoved[i]);
            }
        },
        nodeMap: nodeMap
    };
    module.exports = namespace.nodeLists = nodeLists;
});
/*can-child-nodes@1.2.0#can-child-nodes*/
define('can-child-nodes@1.2.0#can-child-nodes', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    function childNodes(node) {
        var childNodes = node.childNodes;
        if ('length' in childNodes) {
            return childNodes;
        } else {
            var cur = node.firstChild;
            var nodes = [];
            while (cur) {
                nodes.push(cur);
                cur = cur.nextSibling;
            }
            return nodes;
        }
    }
    module.exports = namespace.childNodes = childNodes;
});
/*can-fragment@1.3.0#can-fragment*/
define('can-fragment@1.3.0#can-fragment', [
    'require',
    'exports',
    'module',
    'can-globals/document/document',
    'can-namespace',
    'can-reflect',
    'can-child-nodes',
    'can-symbol'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getDocument = require('can-globals/document/document');
        var namespace = require('can-namespace');
        var canReflect = require('can-reflect');
        var childNodes = require('can-child-nodes');
        var canSymbol = require('can-symbol');
        var fragmentRE = /^\s*<(\w+)[^>]*>/, toString = {}.toString, toDOMSymbol = canSymbol.for('can.toDOM');
        function makeFragment(html, name, doc) {
            if (name === undefined) {
                name = fragmentRE.test(html) && RegExp.$1;
            }
            if (html && toString.call(html.replace) === '[object Function]') {
                html = html.replace(/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, '<$1></$2>');
            }
            var container = doc.createElement('div'), temp = doc.createElement('div');
            if (name === 'tbody' || name === 'tfoot' || name === 'thead' || name === 'colgroup') {
                temp.innerHTML = '<table>' + html + '</table>';
                container = temp.firstChild.nodeType === 3 ? temp.lastChild : temp.firstChild;
            } else if (name === 'col') {
                temp.innerHTML = '<table><colgroup>' + html + '</colgroup></table>';
                container = temp.firstChild.nodeType === 3 ? temp.lastChild : temp.firstChild.firstChild;
            } else if (name === 'tr') {
                temp.innerHTML = '<table><tbody>' + html + '</tbody></table>';
                container = temp.firstChild.nodeType === 3 ? temp.lastChild : temp.firstChild.firstChild;
            } else if (name === 'td' || name === 'th') {
                temp.innerHTML = '<table><tbody><tr>' + html + '</tr></tbody></table>';
                container = temp.firstChild.nodeType === 3 ? temp.lastChild : temp.firstChild.firstChild.firstChild;
            } else if (name === 'option') {
                temp.innerHTML = '<select>' + html + '</select>';
                container = temp.firstChild.nodeType === 3 ? temp.lastChild : temp.firstChild;
            } else {
                container.innerHTML = '' + html;
            }
            return [].slice.call(childNodes(container));
        }
        function fragment(html, doc) {
            if (html && html.nodeType === 11) {
                return html;
            }
            if (!doc) {
                doc = getDocument();
            } else if (doc.length) {
                doc = doc[0];
            }
            var parts = makeFragment(html, undefined, doc), frag = (doc || document).createDocumentFragment();
            for (var i = 0, length = parts.length; i < length; i++) {
                frag.appendChild(parts[i]);
            }
            return frag;
        }
        var makeFrag = function (item, doc) {
            var document = doc || getDocument();
            var frag;
            if (!item || typeof item === 'string') {
                frag = fragment(item == null ? '' : '' + item, document);
            } else if (typeof item[toDOMSymbol] === 'function') {
                return makeFrag(item[toDOMSymbol]());
            } else if (item.nodeType === 11) {
                return item;
            } else if (typeof item.nodeType === 'number') {
                frag = document.createDocumentFragment();
                frag.appendChild(item);
                return frag;
            } else if (canReflect.isListLike(item)) {
                frag = document.createDocumentFragment();
                canReflect.eachIndex(item, function (item) {
                    frag.appendChild(makeFrag(item));
                });
            } else {
                frag = fragment('' + item, document);
            }
            if (!childNodes(frag).length) {
                frag.appendChild(document.createTextNode(''));
            }
            return frag;
        };
        module.exports = namespace.fragment = namespace.frag = makeFrag;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-view-callbacks@4.3.0#can-view-callbacks*/
define('can-view-callbacks@4.3.0#can-view-callbacks', [
    'require',
    'exports',
    'module',
    'can-observation-recorder',
    'can-log/dev/dev',
    'can-globals/global/global',
    'can-dom-mutate/node',
    'can-namespace',
    'can-view-nodelist',
    'can-fragment',
    'can-globals',
    'can-symbol',
    'can-reflect'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var ObservationRecorder = require('can-observation-recorder');
        var dev = require('can-log/dev/dev');
        var getGlobal = require('can-globals/global/global');
        var domMutate = require('can-dom-mutate/node');
        var namespace = require('can-namespace');
        var nodeLists = require('can-view-nodelist');
        var makeFrag = require('can-fragment');
        var globals = require('can-globals');
        var canSymbol = require('can-symbol');
        var canReflect = require('can-reflect');
        var callbackMapSymbol = canSymbol.for('can.callbackMap');
        var tags = {};
        var automountEnabled = function () {
            return globals.getKeyValue('document').documentElement.getAttribute('data-can-automount') !== 'false';
        };
        var renderedElements = new WeakMap();
        var renderNodeAndChildren = function (node) {
            var tagName = node.tagName && node.tagName.toLowerCase();
            var tagHandler = tags[tagName];
            var children;
            if (tagHandler && !renderedElements.has(node)) {
                tagHandler(node, {});
            }
            if (node.getElementsByTagName) {
                children = node.getElementsByTagName('*');
                for (var k = 0, child; (child = children[k]) !== undefined; k++) {
                    renderNodeAndChildren(child);
                }
            }
        };
        var mutationObserverEnabled = false;
        var globalMutationObserver;
        var enableMutationObserver = function () {
            if (mutationObserverEnabled) {
                return;
            }
            var mutationHandler = function (mutationsList) {
                var addedNodes;
                for (var i = 0, mutation; (mutation = mutationsList[i]) !== undefined; i++) {
                    if (mutation.type === 'childList') {
                        addedNodes = mutation.addedNodes;
                        for (var j = 0, addedNode; (addedNode = addedNodes[j]) !== undefined; j++) {
                            if (!renderedElements.has(addedNode)) {
                                renderNodeAndChildren(addedNode);
                            }
                        }
                    }
                }
            };
            var MutationObserver = globals.getKeyValue('MutationObserver');
            if (MutationObserver) {
                globalMutationObserver = new MutationObserver(mutationHandler);
                globalMutationObserver.observe(getGlobal().document.documentElement, {
                    childList: true,
                    subtree: true
                });
                mutationObserverEnabled = true;
            }
        };
        var renderTagsInDocument = function (tagName) {
            var nodes = getGlobal().document.getElementsByTagName(tagName);
            for (var i = 0, node; (node = nodes[i]) !== undefined; i++) {
                renderNodeAndChildren(node);
            }
        };
        var attr = function (attributeName, attrHandler) {
            if (attrHandler) {
                if (typeof attributeName === 'string') {
                    attributes[attributeName] = attrHandler;
                } else {
                    regExpAttributes.push({
                        match: attributeName,
                        handler: attrHandler
                    });
                }
            } else {
                var cb = attributes[attributeName];
                if (!cb) {
                    for (var i = 0, len = regExpAttributes.length; i < len; i++) {
                        var attrMatcher = regExpAttributes[i];
                        if (attrMatcher.match.test(attributeName)) {
                            return attrMatcher.handler;
                        }
                    }
                }
                return cb;
            }
        };
        var attrs = function (attrMap) {
            var map = canReflect.getKeyValue(attrMap, callbackMapSymbol) || attrMap;
            if (attrMaps.has(map)) {
                return;
            } else {
                attrMaps.set(map, true);
            }
            canReflect.eachKey(map, function (callback, exp) {
                attr(exp, callback);
            });
        };
        var attributes = {}, regExpAttributes = [], attrMaps = new WeakMap(), automaticCustomElementCharacters = /[-\:]/;
        var defaultCallback = function () {
        };
        var tag = function (tagName, tagHandler) {
            if (tagHandler) {
                var GLOBAL = getGlobal();
                var validCustomElementName = automaticCustomElementCharacters.test(tagName), tagExists = typeof tags[tagName.toLowerCase()] !== 'undefined', customElementExists;
                if (GLOBAL.html5) {
                    GLOBAL.html5.elements += ' ' + tagName;
                    GLOBAL.html5.shivDocument();
                }
                tags[tagName.toLowerCase()] = tagHandler;
                if (automountEnabled()) {
                    var customElements = globals.getKeyValue('customElements');
                    if (customElements) {
                        customElementExists = customElements.get(tagName.toLowerCase());
                        if (validCustomElementName && !customElementExists) {
                            var CustomElement = function () {
                                return Reflect.construct(HTMLElement, [], CustomElement);
                            };
                            CustomElement.prototype = Object.create(HTMLElement.prototype);
                            CustomElement.prototype.connectedCallback = function () {
                                if (!renderedElements.has(this)) {
                                    tags[tagName.toLowerCase()](this, {});
                                }
                            };
                            customElements.define(tagName, CustomElement);
                        }
                    } else {
                        enableMutationObserver();
                        renderTagsInDocument(tagName);
                    }
                } else if (mutationObserverEnabled) {
                    globalMutationObserver.disconnect();
                }
            } else {
                var cb;
                if (tagHandler === null) {
                    delete tags[tagName.toLowerCase()];
                } else {
                    cb = tags[tagName.toLowerCase()];
                }
                if (!cb && automaticCustomElementCharacters.test(tagName)) {
                    cb = defaultCallback;
                }
                return cb;
            }
        };
        var callbacks = {
            _tags: tags,
            _attributes: attributes,
            _regExpAttributes: regExpAttributes,
            defaultCallback: defaultCallback,
            tag: tag,
            attr: attr,
            attrs: attrs,
            tagHandler: function (el, tagName, tagData) {
                var scope = tagData.scope, helperTagCallback = scope && scope.templateContext.tags.get(tagName), tagCallback = helperTagCallback || tags[tagName], res;
                if (tagCallback) {
                    res = ObservationRecorder.ignore(tagCallback)(el, tagData);
                    renderedElements.set(el, true);
                } else {
                    res = scope;
                }
                if (res && tagData.subtemplate) {
                    if (scope !== res) {
                        scope = scope.add(res);
                    }
                    var nodeList = nodeLists.register([], undefined, tagData.parentNodeList || true, false);
                    nodeList.expression = '<' + el.tagName + '>';
                    var result = tagData.subtemplate(scope, tagData.options, nodeList);
                    var frag = typeof result === 'string' ? makeFrag(result) : result;
                    domMutate.appendChild.call(el, frag);
                }
            }
        };
        namespace.view = namespace.view || {};
        if (namespace.view.callbacks) {
            throw new Error('You can\'t have two versions of can-view-callbacks, check your dependencies');
        } else {
            module.exports = namespace.view.callbacks = callbacks;
        }
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-view-target@4.1.0#can-view-target*/
define('can-view-target@4.1.0#can-view-target', [
    'require',
    'exports',
    'module',
    'can-globals/document/document',
    'can-dom-mutate/node',
    'can-namespace',
    'can-globals/mutation-observer/mutation-observer'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getDocument = require('can-globals/document/document');
        var domMutate = require('can-dom-mutate/node');
        var namespace = require('can-namespace');
        var MUTATION_OBSERVER = require('can-globals/mutation-observer/mutation-observer');
        var processNodes = function (nodes, paths, location, document) {
                var frag = document.createDocumentFragment();
                for (var i = 0, len = nodes.length; i < len; i++) {
                    var node = nodes[i];
                    frag.appendChild(processNode(node, paths, location.concat(i), document));
                }
                return frag;
            }, keepsTextNodes = typeof document !== 'undefined' && function () {
                var testFrag = document.createDocumentFragment();
                var div = document.createElement('div');
                div.appendChild(document.createTextNode(''));
                div.appendChild(document.createTextNode(''));
                testFrag.appendChild(div);
                var cloned = testFrag.cloneNode(true);
                return cloned.firstChild.childNodes.length === 2;
            }(), clonesWork = typeof document !== 'undefined' && function () {
                var el = document.createElement('a');
                el.innerHTML = '<xyz></xyz>';
                var clone = el.cloneNode(true);
                var works = clone.innerHTML === '<xyz></xyz>';
                var MO, observer;
                if (works) {
                    el = document.createDocumentFragment();
                    el.appendChild(document.createTextNode('foo-bar'));
                    MO = MUTATION_OBSERVER();
                    if (MO) {
                        observer = new MO(function () {
                        });
                        observer.observe(document.documentElement, {
                            childList: true,
                            subtree: true
                        });
                        clone = el.cloneNode(true);
                        observer.disconnect();
                    } else {
                        clone = el.cloneNode(true);
                    }
                    return clone.childNodes.length === 1;
                }
                return works;
            }(), namespacesWork = typeof document !== 'undefined' && !!document.createElementNS;
        var cloneNode = clonesWork ? function (el) {
            return el.cloneNode(true);
        } : function (node) {
            var document = node.ownerDocument;
            var copy;
            if (node.nodeType === 1) {
                if (node.namespaceURI !== 'http://www.w3.org/1999/xhtml' && namespacesWork && document.createElementNS) {
                    copy = document.createElementNS(node.namespaceURI, node.nodeName);
                } else {
                    copy = document.createElement(node.nodeName);
                }
            } else if (node.nodeType === 3) {
                copy = document.createTextNode(node.nodeValue);
            } else if (node.nodeType === 8) {
                copy = document.createComment(node.nodeValue);
            } else if (node.nodeType === 11) {
                copy = document.createDocumentFragment();
            }
            if (node.attributes) {
                var attributes = node.attributes;
                for (var i = 0; i < attributes.length; i++) {
                    var attribute = attributes[i];
                    if (attribute && attribute.specified) {
                        domMutate.setAttribute.call(copy, attribute.nodeName || attribute.name, attribute.nodeValue || attribute.value);
                    }
                }
            }
            if (node && node.firstChild) {
                var child = node.firstChild;
                while (child) {
                    copy.appendChild(cloneNode(child));
                    child = child.nextSibling;
                }
            }
            return copy;
        };
        function processNode(node, paths, location, document) {
            var callback, loc = location, nodeType = typeof node, el, p, i, len;
            var getCallback = function () {
                if (!callback) {
                    callback = {
                        path: location,
                        callbacks: []
                    };
                    paths.push(callback);
                    loc = [];
                }
                return callback;
            };
            if (nodeType === 'object') {
                if (node.tag) {
                    if (namespacesWork && node.namespace) {
                        el = document.createElementNS(node.namespace, node.tag);
                    } else {
                        el = document.createElement(node.tag);
                    }
                    if (node.attrs) {
                        for (var attrName in node.attrs) {
                            var value = node.attrs[attrName];
                            if (typeof value === 'function') {
                                getCallback().callbacks.push({ callback: value });
                            } else {
                                domMutate.setAttribute.call(el, attrName, value);
                            }
                        }
                    }
                    if (node.attributes) {
                        for (i = 0, len = node.attributes.length; i < len; i++) {
                            getCallback().callbacks.push({ callback: node.attributes[i] });
                        }
                    }
                    if (node.children && node.children.length) {
                        if (callback) {
                            p = callback.paths = [];
                        } else {
                            p = paths;
                        }
                        el.appendChild(processNodes(node.children, p, loc, document));
                    }
                } else if (node.comment) {
                    el = document.createComment(node.comment);
                    if (node.callbacks) {
                        for (i = 0, len = node.attributes.length; i < len; i++) {
                            getCallback().callbacks.push({ callback: node.callbacks[i] });
                        }
                    }
                }
            } else if (nodeType === 'string') {
                el = document.createTextNode(node);
            } else if (nodeType === 'function') {
                if (keepsTextNodes) {
                    el = document.createTextNode('');
                    getCallback().callbacks.push({ callback: node });
                } else {
                    el = document.createComment('~');
                    getCallback().callbacks.push({
                        callback: function () {
                            var el = document.createTextNode('');
                            domMutate.replaceChild.call(this.parentNode, el, this);
                            return node.apply(el, arguments);
                        }
                    });
                }
            }
            return el;
        }
        function getCallbacks(el, pathData, elementCallbacks) {
            var path = pathData.path, callbacks = pathData.callbacks, paths = pathData.paths, child = el, pathLength = path ? path.length : 0, pathsLength = paths ? paths.length : 0;
            for (var i = 0; i < pathLength; i++) {
                child = child.childNodes.item(path[i]);
            }
            for (i = 0; i < pathsLength; i++) {
                getCallbacks(child, paths[i], elementCallbacks);
            }
            elementCallbacks.push({
                element: child,
                callbacks: callbacks
            });
        }
        function hydrateCallbacks(callbacks, args) {
            var len = callbacks.length, callbacksLength, callbackElement, callbackData;
            for (var i = 0; i < len; i++) {
                callbackData = callbacks[i];
                callbacksLength = callbackData.callbacks.length;
                callbackElement = callbackData.element;
                for (var c = 0; c < callbacksLength; c++) {
                    callbackData.callbacks[c].callback.apply(callbackElement, args);
                }
            }
        }
        function makeTarget(nodes, doc) {
            var paths = [];
            var frag = processNodes(nodes, paths, [], doc || getDocument());
            return {
                paths: paths,
                clone: frag,
                hydrate: function () {
                    var cloned = cloneNode(this.clone);
                    var args = [];
                    for (var a = 0, ref = args.length = arguments.length; a < ref; a++) {
                        args[a] = arguments[a];
                    }
                    var callbacks = [];
                    for (var i = 0; i < paths.length; i++) {
                        getCallbacks(cloned, paths[i], callbacks);
                    }
                    hydrateCallbacks(callbacks, args);
                    return cloned;
                }
            };
        }
        makeTarget.keepsTextNodes = keepsTextNodes;
        makeTarget.cloneNode = cloneNode;
        namespace.view = namespace.view || {};
        module.exports = namespace.view.target = makeTarget;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-view-scope@4.5.0#template-context*/
define('can-view-scope@4.5.0#template-context', [
    'require',
    'exports',
    'module',
    'can-simple-map'
], function (require, exports, module) {
    'use strict';
    var SimpleMap = require('can-simple-map');
    var TemplateContext = function () {
        this.vars = new SimpleMap({});
        this.helpers = new SimpleMap({});
        this.partials = new SimpleMap({});
        this.tags = new SimpleMap({});
    };
    module.exports = TemplateContext;
});
/*can-view-scope@4.5.0#make-compute-like*/
define('can-view-scope@4.5.0#make-compute-like', [
    'require',
    'exports',
    'module',
    'can-single-reference',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var singleReference = require('can-single-reference');
    var canReflect = require('can-reflect');
    var Compute = function (newVal) {
        if (arguments.length) {
            return canReflect.setValue(this, newVal);
        } else {
            return canReflect.getValue(this);
        }
    };
    module.exports = function (observable) {
        var compute = Compute.bind(observable);
        compute.on = compute.bind = compute.addEventListener = function (event, handler) {
            var translationHandler = function (newVal, oldVal) {
                handler.call(compute, { type: 'change' }, newVal, oldVal);
            };
            singleReference.set(handler, this, translationHandler);
            observable.on(translationHandler);
        };
        compute.off = compute.unbind = compute.removeEventListener = function (event, handler) {
            observable.off(singleReference.getAndDelete(handler, this));
        };
        canReflect.assignSymbols(compute, {
            'can.getValue': function () {
                return canReflect.getValue(observable);
            },
            'can.setValue': function (newVal) {
                return canReflect.setValue(observable, newVal);
            },
            'can.onValue': function (handler, queue) {
                return canReflect.onValue(observable, handler, queue);
            },
            'can.offValue': function (handler, queue) {
                return canReflect.offValue(observable, handler, queue);
            },
            'can.valueHasDependencies': function () {
                return canReflect.valueHasDependencies(observable);
            },
            'can.getPriority': function () {
                return canReflect.getPriority(observable);
            },
            'can.setPriority': function (newPriority) {
                canReflect.setPriority(observable, newPriority);
            },
            'can.isValueLike': true,
            'can.isFunctionLike': false
        });
        compute.isComputed = true;
        return compute;
    };
});
/*can-stache-helpers@1.2.0#can-stache-helpers*/
define('can-stache-helpers@1.2.0#can-stache-helpers', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    if (namespace.stacheHelpers) {
        throw new Error('You can\'t have two versions of can-stache-helpers, check your dependencies');
    } else {
        module.exports = namespace.stacheHelpers = {};
    }
});
/*can-view-scope@4.5.0#scope-key-data*/
define('can-view-scope@4.5.0#scope-key-data', [
    'require',
    'exports',
    'module',
    'can-observation',
    'can-stache-key',
    'can-assign',
    'can-reflect',
    'can-symbol',
    'can-observation-recorder',
    './make-compute-like',
    'can-reflect-dependencies',
    'can-event-queue/value/value',
    'can-stache-helpers'
], function (require, exports, module) {
    'use strict';
    var Observation = require('can-observation');
    var observeReader = require('can-stache-key');
    var assign = require('can-assign');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var ObservationRecorder = require('can-observation-recorder');
    var makeComputeLike = require('./make-compute-like');
    var canReflectDeps = require('can-reflect-dependencies');
    var valueEventBindings = require('can-event-queue/value/value');
    var stacheHelpers = require('can-stache-helpers');
    var dispatchSymbol = canSymbol.for('can.dispatch');
    var peekValue = ObservationRecorder.ignore(canReflect.getValue.bind(canReflect));
    var getFastPathRoot = ObservationRecorder.ignore(function (computeData) {
        if (computeData.reads && computeData.reads.length === 1) {
            var root = computeData.root;
            if (root && root[canSymbol.for('can.getValue')]) {
                root = canReflect.getValue(root);
            }
            return root && canReflect.isObservableLike(root) && canReflect.isMapLike(root) && typeof root[computeData.reads[0].key] !== 'function' && root;
        }
        return;
    });
    var isEventObject = function (obj) {
        return obj && typeof obj.batchNum === 'number' && typeof obj.type === 'string';
    };
    var ScopeKeyData = function (scope, key, options) {
        this.startingScope = scope;
        this.key = key;
        this.read = this.read.bind(this);
        this.dispatch = this.dispatch.bind(this);
        if (key === 'debugger') {
            this.startingScope = { _context: stacheHelpers };
            this.read = function () {
                var helperOptions = { scope: scope };
                var debuggerHelper = stacheHelpers['debugger'];
                return debuggerHelper(helperOptions);
            };
        }
        var observation = this.observation = new Observation(this.read, this);
        this.options = assign({ observation: this.observation }, options);
        this.fastPath = undefined;
        this.root = undefined;
        this.initialValue = undefined;
        this.reads = undefined;
        this.setRoot = undefined;
        this.thisArg = undefined;
        this.parentHasKey = undefined;
        var valueDependencies = new Set();
        valueDependencies.add(observation);
        this.dependencies = { valueDependencies: valueDependencies };
    };
    valueEventBindings(ScopeKeyData.prototype);
    function fastOnBoundSet_Value() {
        this._value = this.newVal;
    }
    function fastOnBoundSetValue() {
        this.value = this.newVal;
    }
    Object.assign(ScopeKeyData.prototype, {
        constructor: ScopeKeyData,
        dispatch: function dispatch(newVal) {
            var old = this.value;
            this.value = newVal;
            this[dispatchSymbol].call(this, this.value, old);
        },
        onBound: function onBound() {
            this.bound = true;
            canReflect.onValue(this.observation, this.dispatch, 'notify');
            var fastPathRoot = getFastPathRoot(this);
            if (fastPathRoot) {
                this.toFastPath(fastPathRoot);
            }
            this.value = peekValue(this.observation);
        },
        onUnbound: function onUnbound() {
            this.bound = false;
            canReflect.offValue(this.observation, this.dispatch, 'notify');
            this.toSlowPath();
        },
        set: function (newVal) {
            var root = this.root || this.setRoot;
            if (root) {
                observeReader.write(root, this.reads, newVal, this.options);
            } else {
                this.startingScope.set(this.key, newVal, this.options);
            }
        },
        get: function () {
            if (ObservationRecorder.isRecording()) {
                ObservationRecorder.add(this);
                if (!this.bound) {
                    Observation.temporarilyBind(this);
                }
            }
            if (this.bound === true) {
                return this.value;
            } else {
                return this.observation.get();
            }
        },
        toFastPath: function (fastPathRoot) {
            var self = this, observation = this.observation;
            this.fastPath = true;
            observation.dependencyChange = function (target, newVal) {
                if (isEventObject(newVal)) {
                    throw 'no event objects!';
                }
                if (target === fastPathRoot && typeof newVal !== 'function') {
                    this.newVal = newVal;
                } else {
                    self.toSlowPath();
                }
                return Observation.prototype.dependencyChange.apply(this, arguments);
            };
            if (observation.hasOwnProperty('_value')) {
                observation.onBound = fastOnBoundSet_Value;
            } else {
                observation.onBound = fastOnBoundSetValue;
            }
        },
        toSlowPath: function () {
            this.observation.dependencyChange = Observation.prototype.dependencyChange;
            this.observation.onBound = Observation.prototype.onBound;
            this.fastPath = false;
        },
        read: function () {
            var data;
            if (this.root) {
                data = observeReader.read(this.root, this.reads, this.options);
                this.thisArg = data.parent;
                return data.value;
            }
            data = this.startingScope.read(this.key, this.options);
            this.scope = data.scope;
            this.reads = data.reads;
            this.root = data.rootObserve;
            this.setRoot = data.setRoot;
            this.thisArg = data.thisArg;
            this.parentHasKey = data.parentHasKey;
            return this.initialValue = data.value;
        },
        hasDependencies: function () {
            return canReflect.valueHasDependencies(this.observation);
        }
    });
    var scopeKeyDataPrototype = {
        'can.getValue': ScopeKeyData.prototype.get,
        'can.setValue': ScopeKeyData.prototype.set,
        'can.valueHasDependencies': ScopeKeyData.prototype.hasDependencies,
        'can.getValueDependencies': function () {
            return this.dependencies;
        },
        'can.getPriority': function () {
            return canReflect.getPriority(this.observation);
        },
        'can.setPriority': function (newPriority) {
            canReflect.setPriority(this.observation, newPriority);
        }
    };
    canReflect.assignSymbols(ScopeKeyData.prototype, scopeKeyDataPrototype);
    Object.defineProperty(ScopeKeyData.prototype, 'compute', {
        get: function () {
            var compute = makeComputeLike(this);
            Object.defineProperty(this, 'compute', {
                value: compute,
                writable: false,
                configurable: false
            });
            return compute;
        },
        configurable: true
    });
    module.exports = ScopeKeyData;
});
/*can-view-scope@4.5.0#compute_data*/
define('can-view-scope@4.5.0#compute_data', [
    'require',
    'exports',
    'module',
    './scope-key-data'
], function (require, exports, module) {
    'use strict';
    var ScopeKeyData = require('./scope-key-data');
    module.exports = function (scope, key, options) {
        return new ScopeKeyData(scope, key, options || { args: [] });
    };
});
/*can-view-scope@4.5.0#can-view-scope*/
define('can-view-scope@4.5.0#can-view-scope', [
    'require',
    'exports',
    'module',
    'can-stache-key',
    'can-observation-recorder',
    './template-context',
    './compute_data',
    'can-assign',
    'can-namespace',
    'can-reflect',
    'can-log/dev/dev',
    'can-define-lazy-value',
    'can-stache-helpers'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var observeReader = require('can-stache-key');
        var ObservationRecorder = require('can-observation-recorder');
        var TemplateContext = require('./template-context');
        var makeComputeData = require('./compute_data');
        var assign = require('can-assign');
        var namespace = require('can-namespace');
        var canReflect = require('can-reflect');
        var canLog = require('can-log/dev/dev');
        var defineLazyValue = require('can-define-lazy-value');
        var stacheHelpers = require('can-stache-helpers');
        function Scope(context, parent, meta) {
            this._context = context;
            this._parent = parent;
            this._meta = meta || {};
            this.__cache = {};
        }
        assign(Scope, {
            read: observeReader.read,
            keyInfo: function (attr) {
                var info = {};
                info.isDotSlash = attr.substr(0, 2) === './';
                info.isThisDot = attr.substr(0, 5) === 'this.';
                info.isThisAt = attr.substr(0, 5) === 'this@';
                info.isInCurrentContext = info.isDotSlash || info.isThisDot || info.isThisAt;
                info.isInParentContext = attr.substr(0, 3) === '../';
                info.isCurrentContext = attr === '.' || attr === 'this';
                info.isParentContext = attr === '..';
                info.isScope = attr === 'scope';
                info.isInScope = attr.substr(0, 6) === 'scope.' || attr.substr(0, 6) === 'scope@';
                info.isContextBased = info.isInCurrentContext || info.isInParentContext || info.isCurrentContext || info.isParentContext;
                return info;
            }
        });
        assign(Scope.prototype, {
            add: function (context, meta) {
                if (context !== this._context) {
                    return new this.constructor(context, this, meta);
                } else {
                    return this;
                }
            },
            find: function (attr, options) {
                return this.get(attr, assign({ currentScopeOnly: false }, options));
            },
            read: function (attr, options) {
                options = options || {};
                if (attr === './') {
                    attr = '.';
                }
                var keyInfo = Scope.keyInfo(attr);
                if (keyInfo.isContextBased && (this._meta.notContext || this._meta.special)) {
                    return this._parent.read(attr, options);
                }
                var currentScopeOnly = 'currentScopeOnly' in options ? options.currentScopeOnly : true;
                if (keyInfo.isInCurrentContext) {
                    currentScopeOnly = true;
                    attr = keyInfo.isDotSlash ? attr.substr(2) : attr.substr(5);
                } else if ((keyInfo.isInParentContext || keyInfo.isParentContext) && this._parent) {
                    var parent = this._parent;
                    while (parent._meta.notContext || parent._meta.special) {
                        parent = parent._parent;
                    }
                    if (keyInfo.isParentContext) {
                        return observeReader.read(parent._context, [], options);
                    }
                    var parentValue = parent.read(attr.substr(3) || '.', options);
                    return assign(parentValue, { thisArg: parentValue.thisArg || parent._context });
                } else if (keyInfo.isCurrentContext) {
                    return observeReader.read(this._context, [], options);
                } else if (keyInfo.isScope) {
                    return { value: this };
                }
                var keyReads = observeReader.reads(attr);
                var readValue;
                if (keyInfo.isInScope) {
                    readValue = observeReader.read(this, keyReads.slice(1), options);
                    if (typeof readValue.value === 'undefined' && !readValue.parentHasKey) {
                        readValue = this.readFromTemplateContext(attr.slice(6), options);
                    }
                    return assign(readValue, { thisArg: keyReads.length > 1 ? readValue.parent : undefined });
                }
                return this._read(keyReads, options, currentScopeOnly);
            },
            readFromSpecialContext: function (key) {
                return this._read([{
                        key: key,
                        at: false
                    }], { special: true });
            },
            readFromTemplateContext: function (key, readOptions) {
                var keyReads = observeReader.reads(key);
                return observeReader.read(this.templateContext, keyReads, readOptions);
            },
            _read: function (keyReads, options, currentScopeOnly) {
                var currentScope = this, currentContext, undefinedObserves = [], currentObserve, currentReads, setObserveDepth = -1, currentSetReads, currentSetObserve, readOptions = assign({
                        foundObservable: function (observe, nameIndex) {
                            currentObserve = observe;
                            currentReads = keyReads.slice(nameIndex);
                        },
                        earlyExit: function (parentValue, nameIndex) {
                            if (nameIndex > setObserveDepth || nameIndex === setObserveDepth && (typeof parentValue === 'object' && keyReads[nameIndex].key in parentValue)) {
                                currentSetObserve = currentObserve;
                                currentSetReads = currentReads;
                                setObserveDepth = nameIndex;
                            }
                        }
                    }, options);
                var isRecording = ObservationRecorder.isRecording();
                while (currentScope) {
                    currentContext = currentScope._context;
                    if ((!options || options.special !== true) && currentScope._meta.special) {
                        currentScope = currentScope._parent;
                        continue;
                    }
                    if (options && options.special && !currentScope._meta.special) {
                        currentScope = currentScope._parent;
                        continue;
                    }
                    if (currentContext !== null && (typeof currentContext === 'object' || typeof currentContext === 'function')) {
                        var getObserves = ObservationRecorder.trap();
                        var data = observeReader.read(currentContext, keyReads, readOptions);
                        var observes = getObserves();
                        if (data.value !== undefined || data.parentHasKey) {
                            if (!observes.length && isRecording) {
                                currentObserve = data.parent;
                                currentReads = keyReads.slice(keyReads.length - 1);
                            } else {
                                ObservationRecorder.addMany(observes);
                            }
                            return {
                                scope: currentScope,
                                rootObserve: currentObserve,
                                value: data.value,
                                reads: currentReads,
                                thisArg: keyReads.length > 1 ? data.parent : undefined,
                                parentHasKey: data.parentHasKey
                            };
                        } else {
                            undefinedObserves.push.apply(undefinedObserves, observes);
                        }
                    }
                    var parentIsNormalContext = currentScope._parent && currentScope._parent._meta && !currentScope._parent._meta.notContext && !currentScope._parent._meta.special;
                    if (currentScopeOnly && parentIsNormalContext) {
                        currentScope = null;
                    } else {
                        currentScope = currentScope._parent;
                    }
                }
                if (!(options && options.special)) {
                    var helper = this.getHelper(keyReads);
                    if (helper && helper.value) {
                        return helper;
                    }
                }
                ObservationRecorder.addMany(undefinedObserves);
                return {
                    setRoot: currentSetObserve,
                    reads: currentSetReads,
                    value: undefined
                };
            },
            getHelper: function (keyReads) {
                var helper = observeReader.read(this.templateContext.helpers, keyReads, { proxyMethods: false });
                if (!helper || !helper.value) {
                    helper = observeReader.read(stacheHelpers, keyReads, { proxyMethods: false });
                }
                return helper;
            },
            get: function (key, options) {
                options = assign({ isArgument: true }, options);
                var res = this.read(key, options);
                return res.value;
            },
            peek: ObservationRecorder.ignore(function (key, options) {
                return this.get(key, options);
            }),
            peak: ObservationRecorder.ignore(function (key, options) {
                return this.peek(key, options);
            }),
            getScope: function (tester) {
                var scope = this;
                while (scope) {
                    if (tester(scope)) {
                        return scope;
                    }
                    scope = scope._parent;
                }
            },
            getContext: function (tester) {
                var res = this.getScope(tester);
                return res && res._context;
            },
            getTemplateContext: function () {
                var lastScope;
                var templateContext = this.getScope(function (scope) {
                    lastScope = scope;
                    return scope._context instanceof TemplateContext;
                });
                if (!templateContext) {
                    templateContext = new Scope(new TemplateContext());
                    lastScope._parent = templateContext;
                }
                return templateContext;
            },
            getRoot: function () {
                var cur = this, child = this;
                while (cur._parent) {
                    child = cur;
                    cur = cur._parent;
                }
                if (cur._context instanceof TemplateContext) {
                    cur = child;
                }
                return cur._context;
            },
            getViewModel: function () {
                var vmScope = this.getScope(function (scope) {
                    return scope._meta.viewModel;
                });
                return vmScope && vmScope._context;
            },
            getTop: function () {
                var top;
                this.getScope(function (scope) {
                    if (scope._meta.viewModel) {
                        top = scope;
                    }
                    return false;
                });
                return top && top._context;
            },
            getPathsForKey: function getPathsForKey(key) {
            },
            hasKey: function hasKey(key) {
                var reads = observeReader.reads(key);
                var readValue;
                if (reads[0].key === 'scope') {
                    readValue = observeReader.read(this, reads.slice(1), key);
                } else {
                    readValue = observeReader.read(this._context, reads, key);
                }
                return readValue.foundLastParent && readValue.parentHasKey;
            },
            getDataForScopeSet: function getDataForScopeSet(key, options) {
                var keyInfo = Scope.keyInfo(key), parent;
                if (keyInfo.isCurrentContext) {
                    return {
                        parent: this._context,
                        how: 'setValue'
                    };
                } else if (keyInfo.isInParentContext || keyInfo.isParentContext) {
                    parent = this._parent;
                    while (parent._meta.notContext) {
                        parent = parent._parent;
                    }
                    if (keyInfo.isParentContext) {
                        return {
                            parent: parent._context,
                            how: 'setValue'
                        };
                    }
                    return {
                        how: 'set',
                        parent: parent,
                        passOptions: true,
                        key: key.substr(3) || '.'
                    };
                }
                var dotIndex = key.lastIndexOf('.'), slashIndex = key.lastIndexOf('/'), contextPath, propName;
                if (slashIndex > dotIndex) {
                    contextPath = key.substring(0, slashIndex);
                    propName = key.substring(slashIndex + 1, key.length);
                } else {
                    if (dotIndex !== -1) {
                        contextPath = key.substring(0, dotIndex);
                        propName = key.substring(dotIndex + 1, key.length);
                    } else {
                        contextPath = '.';
                        propName = key;
                    }
                }
                var context = this.read(contextPath, options).value;
                if (context === undefined) {
                    return { error: 'Attempting to set a value at ' + key + ' where ' + contextPath + ' is undefined.' };
                }
                if (!canReflect.isObservableLike(context) && canReflect.isObservableLike(context[propName])) {
                    if (canReflect.isMapLike(context[propName])) {
                        return {
                            parent: context,
                            key: propName,
                            how: 'updateDeep',
                            warn: 'can-view-scope: Merging data into "' + propName + '" because its parent is non-observable'
                        };
                    } else if (canReflect.isValueLike(context[propName])) {
                        return {
                            parent: context,
                            key: propName,
                            how: 'setValue'
                        };
                    } else {
                        return {
                            parent: context,
                            how: 'write',
                            key: propName,
                            passOptions: true
                        };
                    }
                } else {
                    return {
                        parent: context,
                        how: 'write',
                        key: propName,
                        passOptions: true
                    };
                }
            },
            set: function (key, value, options) {
                options = options || {};
                var data = this.getDataForScopeSet(key, options);
                var parent = data.parent;
                if (data.warn) {
                    canLog.warn(data.warn);
                }
                switch (data.how) {
                case 'set':
                    parent.set(data.key, value, data.passOptions ? options : undefined);
                    break;
                case 'write':
                    observeReader.write(parent, data.key, value, options);
                    break;
                case 'setValue':
                    canReflect.setValue('key' in data ? parent[data.key] : parent, value);
                    break;
                case 'setKeyValue':
                    canReflect.setKeyValue(parent, data.key, value);
                    break;
                case 'updateDeep':
                    canReflect.updateDeep(parent[data.key], value);
                    break;
                }
            },
            attr: ObservationRecorder.ignore(function (key, value, options) {
                canLog.warn('can-view-scope::attr is deprecated, please use peek, get or set');
                options = assign({ isArgument: true }, options);
                if (arguments.length === 2) {
                    return this.set(key, value, options);
                } else {
                    return this.get(key, options);
                }
            }),
            computeData: function (key, options) {
                return makeComputeData(this, key, options);
            },
            compute: function (key, options) {
                return this.computeData(key, options).compute;
            },
            cloneFromRef: function () {
                var contexts = [];
                var scope = this, context, parent;
                while (scope) {
                    context = scope._context;
                    if (context instanceof TemplateContext) {
                        parent = scope._parent;
                        break;
                    }
                    contexts.unshift(context);
                    scope = scope._parent;
                }
                if (parent) {
                    contexts.forEach(function (context) {
                        parent = parent.add(context);
                    });
                    return parent;
                } else {
                    return this;
                }
            }
        });
        canReflect.assignSymbols(Scope.prototype, { 'can.hasKey': Scope.prototype.hasKey });
        var templateContextPrimitives = [
            'filename',
            'lineNumber'
        ];
        templateContextPrimitives.forEach(function (key) {
            Object.defineProperty(Scope.prototype, key, {
                get: function () {
                    return this.readFromTemplateContext(key).value;
                },
                set: function (val) {
                    this.templateContext[key] = val;
                }
            });
        });
        defineLazyValue(Scope.prototype, 'templateContext', function () {
            return this.getTemplateContext()._context;
        });
        defineLazyValue(Scope.prototype, 'root', function () {
            canLog.warn('`scope.root` is deprecated. Use either `scope.top` or `scope.vm` instead.');
            return this.getRoot();
        });
        defineLazyValue(Scope.prototype, 'vm', function () {
            return this.getViewModel();
        });
        defineLazyValue(Scope.prototype, 'top', function () {
            return this.getTop();
        });
        defineLazyValue(Scope.prototype, 'helpers', function () {
            return stacheHelpers;
        });
        var specialKeywords = [
            'index',
            'key',
            'element',
            'event',
            'viewModel',
            'arguments',
            'helperOptions'
        ];
        specialKeywords.forEach(function (key) {
            Object.defineProperty(Scope.prototype, key, {
                get: function () {
                    return this.readFromSpecialContext(key).value;
                }
            });
        });
        namespace.view = namespace.view || {};
        module.exports = namespace.view.Scope = Scope;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-stache@4.9.0#src/key-observable*/
define('can-stache@4.9.0#src/key-observable', [
    'require',
    'exports',
    'module',
    'can-simple-observable/settable/settable',
    'can-stache-key'
], function (require, exports, module) {
    'use strict';
    var SettableObservable = require('can-simple-observable/settable/settable');
    var stacheKey = require('can-stache-key');
    function KeyObservable(root, key) {
        key = '' + key;
        this.key = key;
        this.root = root;
        SettableObservable.call(this, function () {
            return stacheKey.get(this, key);
        }, root);
    }
    KeyObservable.prototype = Object.create(SettableObservable.prototype);
    KeyObservable.prototype.set = function (newVal) {
        stacheKey.set(this.root, this.key, newVal);
    };
    module.exports = KeyObservable;
});
/*can-stache@4.9.0#src/utils*/
define('can-stache@4.9.0#src/utils', [
    'require',
    'exports',
    'module',
    'can-view-scope',
    'can-observation-recorder',
    'can-stache-key',
    'can-reflect',
    './key-observable'
], function (require, exports, module) {
    'use strict';
    var Scope = require('can-view-scope');
    var ObservationRecorder = require('can-observation-recorder');
    var observationReader = require('can-stache-key');
    var canReflect = require('can-reflect');
    var KeyObservable = require('./key-observable');
    var createNoOpRenderer = function (metadata) {
        return function noop() {
            if (metadata) {
                metadata.rendered = true;
            }
        };
    };
    module.exports = {
        last: function (arr) {
            return arr != null && arr[arr.length - 1];
        },
        emptyHandler: function () {
        },
        jsonParse: function (str) {
            if (str[0] === '\'') {
                return str.substr(1, str.length - 2);
            } else if (str === 'undefined') {
                return undefined;
            } else {
                return JSON.parse(str);
            }
        },
        mixins: {
            last: function () {
                return this.stack[this.stack.length - 1];
            },
            add: function (chars) {
                this.last().add(chars);
            },
            subSectionDepth: function () {
                return this.stack.length - 1;
            }
        },
        createRenderers: function (helperOptions, scope, nodeList, truthyRenderer, falseyRenderer, isStringOnly) {
            helperOptions.fn = truthyRenderer ? this.makeRendererConvertScopes(truthyRenderer, scope, nodeList, isStringOnly, helperOptions.metadata) : createNoOpRenderer(helperOptions.metadata);
            helperOptions.inverse = falseyRenderer ? this.makeRendererConvertScopes(falseyRenderer, scope, nodeList, isStringOnly, helperOptions.metadata) : createNoOpRenderer(helperOptions.metadata);
            helperOptions.isSection = !!(truthyRenderer || falseyRenderer);
        },
        makeRendererConvertScopes: function (renderer, parentScope, nodeList, observeObservables, metadata) {
            var convertedRenderer = function (newScope, newOptions, parentNodeList) {
                if (newScope !== undefined && !(newScope instanceof Scope)) {
                    if (parentScope) {
                        newScope = parentScope.add(newScope);
                    } else {
                        newScope = new Scope(newScope || {});
                    }
                }
                if (metadata) {
                    metadata.rendered = true;
                }
                var result = renderer(newScope || parentScope, parentNodeList || nodeList);
                return result;
            };
            return observeObservables ? convertedRenderer : ObservationRecorder.ignore(convertedRenderer);
        },
        getItemsStringContent: function (items, isObserveList, helperOptions) {
            var txt = '', len = observationReader.get(items, 'length'), isObservable = canReflect.isObservableLike(items);
            for (var i = 0; i < len; i++) {
                var item = isObservable ? new KeyObservable(items, i) : items[i];
                txt += helperOptions.fn(item);
            }
            return txt;
        },
        getItemsFragContent: function (items, helperOptions, scope) {
            var result = [], len = observationReader.get(items, 'length'), isObservable = canReflect.isObservableLike(items), hashExprs = helperOptions.exprData && helperOptions.exprData.hashExprs, hashOptions;
            if (canReflect.size(hashExprs) > 0) {
                hashOptions = {};
                canReflect.eachKey(hashExprs, function (exprs, key) {
                    hashOptions[exprs.key] = key;
                });
            }
            for (var i = 0; i < len; i++) {
                var aliases = {};
                var item = isObservable ? new KeyObservable(items, i) : items[i];
                if (canReflect.size(hashOptions) > 0) {
                    if (hashOptions.value) {
                        aliases[hashOptions.value] = item;
                    }
                    if (hashOptions.index) {
                        aliases[hashOptions.index] = i;
                    }
                }
                result.push(helperOptions.fn(scope.add(aliases, { notContext: true }).add({ index: i }, { special: true }).add(item)));
            }
            return result;
        }
    };
});
/*can-stache@4.9.0#src/html_section*/
define('can-stache@4.9.0#src/html_section', [
    'require',
    'exports',
    'module',
    'can-view-target',
    'can-view-scope',
    'can-observation-recorder',
    'can-reflect',
    './utils',
    'can-globals/document/document',
    'can-assign'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var target = require('can-view-target');
        var Scope = require('can-view-scope');
        var ObservationRecorder = require('can-observation-recorder');
        var canReflect = require('can-reflect');
        var utils = require('./utils');
        var getDocument = require('can-globals/document/document');
        var assign = require('can-assign');
        var last = utils.last;
        var decodeHTML = typeof document !== 'undefined' && function () {
            var el = getDocument().createElement('div');
            return function (html) {
                if (html.indexOf('&') === -1) {
                    return html.replace(/\r\n/g, '\n');
                }
                el.innerHTML = html;
                return el.childNodes.length === 0 ? '' : el.childNodes.item(0).nodeValue;
            };
        }();
        var HTMLSectionBuilder = function (filename) {
            if (filename) {
                this.filename = filename;
            }
            this.stack = [new HTMLSection()];
        };
        HTMLSectionBuilder.scopify = function (renderer) {
            return ObservationRecorder.ignore(function (scope, options, nodeList) {
                if (!(scope instanceof Scope)) {
                    scope = new Scope(scope || {});
                }
                if (nodeList === undefined && canReflect.isListLike(options)) {
                    nodeList = options;
                    options = undefined;
                }
                if (options && !options.helpers && !options.partials && !options.tags) {
                    options = { helpers: options };
                }
                canReflect.eachKey(options && options.helpers, function (helperValue) {
                    helperValue.requiresOptionsArgument = true;
                });
                var templateContext = scope.templateContext;
                canReflect.eachKey(options, function (optionValues, optionKey) {
                    var container = templateContext[optionKey];
                    if (container) {
                        canReflect.eachKey(optionValues, function (optionValue, optionValueKey) {
                            canReflect.setKeyValue(container, optionValueKey, optionValue);
                        });
                    }
                });
                return renderer(scope, nodeList);
            });
        };
        assign(HTMLSectionBuilder.prototype, utils.mixins);
        assign(HTMLSectionBuilder.prototype, {
            startSubSection: function (process) {
                var newSection = new HTMLSection(process);
                this.stack.push(newSection);
                return newSection;
            },
            endSubSectionAndReturnRenderer: function () {
                if (this.last().isEmpty()) {
                    this.stack.pop();
                    return null;
                } else {
                    var htmlSection = this.endSection();
                    return htmlSection.compiled.hydrate.bind(htmlSection.compiled);
                }
            },
            startSection: function (process) {
                var newSection = new HTMLSection(process);
                this.last().add(newSection.targetCallback);
                this.stack.push(newSection);
            },
            endSection: function () {
                this.last().compile();
                return this.stack.pop();
            },
            inverse: function () {
                this.last().inverse();
            },
            compile: function () {
                var compiled = this.stack.pop().compile();
                return ObservationRecorder.ignore(function (scope, nodeList) {
                    if (!(scope instanceof Scope)) {
                        scope = new Scope(scope || {});
                    }
                    return compiled.hydrate(scope, nodeList);
                });
            },
            push: function (chars) {
                this.last().push(chars);
            },
            pop: function () {
                return this.last().pop();
            },
            removeCurrentNode: function () {
                this.last().removeCurrentNode();
            }
        });
        var HTMLSection = function (process) {
            this.data = 'targetData';
            this.targetData = [];
            this.targetStack = [];
            var self = this;
            this.targetCallback = function (scope, sectionNode) {
                process.call(this, scope, sectionNode, self.compiled.hydrate.bind(self.compiled), self.inverseCompiled && self.inverseCompiled.hydrate.bind(self.inverseCompiled));
            };
        };
        assign(HTMLSection.prototype, {
            inverse: function () {
                this.inverseData = [];
                this.data = 'inverseData';
            },
            push: function (data) {
                this.add(data);
                this.targetStack.push(data);
            },
            pop: function () {
                return this.targetStack.pop();
            },
            add: function (data) {
                if (typeof data === 'string') {
                    data = decodeHTML(data);
                }
                if (this.targetStack.length) {
                    last(this.targetStack).children.push(data);
                } else {
                    this[this.data].push(data);
                }
            },
            compile: function () {
                this.compiled = target(this.targetData, getDocument());
                if (this.inverseData) {
                    this.inverseCompiled = target(this.inverseData, getDocument());
                    delete this.inverseData;
                }
                this.targetStack = this.targetData = null;
                return this.compiled;
            },
            removeCurrentNode: function () {
                var children = this.children();
                return children.pop();
            },
            children: function () {
                if (this.targetStack.length) {
                    return last(this.targetStack).children;
                } else {
                    return this[this.data];
                }
            },
            isEmpty: function () {
                return !this.targetData.length;
            }
        });
        HTMLSectionBuilder.HTMLSection = HTMLSection;
        module.exports = HTMLSectionBuilder;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-view-live@4.2.0#lib/core*/
define('can-view-live@4.2.0#lib/core', [
    'require',
    'exports',
    'module',
    'can-view-parser',
    'can-dom-mutate',
    'can-view-nodelist',
    'can-fragment',
    'can-child-nodes',
    'can-reflect',
    'can-reflect-dependencies'
], function (require, exports, module) {
    'use strict';
    var parser = require('can-view-parser');
    var domMutate = require('can-dom-mutate');
    var nodeLists = require('can-view-nodelist');
    var makeFrag = require('can-fragment');
    var childNodes = require('can-child-nodes');
    var canReflect = require('can-reflect');
    var canReflectDeps = require('can-reflect-dependencies');
    var live = {
        setup: function (el, bind, unbind) {
            var tornDown = false, removalDisposal, data, teardown = function () {
                    if (!tornDown) {
                        tornDown = true;
                        unbind(data);
                        if (removalDisposal) {
                            removalDisposal();
                            removalDisposal = undefined;
                        }
                    }
                    return true;
                };
            data = {
                teardownCheck: function (parent) {
                    return parent ? false : teardown();
                }
            };
            removalDisposal = domMutate.onNodeRemoval(el, function () {
                if (!el.ownerDocument.contains(el)) {
                    teardown();
                }
            });
            bind(data);
            return data;
        },
        listen: function (el, compute, change, queueName) {
            return live.setup(el, function bind() {
                canReflect.onValue(compute, change, queueName || 'notify');
            }, function unbind(data) {
                canReflect.offValue(compute, change, queueName || 'notify');
                if (data.nodeList) {
                    nodeLists.unregister(data.nodeList);
                }
            });
        },
        getAttributeParts: function (newVal) {
            var attrs = {}, attr;
            parser.parseAttrs(newVal, {
                attrStart: function (name) {
                    attrs[name] = '';
                    attr = name;
                },
                attrValue: function (value) {
                    attrs[attr] += value;
                },
                attrEnd: function () {
                }
            });
            return attrs;
        },
        isNode: function (obj) {
            return obj && obj.nodeType;
        },
        addTextNodeIfNoChildren: function (frag) {
            if (!frag.firstChild) {
                frag.appendChild(frag.ownerDocument.createTextNode(''));
            }
        },
        replace: function (nodes, val, teardown) {
            var oldNodes = nodes.slice(0), frag = makeFrag(val);
            nodeLists.register(nodes, teardown);
            nodeLists.update(nodes, childNodes(frag));
            nodeLists.replace(oldNodes, frag);
            return nodes;
        },
        getParentNode: function (el, defaultParentNode) {
            return defaultParentNode && el.parentNode.nodeType === 11 ? defaultParentNode : el.parentNode;
        },
        makeString: function (txt) {
            return txt == null ? '' : '' + txt;
        }
    };
    module.exports = live;
});
/*can-dom-data-state@1.0.1#can-dom-data-state*/
define('can-dom-data-state@1.0.1#can-dom-data-state', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-dom-mutate',
    'can-cid'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var domMutate = require('can-dom-mutate');
    var CID = require('can-cid');
    var isEmptyObject = function (obj) {
        for (var prop in obj) {
            return false;
        }
        return true;
    };
    var data = {};
    var removedDisposalMap = {};
    var deleteNode = function () {
        var id = CID.get(this);
        var nodeDeleted = false;
        if (id && data[id]) {
            nodeDeleted = true;
            delete data[id];
        }
        if (removedDisposalMap[id]) {
            removedDisposalMap[id]();
            delete removedDisposalMap[id];
        }
        return nodeDeleted;
    };
    var setData = function (name, value) {
        var id = CID(this);
        var store = data[id] || (data[id] = {});
        if (name !== undefined) {
            store[name] = value;
            var isNode = !!(this && typeof this.nodeType === 'number');
            if (isNode && !removedDisposalMap[id]) {
                var target = this;
                removedDisposalMap[id] = domMutate.onNodeRemoval(target, function () {
                    if (!target.ownerDocument.contains(target)) {
                        setTimeout(function () {
                            deleteNode(target);
                        }, 13);
                    }
                });
            }
        }
        return store;
    };
    var domDataState = {
        _data: data,
        _removalDisposalMap: removedDisposalMap,
        getCid: function () {
            return CID.get(this);
        },
        cid: function () {
            return CID(this);
        },
        expando: CID.domExpando,
        get: function (key) {
            var id = CID.get(this), store = id && data[id];
            return key === undefined ? store : store && store[key];
        },
        set: setData,
        clean: function (prop) {
            var id = CID.get(this);
            var itemData = data[id];
            if (itemData && itemData[prop]) {
                delete itemData[prop];
            }
            if (isEmptyObject(itemData)) {
                deleteNode.call(this);
            }
        },
        delete: deleteNode
    };
    if (namespace.domDataState) {
        throw new Error('You can\'t have two versions of can-dom-data-state, check your dependencies');
    } else {
        module.exports = namespace.domDataState = domDataState;
    }
});
/*can-attribute-observable@1.0.0#behaviors*/
define('can-attribute-observable@1.0.0#behaviors', [
    'require',
    'exports',
    'module',
    'can-globals/document/document',
    'can-globals/global/global',
    'can-dom-data-state',
    'can-dom-events',
    'can-dom-mutate',
    'can-dom-mutate/node',
    'can-globals/mutation-observer/mutation-observer',
    'can-diff/list/list'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getDocument = require('can-globals/document/document');
        var global = require('can-globals/global/global')();
        var setData = require('can-dom-data-state');
        var domEvents = require('can-dom-events');
        var domMutate = require('can-dom-mutate');
        var domMutateNode = require('can-dom-mutate/node');
        var getMutationObserver = require('can-globals/mutation-observer/mutation-observer');
        var diff = require('can-diff/list/list');
        var formElements = {
                'INPUT': true,
                'TEXTAREA': true,
                'SELECT': true
            }, toString = function (value) {
                if (value == null) {
                    return '';
                } else {
                    return '' + value;
                }
            }, isSVG = function (el) {
                return el.namespaceURI === 'http://www.w3.org/2000/svg';
            }, truthy = function () {
                return true;
            }, getSpecialTest = function (special) {
                return special && special.test || truthy;
            }, propProp = function (prop, obj) {
                obj = obj || {};
                obj.get = function () {
                    return this[prop];
                };
                obj.set = function (value) {
                    if (this[prop] !== value) {
                        this[prop] = value;
                    }
                    return value;
                };
                return obj;
            }, booleanProp = function (prop) {
                return {
                    isBoolean: true,
                    set: function (value) {
                        if (prop in this) {
                            this[prop] = value !== false;
                        } else {
                            domMutateNode.setAttribute.call(this, prop, '');
                        }
                    },
                    remove: function () {
                        this[prop] = false;
                    }
                };
            }, setupMO = function (el, callback) {
                var attrMO = setData.get.call(el, 'attrMO');
                if (!attrMO) {
                    var onMutation = function () {
                        callback.call(el);
                    };
                    var MO = getMutationObserver();
                    if (MO) {
                        var observer = new MO(onMutation);
                        observer.observe(el, {
                            childList: true,
                            subtree: true
                        });
                        setData.set.call(el, 'attrMO', observer);
                    } else {
                        setData.set.call(el, 'attrMO', true);
                        setData.set.call(el, 'canBindingCallback', { onMutation: onMutation });
                    }
                }
            }, _findOptionToSelect = function (parent, value) {
                var child = parent.firstChild;
                while (child) {
                    if (child.nodeName === 'OPTION' && value === child.value) {
                        return child;
                    }
                    if (child.nodeName === 'OPTGROUP') {
                        var groupChild = _findOptionToSelect(child, value);
                        if (groupChild) {
                            return groupChild;
                        }
                    }
                    child = child.nextSibling;
                }
            }, setChildOptions = function (el, value) {
                var option;
                if (value != null) {
                    option = _findOptionToSelect(el, value);
                }
                if (option) {
                    option.selected = true;
                } else {
                    el.selectedIndex = -1;
                }
            }, forEachOption = function (parent, fn) {
                var child = parent.firstChild;
                while (child) {
                    if (child.nodeName === 'OPTION') {
                        fn(child);
                    }
                    if (child.nodeName === 'OPTGROUP') {
                        forEachOption(child, fn);
                    }
                    child = child.nextSibling;
                }
            }, collectSelectedOptions = function (parent) {
                var selectedValues = [];
                forEachOption(parent, function (option) {
                    if (option.selected) {
                        selectedValues.push(option.value);
                    }
                });
                return selectedValues;
            }, markSelectedOptions = function (parent, values) {
                forEachOption(parent, function (option) {
                    option.selected = values.indexOf(option.value) !== -1;
                });
            }, setChildOptionsOnChange = function (select, aEL) {
                var handler = setData.get.call(select, 'attrSetChildOptions');
                if (handler) {
                    return Function.prototype;
                }
                handler = function () {
                    setChildOptions(select, select.value);
                };
                setData.set.call(select, 'attrSetChildOptions', handler);
                aEL.call(select, 'change', handler);
                return function (rEL) {
                    setData.clean.call(select, 'attrSetChildOptions');
                    rEL.call(select, 'change', handler);
                };
            }, behaviorRules = new Map([]), isPropWritable = function (el, prop) {
                var desc = Object.getOwnPropertyDescriptor(el.constructor.prototype, prop);
                if (desc) {
                    return desc.writable || desc.set;
                } else {
                    var proto = Object.getPrototypeOf(el);
                    if (proto) {
                        return isPropWritable(proto, prop);
                    }
                }
                return false;
            }, cacheRule = function (el, attrOrPropName, rule) {
                var rulesForElementType;
                rulesForElementType = behaviorRules.get(el.prototype);
                if (!rulesForElementType) {
                    rulesForElementType = {};
                    behaviorRules.set(el.constructor, rulesForElementType);
                }
                rulesForElementType[attrOrPropName] = rule;
                return rule;
            };
        var specialAttributes = {
            checked: {
                get: function () {
                    return this.checked;
                },
                set: function (val) {
                    var notFalse = !!val || val === '' || arguments.length === 0;
                    this.checked = notFalse;
                    if (notFalse && this.type === 'radio') {
                        this.defaultChecked = true;
                    }
                    return val;
                },
                remove: function () {
                    this.checked = false;
                },
                test: function () {
                    return this.nodeName === 'INPUT';
                }
            },
            'class': {
                get: function () {
                    if (isSVG(this)) {
                        return this.getAttribute('class');
                    }
                    return this.className;
                },
                set: function (val) {
                    val = val || '';
                    if (isSVG(this)) {
                        domMutateNode.setAttribute.call(this, 'class', '' + val);
                    } else {
                        this.className = val;
                    }
                    return val;
                }
            },
            disabled: booleanProp('disabled'),
            focused: {
                get: function () {
                    return this === document.activeElement;
                },
                set: function (val) {
                    var cur = attr.get(this, 'focused');
                    var docEl = this.ownerDocument.documentElement;
                    var element = this;
                    function focusTask() {
                        if (val) {
                            element.focus();
                        } else {
                            element.blur();
                        }
                    }
                    if (cur !== val) {
                        if (!docEl.contains(element)) {
                            var insertionDisposal = domMutate.onNodeInsertion(element, function () {
                                insertionDisposal();
                                focusTask();
                            });
                        } else {
                            focusTask();
                        }
                    }
                    return !!val;
                },
                addEventListener: function (eventName, handler, aEL) {
                    aEL.call(this, 'focus', handler);
                    aEL.call(this, 'blur', handler);
                    return function (rEL) {
                        rEL.call(this, 'focus', handler);
                        rEL.call(this, 'blur', handler);
                    };
                },
                test: function () {
                    return this.nodeName === 'INPUT';
                }
            },
            'for': propProp('htmlFor'),
            innertext: propProp('innerText'),
            innerhtml: propProp('innerHTML'),
            innerHTML: propProp('innerHTML', {
                addEventListener: function (eventName, handler, aEL) {
                    var handlers = [];
                    var el = this;
                    [
                        'change',
                        'blur'
                    ].forEach(function (eventName) {
                        var localHandler = function () {
                            handler.apply(this, arguments);
                        };
                        domEvents.addEventListener(el, eventName, localHandler);
                        handlers.push([
                            eventName,
                            localHandler
                        ]);
                    });
                    return function (rEL) {
                        handlers.forEach(function (info) {
                            rEL.call(el, info[0], info[1]);
                        });
                    };
                }
            }),
            required: booleanProp('required'),
            readonly: booleanProp('readOnly'),
            selected: {
                get: function () {
                    return this.selected;
                },
                set: function (val) {
                    val = !!val;
                    setData.set.call(this, 'lastSetValue', val);
                    return this.selected = val;
                },
                addEventListener: function (eventName, handler, aEL) {
                    var option = this;
                    var select = this.parentNode;
                    var lastVal = option.selected;
                    var localHandler = function (changeEvent) {
                        var curVal = option.selected;
                        lastVal = setData.get.call(option, 'lastSetValue') || lastVal;
                        if (curVal !== lastVal) {
                            lastVal = curVal;
                            domEvents.dispatch(option, eventName);
                        }
                    };
                    var removeChangeHandler = setChildOptionsOnChange(select, aEL);
                    domEvents.addEventListener(select, 'change', localHandler);
                    aEL.call(option, eventName, handler);
                    return function (rEL) {
                        removeChangeHandler(rEL);
                        domEvents.removeEventListener(select, 'change', localHandler);
                        rEL.call(option, eventName, handler);
                    };
                },
                test: function () {
                    return this.nodeName === 'OPTION' && this.parentNode && this.parentNode.nodeName === 'SELECT';
                }
            },
            style: {
                set: function () {
                    var el = global.document && getDocument().createElement('div');
                    if (el && el.style && 'cssText' in el.style) {
                        return function (val) {
                            return this.style.cssText = val || '';
                        };
                    } else {
                        return function (val) {
                            return domMutateNode.setAttribute.call(this, 'style', val);
                        };
                    }
                }()
            },
            textcontent: propProp('textContent'),
            value: {
                get: function () {
                    var value = this.value;
                    if (this.nodeName === 'SELECT') {
                        if ('selectedIndex' in this && this.selectedIndex === -1) {
                            value = undefined;
                        }
                    }
                    return value;
                },
                set: function (value) {
                    var nodeName = this.nodeName.toLowerCase();
                    if (nodeName === 'input') {
                        value = toString(value);
                    }
                    if (this.value !== value || nodeName === 'option') {
                        this.value = value;
                    }
                    if (nodeName === 'input' || nodeName === 'textarea') {
                        this.defaultValue = value;
                    }
                    if (nodeName === 'select') {
                        setData.set.call(this, 'attrValueLastVal', value);
                        setChildOptions(this, value === null ? value : this.value);
                        var docEl = this.ownerDocument.documentElement;
                        if (!docEl.contains(this)) {
                            var select = this;
                            var insertionDisposal = domMutate.onNodeInsertion(select, function () {
                                insertionDisposal();
                                setChildOptions(select, value === null ? value : select.value);
                            });
                        }
                        setupMO(this, function () {
                            var value = setData.get.call(this, 'attrValueLastVal');
                            attr.set(this, 'value', value);
                            domEvents.dispatch(this, 'change');
                        });
                    }
                    return value;
                },
                test: function () {
                    return formElements[this.nodeName];
                }
            },
            values: {
                get: function () {
                    return collectSelectedOptions(this);
                },
                set: function (values) {
                    values = values || [];
                    markSelectedOptions(this, values);
                    setData.set.call(this, 'stickyValues', attr.get(this, 'values'));
                    setupMO(this, function () {
                        var previousValues = setData.get.call(this, 'stickyValues');
                        attr.set(this, 'values', previousValues);
                        var currentValues = setData.get.call(this, 'stickyValues');
                        var changes = diff(previousValues.slice().sort(), currentValues.slice().sort());
                        if (changes.length) {
                            domEvents.dispatch(this, 'values');
                        }
                    });
                    return values;
                },
                addEventListener: function (eventName, handler, aEL) {
                    var localHandler = function () {
                        domEvents.dispatch(this, 'values');
                    };
                    domEvents.addEventListener(this, 'change', localHandler);
                    aEL.call(this, eventName, handler);
                    return function (rEL) {
                        domEvents.removeEventListener(this, 'change', localHandler);
                        rEL.call(this, eventName, handler);
                    };
                }
            }
        };
        var attr = {
            rules: behaviorRules,
            specialAttributes: specialAttributes,
            getRule: function (el, attrOrPropName) {
                var special = specialAttributes[attrOrPropName];
                if (special) {
                    return special;
                }
                var rulesForElementType = behaviorRules.get(el.constructor);
                var cached = rulesForElementType && rulesForElementType[attrOrPropName];
                if (cached) {
                    return cached;
                }
                if (!(attrOrPropName in el)) {
                    return this.attribute(attrOrPropName);
                }
                var newRule = isPropWritable(el, attrOrPropName) ? this.property(attrOrPropName) : this.attribute(attrOrPropName);
                return cacheRule(el, attrOrPropName, newRule);
            },
            attribute: function (attrName) {
                return {
                    get: function () {
                        return this.getAttribute(attrName);
                    },
                    set: function (val) {
                        domMutateNode.setAttribute.call(this, attrName, val);
                    }
                };
            },
            property: function (propName) {
                return {
                    get: function () {
                        return this[propName];
                    },
                    set: function (val) {
                        this[propName] = val;
                    }
                };
            },
            findSpecialListener: function (attributeName) {
                return specialAttributes[attributeName] && specialAttributes[attributeName].addEventListener;
            },
            setAttrOrProp: function (el, attrName, val) {
                return this.set(el, attrName, val);
            },
            set: function (el, attrName, val) {
                var rule = this.getRule(el, attrName);
                var setter = rule && rule.set;
                if (setter) {
                    return setter.call(el, val);
                }
            },
            get: function (el, attrName) {
                var rule = this.getRule(el, attrName);
                var getter = rule && rule.get;
                if (getter) {
                    return rule.test ? rule.test.call(el) && getter.call(el) : getter.call(el);
                }
            },
            remove: function (el, attrName) {
                attrName = attrName.toLowerCase();
                var special = specialAttributes[attrName];
                var setter = special && special.set;
                var remover = special && special.remove;
                var test = getSpecialTest(special);
                if (typeof remover === 'function' && test.call(el)) {
                    remover.call(el);
                } else if (typeof setter === 'function' && test.call(el)) {
                    setter.call(el, undefined);
                } else {
                    domMutateNode.removeAttribute.call(el, attrName);
                }
            }
        };
        module.exports = attr;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-view-live@4.2.0#lib/attr*/
define('can-view-live@4.2.0#lib/attr', [
    'require',
    'exports',
    'module',
    './core',
    'can-reflect',
    'can-queues',
    'can-attribute-observable/behaviors'
], function (require, exports, module) {
    'use strict';
    var live = require('./core');
    var canReflect = require('can-reflect');
    var queues = require('can-queues');
    var attr = require('can-attribute-observable/behaviors');
    live.attr = function (el, attributeName, compute) {
        function liveUpdateAttr(newVal) {
            queues.domUIQueue.enqueue(attr.set, attr, [
                el,
                attributeName,
                newVal
            ]);
        }
        live.listen(el, compute, liveUpdateAttr);
        attr.set(el, attributeName, canReflect.getValue(compute));
    };
});
/*can-view-live@4.2.0#lib/attrs*/
define('can-view-live@4.2.0#lib/attrs', [
    'require',
    'exports',
    'module',
    './core',
    'can-view-callbacks',
    'can-dom-mutate',
    'can-dom-mutate/node',
    'can-reflect',
    'can-reflect-dependencies'
], function (require, exports, module) {
    'use strict';
    var live = require('./core');
    var viewCallbacks = require('can-view-callbacks');
    var domMutate = require('can-dom-mutate');
    var domMutateNode = require('can-dom-mutate/node');
    var canReflect = require('can-reflect');
    var canReflectDeps = require('can-reflect-dependencies');
    live.attrs = function (el, compute, scope, options) {
        if (!canReflect.isObservableLike(compute)) {
            var attrs = live.getAttributeParts(compute);
            for (var name in attrs) {
                domMutateNode.setAttribute.call(el, name, attrs[name]);
            }
            return;
        }
        var oldAttrs = {};
        function liveAttrsUpdate(newVal) {
            var newAttrs = live.getAttributeParts(newVal), name;
            for (name in newAttrs) {
                var newValue = newAttrs[name], oldValue = oldAttrs[name];
                if (newValue !== oldValue) {
                    domMutateNode.setAttribute.call(el, name, newValue);
                    var callback = viewCallbacks.attr(name);
                    if (callback) {
                        callback(el, {
                            attributeName: name,
                            scope: scope,
                            options: options
                        });
                    }
                }
                delete oldAttrs[name];
            }
            for (name in oldAttrs) {
                domMutateNode.removeAttribute.call(el, name);
            }
            oldAttrs = newAttrs;
        }
        canReflect.onValue(compute, liveAttrsUpdate, 'domUI');
        var removalDisposal;
        var teardownHandler = function () {
            canReflect.offValue(compute, liveAttrsUpdate, 'domUI');
            if (removalDisposal) {
                removalDisposal();
                removalDisposal = undefined;
            }
        };
        removalDisposal = domMutate.onNodeRemoval(el, function () {
            if (!el.ownerDocument.contains(el)) {
                teardownHandler();
            }
        });
        liveAttrsUpdate(canReflect.getValue(compute));
    };
});
/*can-view-live@4.2.0#lib/html*/
define('can-view-live@4.2.0#lib/html', [
    'require',
    'exports',
    'module',
    './core',
    'can-view-nodelist',
    'can-fragment',
    'can-child-nodes',
    'can-reflect',
    'can-symbol',
    'can-queues'
], function (require, exports, module) {
    'use strict';
    var live = require('./core');
    var nodeLists = require('can-view-nodelist');
    var makeFrag = require('can-fragment');
    var childNodes = require('can-child-nodes');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var queues = require('can-queues');
    var viewInsertSymbol = canSymbol.for('can.viewInsert');
    function updateNodeList(oldNodes, nodes, frag, nodeListUpdatedByFn) {
        if (nodes.isUnregistered !== true) {
            if (!nodeListUpdatedByFn) {
                nodeLists.update(nodes, childNodes(frag), oldNodes);
            }
            nodeLists.replace(oldNodes, frag);
        }
    }
    live.html = function (el, compute, parentNode, nodeListOrOptions) {
        var data;
        var makeAndPut;
        var nodeList;
        var nodes;
        var options;
        if (nodeListOrOptions !== undefined) {
            if (Array.isArray(nodeListOrOptions)) {
                nodeList = nodeListOrOptions;
            } else {
                nodeList = nodeListOrOptions.nodeList;
                options = nodeListOrOptions;
            }
        }
        var meta = { reasonLog: 'live.html replace::' + canReflect.getName(compute) };
        parentNode = live.getParentNode(el, parentNode);
        function liveHTMLUpdateHTML(newVal) {
            var attached = nodeLists.first(nodes).parentNode;
            if (attached) {
                makeAndPut(newVal, true);
            }
            var pn = nodeLists.first(nodes).parentNode;
            data.teardownCheck(pn);
        }
        data = live.listen(parentNode, compute, liveHTMLUpdateHTML);
        nodes = nodeList || [el];
        makeAndPut = function (val, useQueue) {
            if (val && typeof val[viewInsertSymbol] === 'function') {
                val = val[viewInsertSymbol](options);
            }
            var isFunction = typeof val === 'function';
            var frag = makeFrag(isFunction ? '' : val);
            live.addTextNodeIfNoChildren(frag);
            var oldNodes;
            if (useQueue === true) {
                oldNodes = nodeLists.unregisterChildren(nodes, true);
                var nodeListUpdatedByFn = false;
                if (isFunction) {
                    val(frag.firstChild);
                    nodeListUpdatedByFn = nodeLists.first(nodes) === frag.firstChild;
                }
                queues.domUIQueue.enqueue(updateNodeList, null, [
                    oldNodes,
                    nodes,
                    frag,
                    nodeListUpdatedByFn
                ], meta);
            } else {
                oldNodes = nodeLists.update(nodes, childNodes(frag));
                if (isFunction) {
                    val(frag.firstChild);
                }
                nodeLists.replace(oldNodes, frag);
            }
        };
        data.nodeList = nodes;
        if (!nodeList) {
            nodeLists.register(nodes, data.teardownCheck);
        } else {
            nodeList.unregistered = data.teardownCheck;
        }
        makeAndPut(canReflect.getValue(compute));
    };
});
/*can-view-live@4.2.0#lib/set-observable*/
define('can-view-live@4.2.0#lib/set-observable', [
    'require',
    'exports',
    'module',
    'can-simple-observable',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var SimpleObservable = require('can-simple-observable');
    var canReflect = require('can-reflect');
    function SetObservable(initialValue, setter) {
        this.setter = setter;
        SimpleObservable.call(this, initialValue);
    }
    SetObservable.prototype = Object.create(SimpleObservable.prototype);
    SetObservable.prototype.constructor = SetObservable;
    SetObservable.prototype.set = function (newVal) {
        this.setter(newVal);
    };
    canReflect.assignSymbols(SetObservable.prototype, { 'can.setValue': SetObservable.prototype.set });
    module.exports = SetObservable;
});
/*can-diff@1.4.4#patcher/patcher*/
define('can-diff@1.4.4#patcher/patcher', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-key-tree',
    'can-symbol',
    '../list/list',
    'can-queues',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var KeyTree = require('can-key-tree');
    var canSymbol = require('can-symbol');
    var diff = require('../list/list');
    var queues = require('can-queues');
    var canSymbol = require('can-symbol');
    var onValueSymbol = canSymbol.for('can.onValue'), offValueSymbol = canSymbol.for('can.offValue');
    var onPatchesSymbol = canSymbol.for('can.onPatches');
    var offPatchesSymbol = canSymbol.for('can.offPatches');
    var Patcher = function (observableOrList, priority) {
        this.handlers = new KeyTree([
            Object,
            Array
        ], {
            onFirst: this.setup.bind(this),
            onEmpty: this.teardown.bind(this)
        });
        this.observableOrList = observableOrList;
        this.isObservableValue = canReflect.isValueLike(this.observableOrList) || canReflect.isObservableLike(this.observableOrList);
        if (this.isObservableValue) {
            this.priority = canReflect.getPriority(observableOrList);
        } else {
            this.priority = priority || 0;
        }
        this.onList = this.onList.bind(this);
        this.onPatchesNotify = this.onPatchesNotify.bind(this);
        this.onPatchesDerive = this.onPatchesDerive.bind(this);
        this.patches = [];
    };
    Patcher.prototype = {
        constructor: Patcher,
        setup: function () {
            if (this.observableOrList[onValueSymbol]) {
                canReflect.onValue(this.observableOrList, this.onList, 'notify');
                this.setupList(canReflect.getValue(this.observableOrList));
            } else {
                this.setupList(this.observableOrList);
            }
        },
        teardown: function () {
            if (this.observableOrList[offValueSymbol]) {
                canReflect.offValue(this.observableOrList, this.onList, 'notify');
            }
            if (this.currentList && this.currentList[offPatchesSymbol]) {
                this.currentList[offPatchesSymbol](this.onPatchesNotify, 'notify');
            }
        },
        setupList: function (list) {
            this.currentList = list;
            if (list && list[onPatchesSymbol]) {
                list[onPatchesSymbol](this.onPatchesNotify, 'notify');
            }
        },
        onList: function onList(newList) {
            var current = this.currentList || [];
            newList = newList || [];
            if (current[offPatchesSymbol]) {
                current[offPatchesSymbol](this.onPatchesNotify, 'notify');
            }
            var patches = diff(current, newList);
            this.currentList = newList;
            this.onPatchesNotify(patches);
            if (newList[onPatchesSymbol]) {
                newList[onPatchesSymbol](this.onPatchesNotify, 'notify');
            }
        },
        onPatchesNotify: function onPatchesNotify(patches) {
            this.patches.push.apply(this.patches, patches);
            queues.deriveQueue.enqueue(this.onPatchesDerive, this, [], { priority: this.priority });
        },
        onPatchesDerive: function onPatchesDerive() {
            var patches = this.patches;
            this.patches = [];
            queues.enqueueByQueue(this.handlers.getNode([]), this.currentList, [
                patches,
                this.currentList
            ], null, [
                'Apply patches',
                patches
            ]);
        }
    };
    canReflect.assignSymbols(Patcher.prototype, {
        'can.onPatches': function (handler, queue) {
            this.handlers.add([
                queue || 'mutate',
                handler
            ]);
        },
        'can.offPatches': function (handler, queue) {
            this.handlers.delete([
                queue || 'mutate',
                handler
            ]);
        }
    });
    module.exports = Patcher;
});
/*can-view-live@4.2.0#lib/list*/
define('can-view-live@4.2.0#lib/list', [
    'require',
    'exports',
    'module',
    './core',
    'can-view-nodelist',
    'can-fragment',
    'can-child-nodes',
    'can-dom-mutate/node',
    'can-reflect',
    'can-symbol',
    'can-reflect-dependencies',
    'can-simple-observable',
    './set-observable',
    'can-diff/patcher/patcher'
], function (require, exports, module) {
    'use strict';
    var live = require('./core');
    var nodeLists = require('can-view-nodelist');
    var frag = require('can-fragment');
    var childNodes = require('can-child-nodes');
    var domMutateNode = require('can-dom-mutate/node');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var canReflectDeps = require('can-reflect-dependencies');
    var SimpleObservable = require('can-simple-observable');
    var SetObservable = require('./set-observable');
    var Patcher = require('can-diff/patcher/patcher');
    var splice = [].splice;
    var renderAndAddToNodeLists = function (newNodeLists, parentNodeList, render, context, args) {
            var itemNodeList = [];
            if (parentNodeList) {
                nodeLists.register(itemNodeList, null, true, true);
                itemNodeList.parentList = parentNodeList;
                itemNodeList.expression = '#each SUBEXPRESSION';
            }
            var itemHTML = render.apply(context, args.concat([itemNodeList])), itemFrag = frag(itemHTML);
            var children = canReflect.toArray(childNodes(itemFrag));
            if (parentNodeList) {
                nodeLists.update(itemNodeList, children);
                newNodeLists.push(itemNodeList);
            } else {
                newNodeLists.push(nodeLists.register(children));
            }
            return itemFrag;
        }, removeFromNodeList = function (masterNodeList, index, length) {
            var removedMappings = masterNodeList.splice(index + 1, length), itemsToRemove = [];
            removedMappings.forEach(function (nodeList) {
                var nodesToRemove = nodeLists.unregister(nodeList);
                [].push.apply(itemsToRemove, nodesToRemove);
            });
            return itemsToRemove;
        };
    var onPatchesSymbol = canSymbol.for('can.onPatches');
    var offPatchesSymbol = canSymbol.for('can.offPatches');
    function ListDOMPatcher(el, compute, render, context, parentNode, nodeList, falseyRender) {
        this.patcher = new Patcher(compute);
        parentNode = live.getParentNode(el, parentNode);
        this.value = compute;
        this.render = render;
        this.context = context;
        this.parentNode = parentNode;
        this.falseyRender = falseyRender;
        this.masterNodeList = nodeList || nodeLists.register([el], null, true);
        this.placeholder = el;
        this.indexMap = [];
        this.isValueLike = canReflect.isValueLike(this.value);
        this.isObservableLike = canReflect.isObservableLike(this.value);
        this.onPatches = this.onPatches.bind(this);
        var data = this.data = live.setup(parentNode, this.setupValueBinding.bind(this), this.teardownValueBinding.bind(this));
        this.masterNodeList.unregistered = function () {
            data.teardownCheck();
        };
    }
    var onPatchesSymbol = canSymbol.for('can.onPatches');
    var offPatchesSymbol = canSymbol.for('can.offPatches');
    ListDOMPatcher.prototype = {
        setupValueBinding: function () {
            this.patcher[onPatchesSymbol](this.onPatches, 'domUI');
            if (this.patcher.currentList && this.patcher.currentList.length) {
                this.onPatches([{
                        insert: this.patcher.currentList,
                        index: 0,
                        deleteCount: 0
                    }]);
            } else {
                this.addFalseyIfEmpty();
            }
        },
        teardownValueBinding: function () {
            this.patcher[offPatchesSymbol](this.onPatches, 'domUI');
            this.exit = true;
            this.remove({ length: this.patcher.currentList.length }, 0, true);
        },
        onPatches: function ListDOMPatcher_onPatches(patches) {
            if (this.exit) {
                return;
            }
            for (var i = 0, patchLen = patches.length; i < patchLen; i++) {
                var patch = patches[i];
                if (patch.type === 'move') {
                    this.move(patch.toIndex, patch.fromIndex);
                } else {
                    if (patch.deleteCount) {
                        this.remove({ length: patch.deleteCount }, patch.index, true);
                    }
                    if (patch.insert && patch.insert.length) {
                        this.add(patch.insert, patch.index);
                    }
                }
            }
        },
        add: function (items, index) {
            var frag = this.placeholder.ownerDocument.createDocumentFragment(), newNodeLists = [], newIndicies = [], masterNodeList = this.masterNodeList, render = this.render, context = this.context;
            items.forEach(function (item, key) {
                var itemIndex = new SimpleObservable(key + index), itemCompute = new SetObservable(item, function (newVal) {
                        canReflect.setKeyValue(this.patcher.currentList, itemIndex.get(), newVal);
                    }.bind(this)), itemFrag = renderAndAddToNodeLists(newNodeLists, masterNodeList, render, context, [
                        itemCompute,
                        itemIndex
                    ]);
                frag.appendChild(itemFrag);
                newIndicies.push(itemIndex);
            }, this);
            var masterListIndex = index + 1;
            if (!this.indexMap.length) {
                var falseyItemsToRemove = removeFromNodeList(masterNodeList, 0, masterNodeList.length - 1);
                nodeLists.remove(falseyItemsToRemove);
            }
            if (!masterNodeList[masterListIndex]) {
                nodeLists.after(masterListIndex === 1 ? [this.placeholder] : [nodeLists.last(this.masterNodeList[masterListIndex - 1])], frag);
            } else {
                var el = nodeLists.first(masterNodeList[masterListIndex]);
                domMutateNode.insertBefore.call(el.parentNode, frag, el);
            }
            splice.apply(this.masterNodeList, [
                masterListIndex,
                0
            ].concat(newNodeLists));
            splice.apply(this.indexMap, [
                index,
                0
            ].concat(newIndicies));
            for (var i = index + newIndicies.length, len = this.indexMap.length; i < len; i++) {
                this.indexMap[i].set(i);
            }
        },
        remove: function (items, index) {
            if (index < 0) {
                index = this.indexMap.length + index;
            }
            var itemsToRemove = removeFromNodeList(this.masterNodeList, index, items.length);
            var indexMap = this.indexMap;
            indexMap.splice(index, items.length);
            for (var i = index, len = indexMap.length; i < len; i++) {
                indexMap[i].set(i);
            }
            if (!this.exit) {
                this.addFalseyIfEmpty();
                nodeLists.remove(itemsToRemove);
            } else {
                nodeLists.unregister(this.masterNodeList);
            }
        },
        addFalseyIfEmpty: function () {
            if (this.falseyRender && this.indexMap.length === 0) {
                var falseyNodeLists = [];
                var falseyFrag = renderAndAddToNodeLists(falseyNodeLists, this.masterNodeList, this.falseyRender, this.currentList, [this.currentList]);
                nodeLists.after([this.masterNodeList[0]], falseyFrag);
                this.masterNodeList.push(falseyNodeLists[0]);
            }
        },
        move: function move(newIndex, currentIndex) {
            newIndex = newIndex + 1;
            currentIndex = currentIndex + 1;
            var masterNodeList = this.masterNodeList, indexMap = this.indexMap;
            var referenceNodeList = masterNodeList[newIndex];
            var movedElements = frag(nodeLists.flatten(masterNodeList[currentIndex]));
            var referenceElement;
            if (currentIndex < newIndex) {
                referenceElement = nodeLists.last(referenceNodeList).nextSibling;
            } else {
                referenceElement = nodeLists.first(referenceNodeList);
            }
            var parentNode = masterNodeList[0].parentNode;
            parentNode.insertBefore(movedElements, referenceElement);
            var temp = masterNodeList[currentIndex];
            [].splice.apply(masterNodeList, [
                currentIndex,
                1
            ]);
            [].splice.apply(masterNodeList, [
                newIndex,
                0,
                temp
            ]);
            newIndex = newIndex - 1;
            currentIndex = currentIndex - 1;
            var indexCompute = indexMap[currentIndex];
            [].splice.apply(indexMap, [
                currentIndex,
                1
            ]);
            [].splice.apply(indexMap, [
                newIndex,
                0,
                indexCompute
            ]);
            var i = Math.min(currentIndex, newIndex);
            var len = indexMap.length;
            for (i, len; i < len; i++) {
                indexMap[i].set(i);
            }
        },
        set: function (newVal, index) {
            this.remove({ length: 1 }, index, true);
            this.add([newVal], index);
        }
    };
    live.list = function (el, list, render, context, parentNode, nodeList, falseyRender) {
        if (el.nodeType !== Node.TEXT_NODE) {
            var textNode;
            if (!nodeList) {
                textNode = document.createTextNode('');
                el.parentNode.replaceChild(textNode, el);
                el = textNode;
            } else {
                textNode = document.createTextNode('');
                nodeLists.replace(nodeList, textNode);
                nodeLists.update(nodeList, [textNode]);
                el = textNode;
            }
        }
        new ListDOMPatcher(el, list, render, context, parentNode, nodeList, falseyRender);
    };
});
/*can-view-live@4.2.0#lib/text*/
define('can-view-live@4.2.0#lib/text', [
    'require',
    'exports',
    'module',
    './core',
    'can-view-nodelist',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var live = require('./core');
    var nodeLists = require('can-view-nodelist');
    var canReflect = require('can-reflect');
    live.text = function (el, compute, parentNode, nodeList) {
        if (el.nodeType !== Node.TEXT_NODE) {
            var textNode;
            if (!nodeList) {
                textNode = document.createTextNode('');
                el.parentNode.replaceChild(textNode, el);
                el = textNode;
            } else {
                textNode = document.createTextNode('');
                nodeLists.replace(nodeList, textNode);
                nodeLists.update(nodeList, [textNode]);
                el = textNode;
            }
        }
        var parent = live.getParentNode(el, parentNode);
        el.nodeValue = live.makeString(canReflect.getValue(compute));
        function liveTextUpdateTextNode(newVal) {
            el.nodeValue = live.makeString(newVal);
        }
        var data = live.listen(parent, compute, liveTextUpdateTextNode, 'domUI');
        if (!nodeList) {
            nodeList = nodeLists.register([el], null, true);
        }
        nodeList.unregistered = data.teardownCheck;
        data.nodeList = nodeList;
    };
});
/*can-view-live@4.2.0#can-view-live*/
define('can-view-live@4.2.0#can-view-live', [
    'require',
    'exports',
    'module',
    './lib/core',
    './lib/attr',
    './lib/attrs',
    './lib/html',
    './lib/list',
    './lib/text'
], function (require, exports, module) {
    'use strict';
    var live = require('./lib/core');
    require('./lib/attr');
    require('./lib/attrs');
    require('./lib/html');
    require('./lib/list');
    require('./lib/text');
    module.exports = live;
});
/*can-stache@4.9.0#src/text_section*/
define('can-stache@4.9.0#src/text_section', [
    'require',
    'exports',
    'module',
    'can-view-live',
    './utils',
    'can-dom-mutate/node',
    'can-assign',
    'can-reflect',
    'can-observation'
], function (require, exports, module) {
    'use strict';
    var live = require('can-view-live');
    var utils = require('./utils');
    var domMutate = require('can-dom-mutate/node');
    var assign = require('can-assign');
    var canReflect = require('can-reflect');
    var Observation = require('can-observation');
    var noop = function () {
    };
    var TextSectionBuilder = function () {
        this.stack = [new TextSection()];
    };
    assign(TextSectionBuilder.prototype, utils.mixins);
    assign(TextSectionBuilder.prototype, {
        startSection: function (process) {
            var subSection = new TextSection();
            this.last().add({
                process: process,
                truthy: subSection
            });
            this.stack.push(subSection);
        },
        endSection: function () {
            this.stack.pop();
        },
        inverse: function () {
            this.stack.pop();
            var falseySection = new TextSection();
            this.last().last().falsey = falseySection;
            this.stack.push(falseySection);
        },
        compile: function (state) {
            var renderer = this.stack[0].compile();
            return function (scope) {
                function textSectionRender() {
                    return renderer(scope);
                }
                var observation = new Observation(textSectionRender, null, { isObservable: false });
                canReflect.onValue(observation, noop);
                var value = canReflect.getValue(observation);
                if (canReflect.valueHasDependencies(observation)) {
                    if (state.textContentOnly) {
                        live.text(this, observation);
                    } else if (state.attr) {
                        live.attr(this, state.attr, observation);
                    } else {
                        live.attrs(this, observation, scope);
                    }
                    canReflect.offValue(observation, noop);
                } else {
                    if (state.textContentOnly) {
                        this.nodeValue = value;
                    } else if (state.attr) {
                        domMutate.setAttribute.call(this, state.attr, value);
                    } else {
                        live.attrs(this, value);
                    }
                }
            };
        }
    });
    var passTruthyFalsey = function (process, truthy, falsey) {
        return function (scope) {
            return process.call(this, scope, truthy, falsey);
        };
    };
    var TextSection = function () {
        this.values = [];
    };
    assign(TextSection.prototype, {
        add: function (data) {
            this.values.push(data);
        },
        last: function () {
            return this.values[this.values.length - 1];
        },
        compile: function () {
            var values = this.values, len = values.length;
            for (var i = 0; i < len; i++) {
                var value = this.values[i];
                if (typeof value === 'object') {
                    values[i] = passTruthyFalsey(value.process, value.truthy && value.truthy.compile(), value.falsey && value.falsey.compile());
                }
            }
            return function (scope) {
                var txt = '', value;
                for (var i = 0; i < len; i++) {
                    value = values[i];
                    txt += typeof value === 'string' ? value : value.call(this, scope);
                }
                return txt;
            };
        }
    });
    module.exports = TextSectionBuilder;
});
/*can-stache@4.9.0#expressions/arg*/
define('can-stache@4.9.0#expressions/arg', function (require, exports, module) {
    'use strict';
    var Arg = function (expression, modifiers) {
        this.expr = expression;
        this.modifiers = modifiers || {};
        this.isCompute = false;
    };
    Arg.prototype.value = function () {
        return this.expr.value.apply(this.expr, arguments);
    };
    module.exports = Arg;
});
/*can-stache@4.9.0#expressions/literal*/
define('can-stache@4.9.0#expressions/literal', function (require, exports, module) {
    'use strict';
    var Literal = function (value) {
        this._value = value;
    };
    Literal.prototype.value = function () {
        return this._value;
    };
    module.exports = Literal;
});
/*can-simple-observable@2.2.0#setter/setter*/
define('can-simple-observable@2.2.0#setter/setter', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-observation',
    '../settable/settable',
    'can-event-queue/value/value'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var Observation = require('can-observation');
    var SettableObservable = require('../settable/settable');
    var valueEventBindings = require('can-event-queue/value/value');
    function SetterObservable(getter, setter) {
        this.setter = setter;
        this.observation = new Observation(getter);
        this.handler = this.handler.bind(this);
    }
    SetterObservable.prototype = Object.create(SettableObservable.prototype);
    SetterObservable.prototype.constructor = SetterObservable;
    SetterObservable.prototype.set = function (newVal) {
        this.setter(newVal);
    };
    SetterObservable.prototype.hasDependencies = function () {
        return canReflect.valueHasDependencies(this.observation);
    };
    canReflect.assignSymbols(SetterObservable.prototype, {
        'can.setValue': SetterObservable.prototype.set,
        'can.valueHasDependencies': SetterObservable.prototype.hasDependencies
    });
    module.exports = SetterObservable;
});
/*can-stache@4.9.0#src/expression-helpers*/
define('can-stache@4.9.0#src/expression-helpers', [
    'require',
    'exports',
    'module',
    '../expressions/arg',
    '../expressions/literal',
    'can-reflect',
    'can-stache-key',
    'can-symbol',
    'can-observation',
    'can-view-scope/make-compute-like',
    'can-simple-observable/setter/setter'
], function (require, exports, module) {
    'use strict';
    var Arg = require('../expressions/arg');
    var Literal = require('../expressions/literal');
    var canReflect = require('can-reflect');
    var stacheKey = require('can-stache-key');
    var canSymbol = require('can-symbol');
    var Observation = require('can-observation');
    var makeComputeLike = require('can-view-scope/make-compute-like');
    var SetterObservable = require('can-simple-observable/setter/setter');
    function getObservableValue_fromKey(key, scope, readOptions) {
        var data = scope.computeData(key, readOptions);
        Observation.temporarilyBind(data);
        return data;
    }
    function computeHasDependencies(compute) {
        return compute[canSymbol.for('can.valueHasDependencies')] ? canReflect.valueHasDependencies(compute) : compute.computeInstance.hasDependencies;
    }
    function getObservableValue_fromDynamicKey_fromObservable(key, root, helperOptions, readOptions) {
        var getKeys = function () {
            return stacheKey.reads(('' + canReflect.getValue(key)).replace('.', '\\.'));
        };
        var parentHasKey;
        var computeValue = new SetterObservable(function getDynamicKey() {
            var readData = stacheKey.read(canReflect.getValue(root), getKeys());
            parentHasKey = readData.parentHasKey;
            return readData.value;
        }, function setDynamicKey(newVal) {
            stacheKey.write(canReflect.getValue(root), getKeys(), newVal);
        });
        Observation.temporarilyBind(computeValue);
        computeValue.initialValue = canReflect.getValue(computeValue);
        computeValue.parentHasKey = parentHasKey;
        return computeValue;
    }
    function convertToArgExpression(expr) {
        if (!(expr instanceof Arg) && !(expr instanceof Literal)) {
            return new Arg(expr);
        } else {
            return expr;
        }
    }
    function toComputeOrValue(value) {
        if (canReflect.isObservableLike(value)) {
            if (canReflect.isValueLike(value) && canReflect.valueHasDependencies(value) === false) {
                return canReflect.getValue(value);
            }
            if (value.compute) {
                return value.compute;
            } else {
                return makeComputeLike(value);
            }
        }
        return value;
    }
    function toCompute(value) {
        if (value) {
            if (value.isComputed) {
                return value;
            }
            if (value.compute) {
                return value.compute;
            } else {
                return makeComputeLike(value);
            }
        }
        return value;
    }
    module.exports = {
        getObservableValue_fromKey: getObservableValue_fromKey,
        computeHasDependencies: computeHasDependencies,
        getObservableValue_fromDynamicKey_fromObservable: getObservableValue_fromDynamicKey_fromObservable,
        convertToArgExpression: convertToArgExpression,
        toComputeOrValue: toComputeOrValue,
        toCompute: toCompute
    };
});
/*can-stache@4.9.0#expressions/hashes*/
define('can-stache@4.9.0#expressions/hashes', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-observation',
    '../src/expression-helpers'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var Observation = require('can-observation');
    var expressionHelpers = require('../src/expression-helpers');
    var Hashes = function (hashes) {
        this.hashExprs = hashes;
    };
    Hashes.prototype.value = function (scope, helperOptions) {
        var hash = {};
        for (var prop in this.hashExprs) {
            var val = expressionHelpers.convertToArgExpression(this.hashExprs[prop]), value = val.value.apply(val, arguments);
            hash[prop] = {
                call: !val.modifiers || !val.modifiers.compute,
                value: value
            };
        }
        return new Observation(function () {
            var finalHash = {};
            for (var prop in hash) {
                finalHash[prop] = hash[prop].call ? canReflect.getValue(hash[prop].value) : expressionHelpers.toComputeOrValue(hash[prop].value);
            }
            return finalHash;
        });
    };
    module.exports = Hashes;
});
/*can-stache@4.9.0#expressions/bracket*/
define('can-stache@4.9.0#expressions/bracket', [
    'require',
    'exports',
    'module',
    '../src/expression-helpers'
], function (require, exports, module) {
    'use strict';
    var expressionHelpers = require('../src/expression-helpers');
    var Bracket = function (key, root, originalKey) {
        this.root = root;
        this.key = key;
    };
    Bracket.prototype.value = function (scope, helpers) {
        var root = this.root ? this.root.value(scope, helpers) : scope.peek('this');
        return expressionHelpers.getObservableValue_fromDynamicKey_fromObservable(this.key.value(scope, helpers), root, scope, helpers, {});
    };
    Bracket.prototype.closingTag = function () {
    };
    module.exports = Bracket;
});
/*can-stache@4.9.0#src/set-identifier*/
define('can-stache@4.9.0#src/set-identifier', function (require, exports, module) {
    'use strict';
    module.exports = function SetIdentifier(value) {
        this.value = value;
    };
});
/*can-stache@4.9.0#expressions/call*/
define('can-stache@4.9.0#expressions/call', [
    'require',
    'exports',
    'module',
    './hashes',
    '../src/set-identifier',
    'can-symbol',
    'can-simple-observable/setter/setter',
    '../src/expression-helpers',
    'can-reflect',
    'can-assign'
], function (require, exports, module) {
    'use strict';
    var Hashes = require('./hashes');
    var SetIdentifier = require('../src/set-identifier');
    var canSymbol = require('can-symbol');
    var sourceTextSymbol = canSymbol.for('can-stache.sourceText');
    var SetterObservable = require('can-simple-observable/setter/setter');
    var expressionHelpers = require('../src/expression-helpers');
    var canReflect = require('can-reflect');
    var assign = require('can-assign');
    var Call = function (methodExpression, argExpressions) {
        this.methodExpr = methodExpression;
        this.argExprs = argExpressions.map(expressionHelpers.convertToArgExpression);
    };
    Call.prototype.args = function (scope, ignoreArgLookup) {
        var hashExprs = {};
        var args = [];
        var gotIgnoreFunction = typeof ignoreArgLookup === 'function';
        for (var i = 0, len = this.argExprs.length; i < len; i++) {
            var arg = this.argExprs[i];
            if (arg.expr instanceof Hashes) {
                assign(hashExprs, arg.expr.hashExprs);
            }
            if (!gotIgnoreFunction || !ignoreArgLookup(i)) {
                var value = arg.value.apply(arg, arguments);
                args.push({
                    call: !arg.modifiers || !arg.modifiers.compute,
                    value: value
                });
            }
        }
        return function (doNotWrapArguments) {
            var finalArgs = [];
            if (canReflect.size(hashExprs) > 0) {
                finalArgs.hashExprs = hashExprs;
            }
            for (var i = 0, len = args.length; i < len; i++) {
                if (doNotWrapArguments) {
                    finalArgs[i] = args[i].value;
                } else {
                    finalArgs[i] = args[i].call ? canReflect.getValue(args[i].value) : expressionHelpers.toCompute(args[i].value);
                }
            }
            return finalArgs;
        };
    };
    Call.prototype.value = function (scope, helperOptions) {
        var callExpression = this;
        var method = this.methodExpr.value(scope, { proxyMethods: false }), func = canReflect.getValue(method);
        var getArgs = callExpression.args(scope, func && func.ignoreArgLookup);
        var computeFn = function (newVal) {
            var func = canReflect.getValue(method);
            if (typeof func === 'function') {
                var args = getArgs(func.isLiveBound);
                if (func.requiresOptionsArgument) {
                    if (args.hashExprs && helperOptions && helperOptions.exprData) {
                        helperOptions.exprData.hashExprs = args.hashExprs;
                    }
                    args.push(helperOptions);
                }
                if (arguments.length) {
                    args.unshift(new SetIdentifier(newVal));
                }
                return func.apply(method.thisArg || scope.peek('this'), args);
            }
        };
        if (helperOptions && helperOptions.doNotWrapInObservation) {
            return computeFn();
        } else {
            var computeValue = new SetterObservable(computeFn, computeFn);
            return computeValue;
        }
    };
    Call.prototype.closingTag = function () {
        return this.methodExpr.key;
    };
    module.exports = Call;
});
/*can-stache@4.9.0#expressions/helper*/
define('can-stache@4.9.0#expressions/helper', [
    'require',
    'exports',
    'module',
    './literal',
    './hashes',
    'can-assign',
    'can-log/dev/dev',
    '../src/expression-helpers',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var Literal = require('./literal');
    var Hashes = require('./hashes');
    var assign = require('can-assign');
    var dev = require('can-log/dev/dev');
    var expressionHelpers = require('../src/expression-helpers');
    var canReflect = require('can-reflect');
    var Helper = function (methodExpression, argExpressions, hashExpressions) {
        this.methodExpr = methodExpression;
        this.argExprs = argExpressions;
        this.hashExprs = hashExpressions;
        this.mode = null;
    };
    Helper.prototype.args = function (scope) {
        var args = [];
        for (var i = 0, len = this.argExprs.length; i < len; i++) {
            var arg = this.argExprs[i];
            args.push(expressionHelpers.toComputeOrValue(arg.value.apply(arg, arguments)));
        }
        return args;
    };
    Helper.prototype.hash = function (scope) {
        var hash = {};
        for (var prop in this.hashExprs) {
            var val = this.hashExprs[prop];
            hash[prop] = expressionHelpers.toComputeOrValue(val.value.apply(val, arguments));
        }
        return hash;
    };
    Helper.prototype.value = function (scope, helperOptions) {
        var methodKey = this.methodExpr instanceof Literal ? '' + this.methodExpr._value : this.methodExpr.key, helperInstance = this, helperFn = expressionHelpers.getObservableValue_fromKey(methodKey, scope, { proxyMethods: false }), initialValue = helperFn && helperFn.initialValue, thisArg = helperFn && helperFn.thisArg;
        if (typeof initialValue === 'function') {
            helperFn = function helperFn() {
                var args = helperInstance.args(scope), helperOptionArg = assign(assign({}, helperOptions), {
                        hash: helperInstance.hash(scope),
                        exprData: helperInstance
                    });
                args.push(helperOptionArg);
                return initialValue.apply(thisArg || scope.peek('this'), args);
            };
        }
        return helperFn;
    };
    Helper.prototype.closingTag = function () {
        return this.methodExpr.key;
    };
    if (process.env.NODE_ENV !== 'production') {
        canReflect.assignSymbols(Helper.prototype, {
            'can.getName': function () {
                return canReflect.getName(this.constructor) + '{{' + this.sourceText() + '}}';
            }
        });
    }
    module.exports = Helper;
});
/*can-stache@4.9.0#expressions/lookup*/
define('can-stache@4.9.0#expressions/lookup', [
    'require',
    'exports',
    'module',
    '../src/expression-helpers',
    'can-reflect',
    'can-symbol',
    'can-log/dev/dev',
    'can-stache-key'
], function (require, exports, module) {
    'use strict';
    var expressionHelpers = require('../src/expression-helpers');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var sourceTextSymbol = canSymbol.for('can-stache.sourceText');
    var dev = require('can-log/dev/dev');
    var observeReader = require('can-stache-key');
    var Lookup = function (key, root, sourceText) {
        this.key = key;
        this.rootExpr = root;
        canReflect.setKeyValue(this, sourceTextSymbol, sourceText);
    };
    Lookup.prototype.value = function (scope, readOptions) {
        var value;
        if (this.rootExpr) {
            value = expressionHelpers.getObservableValue_fromDynamicKey_fromObservable(this.key, this.rootExpr.value(scope), scope, {}, {});
        } else {
            value = expressionHelpers.getObservableValue_fromKey(this.key, scope, readOptions);
        }
        return value;
    };
    module.exports = Lookup;
});
/*can-stache@4.9.0#src/expression*/
define('can-stache@4.9.0#src/expression', [
    'require',
    'exports',
    'module',
    '../expressions/arg',
    '../expressions/literal',
    '../expressions/hashes',
    '../expressions/bracket',
    '../expressions/call',
    '../expressions/helper',
    '../expressions/lookup',
    './set-identifier',
    '../src/expression-helpers',
    './utils',
    'can-assign',
    'can-reflect',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var Arg = require('../expressions/arg');
    var Literal = require('../expressions/literal');
    var Hashes = require('../expressions/hashes');
    var Bracket = require('../expressions/bracket');
    var Call = require('../expressions/call');
    var Helper = require('../expressions/helper');
    var Lookup = require('../expressions/lookup');
    var SetIdentifier = require('./set-identifier');
    var expressionHelpers = require('../src/expression-helpers');
    var utils = require('./utils');
    var assign = require('can-assign');
    var last = utils.last;
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var sourceTextSymbol = canSymbol.for('can-stache.sourceText');
    var Hash = function () {
    };
    var keyRegExp = /[\w\.\\\-_@\/\&%]+/, tokensRegExp = /('.*?'|".*?"|=|[\w\.\\\-_@\/*%\$]+|[\(\)]|,|\~|\[|\]\s*|\s*(?=\[))/g, bracketSpaceRegExp = /\]\s+/, literalRegExp = /^('.*?'|".*?"|-?[0-9]+\.?[0-9]*|true|false|null|undefined)$/;
    var isTokenKey = function (token) {
        return keyRegExp.test(token);
    };
    var testDot = /^[\.@]\w/;
    var isAddingToExpression = function (token) {
        return isTokenKey(token) && testDot.test(token);
    };
    var ensureChildren = function (type) {
        if (!type.children) {
            type.children = [];
        }
        return type;
    };
    var Stack = function () {
        this.root = {
            children: [],
            type: 'Root'
        };
        this.current = this.root;
        this.stack = [this.root];
    };
    assign(Stack.prototype, {
        top: function () {
            return last(this.stack);
        },
        isRootTop: function () {
            return this.top() === this.root;
        },
        popTo: function (types) {
            this.popUntil(types);
            this.pop();
        },
        pop: function () {
            if (!this.isRootTop()) {
                this.stack.pop();
            }
        },
        first: function (types) {
            var curIndex = this.stack.length - 1;
            while (curIndex > 0 && types.indexOf(this.stack[curIndex].type) === -1) {
                curIndex--;
            }
            return this.stack[curIndex];
        },
        firstParent: function (types) {
            var curIndex = this.stack.length - 2;
            while (curIndex > 0 && types.indexOf(this.stack[curIndex].type) === -1) {
                curIndex--;
            }
            return this.stack[curIndex];
        },
        popUntil: function (types) {
            while (types.indexOf(this.top().type) === -1 && !this.isRootTop()) {
                this.stack.pop();
            }
            return this.top();
        },
        addTo: function (types, type) {
            var cur = this.popUntil(types);
            ensureChildren(cur).children.push(type);
        },
        addToAndPush: function (types, type) {
            this.addTo(types, type);
            this.stack.push(type);
        },
        push: function (type) {
            this.stack.push(type);
        },
        topLastChild: function () {
            return last(this.top().children);
        },
        replaceTopLastChild: function (type) {
            var children = ensureChildren(this.top()).children;
            children.pop();
            children.push(type);
            return type;
        },
        replaceTopLastChildAndPush: function (type) {
            this.replaceTopLastChild(type);
            this.stack.push(type);
        },
        replaceTopAndPush: function (type) {
            var children;
            if (this.top() === this.root) {
                children = ensureChildren(this.top()).children;
            } else {
                this.stack.pop();
                children = ensureChildren(this.top()).children;
            }
            children.pop();
            children.push(type);
            this.stack.push(type);
            return type;
        }
    });
    var convertKeyToLookup = function (key) {
        var lastPath = key.lastIndexOf('./');
        var lastDot = key.lastIndexOf('.');
        if (lastDot > lastPath) {
            return key.substr(0, lastDot) + '@' + key.substr(lastDot + 1);
        }
        var firstNonPathCharIndex = lastPath === -1 ? 0 : lastPath + 2;
        var firstNonPathChar = key.charAt(firstNonPathCharIndex);
        if (firstNonPathChar === '.' || firstNonPathChar === '@') {
            return key.substr(0, firstNonPathCharIndex) + '@' + key.substr(firstNonPathCharIndex + 1);
        } else {
            return key.substr(0, firstNonPathCharIndex) + '@' + key.substr(firstNonPathCharIndex);
        }
    };
    var convertToAtLookup = function (ast) {
        if (ast.type === 'Lookup') {
            canReflect.setKeyValue(ast, sourceTextSymbol, ast.key);
            ast.key = convertKeyToLookup(ast.key);
        }
        return ast;
    };
    var convertToHelperIfTopIsLookup = function (stack) {
        var top = stack.top();
        if (top && top.type === 'Lookup') {
            var base = stack.stack[stack.stack.length - 2];
            if (base.type !== 'Helper' && base) {
                stack.replaceTopAndPush({
                    type: 'Helper',
                    method: top
                });
            }
        }
    };
    var expression = {
        toComputeOrValue: expressionHelpers.toComputeOrValue,
        convertKeyToLookup: convertKeyToLookup,
        Literal: Literal,
        Lookup: Lookup,
        Arg: Arg,
        Hash: Hash,
        Hashes: Hashes,
        Call: Call,
        Helper: Helper,
        Bracket: Bracket,
        SetIdentifier: SetIdentifier,
        tokenize: function (expression) {
            var tokens = [];
            (expression.trim() + ' ').replace(tokensRegExp, function (whole, arg) {
                if (bracketSpaceRegExp.test(arg)) {
                    tokens.push(arg[0]);
                    tokens.push(arg.slice(1));
                } else {
                    tokens.push(arg);
                }
            });
            return tokens;
        },
        lookupRules: {
            'default': function (ast, methodType, isArg) {
                return ast.type === 'Helper' ? Helper : Lookup;
            },
            'method': function (ast, methodType, isArg) {
                return Lookup;
            }
        },
        methodRules: {
            'default': function (ast) {
                return ast.type === 'Call' ? Call : Helper;
            },
            'call': function (ast) {
                return Call;
            }
        },
        parse: function (expressionString, options) {
            options = options || {};
            var ast = this.ast(expressionString);
            if (!options.lookupRule) {
                options.lookupRule = 'default';
            }
            if (typeof options.lookupRule === 'string') {
                options.lookupRule = expression.lookupRules[options.lookupRule];
            }
            if (!options.methodRule) {
                options.methodRule = 'default';
            }
            if (typeof options.methodRule === 'string') {
                options.methodRule = expression.methodRules[options.methodRule];
            }
            var expr = this.hydrateAst(ast, options, options.baseMethodType || 'Helper');
            return expr;
        },
        hydrateAst: function (ast, options, methodType, isArg) {
            var hashes;
            if (ast.type === 'Lookup') {
                var LookupRule = options.lookupRule(ast, methodType, isArg);
                var lookup = new LookupRule(ast.key, ast.root && this.hydrateAst(ast.root, options, methodType), ast[sourceTextSymbol]);
                return lookup;
            } else if (ast.type === 'Literal') {
                return new Literal(ast.value);
            } else if (ast.type === 'Arg') {
                return new Arg(this.hydrateAst(ast.children[0], options, methodType, isArg), { compute: true });
            } else if (ast.type === 'Hash') {
                throw new Error('');
            } else if (ast.type === 'Hashes') {
                hashes = {};
                ast.children.forEach(function (hash) {
                    hashes[hash.prop] = this.hydrateAst(hash.children[0], options, methodType, true);
                }, this);
                return new Hashes(hashes);
            } else if (ast.type === 'Call' || ast.type === 'Helper') {
                hashes = {};
                var args = [], children = ast.children, ExpressionType = options.methodRule(ast);
                if (children) {
                    for (var i = 0; i < children.length; i++) {
                        var child = children[i];
                        if (child.type === 'Hashes' && ast.type === 'Helper' && ExpressionType !== Call) {
                            child.children.forEach(function (hash) {
                                hashes[hash.prop] = this.hydrateAst(hash.children[0], options, ast.type, true);
                            }, this);
                        } else {
                            args.push(this.hydrateAst(child, options, ast.type, true));
                        }
                    }
                }
                return new ExpressionType(this.hydrateAst(ast.method, options, ast.type), args, hashes);
            } else if (ast.type === 'Bracket') {
                var originalKey;
                return new Bracket(this.hydrateAst(ast.children[0], options), ast.root ? this.hydrateAst(ast.root, options) : undefined, originalKey);
            }
        },
        ast: function (expression) {
            var tokens = this.tokenize(expression);
            return this.parseAst(tokens, { index: 0 });
        },
        parseAst: function (tokens, cursor) {
            var stack = new Stack(), top, firstParent, lastToken;
            while (cursor.index < tokens.length) {
                var token = tokens[cursor.index], nextToken = tokens[cursor.index + 1];
                cursor.index++;
                if (nextToken === '=') {
                    top = stack.top();
                    if (top && top.type === 'Lookup') {
                        firstParent = stack.firstParent([
                            'Call',
                            'Helper',
                            'Hash'
                        ]);
                        if (firstParent.type === 'Call' || firstParent.type === 'Root') {
                            stack.popUntil(['Call']);
                            top = stack.top();
                            stack.replaceTopAndPush({
                                type: 'Helper',
                                method: top.type === 'Root' ? last(top.children) : top
                            });
                        }
                    }
                    firstParent = stack.firstParent([
                        'Call',
                        'Helper',
                        'Hashes'
                    ]);
                    var hash = {
                        type: 'Hash',
                        prop: token
                    };
                    if (firstParent.type === 'Hashes') {
                        stack.addToAndPush(['Hashes'], hash);
                    } else {
                        stack.addToAndPush([
                            'Helper',
                            'Call'
                        ], {
                            type: 'Hashes',
                            children: [hash]
                        });
                        stack.push(hash);
                    }
                    cursor.index++;
                } else if (literalRegExp.test(token)) {
                    convertToHelperIfTopIsLookup(stack);
                    firstParent = stack.first([
                        'Helper',
                        'Call',
                        'Hash',
                        'Bracket'
                    ]);
                    if (firstParent.type === 'Hash' && (firstParent.children && firstParent.children.length > 0)) {
                        stack.addTo([
                            'Helper',
                            'Call',
                            'Bracket'
                        ], {
                            type: 'Literal',
                            value: utils.jsonParse(token)
                        });
                    } else if (firstParent.type === 'Bracket' && (firstParent.children && firstParent.children.length > 0)) {
                        stack.addTo([
                            'Helper',
                            'Call',
                            'Hash'
                        ], {
                            type: 'Literal',
                            value: utils.jsonParse(token)
                        });
                    } else {
                        stack.addTo([
                            'Helper',
                            'Call',
                            'Hash',
                            'Bracket'
                        ], {
                            type: 'Literal',
                            value: utils.jsonParse(token)
                        });
                    }
                } else if (keyRegExp.test(token)) {
                    lastToken = stack.topLastChild();
                    firstParent = stack.first([
                        'Helper',
                        'Call',
                        'Hash',
                        'Bracket'
                    ]);
                    if (lastToken && (lastToken.type === 'Call' || lastToken.type === 'Bracket') && isAddingToExpression(token)) {
                        stack.replaceTopLastChildAndPush({
                            type: 'Lookup',
                            root: lastToken,
                            key: token.slice(1)
                        });
                    } else if (firstParent.type === 'Bracket') {
                        if (!(firstParent.children && firstParent.children.length > 0)) {
                            stack.addToAndPush(['Bracket'], {
                                type: 'Lookup',
                                key: token
                            });
                        } else {
                            if (stack.first([
                                    'Helper',
                                    'Call',
                                    'Hash',
                                    'Arg'
                                ]).type === 'Helper' && token[0] !== '.') {
                                stack.addToAndPush(['Helper'], {
                                    type: 'Lookup',
                                    key: token
                                });
                            } else {
                                stack.replaceTopAndPush({
                                    type: 'Lookup',
                                    key: token.slice(1),
                                    root: firstParent
                                });
                            }
                        }
                    } else {
                        convertToHelperIfTopIsLookup(stack);
                        stack.addToAndPush([
                            'Helper',
                            'Call',
                            'Hash',
                            'Arg',
                            'Bracket'
                        ], {
                            type: 'Lookup',
                            key: token
                        });
                    }
                } else if (token === '~') {
                    convertToHelperIfTopIsLookup(stack);
                    stack.addToAndPush([
                        'Helper',
                        'Call',
                        'Hash'
                    ], {
                        type: 'Arg',
                        key: token
                    });
                } else if (token === '(') {
                    top = stack.top();
                    if (top.type === 'Lookup') {
                        stack.replaceTopAndPush({
                            type: 'Call',
                            method: convertToAtLookup(top)
                        });
                    } else {
                        throw new Error('Unable to understand expression ' + tokens.join(''));
                    }
                } else if (token === ')') {
                    stack.popTo(['Call']);
                } else if (token === ',') {
                    stack.popUntil(['Call']);
                } else if (token === '[') {
                    top = stack.top();
                    lastToken = stack.topLastChild();
                    if (lastToken && (lastToken.type === 'Call' || lastToken.type === 'Bracket')) {
                        stack.replaceTopAndPush({
                            type: 'Bracket',
                            root: lastToken
                        });
                    } else if (top.type === 'Lookup' || top.type === 'Bracket') {
                        var bracket = {
                            type: 'Bracket',
                            root: top
                        };
                        stack.replaceTopAndPush(bracket);
                    } else if (top.type === 'Call') {
                        stack.addToAndPush(['Call'], { type: 'Bracket' });
                    } else if (top === ' ') {
                        stack.popUntil(['Lookup']);
                        convertToHelperIfTopIsLookup(stack);
                        stack.addToAndPush([
                            'Helper',
                            'Call',
                            'Hash'
                        ], { type: 'Bracket' });
                    } else {
                        stack.replaceTopAndPush({ type: 'Bracket' });
                    }
                } else if (token === ']') {
                    stack.pop();
                } else if (token === ' ') {
                    stack.push(token);
                }
            }
            return stack.root.children[0];
        }
    };
    module.exports = expression;
});
/*can-stache@4.9.0#src/mustache_core*/
define('can-stache@4.9.0#src/mustache_core', [
    'require',
    'exports',
    'module',
    'can-view-live',
    'can-view-nodelist',
    'can-observation',
    'can-observation-recorder',
    './utils',
    './expression',
    'can-fragment',
    'can-dom-mutate',
    'can-symbol',
    'can-reflect',
    'can-log/dev/dev',
    'can-globals/document/document',
    'can-define-lazy-value'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var live = require('can-view-live');
        var nodeLists = require('can-view-nodelist');
        var Observation = require('can-observation');
        var ObservationRecorder = require('can-observation-recorder');
        var utils = require('./utils');
        var expression = require('./expression');
        var frag = require('can-fragment');
        var domMutate = require('can-dom-mutate');
        var canSymbol = require('can-symbol');
        var canReflect = require('can-reflect');
        var dev = require('can-log/dev/dev');
        var getDocument = require('can-globals/document/document');
        var defineLazyValue = require('can-define-lazy-value');
        function HelperOptions(scope, nodeList, exprData, stringOnly) {
            this.metadata = { rendered: false };
            this.stringOnly = stringOnly;
            this.scope = scope;
            this.nodeList = nodeList;
            this.exprData = exprData;
        }
        defineLazyValue(HelperOptions.prototype, 'context', function () {
            return this.scope.peek('this');
        });
        var mustacheLineBreakRegExp = /(?:(^|\r?\n)(\s*)(\{\{([\s\S]*)\}\}\}?)([^\S\n\r]*)($|\r?\n))|(\{\{([\s\S]*)\}\}\}?)/g, mustacheWhitespaceRegExp = /(\s*)(\{\{\{?)(-?)([\s\S]*?)(-?)(\}\}\}?)(\s*)/g, k = function () {
            };
        var viewInsertSymbol = canSymbol.for('can.viewInsert');
        var core = {
            expression: expression,
            makeEvaluator: function (scope, nodeList, mode, exprData, truthyRenderer, falseyRenderer, stringOnly) {
                if (mode === '^') {
                    var temp = truthyRenderer;
                    truthyRenderer = falseyRenderer;
                    falseyRenderer = temp;
                }
                var value, helperOptions = new HelperOptions(scope, nodeList, exprData, stringOnly);
                utils.createRenderers(helperOptions, scope, nodeList, truthyRenderer, falseyRenderer, stringOnly);
                if (exprData instanceof expression.Call) {
                    value = exprData.value(scope, helperOptions);
                } else if (exprData instanceof expression.Bracket) {
                    value = exprData.value(scope);
                } else if (exprData instanceof expression.Lookup) {
                    value = exprData.value(scope);
                } else if (exprData instanceof expression.Helper && exprData.methodExpr instanceof expression.Bracket) {
                    value = exprData.methodExpr.value(scope, helperOptions);
                } else {
                    value = exprData.value(scope, helperOptions);
                    if (typeof value === 'function') {
                        return value;
                    }
                }
                if (!mode || helperOptions.metadata.rendered) {
                    return value;
                } else if (mode === '#' || mode === '^') {
                    return function () {
                        var finalValue = canReflect.getValue(value);
                        var result;
                        if (helperOptions.metadata.rendered) {
                            result = finalValue;
                        } else if (typeof finalValue !== 'string' && canReflect.isListLike(finalValue)) {
                            var isObserveList = canReflect.isObservableLike(finalValue) && canReflect.isListLike(finalValue);
                            if (canReflect.getKeyValue(finalValue, 'length')) {
                                if (stringOnly) {
                                    result = utils.getItemsStringContent(finalValue, isObserveList, helperOptions);
                                } else {
                                    result = frag(utils.getItemsFragContent(finalValue, helperOptions, scope));
                                }
                            } else {
                                result = helperOptions.inverse(scope);
                            }
                        } else {
                            result = finalValue ? helperOptions.fn(finalValue || scope) : helperOptions.inverse(scope);
                        }
                        helperOptions.metadata.rendered = false;
                        return result;
                    };
                } else {
                }
            },
            makeLiveBindingPartialRenderer: function (expressionString, state) {
                expressionString = expressionString.trim();
                var exprData, partialName = expressionString.split(/\s+/).shift();
                if (partialName !== expressionString) {
                    exprData = core.expression.parse(expressionString);
                }
                return function (scope, parentSectionNodeList) {
                    var nodeList = [this];
                    nodeList.expression = '>' + partialName;
                    nodeLists.register(nodeList, null, parentSectionNodeList || true, state.directlyNested);
                    var partialFrag = new Observation(function () {
                        var localPartialName = partialName;
                        if (exprData && exprData.argExprs.length === 1) {
                            var newContext = canReflect.getValue(exprData.argExprs[0].value(scope));
                            if (typeof newContext === 'undefined') {
                            } else {
                                scope = scope.add(newContext);
                            }
                        }
                        var partial = canReflect.getKeyValue(scope.templateContext.partials, localPartialName);
                        var renderer;
                        if (partial) {
                            renderer = function () {
                                return partial.render ? partial.render(scope, nodeList) : partial(scope);
                            };
                        } else {
                            var scopePartialName = scope.read(localPartialName, { isArgument: true }).value;
                            if (scopePartialName === null || !scopePartialName && localPartialName[0] === '*') {
                                return frag('');
                            }
                            if (scopePartialName) {
                                localPartialName = scopePartialName;
                            }
                            renderer = function () {
                                if (typeof localPartialName === 'function') {
                                    return localPartialName(scope, {}, nodeList);
                                } else {
                                    var domRenderer = core.getTemplateById(localPartialName);
                                    return domRenderer ? domRenderer(scope, {}, nodeList) : getDocument().createDocumentFragment();
                                }
                            };
                        }
                        var res = ObservationRecorder.ignore(renderer)();
                        return frag(res);
                    });
                    canReflect.setPriority(partialFrag, nodeList.nesting);
                    live.html(this, partialFrag, this.parentNode, nodeList);
                };
            },
            makeStringBranchRenderer: function (mode, expressionString, state) {
                var exprData = core.expression.parse(expressionString), fullExpression = mode + expressionString;
                var branchRenderer = function branchRenderer(scope, truthyRenderer, falseyRenderer) {
                    var evaluator = scope.__cache[fullExpression];
                    if (mode || !evaluator) {
                        evaluator = makeEvaluator(scope, null, mode, exprData, truthyRenderer, falseyRenderer, true);
                        if (!mode) {
                            scope.__cache[fullExpression] = evaluator;
                        }
                    }
                    var gotObservableValue = evaluator[canSymbol.for('can.onValue')], res;
                    if (gotObservableValue) {
                        res = canReflect.getValue(evaluator);
                    } else {
                        res = evaluator();
                    }
                    return res == null ? '' : '' + res;
                };
                branchRenderer.exprData = exprData;
                return branchRenderer;
            },
            makeLiveBindingBranchRenderer: function (mode, expressionString, state) {
                var exprData = core.expression.parse(expressionString);
                if (!(exprData instanceof expression.Helper) && !(exprData instanceof expression.Call) && !(exprData instanceof expression.Bracket) && !(exprData instanceof expression.Lookup)) {
                    exprData = new expression.Helper(exprData, [], {});
                }
                var branchRenderer = function branchRenderer(scope, parentSectionNodeList, truthyRenderer, falseyRenderer) {
                    var stringOnly = state.tag;
                    var nodeList = [this];
                    nodeList.expression = expressionString;
                    nodeLists.register(nodeList, null, parentSectionNodeList || true, state.directlyNested);
                    var evaluator = makeEvaluator(scope, nodeList, mode, exprData, truthyRenderer, falseyRenderer, stringOnly);
                    var gotObservableValue = evaluator[canSymbol.for('can.onValue')];
                    var observable;
                    if (gotObservableValue) {
                        observable = evaluator;
                    } else {
                        observable = new Observation(evaluator, null, { isObservable: false });
                    }
                    if (canReflect.setPriority(observable, nodeList.nesting) === false) {
                        throw new Error('can-stache unable to set priority on observable');
                    }
                    canReflect.onValue(observable, k);
                    var value = canReflect.getValue(observable);
                    if (typeof value === 'function' && !(exprData instanceof expression.Lookup)) {
                        ObservationRecorder.ignore(value)(this);
                    } else if (canReflect.valueHasDependencies(observable)) {
                        if (state.attr) {
                            live.attr(this, state.attr, observable);
                        } else if (state.tag) {
                            live.attrs(this, observable);
                        } else if (state.text && typeof value !== 'object') {
                            live.text(this, observable, this.parentNode, nodeList);
                        } else {
                            live.html(this, observable, this.parentNode, { nodeList: nodeList });
                        }
                    } else {
                        if (state.attr) {
                            domMutate.setAttribute(this, state.attr, value);
                        } else if (state.tag) {
                            live.attrs(this, value);
                        } else if (state.text && typeof value === 'string') {
                            this.nodeValue = value;
                        } else if (value != null) {
                            if (typeof value[viewInsertSymbol] === 'function') {
                                nodeLists.replace([this], value[viewInsertSymbol]({ nodeList: nodeList }));
                            } else {
                                nodeLists.replace([this], frag(value, this.ownerDocument));
                            }
                        }
                    }
                    canReflect.offValue(observable, k);
                };
                branchRenderer.exprData = exprData;
                return branchRenderer;
            },
            splitModeFromExpression: function (expression, state) {
                expression = expression.trim();
                var mode = expression.charAt(0);
                if ('#/{&^>!<'.indexOf(mode) >= 0) {
                    expression = expression.substr(1).trim();
                } else {
                    mode = null;
                }
                if (mode === '{' && state.node) {
                    mode = null;
                }
                return {
                    mode: mode,
                    expression: expression
                };
            },
            cleanLineEndings: function (template) {
                return template.replace(mustacheLineBreakRegExp, function (whole, returnBefore, spaceBefore, special, expression, spaceAfter, returnAfter, spaceLessSpecial, spaceLessExpression, matchIndex) {
                    spaceAfter = spaceAfter || '';
                    returnBefore = returnBefore || '';
                    spaceBefore = spaceBefore || '';
                    var modeAndExpression = splitModeFromExpression(expression || spaceLessExpression, {});
                    if (spaceLessSpecial || '>{'.indexOf(modeAndExpression.mode) >= 0) {
                        return whole;
                    } else if ('^#!/'.indexOf(modeAndExpression.mode) >= 0) {
                        spaceBefore = returnBefore + spaceBefore && ' ';
                        return spaceBefore + special + (matchIndex !== 0 && returnAfter.length ? returnBefore + '\n' : '');
                    } else {
                        return spaceBefore + special + spaceAfter + (spaceBefore.length || matchIndex !== 0 ? returnBefore + '\n' : '');
                    }
                });
            },
            cleanWhitespaceControl: function (template) {
                return template.replace(mustacheWhitespaceRegExp, function (whole, spaceBefore, bracketBefore, controlBefore, expression, controlAfter, bracketAfter, spaceAfter, matchIndex) {
                    if (controlBefore === '-') {
                        spaceBefore = '';
                    }
                    if (controlAfter === '-') {
                        spaceAfter = '';
                    }
                    return spaceBefore + bracketBefore + expression + bracketAfter + spaceAfter;
                });
            },
            getTemplateById: function () {
            }
        };
        var makeEvaluator = core.makeEvaluator, splitModeFromExpression = core.splitModeFromExpression;
        module.exports = core;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-globals@1.2.0#base-url/base-url*/
define('can-globals@1.2.0#base-url/base-url', [
    'require',
    'exports',
    'module',
    '../can-globals-instance',
    '../global/global',
    '../document/document'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var globals = require('../can-globals-instance');
        require('../global/global');
        require('../document/document');
        globals.define('base-url', function () {
            var global = globals.getKeyValue('global');
            var domDocument = globals.getKeyValue('document');
            if (domDocument && 'baseURI' in domDocument) {
                return domDocument.baseURI;
            } else if (global.location) {
                var href = global.location.href;
                var lastSlash = href.lastIndexOf('/');
                return lastSlash !== -1 ? href.substr(0, lastSlash) : href;
            } else if (typeof process !== 'undefined') {
                return process.cwd();
            }
        });
        module.exports = globals.makeExport('base-url');
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-join-uris@1.2.0#can-join-uris*/
define('can-join-uris@1.2.0#can-join-uris', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-parse-uri'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var parseURI = require('can-parse-uri');
    module.exports = namespace.joinURIs = function (base, href) {
        function removeDotSegments(input) {
            var output = [];
            input.replace(/^(\.\.?(\/|$))+/, '').replace(/\/(\.(\/|$))+/g, '/').replace(/\/\.\.$/, '/../').replace(/\/?[^\/]*/g, function (p) {
                if (p === '/..') {
                    output.pop();
                } else {
                    output.push(p);
                }
            });
            return output.join('').replace(/^\//, input.charAt(0) === '/' ? '/' : '');
        }
        href = parseURI(href || '');
        base = parseURI(base || '');
        return !href || !base ? null : (href.protocol || base.protocol) + (href.protocol || href.authority ? href.authority : base.authority) + removeDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === '/' ? href.pathname : href.pathname ? (base.authority && !base.pathname ? '/' : '') + base.pathname.slice(0, base.pathname.lastIndexOf('/') + 1) + href.pathname : base.pathname) + (href.protocol || href.authority || href.pathname ? href.search : href.search || base.search) + href.hash;
    };
});
/*can-stache@4.9.0#helpers/-debugger*/
define('can-stache@4.9.0#helpers/-debugger', [
    'require',
    'exports',
    'module',
    'can-log'
], function (require, exports, module) {
    'use strict';
    var canLog = require('can-log');
    function noop() {
    }
    var resolveValue = noop;
    var evaluateArgs = noop;
    var __testing = {};
    function debuggerHelper(left, right) {
        canLog.warn('Forgotten {{debugger}} helper');
    }
    debuggerHelper.requiresOptionsArgument = true;
    module.exports = {
        helper: debuggerHelper,
        evaluateArgs: evaluateArgs,
        resolveValue: resolveValue,
        __testing: __testing
    };
});
/*can-stache@4.9.0#src/truthy-observable*/
define('can-stache@4.9.0#src/truthy-observable', [
    'require',
    'exports',
    'module',
    'can-observation',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var Observation = require('can-observation');
    var canReflect = require('can-reflect');
    module.exports = function (observable) {
        return new Observation(function truthyObservation() {
            var val = canReflect.getValue(observable);
            return !!val;
        });
    };
});
/*can-dom-data@1.0.1#can-dom-data*/
define('can-dom-data@1.0.1#can-dom-data', [
    'require',
    'exports',
    'module',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var namespace = require('can-namespace');
    var isEmptyObject = function (obj) {
        for (var prop in obj) {
            return false;
        }
        return true;
    };
    var data = new WeakMap();
    var deleteNode = function (node) {
        var nodeDeleted = false;
        if (data.has(node)) {
            nodeDeleted = true;
            data.delete(node);
        }
        return nodeDeleted;
    };
    var setData = function (node, name, value) {
        var store = data.get(node);
        if (store === undefined) {
            store = {};
            data.set(node, store);
        }
        if (name !== undefined) {
            store[name] = value;
        }
        return store;
    };
    var domData = {
        _data: data,
        get: function (node, key) {
            var store = data.get(node);
            return key === undefined ? store : store && store[key];
        },
        set: setData,
        clean: function (node, prop) {
            var itemData = data.get(node);
            if (itemData && itemData[prop]) {
                delete itemData[prop];
            }
            if (isEmptyObject(itemData)) {
                deleteNode(node);
            }
        },
        delete: deleteNode
    };
    if (namespace.domData) {
        throw new Error('You can\'t have two versions of can-dom-data, check your dependencies');
    } else {
        module.exports = namespace.domData = domData;
    }
});
/*can-stache@4.9.0#helpers/core*/
define('can-stache@4.9.0#helpers/core', [
    'require',
    'exports',
    'module',
    'can-view-live',
    'can-view-nodelist',
    '../src/utils',
    'can-globals/base-url/base-url',
    'can-join-uris',
    'can-assign',
    'can-log/dev/dev',
    'can-reflect',
    './-debugger',
    '../src/key-observable',
    'can-observation',
    '../src/truthy-observable',
    'can-stache-helpers',
    'can-dom-data',
    'can-dom-data-state'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var live = require('can-view-live');
        var nodeLists = require('can-view-nodelist');
        var utils = require('../src/utils');
        var getBaseURL = require('can-globals/base-url/base-url');
        var joinURIs = require('can-join-uris');
        var assign = require('can-assign');
        var dev = require('can-log/dev/dev');
        var canReflect = require('can-reflect');
        var debuggerHelper = require('./-debugger').helper;
        var KeyObservable = require('../src/key-observable');
        var Observation = require('can-observation');
        var TruthyObservable = require('../src/truthy-observable');
        var helpers = require('can-stache-helpers');
        var domData = require('can-dom-data');
        var domDataState = require('can-dom-data-state');
        var looksLikeOptions = function (options) {
            return options && typeof options.fn === 'function' && typeof options.inverse === 'function';
        };
        var resolve = function (value) {
            if (value && canReflect.isValueLike(value)) {
                return canReflect.getValue(value);
            } else {
                return value;
            }
        };
        var resolveHash = function (hash) {
            var params = {};
            for (var prop in hash) {
                params[prop] = resolve(hash[prop]);
            }
            return params;
        };
        var bindAndRead = function (value) {
            if (value && canReflect.isValueLike(value)) {
                Observation.temporarilyBind(value);
                return canReflect.getValue(value);
            } else {
                return value;
            }
        };
        var eachHelper = function (items) {
            var args = [].slice.call(arguments), options = args.pop(), hashExprs = options.exprData.hashExprs, resolved = bindAndRead(items), hashOptions, aliases;
            if (canReflect.size(hashExprs) > 0) {
                hashOptions = {};
                canReflect.eachKey(hashExprs, function (exprs, key) {
                    hashOptions[exprs.key] = key;
                });
            }
            if ((canReflect.isObservableLike(resolved) && canReflect.isListLike(resolved) || canReflect.isListLike(resolved) && canReflect.isValueLike(items)) && !options.stringOnly) {
                options.metadata.rendered = true;
                return function (el) {
                    var nodeList = [el];
                    nodeList.expression = 'live.list';
                    nodeLists.register(nodeList, null, options.nodeList, true);
                    nodeLists.update(options.nodeList, [el]);
                    var cb = function (item, index, parentNodeList) {
                        var aliases = {};
                        if (canReflect.size(hashOptions) > 0) {
                            if (hashOptions.value) {
                                aliases[hashOptions.value] = item;
                            }
                            if (hashOptions.index) {
                                aliases[hashOptions.index] = index;
                            }
                        }
                        return options.fn(options.scope.add(aliases, { notContext: true }).add({ index: index }, { special: true }).add(item), options.options, parentNodeList);
                    };
                    live.list(el, items, cb, options.context, el.parentNode, nodeList, function (list, parentNodeList) {
                        return options.inverse(options.scope.add(list), options.options, parentNodeList);
                    });
                };
            }
            var expr = resolve(items), result;
            if (!!expr && canReflect.isListLike(expr)) {
                result = utils.getItemsFragContent(expr, options, options.scope);
                return options.stringOnly ? result.join('') : result;
            } else if (canReflect.isObservableLike(expr) && canReflect.isMapLike(expr) || expr instanceof Object) {
                result = [];
                canReflect.each(expr, function (val, key) {
                    var value = new KeyObservable(expr, key);
                    aliases = {};
                    if (canReflect.size(hashOptions) > 0) {
                        if (hashOptions.value) {
                            aliases[hashOptions.value] = value;
                        }
                        if (hashOptions.key) {
                            aliases[hashOptions.key] = key;
                        }
                    }
                    result.push(options.fn(options.scope.add(aliases, { notContext: true }).add({ key: key }, { special: true }).add(value)));
                });
                return options.stringOnly ? result.join('') : result;
            }
        };
        eachHelper.isLiveBound = true;
        eachHelper.requiresOptionsArgument = true;
        eachHelper.ignoreArgLookup = function ignoreArgLookup(index) {
            return index === 1;
        };
        var indexHelper = function (offset, options) {
            if (!options) {
                options = offset;
                offset = 0;
            }
            var index = options.scope.peek('scope.index');
            return '' + ((typeof index === 'function' ? index() : index) + offset);
        };
        indexHelper.requiresOptionsArgument = true;
        var ifHelper = function (expr, options) {
            var value;
            if (expr && canReflect.isValueLike(expr)) {
                value = canReflect.getValue(new TruthyObservable(expr));
            } else {
                value = !!resolve(expr);
            }
            if (value) {
                return options.fn(options.scope || this);
            } else {
                return options.inverse(options.scope || this);
            }
        };
        ifHelper.requiresOptionsArgument = true;
        var isHelper = function () {
            var lastValue, curValue, options = arguments[arguments.length - 1];
            if (arguments.length <= 2) {
                return options.inverse();
            }
            var args = arguments;
            function isHelper() {
                for (var i = 0; i < args.length - 1; i++) {
                    curValue = resolve(args[i]);
                    curValue = typeof curValue === 'function' ? curValue() : curValue;
                    if (i > 0) {
                        if (curValue !== lastValue) {
                            return false;
                        }
                    }
                    lastValue = curValue;
                }
                return true;
            }
            var callFn = new Observation(isHelper);
            return callFn.get() ? options.fn() : options.inverse();
        };
        isHelper.requiresOptionsArgument = true;
        var unlessHelper = function (expr, options) {
            return ifHelper.apply(this, [
                expr,
                assign(assign({}, options), {
                    fn: options.inverse,
                    inverse: options.fn
                })
            ]);
        };
        unlessHelper.requiresOptionsArgument = true;
        var withHelper = function (expr, options) {
            var ctx = expr;
            if (!options) {
                options = expr;
                expr = true;
                ctx = options.hash;
            } else {
                expr = resolve(expr);
                if (options.hash && canReflect.size(options.hash) > 0) {
                    ctx = options.scope.add(options.hash, { notContext: true }).add(ctx);
                }
            }
            return options.fn(ctx || {});
        };
        withHelper.requiresOptionsArgument = true;
        var dataHelper = function (attr, value) {
            var data = (looksLikeOptions(value) ? value.context : value) || this;
            return function setData(el) {
                domDataState.set.call(el, attr, data);
            };
        };
        var domDataHelper = function (attr, value) {
            var data = (looksLikeOptions(value) ? value.context : value) || this;
            return function setDomData(el) {
                domData.set(el, attr, data);
            };
        };
        var switchHelper = function (expression, options) {
            resolve(expression);
            var found = false;
            var caseHelper = function (value, options) {
                if (!found && resolve(expression) === resolve(value)) {
                    found = true;
                    return options.fn(options.scope.peek('this') || this);
                }
            };
            caseHelper.requiresOptionsArgument = true;
            var defaultHelper = function (options) {
                if (!found) {
                    return options ? options.scope.peek('this') : true;
                }
            };
            defaultHelper.requiresOptionsArgument = true;
            canReflect.assignSymbols(defaultHelper, {
                'can.isValueLike': true,
                'can.isFunctionLike': false,
                'can.getValue': function () {
                    return this(options);
                }
            });
            var newScope = options.scope.add({
                case: caseHelper,
                default: defaultHelper
            }, { notContext: true });
            return options.fn(newScope, options);
        };
        switchHelper.requiresOptionsArgument = true;
        var joinBaseHelper = function (firstExpr) {
            var args = [].slice.call(arguments);
            var options = args.pop();
            var moduleReference = args.map(function (expr) {
                var value = resolve(expr);
                return typeof value === 'function' ? value() : value;
            }).join('');
            var templateModule = canReflect.getKeyValue(options.scope.templateContext.helpers, 'module');
            var parentAddress = templateModule ? templateModule.uri : undefined;
            var isRelative = moduleReference[0] === '.';
            if (isRelative && parentAddress) {
                return joinURIs(parentAddress, moduleReference);
            } else {
                var baseURL = typeof System !== 'undefined' && (System.renderingBaseURL || System.baseURL) || getBaseURL();
                if (moduleReference[0] !== '/' && baseURL[baseURL.length - 1] !== '/') {
                    baseURL += '/';
                }
                return joinURIs(baseURL, moduleReference);
            }
        };
        joinBaseHelper.requiresOptionsArgument = true;
        var builtInHelpers = {
            'debugger': debuggerHelper,
            each: eachHelper,
            eachOf: eachHelper,
            index: indexHelper,
            'if': ifHelper,
            is: isHelper,
            eq: isHelper,
            unless: unlessHelper,
            'with': withHelper,
            console: console,
            data: dataHelper,
            domData: domDataHelper,
            'switch': switchHelper,
            joinBase: joinBaseHelper
        };
        var addBuiltInHelpers = function () {
            canReflect.each(builtInHelpers, function (helper, helperName) {
                helpers[helperName] = helper;
            });
        };
        addBuiltInHelpers();
        var registerHelper = function (name, callback) {
            callback.requiresOptionsArgument = true;
            helpers[name] = callback;
        };
        var registerHelpers = function (helpers) {
            var name, callback;
            for (name in helpers) {
                callback = helpers[name];
                registerHelper(name, makeSimpleHelper(callback));
            }
        };
        var makeSimpleHelper = function (fn) {
            return function () {
                var realArgs = [];
                canReflect.eachIndex(arguments, function (val) {
                    while (val && val.isComputed) {
                        val = val();
                    }
                    realArgs.push(val);
                });
                return fn.apply(this, realArgs);
            };
        };
        module.exports = {
            registerHelper: registerHelper,
            addHelper: function (name, callback) {
                if (typeof name === 'object') {
                    return registerHelpers(name);
                }
                return registerHelper(name, makeSimpleHelper(callback));
            },
            addLiveHelper: function (name, callback) {
                callback.isLiveBound = true;
                return registerHelper(name, callback);
            },
            getHelper: function (name, scope) {
                var helper = scope && scope.getHelper(name);
                if (!helper) {
                    helper = helpers[name];
                }
                return helper;
            },
            resolve: resolve,
            resolveHash: resolveHash,
            looksLikeOptions: looksLikeOptions,
            __resetHelpers: function () {
                for (var helper in helpers) {
                    delete helpers[helper];
                }
                addBuiltInHelpers();
            }
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-stache@4.9.0#helpers/converter*/
define('can-stache@4.9.0#helpers/converter', [
    'require',
    'exports',
    'module',
    './core',
    '../src/set-identifier',
    'can-reflect'
], function (require, exports, module) {
    'use strict';
    var helpers = require('./core');
    var SetIdentifier = require('../src/set-identifier');
    var canReflect = require('can-reflect');
    function makeConverter(getterSetter) {
        getterSetter = getterSetter || {};
        return function (newVal, source) {
            var args = canReflect.toArray(arguments);
            if (newVal instanceof SetIdentifier) {
                return typeof getterSetter.set === 'function' ? getterSetter.set.apply(this, [newVal.value].concat(args.slice(1))) : source(newVal.value);
            } else {
                return typeof getterSetter.get === 'function' ? getterSetter.get.apply(this, args) : args[0];
            }
        };
    }
    var converterPackages = new WeakMap();
    helpers.addConverter = function (name, getterSetter) {
        if (typeof name === 'object') {
            if (!converterPackages.has(name)) {
                converterPackages.set(name, true);
                canReflect.eachKey(name, function (getterSetter, name) {
                    helpers.addConverter(name, getterSetter);
                });
            }
            return;
        }
        var helper = makeConverter(getterSetter);
        helper.isLiveBound = true;
        helpers.registerHelper(name, helper);
    };
    helpers.registerConverter = function (name, getterSetter) {
        helpers.registerHelper(name, makeConverter(getterSetter));
    };
    module.exports = helpers;
});
/*can-stache-ast@1.1.0#controls*/
define('can-stache-ast@1.1.0#controls', function (require, exports, module) {
    'use strict';
    var mustacheLineBreakRegExp = /(?:(^|\r?\n)(\s*)(\{\{([\s\S]*)\}\}\}?)([^\S\n\r]*)($|\r?\n))|(\{\{([\s\S]*)\}\}\}?)/g, mustacheWhitespaceRegExp = /(\s*)(\{\{\{?)(-?)([\s\S]*?)(-?)(\}\}\}?)(\s*)/g;
    function splitModeFromExpression(expression, state) {
        expression = expression.trim();
        var mode = expression.charAt(0);
        if ('#/{&^>!<'.indexOf(mode) >= 0) {
            expression = expression.substr(1).trim();
        } else {
            mode = null;
        }
        if (mode === '{' && state.node) {
            mode = null;
        }
        return {
            mode: mode,
            expression: expression
        };
    }
    function cleanLineEndings(template) {
        return template.replace(mustacheLineBreakRegExp, function (whole, returnBefore, spaceBefore, special, expression, spaceAfter, returnAfter, spaceLessSpecial, spaceLessExpression, matchIndex) {
            spaceAfter = spaceAfter || '';
            returnBefore = returnBefore || '';
            spaceBefore = spaceBefore || '';
            var modeAndExpression = splitModeFromExpression(expression || spaceLessExpression, {});
            if (spaceLessSpecial || '>{'.indexOf(modeAndExpression.mode) >= 0) {
                return whole;
            } else if ('^#!/'.indexOf(modeAndExpression.mode) >= 0) {
                spaceBefore = returnBefore + spaceBefore && ' ';
                return spaceBefore + special + (matchIndex !== 0 && returnAfter.length ? returnBefore + '\n' : '');
            } else {
                return spaceBefore + special + spaceAfter + (spaceBefore.length || matchIndex !== 0 ? returnBefore + '\n' : '');
            }
        });
    }
    function whiteSpaceReplacement(whole, spaceBefore, bracketBefore, controlBefore, expression, controlAfter, bracketAfter, spaceAfter) {
        if (controlBefore === '-') {
            spaceBefore = '';
        }
        if (controlAfter === '-') {
            spaceAfter = '';
        }
        return spaceBefore + bracketBefore + expression + bracketAfter + spaceAfter;
    }
    function cleanWhitespaceControl(template) {
        return template.replace(mustacheWhitespaceRegExp, whiteSpaceReplacement);
    }
    exports.cleanLineEndings = cleanLineEndings;
    exports.cleanWhitespaceControl = cleanWhitespaceControl;
});
/*can-stache-ast@1.1.0#can-stache-ast*/
define('can-stache-ast@1.1.0#can-stache-ast', [
    'require',
    'exports',
    'module',
    './controls',
    'can-view-parser'
], function (require, exports, module) {
    'use strict';
    var controls = require('./controls');
    var parser = require('can-view-parser');
    exports.parse = function (filename, source) {
        if (arguments.length === 1) {
            source = arguments[0];
            filename = undefined;
        }
        var template = source;
        template = controls.cleanWhitespaceControl(template);
        template = controls.cleanLineEndings(template);
        var imports = [], dynamicImports = [], importDeclarations = [], ases = {}, attributes = new Map(), inImport = false, inFrom = false, inAs = false, isUnary = false, importIsDynamic = false, currentAs = '', currentFrom = '', currentAttrName = null;
        function processImport(line) {
            if (currentAs) {
                ases[currentAs] = currentFrom;
                currentAs = '';
            }
            if (importIsDynamic) {
                dynamicImports.push(currentFrom);
            } else {
                imports.push(currentFrom);
            }
            importDeclarations.push({
                specifier: currentFrom,
                loc: { line: line },
                attributes: attributes
            });
            attributes = new Map();
        }
        var program = parser(template, {
            filename: filename,
            start: function (tagName, unary) {
                if (tagName === 'can-import') {
                    isUnary = unary;
                    importIsDynamic = false;
                    inImport = true;
                } else if (tagName === 'can-dynamic-import') {
                    isUnary = unary;
                    importIsDynamic = true;
                    inImport = true;
                } else if (inImport) {
                    importIsDynamic = true;
                    inImport = false;
                }
            },
            attrStart: function (attrName) {
                currentAttrName = attrName;
                attributes.set(currentAttrName, true);
                if (attrName === 'from') {
                    inFrom = true;
                } else if (attrName === 'as' || attrName === 'export-as') {
                    inAs = true;
                }
            },
            attrEnd: function (attrName) {
                if (attrName === 'from') {
                    inFrom = false;
                } else if (attrName === 'as' || attrName === 'export-as') {
                    inAs = false;
                }
            },
            attrValue: function (value) {
                if (inImport) {
                    attributes.set(currentAttrName, value);
                }
                if (inFrom && inImport) {
                    currentFrom = value;
                } else if (inAs && inImport) {
                    currentAs = value;
                }
            },
            end: function (tagName, unary, line) {
                if ((tagName === 'can-import' || tagName === 'can-dynamic-import') && isUnary) {
                    processImport(line);
                }
            },
            close: function (tagName, unary, line) {
                if (tagName === 'can-import' || tagName === 'can-dynamic-import') {
                    processImport(line);
                }
            },
            chars: function (text) {
                if (text.trim().length > 0) {
                    importIsDynamic = true;
                }
            },
            special: function () {
                importIsDynamic = true;
            }
        }, true);
        return {
            intermediate: program,
            program: program,
            imports: imports,
            dynamicImports: dynamicImports,
            importDeclarations: importDeclarations,
            ases: ases,
            exports: ases
        };
    };
});
/*can-import-module@1.2.0#can-import-module*/
define('can-import-module@1.2.0#can-import-module', [
    'require',
    'exports',
    'module',
    'can-globals/global/global',
    'can-namespace'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getGlobal = require('can-globals/global/global');
        var namespace = require('can-namespace');
        module.exports = namespace.import = function (moduleName, parentName) {
            return new Promise(function (resolve, reject) {
                try {
                    var global = getGlobal();
                    if (typeof global.System === 'object' && isFunction(global.System['import'])) {
                        global.System['import'](moduleName, { name: parentName }).then(resolve, reject);
                    } else if (global.define && global.define.amd) {
                        global.require([moduleName], function (value) {
                            resolve(value);
                        });
                    } else if (global.require) {
                        resolve(global.require(moduleName));
                    } else {
                        if (typeof stealRequire !== 'undefined') {
                            steal.import(moduleName, { name: parentName }).then(resolve, reject);
                        } else {
                            resolve();
                        }
                    }
                } catch (err) {
                    reject(err);
                }
            });
        };
        function isFunction(fn) {
            return typeof fn === 'function';
        }
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-stache@4.9.0#can-stache*/
define('can-stache@4.9.0#can-stache', [
    'require',
    'exports',
    'module',
    'can-view-parser',
    'can-view-callbacks',
    './src/html_section',
    './src/text_section',
    './src/mustache_core',
    './helpers/core',
    './helpers/converter',
    'can-stache-ast',
    './src/utils',
    'can-attribute-encoder',
    'can-log/dev/dev',
    'can-namespace',
    'can-globals/document/document',
    'can-assign',
    'can-import-module',
    'can-reflect',
    'can-view-target',
    'can-view-nodelist'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var parser = require('can-view-parser');
        var viewCallbacks = require('can-view-callbacks');
        var HTMLSectionBuilder = require('./src/html_section');
        var TextSectionBuilder = require('./src/text_section');
        var mustacheCore = require('./src/mustache_core');
        var mustacheHelpers = require('./helpers/core');
        require('./helpers/converter');
        var getIntermediateAndImports = require('can-stache-ast').parse;
        var utils = require('./src/utils');
        var makeRendererConvertScopes = utils.makeRendererConvertScopes;
        var last = utils.last;
        var attributeEncoder = require('can-attribute-encoder');
        var dev = require('can-log/dev/dev');
        var namespace = require('can-namespace');
        var DOCUMENT = require('can-globals/document/document');
        var assign = require('can-assign');
        var importer = require('can-import-module');
        var canReflect = require('can-reflect');
        require('can-view-target');
        require('can-view-nodelist');
        if (!viewCallbacks.tag('content')) {
            viewCallbacks.tag('content', function (el, tagData) {
                return tagData.scope;
            });
        }
        var wrappedAttrPattern = /[{(].*[)}]/;
        var colonWrappedAttrPattern = /^on:|(:to|:from|:bind)$|.*:to:on:.*/;
        var svgNamespace = 'http://www.w3.org/2000/svg';
        var namespaces = {
                'svg': svgNamespace,
                'g': svgNamespace
            }, textContentOnlyTag = {
                style: true,
                script: true
            };
        function stache(filename, template) {
            if (arguments.length === 1) {
                template = arguments[0];
                filename = undefined;
            }
            var inlinePartials = {};
            if (typeof template === 'string') {
                template = mustacheCore.cleanWhitespaceControl(template);
                template = mustacheCore.cleanLineEndings(template);
            }
            var section = new HTMLSectionBuilder(filename), state = {
                    node: null,
                    attr: null,
                    sectionElementStack: [],
                    text: false,
                    namespaceStack: [],
                    textContentOnly: null
                }, makeRendererAndUpdateSection = function (section, mode, stache, lineNo) {
                    if (mode === '>') {
                        section.add(mustacheCore.makeLiveBindingPartialRenderer(stache, copyState({
                            filename: section.filename,
                            lineNo: lineNo
                        })));
                    } else if (mode === '/') {
                        var createdSection = section.last();
                        if (createdSection.startedWith === '<') {
                            inlinePartials[stache] = section.endSubSectionAndReturnRenderer();
                            section.removeCurrentNode();
                        } else {
                            section.endSection();
                        }
                        if (section instanceof HTMLSectionBuilder) {
                            state.sectionElementStack.pop();
                        }
                    } else if (mode === 'else') {
                        section.inverse();
                    } else {
                        var makeRenderer = section instanceof HTMLSectionBuilder ? mustacheCore.makeLiveBindingBranchRenderer : mustacheCore.makeStringBranchRenderer;
                        if (mode === '{' || mode === '&') {
                            section.add(makeRenderer(null, stache, copyState({
                                filename: section.filename,
                                lineNo: lineNo
                            })));
                        } else if (mode === '#' || mode === '^' || mode === '<') {
                            var renderer = makeRenderer(mode, stache, copyState({
                                filename: section.filename,
                                lineNo: lineNo
                            }));
                            var sectionItem = { type: 'section' };
                            section.startSection(renderer);
                            section.last().startedWith = mode;
                            if (section instanceof HTMLSectionBuilder) {
                                state.sectionElementStack.push(sectionItem);
                            }
                        } else {
                            section.add(makeRenderer(null, stache, copyState({
                                text: true,
                                filename: section.filename,
                                lineNo: lineNo
                            })));
                        }
                    }
                }, isDirectlyNested = function () {
                    var lastElement = state.sectionElementStack[state.sectionElementStack.length - 1];
                    return state.sectionElementStack.length ? lastElement.type === 'section' || lastElement.type === 'custom' : true;
                }, copyState = function (overwrites) {
                    var cur = {
                        tag: state.node && state.node.tag,
                        attr: state.attr && state.attr.name,
                        directlyNested: isDirectlyNested(),
                        textContentOnly: !!state.textContentOnly
                    };
                    return overwrites ? assign(cur, overwrites) : cur;
                }, addAttributesCallback = function (node, callback) {
                    if (!node.attributes) {
                        node.attributes = [];
                    }
                    node.attributes.unshift(callback);
                };
            parser(template, {
                filename: filename,
                start: function (tagName, unary, lineNo) {
                    var matchedNamespace = namespaces[tagName];
                    if (matchedNamespace && !unary) {
                        state.namespaceStack.push(matchedNamespace);
                    }
                    state.node = {
                        tag: tagName,
                        children: [],
                        namespace: matchedNamespace || last(state.namespaceStack)
                    };
                },
                end: function (tagName, unary, lineNo) {
                    var isCustomTag = viewCallbacks.tag(tagName);
                    var directlyNested = isDirectlyNested();
                    if (unary) {
                        section.add(state.node);
                        if (isCustomTag) {
                            addAttributesCallback(state.node, function (scope, parentNodeList) {
                                viewCallbacks.tagHandler(this, tagName, {
                                    scope: scope,
                                    subtemplate: null,
                                    templateType: 'stache',
                                    parentNodeList: parentNodeList,
                                    directlyNested: directlyNested
                                });
                            });
                        }
                    } else {
                        section.push(state.node);
                        state.sectionElementStack.push({
                            type: isCustomTag ? 'custom' : null,
                            tag: isCustomTag ? null : tagName,
                            templates: {},
                            directlyNested: directlyNested
                        });
                        if (isCustomTag) {
                            section.startSubSection();
                        } else if (textContentOnlyTag[tagName]) {
                            state.textContentOnly = new TextSectionBuilder();
                        }
                    }
                    state.node = null;
                },
                close: function (tagName, lineNo) {
                    var matchedNamespace = namespaces[tagName];
                    if (matchedNamespace) {
                        state.namespaceStack.pop();
                    }
                    var isCustomTag = viewCallbacks.tag(tagName), renderer;
                    if (isCustomTag) {
                        renderer = section.endSubSectionAndReturnRenderer();
                    }
                    if (textContentOnlyTag[tagName]) {
                        section.last().add(state.textContentOnly.compile(copyState()));
                        state.textContentOnly = null;
                    }
                    var oldNode = section.pop();
                    if (isCustomTag) {
                        if (tagName === 'can-template') {
                            var parent = state.sectionElementStack[state.sectionElementStack.length - 2];
                            if (renderer) {
                                parent.templates[oldNode.attrs.name] = makeRendererConvertScopes(renderer);
                            }
                            section.removeCurrentNode();
                        } else {
                            var current = state.sectionElementStack[state.sectionElementStack.length - 1];
                            addAttributesCallback(oldNode, function (scope, parentNodeList) {
                                viewCallbacks.tagHandler(this, tagName, {
                                    scope: scope,
                                    subtemplate: renderer ? makeRendererConvertScopes(renderer) : renderer,
                                    templateType: 'stache',
                                    parentNodeList: parentNodeList,
                                    templates: current.templates,
                                    directlyNested: current.directlyNested
                                });
                            });
                        }
                    }
                    state.sectionElementStack.pop();
                },
                attrStart: function (attrName, lineNo) {
                    if (state.node.section) {
                        state.node.section.add(attrName + '="');
                    } else {
                        state.attr = {
                            name: attrName,
                            value: ''
                        };
                    }
                },
                attrEnd: function (attrName, lineNo) {
                    if (state.node.section) {
                        state.node.section.add('" ');
                    } else {
                        if (!state.node.attrs) {
                            state.node.attrs = {};
                        }
                        state.node.attrs[state.attr.name] = state.attr.section ? state.attr.section.compile(copyState()) : state.attr.value;
                        var attrCallback = viewCallbacks.attr(attrName);
                        if (attrCallback) {
                            if (!state.node.attributes) {
                                state.node.attributes = [];
                            }
                            state.node.attributes.push(function (scope, nodeList) {
                                attrCallback(this, {
                                    attributeName: attrName,
                                    scope: scope,
                                    nodeList: nodeList
                                });
                            });
                        }
                        state.attr = null;
                    }
                },
                attrValue: function (value, lineNo) {
                    var section = state.node.section || state.attr.section;
                    if (section) {
                        section.add(value);
                    } else {
                        state.attr.value += value;
                    }
                },
                chars: function (text, lineNo) {
                    (state.textContentOnly || section).add(text);
                },
                special: function (text, lineNo) {
                    var firstAndText = mustacheCore.splitModeFromExpression(text, state), mode = firstAndText.mode, expression = firstAndText.expression;
                    if (expression === 'else') {
                        var inverseSection;
                        if (state.attr && state.attr.section) {
                            inverseSection = state.attr.section;
                        } else if (state.node && state.node.section) {
                            inverseSection = state.node.section;
                        } else {
                            inverseSection = state.textContentOnly || section;
                        }
                        inverseSection.inverse();
                        return;
                    }
                    if (mode === '!') {
                        return;
                    }
                    if (state.node && state.node.section) {
                        makeRendererAndUpdateSection(state.node.section, mode, expression, lineNo);
                        if (state.node.section.subSectionDepth() === 0) {
                            state.node.attributes.push(state.node.section.compile(copyState()));
                            delete state.node.section;
                        }
                    } else if (state.attr) {
                        if (!state.attr.section) {
                            state.attr.section = new TextSectionBuilder();
                            if (state.attr.value) {
                                state.attr.section.add(state.attr.value);
                            }
                        }
                        makeRendererAndUpdateSection(state.attr.section, mode, expression, lineNo);
                    } else if (state.node) {
                        if (!state.node.attributes) {
                            state.node.attributes = [];
                        }
                        if (!mode) {
                            state.node.attributes.push(mustacheCore.makeLiveBindingBranchRenderer(null, expression, copyState({
                                filename: section.filename,
                                lineNo: lineNo
                            })));
                        } else if (mode === '#' || mode === '^') {
                            if (!state.node.section) {
                                state.node.section = new TextSectionBuilder();
                            }
                            makeRendererAndUpdateSection(state.node.section, mode, expression, lineNo);
                        } else {
                            throw new Error(mode + ' is currently not supported within a tag.');
                        }
                    } else {
                        makeRendererAndUpdateSection(state.textContentOnly || section, mode, expression, lineNo);
                    }
                },
                comment: function (text) {
                    section.add({ comment: text });
                },
                done: function (lineNo) {
                }
            });
            var renderer = section.compile();
            var scopifiedRenderer = HTMLSectionBuilder.scopify(function (scope, nodeList) {
                var templateContext = scope.templateContext;
                canReflect.eachKey(inlinePartials, function (partial, partialName) {
                    canReflect.setKeyValue(templateContext.partials, partialName, partial);
                });
                canReflect.setKeyValue(templateContext, 'view', scopifiedRenderer);
                return renderer.apply(this, arguments);
            });
            return scopifiedRenderer;
        }
        assign(stache, mustacheHelpers);
        stache.safeString = function (text) {
            return {
                toString: function () {
                    return text;
                }
            };
        };
        stache.async = function (source) {
            var iAi = getIntermediateAndImports(source);
            var importPromises = iAi.imports.map(function (moduleName) {
                return importer(moduleName);
            });
            return Promise.all(importPromises).then(function () {
                return stache(iAi.intermediate);
            });
        };
        var templates = {};
        stache.from = mustacheCore.getTemplateById = function (id) {
            if (!templates[id]) {
                var el = DOCUMENT().getElementById(id);
                if (el) {
                    templates[id] = stache('#' + id, el.innerHTML);
                }
            }
            return templates[id];
        };
        stache.registerPartial = function (id, partial) {
            templates[id] = typeof partial === 'string' ? stache(partial) : partial;
        };
        stache.addBindings = viewCallbacks.attrs;
        module.exports = namespace.stache = stache;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*passbolt-mad@2.10.0#view/helper/stache/i18n*/
define('passbolt-mad@2.10.0#view/helper/stache/i18n', ['can-stache'], function (_canStache) {
    'use strict';
    var _canStache2 = _interopRequireDefault(_canStache);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    _canStache2.default.registerHelper('__', function () {
        return __.apply(this, arguments);
    });
});
/*string-hash@1.1.3#index*/
define('string-hash@1.1.3#index', function (require, exports, module) {
    'use strict';
    function hash(str) {
        var hash = 5381, i = str.length;
        while (i) {
            hash = hash * 33 ^ str.charCodeAt(--i);
        }
        return hash >>> 0;
    }
    module.exports = hash;
});
/*passbolt-mad@2.10.0#view/helper/stache/hash*/
define('passbolt-mad@2.10.0#view/helper/stache/hash', [
    'can-stache',
    'string-hash'
], function (_canStache, _stringHash) {
    'use strict';
    var _canStache2 = _interopRequireDefault(_canStache);
    var _stringHash2 = _interopRequireDefault(_stringHash);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    _canStache2.default.registerHelper('hash', function (seed) {
        return (0, _stringHash2.default)(seed);
    });
});
/*can-util@3.12.0#js/is-string/is-string*/
define('can-util@3.12.0#js/is-string/is-string', [
    'require',
    'exports',
    'module',
    'can-log/dev/dev',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var dev = require('can-log/dev/dev');
    var namespace = require('can-namespace');
    var hasWarned = false;
    module.exports = namespace.isString = function isString(obj) {
        return typeof obj === 'string';
    };
});
/*passbolt-mad@2.10.0#view/helper/stache/string*/
define('passbolt-mad@2.10.0#view/helper/stache/string', [
    'can-stache',
    'can-util/js/string/string',
    'can-util/js/is-string/is-string'
], function (_canStache, _string, _isString) {
    'use strict';
    var _canStache2 = _interopRequireDefault(_canStache);
    var _string2 = _interopRequireDefault(_string);
    var _isString2 = _interopRequireDefault(_isString);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    _canStache2.default.registerHelper('capitalize', function () {
        return _string2.default.capitalize.apply(this, arguments);
    });
    _canStache2.default.registerHelper('isString', function () {
        return _isString2.default.apply(this, arguments);
    });
});
/*moment@2.24.0#moment*/
;
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define('moment@2.24.0#moment', factory) : global.moment = factory();
}(this, function () {
    'use strict';
    var hookCallback;
    function hooks() {
        return hookCallback.apply(null, arguments);
    }
    function setHookCallback(callback) {
        hookCallback = callback;
    }
    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }
    function isObject(input) {
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }
    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return Object.getOwnPropertyNames(obj).length === 0;
        } else {
            var k;
            for (k in obj) {
                if (obj.hasOwnProperty(k)) {
                    return false;
                }
            }
            return true;
        }
    }
    function isUndefined(input) {
        return input === void 0;
    }
    function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    }
    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }
    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }
    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }
    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }
        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }
        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }
        return a;
    }
    function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }
    function defaultParsingFlags() {
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false
        };
    }
    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }
    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this);
            var len = t.length >>> 0;
            for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }
            return false;
        };
    }
    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            var parsedParts = some.call(flags.parsedDateParts, function (i) {
                return i != null;
            });
            var isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
            if (m._strict) {
                isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
            }
            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            } else {
                return isNowValid;
            }
        }
        return m._isValid;
    }
    function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        } else {
            getParsingFlags(m).userInvalidated = true;
        }
        return m;
    }
    var momentProperties = hooks.momentProperties = [];
    function copyConfig(to, from) {
        var i, prop, val;
        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }
        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }
        return to;
    }
    var updateInProgress = false;
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }
    function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
    }
    function absFloor(number) {
        if (number < 0) {
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }
    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }
        return value;
    }
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
        for (i = 0; i < len; i++) {
            if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }
    function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }
    function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [];
                var arg;
                for (var i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (var key in arguments[0]) {
                            arg += key + ': ' + arguments[0][key] + ', ';
                        }
                        arg = arg.slice(0, -2);
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }
    var deprecations = {};
    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }
    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;
    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }
    function set(config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        this._config = config;
        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
    }
    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }
    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }
    var keys;
    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i, res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }
    var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L'
    };
    function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }
    var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A'
    };
    function longDateFormat(key) {
        var format = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format || !formatUpper) {
            return format;
        }
        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });
        return this._longDateFormat[key];
    }
    var defaultInvalidDate = 'Invalid date';
    function invalidDate() {
        return this._invalidDate;
    }
    var defaultOrdinal = '%d';
    var defaultDayOfMonthOrdinalParse = /\d{1,2}/;
    function ordinal(number) {
        return this._ordinal.replace('%d', number);
    }
    var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years'
    };
    function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    }
    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }
    var aliases = {};
    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }
    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }
    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {}, normalizedProp, prop;
        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }
        return normalizedInput;
    }
    var priorities = {};
    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }
    function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
            units.push({
                unit: u,
                priority: priorities[u]
            });
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }
    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign = number >= 0;
        return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }
    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
    var formatFunctions = {};
    var formatTokenFunctions = {};
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }
    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }
    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;
        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }
        return function (mom) {
            var output = '', i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }
        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
        return formatFunctions[format](m);
    }
    function expandFormat(format, locale) {
        var i = 5;
        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }
        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }
        return format;
    }
    var match1 = /\d/;
    var match2 = /\d\d/;
    var match3 = /\d{3}/;
    var match4 = /\d{4}/;
    var match6 = /[+-]?\d{6}/;
    var match1to2 = /\d\d?/;
    var match3to4 = /\d\d\d\d?/;
    var match5to6 = /\d\d\d\d\d\d?/;
    var match1to3 = /\d{1,3}/;
    var match1to4 = /\d{1,4}/;
    var match1to6 = /[+-]?\d{1,6}/;
    var matchUnsigned = /\d+/;
    var matchSigned = /[+-]?\d+/;
    var matchOffset = /Z|[+-]\d\d:?\d\d/gi;
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi;
    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/;
    var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;
    var regexes = {};
    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
            return isStrict && strictRegex ? strictRegex : regex;
        };
    }
    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }
        return regexes[token](config._strict, config._locale);
    }
    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }
    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }
    var tokens = {};
    function addParseToken(token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }
    function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }
    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }
    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;
    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
    });
    addFormatToken(0, [
        'YY',
        2
    ], 0, function () {
        return this.year() % 100;
    });
    addFormatToken(0, [
        'YYYY',
        4
    ], 0, 'year');
    addFormatToken(0, [
        'YYYYY',
        5
    ], 0, 'year');
    addFormatToken(0, [
        'YYYYYY',
        6,
        true
    ], 0, 'year');
    addUnitAlias('year', 'y');
    addUnitPriority('year', 1);
    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);
    addParseToken([
        'YYYYY',
        'YYYYYY'
    ], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });
    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }
    function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }
    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };
    var getSetYear = makeGetSet('FullYear', true);
    function getIsLeapYear() {
        return isLeapYear(this.year());
    }
    function makeGetSet(unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }
    function get(mom, unit) {
        return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }
    function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
            } else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }
    function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }
    function stringSet(units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units);
            for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }
    function mod(n, x) {
        return (n % x + x) % x;
    }
    var indexOf;
    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }
    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
    }
    addFormatToken('M', [
        'MM',
        2
    ], 'Mo', function () {
        return this.month() + 1;
    });
    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });
    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });
    addUnitAlias('month', 'M');
    addUnitPriority('month', 8);
    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });
    addParseToken([
        'M',
        'MM'
    ], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });
    addParseToken([
        'MMM',
        'MMMM'
    ], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });
    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths(m, format) {
        if (!m) {
            return isArray(this._months) ? this._months : this._months['standalone'];
        }
        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }
    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort(m, format) {
        if (!m) {
            return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }
    function handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([
                    2000,
                    i
                ]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }
        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }
    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;
        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }
        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }
        for (i = 0; i < 12; i++) {
            mom = createUTC([
                2000,
                i
            ]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }
    function setMonth(mom, value) {
        var dayOfMonth;
        if (!mom.isValid()) {
            return mom;
        }
        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }
        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }
    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }
    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }
    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }
    var defaultMonthsRegex = matchWord;
    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
    }
    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }
        var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
        for (i = 0; i < 12; i++) {
            mom = createUTC([
                2000,
                i
            ]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }
        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }
    function createDate(y, m, d, h, M, s, ms) {
        var date;
        if (y < 100 && y >= 0) {
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }
        return date;
    }
    function createUTCDate(y) {
        var date;
        if (y < 100 && y >= 0) {
            var args = Array.prototype.slice.call(arguments);
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }
        return date;
    }
    function firstWeekOffset(year, dow, doy) {
        var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
    }
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }
        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }
    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }
        return {
            week: resWeek,
            year: resYear
        };
    }
    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }
    addFormatToken('w', [
        'ww',
        2
    ], 'wo', 'week');
    addFormatToken('W', [
        'WW',
        2
    ], 'Wo', 'isoWeek');
    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');
    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);
    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);
    addWeekParseToken([
        'w',
        'ww',
        'W',
        'WW'
    ], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });
    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }
    var defaultLocaleWeek = {
        dow: 0,
        doy: 6
    };
    function localeFirstDayOfWeek() {
        return this._week.dow;
    }
    function localeFirstDayOfYear() {
        return this._week.doy;
    }
    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }
    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }
    addFormatToken('d', 0, 'do', 'day');
    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });
    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });
    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });
    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');
    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);
    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });
    addWeekParseToken([
        'dd',
        'ddd',
        'dddd'
    ], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });
    addWeekParseToken([
        'd',
        'e',
        'E'
    ], function (input, week, config, token) {
        week[token] = toInt(input);
    });
    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }
        if (!isNaN(input)) {
            return parseInt(input, 10);
        }
        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }
        return null;
    }
    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }
    function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }
    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format) ? 'format' : 'standalone'];
        return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
    }
    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort(m) {
        return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }
    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin(m) {
        return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }
    function handleStrictParse$1(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];
            for (i = 0; i < 7; ++i) {
                mom = createUTC([
                    2000,
                    1
                ]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }
        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }
    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;
        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }
        for (i = 0; i < 7; i++) {
            mom = createUTC([
                2000,
                1
            ]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }
    function getSetDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }
    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }
    function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }
    var defaultWeekdaysRegex = matchWord;
    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }
    var defaultWeekdaysShortRegex = matchWord;
    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }
    var defaultWeekdaysMinRegex = matchWord;
    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }
    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }
        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
            mom = createUTC([
                2000,
                1
            ]).day(i);
            minp = this.weekdaysMin(mom, '');
            shortp = this.weekdaysShort(mom, '');
            longp = this.weekdays(mom, '');
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }
        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }
    function hFormat() {
        return this.hours() % 12 || 12;
    }
    function kFormat() {
        return this.hours() || 24;
    }
    addFormatToken('H', [
        'HH',
        2
    ], 0, 'hour');
    addFormatToken('h', [
        'hh',
        2
    ], 0, hFormat);
    addFormatToken('k', [
        'kk',
        2
    ], 0, kFormat);
    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });
    addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });
    addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }
    meridiem('a', true);
    meridiem('A', false);
    addUnitAlias('hour', 'h');
    addUnitPriority('hour', 13);
    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }
    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('k', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);
    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);
    addParseToken([
        'H',
        'HH'
    ], HOUR);
    addParseToken([
        'k',
        'kk'
    ], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken([
        'a',
        'A'
    ], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken([
        'h',
        'hh'
    ], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });
    function localeIsPM(input) {
        return (input + '').toLowerCase().charAt(0) === 'p';
    }
    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }
    var getSetHour = makeGetSet('Hours', true);
    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
    };
    var locales = {};
    var localeFamilies = {};
    var globalLocale;
    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;
        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }
    function loadLocale(name) {
        var oldLocale = null;
        if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                var aliasedRequire = require;
                aliasedRequire('./locale/' + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {
            }
        }
        return locales[name];
    }
    function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            } else {
                data = defineLocale(key, values);
            }
            if (data) {
                globalLocale = data;
            } else {
                if (typeof console !== 'undefined' && console.warn) {
                    console.warn('Locale ' + key + ' not found. Did you forget to load it?');
                }
            }
        }
        return globalLocale._abbr;
    }
    function defineLocale(name, config) {
        if (config !== null) {
            var locale, parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));
            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }
            getSetGlobalLocale(name);
            return locales[name];
        } else {
            delete locales[name];
            return null;
        }
    }
    function updateLocale(name, config) {
        if (config != null) {
            var locale, tmpLocale, parentConfig = baseConfig;
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
                parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;
            getSetGlobalLocale(name);
        } else {
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }
    function getLocale(key) {
        var locale;
        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }
        if (!key) {
            return globalLocale;
        }
        if (!isArray(key)) {
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }
        return chooseLocale(key);
    }
    function listLocales() {
        return keys(locales);
    }
    function checkOverflow(m) {
        var overflow;
        var a = m._a;
        if (a && getParsingFlags(m).overflow === -2) {
            overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }
            getParsingFlags(m).overflow = overflow;
        }
        return m;
    }
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }
    function currentDateArray(config) {
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [
                nowValue.getUTCFullYear(),
                nowValue.getUTCMonth(),
                nowValue.getUTCDate()
            ];
        }
        return [
            nowValue.getFullYear(),
            nowValue.getMonth(),
            nowValue.getDate()
        ];
    }
    function configFromArray(config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;
        if (config._d) {
            return;
        }
        currentDate = currentDateArray(config);
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }
            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }
        for (; i < 7; i++) {
            config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        }
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }
        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }
        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }
    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;
            var curWeek = weekOfYear(createLocal(), dow, doy);
            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
            week = defaults(w.w, curWeek.week);
            if (w.d != null) {
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
    var isoDates = [
        [
            'YYYYYY-MM-DD',
            /[+-]\d{6}-\d\d-\d\d/
        ],
        [
            'YYYY-MM-DD',
            /\d{4}-\d\d-\d\d/
        ],
        [
            'GGGG-[W]WW-E',
            /\d{4}-W\d\d-\d/
        ],
        [
            'GGGG-[W]WW',
            /\d{4}-W\d\d/,
            false
        ],
        [
            'YYYY-DDD',
            /\d{4}-\d{3}/
        ],
        [
            'YYYY-MM',
            /\d{4}-\d\d/,
            false
        ],
        [
            'YYYYYYMMDD',
            /[+-]\d{10}/
        ],
        [
            'YYYYMMDD',
            /\d{8}/
        ],
        [
            'GGGG[W]WWE',
            /\d{4}W\d{3}/
        ],
        [
            'GGGG[W]WW',
            /\d{4}W\d{2}/,
            false
        ],
        [
            'YYYYDDD',
            /\d{7}/
        ]
    ];
    var isoTimes = [
        [
            'HH:mm:ss.SSSS',
            /\d\d:\d\d:\d\d\.\d+/
        ],
        [
            'HH:mm:ss,SSSS',
            /\d\d:\d\d:\d\d,\d+/
        ],
        [
            'HH:mm:ss',
            /\d\d:\d\d:\d\d/
        ],
        [
            'HH:mm',
            /\d\d:\d\d/
        ],
        [
            'HHmmss.SSSS',
            /\d\d\d\d\d\d\.\d+/
        ],
        [
            'HHmmss,SSSS',
            /\d\d\d\d\d\d,\d+/
        ],
        [
            'HHmmss',
            /\d\d\d\d\d\d/
        ],
        [
            'HHmm',
            /\d\d\d\d/
        ],
        [
            'HH',
            /\d\d/
        ]
    ];
    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
    function configFromISO(config) {
        var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat;
        if (match) {
            getParsingFlags(config).iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }
    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;
    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10)
        ];
        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }
        return result;
    }
    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }
    function preprocessRFC2822(s) {
        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    }
    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }
    var obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
    };
    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            return 0;
        } else {
            var hm = parseInt(numOffset, 10);
            var m = hm % 100, h = (hm - m) / 100;
            return h * 60 + m;
        }
    }
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i));
        if (match) {
            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }
            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);
            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }
        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }
        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }
        hooks.createFromInputFallback(config);
    }
    hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged and will be removed in an upcoming major release. Please refer to ' + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    });
    hooks.ISO_8601 = function () {
    };
    hooks.RFC_2822 = function () {
    };
    function configFromStringAndFormat(config) {
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;
        var string = '' + config._i, i, parsedInput, tokens, token, skipped, stringLength = string.length, totalParsedInputLength = 0;
        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                } else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }
        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
        configFromArray(config);
        checkOverflow(config);
    }
    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;
        if (meridiem == null) {
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            return hour;
        }
    }
    function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore;
        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }
        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);
            if (!isValid(tempConfig)) {
                continue;
            }
            currentScore += getParsingFlags(tempConfig).charsLeftOver;
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
            getParsingFlags(tempConfig).score = currentScore;
            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }
        extend(config, bestMoment || tempConfig);
    }
    function configFromObject(config) {
        if (config._d) {
            return;
        }
        var i = normalizeObjectUnits(config._i);
        config._a = map([
            i.year,
            i.month,
            i.day || i.date,
            i.hour,
            i.minute,
            i.second,
            i.millisecond
        ], function (obj) {
            return obj && parseInt(obj, 10);
        });
        configFromArray(config);
    }
    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            res.add(1, 'd');
            res._nextDay = undefined;
        }
        return res;
    }
    function prepareConfig(config) {
        var input = config._i, format = config._f;
        config._locale = config._locale || getLocale(config._l);
        if (input === null || format === undefined && input === '') {
            return createInvalid({ nullInput: true });
        }
        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }
        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else {
            configFromInput(config);
        }
        if (!isValid(config)) {
            config._d = null;
        }
        return config;
    }
    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }
    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};
        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }
        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
            input = undefined;
        }
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        return createFromConfig(c);
    }
    function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }
    var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
        } else {
            return createInvalid();
        }
    });
    var prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
        } else {
            return createInvalid();
        }
    });
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }
    function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isBefore', args);
    }
    function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isAfter', args);
    }
    var now = function () {
        return Date.now ? Date.now() : +new Date();
    };
    var ordering = [
        'year',
        'quarter',
        'month',
        'week',
        'day',
        'hour',
        'minute',
        'second',
        'millisecond'
    ];
    function isDurationValid(m) {
        for (var key in m) {
            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                return false;
            }
        }
        var unitHasDecimal = false;
        for (var i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false;
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }
        return true;
    }
    function isValid$1() {
        return this._isValid;
    }
    function createInvalid$1() {
        return createDuration(NaN);
    }
    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration), years = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months = normalizedInput.month || 0, weeks = normalizedInput.week || normalizedInput.isoWeek || 0, days = normalizedInput.day || 0, hours = normalizedInput.hour || 0, minutes = normalizedInput.minute || 0, seconds = normalizedInput.second || 0, milliseconds = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid(normalizedInput);
        this._milliseconds = +milliseconds + seconds * 1000 + minutes * 60000 + hours * 1000 * 60 * 60;
        this._days = +days + weeks * 7;
        this._months = +months + quarters * 3 + years * 12;
        this._data = {};
        this._locale = getLocale();
        this._bubble();
    }
    function isDuration(obj) {
        return obj instanceof Duration;
    }
    function absRound(number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }
    function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
        });
    }
    offset('Z', ':');
    offset('ZZ', '');
    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken([
        'Z',
        'ZZ'
    ], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });
    var chunkOffset = /([\+\-]|\d\d)/gi;
    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);
        if (matches === null) {
            return null;
        }
        var chunk = matches[matches.length - 1] || [];
        var parts = (chunk + '').match(chunkOffset) || [
            '-',
            0,
            0
        ];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);
        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
    }
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }
    function getDateOffset(m) {
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }
    hooks.updateOffset = function () {
    };
    function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0, localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }
    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }
            this.utcOffset(input, keepLocalTime);
            return this;
        } else {
            return -this.utcOffset();
        }
    }
    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }
    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;
            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }
    function setOffsetToParsedOffset() {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            } else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }
    function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
    }
    function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    }
    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }
        var c = {};
        copyConfig(c, this);
        c = prepareConfig(c);
        if (c._a) {
            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }
        return this._isDSTShifted;
    }
    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }
    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }
    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }
    var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;
    var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    function createDuration(input, key) {
        var duration = input, match = null, sign, ret, diffRes;
        if (isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
            };
        } else if (isNumber(input)) {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign
            };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign)
            };
        } else if (duration == null) {
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }
        return ret;
    }
    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;
    function parseIso(inp, sign) {
        var res = inp && parseFloat(inp.replace(',', '.'));
        return (isNaN(res) ? 0 : res) * sign;
    }
    function positiveMomentsDifference(base, other) {
        var res = {};
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }
        res.milliseconds = +other - +base.clone().add(res.months, 'M');
        return res;
    }
    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return {
                milliseconds: 0,
                months: 0
            };
        }
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }
        return res;
    }
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val;
                val = period;
                period = tmp;
            }
            val = typeof val === 'string' ? +val : val;
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }
    function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds, days = absRound(duration._days), months = absRound(duration._months);
        if (!mom.isValid()) {
            return;
        }
        updateOffset = updateOffset == null ? true : updateOffset;
        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }
    var add = createAdder(1, 'add');
    var subtract = createAdder(-1, 'subtract');
    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
    }
    function calendar$1(time, formats) {
        var now = time || createLocal(), sod = cloneWithOffset(now, this).startOf('day'), format = hooks.calendarFormat(this, sod) || 'sameElse';
        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }
    function clone() {
        return new Moment(this);
    }
    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }
    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }
    function isBetween(from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from), localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }
    function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input), inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }
    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }
    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }
    function diff(input, units, asFloat) {
        var that, zoneDelta, output;
        if (!this.isValid()) {
            return NaN;
        }
        that = cloneWithOffset(input, this);
        if (!that.isValid()) {
            return NaN;
        }
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 60000;
        units = normalizeUnits(units);
        switch (units) {
        case 'year':
            output = monthDiff(this, that) / 12;
            break;
        case 'month':
            output = monthDiff(this, that);
            break;
        case 'quarter':
            output = monthDiff(this, that) / 3;
            break;
        case 'second':
            output = (this - that) / 1000;
            break;
        case 'minute':
            output = (this - that) / 60000;
            break;
        case 'hour':
            output = (this - that) / 3600000;
            break;
        case 'day':
            output = (this - that - zoneDelta) / 86400000;
            break;
        case 'week':
            output = (this - that - zoneDelta) / 604800000;
            break;
        default:
            output = this - that;
        }
        return asFloat ? output : absFloor(output);
    }
    function monthDiff(a, b) {
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, 'months'), anchor2, adjust;
        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            adjust = (b - anchor) / (anchor2 - anchor);
        }
        return -(wholeMonthDiff + adjust) || 0;
    }
    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }
    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true;
        var m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }
        if (isFunction(Date.prototype.toISOString)) {
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }
    function inspect() {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment';
        var zone = '';
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        var prefix = '[' + func + '("]';
        var year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix);
    }
    function format(inputString) {
        if (!inputString) {
            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }
    function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
            return createDuration({
                to: this,
                from: time
            }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }
    function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }
    function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
            return createDuration({
                from: this,
                to: time
            }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }
    function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }
    function locale(key) {
        var newLocaleData;
        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }
    var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
        if (key === undefined) {
            return this.localeData();
        } else {
            return this.locale(key);
        }
    });
    function localeData() {
        return this._locale;
    }
    var MS_PER_SECOND = 1000;
    var MS_PER_MINUTE = 60 * MS_PER_SECOND;
    var MS_PER_HOUR = 60 * MS_PER_MINUTE;
    var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
    function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
    }
    function localStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }
    function utcStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }
    function startOf(units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }
        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
        case 'year':
            time = startOfDate(this.year(), 0, 1);
            break;
        case 'quarter':
            time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
            break;
        case 'month':
            time = startOfDate(this.year(), this.month(), 1);
            break;
        case 'week':
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
            break;
        case 'isoWeek':
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
            break;
        case 'day':
        case 'date':
            time = startOfDate(this.year(), this.month(), this.date());
            break;
        case 'hour':
            time = this._d.valueOf();
            time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
            break;
        case 'minute':
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_MINUTE);
            break;
        case 'second':
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_SECOND);
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }
    function endOf(units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }
        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
        case 'year':
            time = startOfDate(this.year() + 1, 0, 1) - 1;
            break;
        case 'quarter':
            time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
            break;
        case 'month':
            time = startOfDate(this.year(), this.month() + 1, 1) - 1;
            break;
        case 'week':
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
            break;
        case 'isoWeek':
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
            break;
        case 'day':
        case 'date':
            time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
            break;
        case 'hour':
            time = this._d.valueOf();
            time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
            break;
        case 'minute':
            time = this._d.valueOf();
            time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
            break;
        case 'second':
            time = this._d.valueOf();
            time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }
    function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
    }
    function unix() {
        return Math.floor(this.valueOf() / 1000);
    }
    function toDate() {
        return new Date(this.valueOf());
    }
    function toArray() {
        var m = this;
        return [
            m.year(),
            m.month(),
            m.date(),
            m.hour(),
            m.minute(),
            m.second(),
            m.millisecond()
        ];
    }
    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }
    function toJSON() {
        return this.isValid() ? this.toISOString() : null;
    }
    function isValid$2() {
        return isValid(this);
    }
    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }
    function invalidAt() {
        return getParsingFlags(this).overflow;
    }
    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }
    addFormatToken(0, [
        'gg',
        2
    ], 0, function () {
        return this.weekYear() % 100;
    });
    addFormatToken(0, [
        'GG',
        2
    ], 0, function () {
        return this.isoWeekYear() % 100;
    });
    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [
            token,
            token.length
        ], 0, getter);
    }
    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');
    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');
    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);
    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);
    addWeekParseToken([
        'gggg',
        'ggggg',
        'GGGG',
        'GGGGG'
    ], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });
    addWeekParseToken([
        'gg',
        'GG'
    ], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });
    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
    }
    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }
    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }
    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }
    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }
    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }
    addFormatToken('Q', 0, 'Qo', 'quarter');
    addUnitAlias('quarter', 'Q');
    addUnitPriority('quarter', 7);
    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });
    function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }
    addFormatToken('D', [
        'DD',
        2
    ], 'Do', 'date');
    addUnitAlias('date', 'D');
    addUnitPriority('date', 9);
    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
    });
    addParseToken([
        'D',
        'DD'
    ], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });
    var getSetDayOfMonth = makeGetSet('Date', true);
    addFormatToken('DDD', [
        'DDDD',
        3
    ], 'DDDo', 'dayOfYear');
    addUnitAlias('dayOfYear', 'DDD');
    addUnitPriority('dayOfYear', 4);
    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken([
        'DDD',
        'DDDD'
    ], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });
    function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 86400000) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }
    addFormatToken('m', [
        'mm',
        2
    ], 0, 'minute');
    addUnitAlias('minute', 'm');
    addUnitPriority('minute', 14);
    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken([
        'm',
        'mm'
    ], MINUTE);
    var getSetMinute = makeGetSet('Minutes', false);
    addFormatToken('s', [
        'ss',
        2
    ], 0, 'second');
    addUnitAlias('second', 's');
    addUnitPriority('second', 15);
    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken([
        's',
        'ss'
    ], SECOND);
    var getSetSecond = makeGetSet('Seconds', false);
    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });
    addFormatToken(0, [
        'SS',
        2
    ], 0, function () {
        return ~~(this.millisecond() / 10);
    });
    addFormatToken(0, [
        'SSS',
        3
    ], 0, 'millisecond');
    addFormatToken(0, [
        'SSSS',
        4
    ], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, [
        'SSSSS',
        5
    ], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, [
        'SSSSSS',
        6
    ], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, [
        'SSSSSSS',
        7
    ], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, [
        'SSSSSSSS',
        8
    ], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, [
        'SSSSSSSSS',
        9
    ], 0, function () {
        return this.millisecond() * 1000000;
    });
    addUnitAlias('millisecond', 'ms');
    addUnitPriority('millisecond', 16);
    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);
    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }
    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }
    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    var getSetMillisecond = makeGetSet('Milliseconds', false);
    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');
    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }
    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }
    var proto = Moment.prototype;
    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
    function createUnix(input) {
        return createLocal(input * 1000);
    }
    function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
    }
    function preParsePostFormat(string) {
        return string;
    }
    var proto$1 = Locale.prototype;
    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;
    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;
    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;
    function get$1(format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }
    function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }
        format = format || '';
        if (index != null) {
            return get$1(format, index, field, 'month');
        }
        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }
    function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }
            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }
            format = format || '';
        }
        var locale = getLocale(), shift = localeSorted ? locale._week.dow : 0;
        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }
        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }
    function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
    }
    function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }
    function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }
    function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }
    function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }
    getSetGlobalLocale('en', {
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
            var b = number % 10, output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
        }
    });
    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
    var mathAbs = Math.abs;
    function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
    }
    function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
    }
    function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
    }
    function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
    }
    function absCeil(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }
    function bubble() {
        var milliseconds = this._milliseconds;
        var days = this._days;
        var months = this._months;
        var data = this._data;
        var seconds, minutes, hours, years, monthsFromDays;
        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
            milliseconds += absCeil(monthsToDays(months) + days) * 86400000;
            days = 0;
            months = 0;
        }
        data.milliseconds = milliseconds % 1000;
        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;
        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;
        hours = absFloor(minutes / 60);
        data.hours = hours % 24;
        days += absFloor(hours / 24);
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));
        years = absFloor(months / 12);
        months %= 12;
        data.days = days;
        data.months = months;
        data.years = years;
        return this;
    }
    function daysToMonths(days) {
        return days * 4800 / 146097;
    }
    function monthsToDays(months) {
        return months * 146097 / 4800;
    }
    function as(units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days;
        var months;
        var milliseconds = this._milliseconds;
        units = normalizeUnits(units);
        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 86400000;
            months = this._months + daysToMonths(days);
            switch (units) {
            case 'month':
                return months;
            case 'quarter':
                return months / 3;
            case 'year':
                return months / 12;
            }
        } else {
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
            case 'week':
                return days / 7 + milliseconds / 604800000;
            case 'day':
                return days + milliseconds / 86400000;
            case 'hour':
                return days * 24 + milliseconds / 3600000;
            case 'minute':
                return days * 1440 + milliseconds / 60000;
            case 'second':
                return days * 86400 + milliseconds / 1000;
            case 'millisecond':
                return Math.floor(days * 86400000) + milliseconds;
            default:
                throw new Error('Unknown unit ' + units);
            }
        }
    }
    function valueOf$1() {
        if (!this.isValid()) {
            return NaN;
        }
        return this._milliseconds + this._days * 86400000 + this._months % 12 * 2592000000 + toInt(this._months / 12) * 31536000000;
    }
    function makeAs(alias) {
        return function () {
            return this.as(alias);
        };
    }
    var asMilliseconds = makeAs('ms');
    var asSeconds = makeAs('s');
    var asMinutes = makeAs('m');
    var asHours = makeAs('h');
    var asDays = makeAs('d');
    var asWeeks = makeAs('w');
    var asMonths = makeAs('M');
    var asQuarters = makeAs('Q');
    var asYears = makeAs('y');
    function clone$1() {
        return createDuration(this);
    }
    function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }
    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }
    var milliseconds = makeGetter('milliseconds');
    var seconds = makeGetter('seconds');
    var minutes = makeGetter('minutes');
    var hours = makeGetter('hours');
    var days = makeGetter('days');
    var months = makeGetter('months');
    var years = makeGetter('years');
    function weeks() {
        return absFloor(this.days() / 7);
    }
    var round = Math.round;
    var thresholds = {
        ss: 44,
        s: 45,
        m: 45,
        h: 22,
        d: 26,
        M: 11
    };
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }
    function relativeTime$1(posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds = round(duration.as('s'));
        var minutes = round(duration.as('m'));
        var hours = round(duration.as('h'));
        var days = round(duration.as('d'));
        var months = round(duration.as('M'));
        var years = round(duration.as('y'));
        var a = seconds <= thresholds.ss && [
            's',
            seconds
        ] || seconds < thresholds.s && [
            'ss',
            seconds
        ] || minutes <= 1 && ['m'] || minutes < thresholds.m && [
            'mm',
            minutes
        ] || hours <= 1 && ['h'] || hours < thresholds.h && [
            'hh',
            hours
        ] || days <= 1 && ['d'] || days < thresholds.d && [
            'dd',
            days
        ] || months <= 1 && ['M'] || months < thresholds.M && [
            'MM',
            months
        ] || years <= 1 && ['y'] || [
            'yy',
            years
        ];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }
    function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof roundingFunction === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }
    function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }
    function humanize(withSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);
        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }
        return locale.postformat(output);
    }
    var abs$1 = Math.abs;
    function sign(x) {
        return (x > 0) - (x < 0) || +x;
    }
    function toISOString$1() {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        var seconds = abs$1(this._milliseconds) / 1000;
        var days = abs$1(this._days);
        var months = abs$1(this._months);
        var minutes, hours, years;
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;
        years = absFloor(months / 12);
        months %= 12;
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
        var total = this.asSeconds();
        if (!total) {
            return 'P0D';
        }
        var totalSign = total < 0 ? '-' : '';
        var ymSign = sign(this._months) !== sign(total) ? '-' : '';
        var daysSign = sign(this._days) !== sign(total) ? '-' : '';
        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
        return totalSign + 'P' + (Y ? ymSign + Y + 'Y' : '') + (M ? ymSign + M + 'M' : '') + (D ? daysSign + D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? hmsSign + h + 'H' : '') + (m ? hmsSign + m + 'M' : '') + (s ? hmsSign + s + 'S' : '');
    }
    var proto$2 = Duration.prototype;
    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;
    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    proto$2.lang = lang;
    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');
    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });
    hooks.version = '2.24.0';
    setHookCallback(createLocal);
    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
        DATE: 'YYYY-MM-DD',
        TIME: 'HH:mm',
        TIME_SECONDS: 'HH:mm:ss',
        TIME_MS: 'HH:mm:ss.SSS',
        WEEK: 'GGGG-[W]WW',
        MONTH: 'YYYY-MM'
    };
    return hooks;
}));
/*moment-timezone@0.5.23#builds/moment-timezone-with-data-2012-2022*/
(function (root, factory) {
    'use strict';
    if (typeof module === 'object' && module.exports) {
        module.exports = factory(require('moment'));
    } else if (typeof define === 'function' && define.amd) {
        define('moment-timezone@0.5.23#builds/moment-timezone-with-data-2012-2022', ['moment'], factory);
    } else {
        factory(root.moment);
    }
}(this, function (moment) {
    'use strict';
    var VERSION = '0.5.23', zones = {}, links = {}, names = {}, guesses = {}, cachedGuess;
    if (!moment || typeof moment.version !== 'string') {
        logError('Moment Timezone requires Moment.js. See https://momentjs.com/timezone/docs/#/use-it/browser/');
    }
    var momentVersion = moment.version.split('.'), major = +momentVersion[0], minor = +momentVersion[1];
    if (major < 2 || major === 2 && minor < 6) {
        logError('Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js ' + moment.version + '. See momentjs.com');
    }
    function charCodeToInt(charCode) {
        if (charCode > 96) {
            return charCode - 87;
        } else if (charCode > 64) {
            return charCode - 29;
        }
        return charCode - 48;
    }
    function unpackBase60(string) {
        var i = 0, parts = string.split('.'), whole = parts[0], fractional = parts[1] || '', multiplier = 1, num, out = 0, sign = 1;
        if (string.charCodeAt(0) === 45) {
            i = 1;
            sign = -1;
        }
        for (i; i < whole.length; i++) {
            num = charCodeToInt(whole.charCodeAt(i));
            out = 60 * out + num;
        }
        for (i = 0; i < fractional.length; i++) {
            multiplier = multiplier / 60;
            num = charCodeToInt(fractional.charCodeAt(i));
            out += num * multiplier;
        }
        return out * sign;
    }
    function arrayToInt(array) {
        for (var i = 0; i < array.length; i++) {
            array[i] = unpackBase60(array[i]);
        }
    }
    function intToUntil(array, length) {
        for (var i = 0; i < length; i++) {
            array[i] = Math.round((array[i - 1] || 0) + array[i] * 60000);
        }
        array[length - 1] = Infinity;
    }
    function mapIndices(source, indices) {
        var out = [], i;
        for (i = 0; i < indices.length; i++) {
            out[i] = source[indices[i]];
        }
        return out;
    }
    function unpack(string) {
        var data = string.split('|'), offsets = data[2].split(' '), indices = data[3].split(''), untils = data[4].split(' ');
        arrayToInt(offsets);
        arrayToInt(indices);
        arrayToInt(untils);
        intToUntil(untils, indices.length);
        return {
            name: data[0],
            abbrs: mapIndices(data[1].split(' '), indices),
            offsets: mapIndices(offsets, indices),
            untils: untils,
            population: data[5] | 0
        };
    }
    function Zone(packedString) {
        if (packedString) {
            this._set(unpack(packedString));
        }
    }
    Zone.prototype = {
        _set: function (unpacked) {
            this.name = unpacked.name;
            this.abbrs = unpacked.abbrs;
            this.untils = unpacked.untils;
            this.offsets = unpacked.offsets;
            this.population = unpacked.population;
        },
        _index: function (timestamp) {
            var target = +timestamp, untils = this.untils, i;
            for (i = 0; i < untils.length; i++) {
                if (target < untils[i]) {
                    return i;
                }
            }
        },
        parse: function (timestamp) {
            var target = +timestamp, offsets = this.offsets, untils = this.untils, max = untils.length - 1, offset, offsetNext, offsetPrev, i;
            for (i = 0; i < max; i++) {
                offset = offsets[i];
                offsetNext = offsets[i + 1];
                offsetPrev = offsets[i ? i - 1 : i];
                if (offset < offsetNext && tz.moveAmbiguousForward) {
                    offset = offsetNext;
                } else if (offset > offsetPrev && tz.moveInvalidForward) {
                    offset = offsetPrev;
                }
                if (target < untils[i] - offset * 60000) {
                    return offsets[i];
                }
            }
            return offsets[max];
        },
        abbr: function (mom) {
            return this.abbrs[this._index(mom)];
        },
        offset: function (mom) {
            logError('zone.offset has been deprecated in favor of zone.utcOffset');
            return this.offsets[this._index(mom)];
        },
        utcOffset: function (mom) {
            return this.offsets[this._index(mom)];
        }
    };
    function OffsetAt(at) {
        var timeString = at.toTimeString();
        var abbr = timeString.match(/\([a-z ]+\)/i);
        if (abbr && abbr[0]) {
            abbr = abbr[0].match(/[A-Z]/g);
            abbr = abbr ? abbr.join('') : undefined;
        } else {
            abbr = timeString.match(/[A-Z]{3,5}/g);
            abbr = abbr ? abbr[0] : undefined;
        }
        if (abbr === 'GMT') {
            abbr = undefined;
        }
        this.at = +at;
        this.abbr = abbr;
        this.offset = at.getTimezoneOffset();
    }
    function ZoneScore(zone) {
        this.zone = zone;
        this.offsetScore = 0;
        this.abbrScore = 0;
    }
    ZoneScore.prototype.scoreOffsetAt = function (offsetAt) {
        this.offsetScore += Math.abs(this.zone.utcOffset(offsetAt.at) - offsetAt.offset);
        if (this.zone.abbr(offsetAt.at).replace(/[^A-Z]/g, '') !== offsetAt.abbr) {
            this.abbrScore++;
        }
    };
    function findChange(low, high) {
        var mid, diff;
        while (diff = ((high.at - low.at) / 120000 | 0) * 60000) {
            mid = new OffsetAt(new Date(low.at + diff));
            if (mid.offset === low.offset) {
                low = mid;
            } else {
                high = mid;
            }
        }
        return low;
    }
    function userOffsets() {
        var startYear = new Date().getFullYear() - 2, last = new OffsetAt(new Date(startYear, 0, 1)), offsets = [last], change, next, i;
        for (i = 1; i < 48; i++) {
            next = new OffsetAt(new Date(startYear, i, 1));
            if (next.offset !== last.offset) {
                change = findChange(last, next);
                offsets.push(change);
                offsets.push(new OffsetAt(new Date(change.at + 60000)));
            }
            last = next;
        }
        for (i = 0; i < 4; i++) {
            offsets.push(new OffsetAt(new Date(startYear + i, 0, 1)));
            offsets.push(new OffsetAt(new Date(startYear + i, 6, 1)));
        }
        return offsets;
    }
    function sortZoneScores(a, b) {
        if (a.offsetScore !== b.offsetScore) {
            return a.offsetScore - b.offsetScore;
        }
        if (a.abbrScore !== b.abbrScore) {
            return a.abbrScore - b.abbrScore;
        }
        return b.zone.population - a.zone.population;
    }
    function addToGuesses(name, offsets) {
        var i, offset;
        arrayToInt(offsets);
        for (i = 0; i < offsets.length; i++) {
            offset = offsets[i];
            guesses[offset] = guesses[offset] || {};
            guesses[offset][name] = true;
        }
    }
    function guessesForUserOffsets(offsets) {
        var offsetsLength = offsets.length, filteredGuesses = {}, out = [], i, j, guessesOffset;
        for (i = 0; i < offsetsLength; i++) {
            guessesOffset = guesses[offsets[i].offset] || {};
            for (j in guessesOffset) {
                if (guessesOffset.hasOwnProperty(j)) {
                    filteredGuesses[j] = true;
                }
            }
        }
        for (i in filteredGuesses) {
            if (filteredGuesses.hasOwnProperty(i)) {
                out.push(names[i]);
            }
        }
        return out;
    }
    function rebuildGuess() {
        try {
            var intlName = Intl.DateTimeFormat().resolvedOptions().timeZone;
            if (intlName && intlName.length > 3) {
                var name = names[normalizeName(intlName)];
                if (name) {
                    return name;
                }
                logError('Moment Timezone found ' + intlName + ' from the Intl api, but did not have that data loaded.');
            }
        } catch (e) {
        }
        var offsets = userOffsets(), offsetsLength = offsets.length, guesses = guessesForUserOffsets(offsets), zoneScores = [], zoneScore, i, j;
        for (i = 0; i < guesses.length; i++) {
            zoneScore = new ZoneScore(getZone(guesses[i]), offsetsLength);
            for (j = 0; j < offsetsLength; j++) {
                zoneScore.scoreOffsetAt(offsets[j]);
            }
            zoneScores.push(zoneScore);
        }
        zoneScores.sort(sortZoneScores);
        return zoneScores.length > 0 ? zoneScores[0].zone.name : undefined;
    }
    function guess(ignoreCache) {
        if (!cachedGuess || ignoreCache) {
            cachedGuess = rebuildGuess();
        }
        return cachedGuess;
    }
    function normalizeName(name) {
        return (name || '').toLowerCase().replace(/\//g, '_');
    }
    function addZone(packed) {
        var i, name, split, normalized;
        if (typeof packed === 'string') {
            packed = [packed];
        }
        for (i = 0; i < packed.length; i++) {
            split = packed[i].split('|');
            name = split[0];
            normalized = normalizeName(name);
            zones[normalized] = packed[i];
            names[normalized] = name;
            addToGuesses(normalized, split[2].split(' '));
        }
    }
    function getZone(name, caller) {
        name = normalizeName(name);
        var zone = zones[name];
        var link;
        if (zone instanceof Zone) {
            return zone;
        }
        if (typeof zone === 'string') {
            zone = new Zone(zone);
            zones[name] = zone;
            return zone;
        }
        if (links[name] && caller !== getZone && (link = getZone(links[name], getZone))) {
            zone = zones[name] = new Zone();
            zone._set(link);
            zone.name = names[name];
            return zone;
        }
        return null;
    }
    function getNames() {
        var i, out = [];
        for (i in names) {
            if (names.hasOwnProperty(i) && (zones[i] || zones[links[i]]) && names[i]) {
                out.push(names[i]);
            }
        }
        return out.sort();
    }
    function addLink(aliases) {
        var i, alias, normal0, normal1;
        if (typeof aliases === 'string') {
            aliases = [aliases];
        }
        for (i = 0; i < aliases.length; i++) {
            alias = aliases[i].split('|');
            normal0 = normalizeName(alias[0]);
            normal1 = normalizeName(alias[1]);
            links[normal0] = normal1;
            names[normal0] = alias[0];
            links[normal1] = normal0;
            names[normal1] = alias[1];
        }
    }
    function loadData(data) {
        addZone(data.zones);
        addLink(data.links);
        tz.dataVersion = data.version;
    }
    function zoneExists(name) {
        if (!zoneExists.didShowError) {
            zoneExists.didShowError = true;
            logError('moment.tz.zoneExists(\'' + name + '\') has been deprecated in favor of !moment.tz.zone(\'' + name + '\')');
        }
        return !!getZone(name);
    }
    function needsOffset(m) {
        var isUnixTimestamp = m._f === 'X' || m._f === 'x';
        return !!(m._a && m._tzm === undefined && !isUnixTimestamp);
    }
    function logError(message) {
        if (typeof console !== 'undefined' && typeof console.error === 'function') {
            console.error(message);
        }
    }
    function tz(input) {
        var args = Array.prototype.slice.call(arguments, 0, -1), name = arguments[arguments.length - 1], zone = getZone(name), out = moment.utc.apply(null, args);
        if (zone && !moment.isMoment(input) && needsOffset(out)) {
            out.add(zone.parse(out), 'minutes');
        }
        out.tz(name);
        return out;
    }
    tz.version = VERSION;
    tz.dataVersion = '';
    tz._zones = zones;
    tz._links = links;
    tz._names = names;
    tz.add = addZone;
    tz.link = addLink;
    tz.load = loadData;
    tz.zone = getZone;
    tz.zoneExists = zoneExists;
    tz.guess = guess;
    tz.names = getNames;
    tz.Zone = Zone;
    tz.unpack = unpack;
    tz.unpackBase60 = unpackBase60;
    tz.needsOffset = needsOffset;
    tz.moveInvalidForward = true;
    tz.moveAmbiguousForward = false;
    var fn = moment.fn;
    moment.tz = tz;
    moment.defaultZone = null;
    moment.updateOffset = function (mom, keepTime) {
        var zone = moment.defaultZone, offset;
        if (mom._z === undefined) {
            if (zone && needsOffset(mom) && !mom._isUTC) {
                mom._d = moment.utc(mom._a)._d;
                mom.utc().add(zone.parse(mom), 'minutes');
            }
            mom._z = zone;
        }
        if (mom._z) {
            offset = mom._z.utcOffset(mom);
            if (Math.abs(offset) < 16) {
                offset = offset / 60;
            }
            if (mom.utcOffset !== undefined) {
                mom.utcOffset(-offset, keepTime);
            } else {
                mom.zone(offset, keepTime);
            }
        }
    };
    fn.tz = function (name, keepTime) {
        if (name) {
            if (typeof name !== 'string') {
                throw new Error('Time zone name must be a string, got ' + name + ' [' + typeof name + ']');
            }
            this._z = getZone(name);
            if (this._z) {
                moment.updateOffset(this, keepTime);
            } else {
                logError('Moment Timezone has no data for ' + name + '. See http://momentjs.com/timezone/docs/#/data-loading/.');
            }
            return this;
        }
        if (this._z) {
            return this._z.name;
        }
    };
    function abbrWrap(old) {
        return function () {
            if (this._z) {
                return this._z.abbr(this);
            }
            return old.call(this);
        };
    }
    function resetZoneWrap(old) {
        return function () {
            this._z = null;
            return old.apply(this, arguments);
        };
    }
    fn.zoneName = abbrWrap(fn.zoneName);
    fn.zoneAbbr = abbrWrap(fn.zoneAbbr);
    fn.utc = resetZoneWrap(fn.utc);
    moment.tz.setDefault = function (name) {
        if (major < 2 || major === 2 && minor < 9) {
            logError('Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js ' + moment.version + '.');
        }
        moment.defaultZone = name ? getZone(name) : null;
        return moment;
    };
    var momentProperties = moment.momentProperties;
    if (Object.prototype.toString.call(momentProperties) === '[object Array]') {
        momentProperties.push('_z');
        momentProperties.push('_a');
    } else if (momentProperties) {
        momentProperties._z = null;
    }
    loadData({
        'version': '2018g',
        'zones': [
            'Africa/Abidjan|GMT|0|0||48e5',
            'Africa/Nairobi|EAT|-30|0||47e5',
            'Africa/Algiers|CET|-10|0||26e5',
            'Africa/Lagos|WAT|-10|0||17e6',
            'Africa/Maputo|CAT|-20|0||26e5',
            'Africa/Cairo|EET EEST|-20 -30|01010|1M2m0 gL0 e10 mn0|15e6',
            'Africa/Casablanca|+00 +01|0 -10|0101010101010101010101010101|1H3C0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00|32e5',
            'Europe/Paris|CET CEST|-10 -20|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|11e6',
            'Africa/Johannesburg|SAST|-20|0||84e5',
            'Africa/Khartoum|EAT CAT|-30 -20|01|1Usl0|51e5',
            'Africa/Sao_Tome|GMT WAT|0 -10|01|1UQN0',
            'Africa/Tripoli|EET CET CEST|-20 -10 -20|0120|1IlA0 TA0 1o00|11e5',
            'Africa/Windhoek|CAT WAT|-20 -10|0101010101010|1GQo0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0|32e4',
            'America/Adak|HST HDT|a0 90|01010101010101010101010|1GIc0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|326',
            'America/Anchorage|AKST AKDT|90 80|01010101010101010101010|1GIb0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|30e4',
            'America/Santo_Domingo|AST|40|0||29e5',
            'America/Araguaina|-03 -02|30 20|010|1IdD0 Lz0|14e4',
            'America/Fortaleza|-03|30|0||34e5',
            'America/Asuncion|-03 -04|30 40|01010101010101010101010|1GTf0 1cN0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0|28e5',
            'America/Panama|EST|50|0||15e5',
            'America/Mexico_City|CST CDT|60 50|01010101010101010101010|1GQw0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0|20e6',
            'America/Bahia|-02 -03|20 30|01|1GCq0|27e5',
            'America/Managua|CST|60|0||22e5',
            'America/La_Paz|-04|40|0||19e5',
            'America/Lima|-05|50|0||11e6',
            'America/Denver|MST MDT|70 60|01010101010101010101010|1GI90 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|26e5',
            'America/Campo_Grande|-03 -04|30 40|01010101010101010101010|1GCr0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0 1HB0 FX0 1HB0 IL0 1HB0 FX0 1HB0|77e4',
            'America/Cancun|CST CDT EST|60 50 50|01010102|1GQw0 1nX0 14p0 1lb0 14p0 1lb0 Dd0|63e4',
            'America/Caracas|-0430 -04|4u 40|01|1QMT0|29e5',
            'America/Chicago|CST CDT|60 50|01010101010101010101010|1GI80 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|92e5',
            'America/Chihuahua|MST MDT|70 60|01010101010101010101010|1GQx0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0|81e4',
            'America/Phoenix|MST|70|0||42e5',
            'America/Los_Angeles|PST PDT|80 70|01010101010101010101010|1GIa0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|15e6',
            'America/New_York|EST EDT|50 40|01010101010101010101010|1GI70 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|21e6',
            'America/Rio_Branco|-04 -05|40 50|01|1KLE0|31e4',
            'America/Fort_Nelson|PST PDT MST|80 70 70|01010102|1GIa0 1zb0 Op0 1zb0 Op0 1zb0 Op0|39e2',
            'America/Halifax|AST ADT|40 30|01010101010101010101010|1GI60 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|39e4',
            'America/Godthab|-03 -02|30 20|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|17e3',
            'America/Grand_Turk|EST EDT AST|50 40 40|0101010121010101010|1GI70 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 5Ip0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|37e2',
            'America/Havana|CST CDT|50 40|01010101010101010101010|1GQt0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0|21e5',
            'America/Metlakatla|PST AKST AKDT|80 90 80|0121212121212121|1PAa0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|14e2',
            'America/Miquelon|-03 -02|30 20|01010101010101010101010|1GI50 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|61e2',
            'America/Montevideo|-02 -03|20 30|01010101|1GI40 1o10 11z0 1o10 11z0 1o10 11z0|17e5',
            'America/Noronha|-02|20|0||30e2',
            'America/Port-au-Prince|EST EDT|50 40|010101010101010101010|1GI70 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 3iN0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|23e5',
            'Antarctica/Palmer|-03 -04|30 40|010101010|1H3D0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0|40',
            'America/Santiago|-03 -04|30 40|010101010101010101010|1H3D0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1zb0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0|62e5',
            'America/Sao_Paulo|-02 -03|20 30|01010101010101010101010|1GCq0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0 1HB0 FX0 1HB0 IL0 1HB0 FX0 1HB0|20e6',
            'Atlantic/Azores|-01 +00|10 0|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|25e4',
            'America/St_Johns|NST NDT|3u 2u|01010101010101010101010|1GI5u 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0|11e4',
            'Antarctica/Casey|+11 +08|-b0 -80|0101|1GAF0 blz0 3m10|10',
            'Antarctica/Davis|+05 +07|-50 -70|01|1GAI0|70',
            'Pacific/Port_Moresby|+10|-a0|0||25e4',
            'Pacific/Guadalcanal|+11|-b0|0||11e4',
            'Asia/Tashkent|+05|-50|0||23e5',
            'Pacific/Auckland|NZDT NZST|-d0 -c0|01010101010101010101010|1GQe0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00|14e5',
            'Asia/Baghdad|+03|-30|0||66e5',
            'Antarctica/Troll|+00 +02|0 -20|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|40',
            'Asia/Dhaka|+06|-60|0||16e6',
            'Asia/Amman|EET EEST|-20 -30|010101010101010101010|1GPy0 4bX0 Dd0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00|25e5',
            'Asia/Kamchatka|+12|-c0|0||18e4',
            'Asia/Baku|+04 +05|-40 -50|010101010|1GNA0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00|27e5',
            'Asia/Bangkok|+07|-70|0||15e6',
            'Asia/Barnaul|+07 +06|-70 -60|010|1N7v0 3rd0',
            'Asia/Beirut|EET EEST|-20 -30|01010101010101010101010|1GNy0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0|22e5',
            'Asia/Kuala_Lumpur|+08|-80|0||71e5',
            'Asia/Kolkata|IST|-5u|0||15e6',
            'Asia/Chita|+10 +08 +09|-a0 -80 -90|012|1N7s0 3re0|33e4',
            'Asia/Ulaanbaatar|+08 +09|-80 -90|01010|1O8G0 1cJ0 1cP0 1cJ0|12e5',
            'Asia/Shanghai|CST|-80|0||23e6',
            'Asia/Colombo|+0530|-5u|0||22e5',
            'Asia/Damascus|EET EEST|-20 -30|01010101010101010101010|1GPy0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0|26e5',
            'Asia/Dili|+09|-90|0||19e4',
            'Asia/Dubai|+04|-40|0||39e5',
            'Asia/Famagusta|EET EEST +03|-20 -30 -30|0101010101201010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 15U0 2Ks0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0',
            'Asia/Gaza|EET EEST|-20 -30|01010101010101010101010|1GPy0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1220 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1qL0 WN0 1qL0 WN0 1qL0|18e5',
            'Asia/Hong_Kong|HKT|-80|0||73e5',
            'Asia/Hovd|+07 +08|-70 -80|01010|1O8H0 1cJ0 1cP0 1cJ0|81e3',
            'Asia/Irkutsk|+09 +08|-90 -80|01|1N7t0|60e4',
            'Europe/Istanbul|EET EEST +03|-20 -30 -30|01010101012|1GNB0 1qM0 11A0 1o00 1200 1nA0 11A0 1tA0 U00 15w0|13e6',
            'Asia/Jakarta|WIB|-70|0||31e6',
            'Asia/Jayapura|WIT|-90|0||26e4',
            'Asia/Jerusalem|IST IDT|-20 -30|01010101010101010101010|1GPA0 1aL0 1eN0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0|81e4',
            'Asia/Kabul|+0430|-4u|0||46e5',
            'Asia/Karachi|PKT|-50|0||24e6',
            'Asia/Kathmandu|+0545|-5J|0||12e5',
            'Asia/Yakutsk|+10 +09|-a0 -90|01|1N7s0|28e4',
            'Asia/Krasnoyarsk|+08 +07|-80 -70|01|1N7u0|10e5',
            'Asia/Magadan|+12 +10 +11|-c0 -a0 -b0|012|1N7q0 3Cq0|95e3',
            'Asia/Makassar|WITA|-80|0||15e5',
            'Asia/Manila|PST|-80|0||24e6',
            'Europe/Athens|EET EEST|-20 -30|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|35e5',
            'Asia/Novosibirsk|+07 +06|-70 -60|010|1N7v0 4eN0|15e5',
            'Asia/Omsk|+07 +06|-70 -60|01|1N7v0|12e5',
            'Asia/Pyongyang|KST KST|-90 -8u|010|1P4D0 6BA0|29e5',
            'Asia/Rangoon|+0630|-6u|0||48e5',
            'Asia/Sakhalin|+11 +10|-b0 -a0|010|1N7r0 3rd0|58e4',
            'Asia/Seoul|KST|-90|0||23e6',
            'Asia/Srednekolymsk|+12 +11|-c0 -b0|01|1N7q0|35e2',
            'Asia/Tehran|+0330 +0430|-3u -4u|01010101010101010101010|1GLUu 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0|14e6',
            'Asia/Tokyo|JST|-90|0||38e6',
            'Asia/Tomsk|+07 +06|-70 -60|010|1N7v0 3Qp0|10e5',
            'Asia/Vladivostok|+11 +10|-b0 -a0|01|1N7r0|60e4',
            'Asia/Yekaterinburg|+06 +05|-60 -50|01|1N7w0|14e5',
            'Europe/Lisbon|WET WEST|0 -10|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|27e5',
            'Atlantic/Cape_Verde|-01|10|0||50e4',
            'Australia/Sydney|AEDT AEST|-b0 -a0|01010101010101010101010|1GQg0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0|40e5',
            'Australia/Adelaide|ACDT ACST|-au -9u|01010101010101010101010|1GQgu 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0|11e5',
            'Australia/Brisbane|AEST|-a0|0||20e5',
            'Australia/Darwin|ACST|-9u|0||12e4',
            'Australia/Eucla|+0845|-8J|0||368',
            'Australia/Lord_Howe|+11 +1030|-b0 -au|01010101010101010101010|1GQf0 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu|347',
            'Australia/Perth|AWST|-80|0||18e5',
            'Pacific/Easter|-05 -06|50 60|010101010101010101010|1H3D0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1zb0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0|30e2',
            'Europe/Dublin|GMT IST|0 -10|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|12e5',
            'Etc/GMT-1|+01|-10|0|',
            'Pacific/Fakaofo|+13|-d0|0||483',
            'Pacific/Kiritimati|+14|-e0|0||51e2',
            'Etc/GMT-2|+02|-20|0|',
            'Pacific/Tahiti|-10|a0|0||18e4',
            'Pacific/Niue|-11|b0|0||12e2',
            'Etc/GMT+12|-12|c0|0|',
            'Pacific/Galapagos|-06|60|0||25e3',
            'Etc/GMT+7|-07|70|0|',
            'Pacific/Pitcairn|-08|80|0||56',
            'Pacific/Gambier|-09|90|0||125',
            'Etc/UCT|UCT|0|0|',
            'Etc/UTC|UTC|0|0|',
            'Europe/Ulyanovsk|+04 +03|-40 -30|010|1N7y0 3rd0|13e5',
            'Europe/London|GMT BST|0 -10|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|10e6',
            'Europe/Chisinau|EET EEST|-20 -30|01010101010101010101010|1GNA0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|67e4',
            'Europe/Kaliningrad|+03 EET|-30 -20|01|1N7z0|44e4',
            'Europe/Kirov|+04 +03|-40 -30|01|1N7y0|48e4',
            'Europe/Moscow|MSK MSK|-40 -30|01|1N7y0|16e6',
            'Europe/Saratov|+04 +03|-40 -30|010|1N7y0 5810',
            'Europe/Simferopol|EET EEST MSK MSK|-20 -30 -40 -30|0101023|1GNB0 1qM0 11A0 1o00 11z0 1nW0|33e4',
            'Europe/Volgograd|+04 +03|-40 -30|010|1N7y0 9Jd0|10e5',
            'Pacific/Honolulu|HST|a0|0||37e4',
            'MET|MET MEST|-10 -20|01010101010101010101010|1GNB0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0',
            'Pacific/Chatham|+1345 +1245|-dJ -cJ|01010101010101010101010|1GQe0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00|600',
            'Pacific/Apia|+14 +13|-e0 -d0|01010101010101010101010|1GQe0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00|37e3',
            'Pacific/Bougainville|+10 +11|-a0 -b0|01|1NwE0|18e4',
            'Pacific/Fiji|+13 +12|-d0 -c0|01010101010101010101010|1Goe0 1Nc0 Ao0 1Q00 xz0 1SN0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 s00 1VA0 uM0 1SM0 uM0 1VA0 s00 1VA0|88e4',
            'Pacific/Guam|ChST|-a0|0||17e4',
            'Pacific/Marquesas|-0930|9u|0||86e2',
            'Pacific/Pago_Pago|SST|b0|0||37e2',
            'Pacific/Norfolk|+1130 +11|-bu -b0|01|1PoCu|25e4',
            'Pacific/Tongatapu|+13 +14|-d0 -e0|010|1S4d0 s00|75e3'
        ],
        'links': [
            'Africa/Abidjan|Africa/Accra',
            'Africa/Abidjan|Africa/Bamako',
            'Africa/Abidjan|Africa/Banjul',
            'Africa/Abidjan|Africa/Bissau',
            'Africa/Abidjan|Africa/Conakry',
            'Africa/Abidjan|Africa/Dakar',
            'Africa/Abidjan|Africa/Freetown',
            'Africa/Abidjan|Africa/Lome',
            'Africa/Abidjan|Africa/Monrovia',
            'Africa/Abidjan|Africa/Nouakchott',
            'Africa/Abidjan|Africa/Ouagadougou',
            'Africa/Abidjan|Africa/Timbuktu',
            'Africa/Abidjan|America/Danmarkshavn',
            'Africa/Abidjan|Atlantic/Reykjavik',
            'Africa/Abidjan|Atlantic/St_Helena',
            'Africa/Abidjan|Etc/GMT',
            'Africa/Abidjan|Etc/GMT+0',
            'Africa/Abidjan|Etc/GMT-0',
            'Africa/Abidjan|Etc/GMT0',
            'Africa/Abidjan|Etc/Greenwich',
            'Africa/Abidjan|GMT',
            'Africa/Abidjan|GMT+0',
            'Africa/Abidjan|GMT-0',
            'Africa/Abidjan|GMT0',
            'Africa/Abidjan|Greenwich',
            'Africa/Abidjan|Iceland',
            'Africa/Algiers|Africa/Tunis',
            'Africa/Cairo|Egypt',
            'Africa/Casablanca|Africa/El_Aaiun',
            'Africa/Johannesburg|Africa/Maseru',
            'Africa/Johannesburg|Africa/Mbabane',
            'Africa/Lagos|Africa/Bangui',
            'Africa/Lagos|Africa/Brazzaville',
            'Africa/Lagos|Africa/Douala',
            'Africa/Lagos|Africa/Kinshasa',
            'Africa/Lagos|Africa/Libreville',
            'Africa/Lagos|Africa/Luanda',
            'Africa/Lagos|Africa/Malabo',
            'Africa/Lagos|Africa/Ndjamena',
            'Africa/Lagos|Africa/Niamey',
            'Africa/Lagos|Africa/Porto-Novo',
            'Africa/Maputo|Africa/Blantyre',
            'Africa/Maputo|Africa/Bujumbura',
            'Africa/Maputo|Africa/Gaborone',
            'Africa/Maputo|Africa/Harare',
            'Africa/Maputo|Africa/Kigali',
            'Africa/Maputo|Africa/Lubumbashi',
            'Africa/Maputo|Africa/Lusaka',
            'Africa/Nairobi|Africa/Addis_Ababa',
            'Africa/Nairobi|Africa/Asmara',
            'Africa/Nairobi|Africa/Asmera',
            'Africa/Nairobi|Africa/Dar_es_Salaam',
            'Africa/Nairobi|Africa/Djibouti',
            'Africa/Nairobi|Africa/Juba',
            'Africa/Nairobi|Africa/Kampala',
            'Africa/Nairobi|Africa/Mogadishu',
            'Africa/Nairobi|Indian/Antananarivo',
            'Africa/Nairobi|Indian/Comoro',
            'Africa/Nairobi|Indian/Mayotte',
            'Africa/Tripoli|Libya',
            'America/Adak|America/Atka',
            'America/Adak|US/Aleutian',
            'America/Anchorage|America/Juneau',
            'America/Anchorage|America/Nome',
            'America/Anchorage|America/Sitka',
            'America/Anchorage|America/Yakutat',
            'America/Anchorage|US/Alaska',
            'America/Campo_Grande|America/Cuiaba',
            'America/Chicago|America/Indiana/Knox',
            'America/Chicago|America/Indiana/Tell_City',
            'America/Chicago|America/Knox_IN',
            'America/Chicago|America/Matamoros',
            'America/Chicago|America/Menominee',
            'America/Chicago|America/North_Dakota/Beulah',
            'America/Chicago|America/North_Dakota/Center',
            'America/Chicago|America/North_Dakota/New_Salem',
            'America/Chicago|America/Rainy_River',
            'America/Chicago|America/Rankin_Inlet',
            'America/Chicago|America/Resolute',
            'America/Chicago|America/Winnipeg',
            'America/Chicago|CST6CDT',
            'America/Chicago|Canada/Central',
            'America/Chicago|US/Central',
            'America/Chicago|US/Indiana-Starke',
            'America/Chihuahua|America/Mazatlan',
            'America/Chihuahua|Mexico/BajaSur',
            'America/Denver|America/Boise',
            'America/Denver|America/Cambridge_Bay',
            'America/Denver|America/Edmonton',
            'America/Denver|America/Inuvik',
            'America/Denver|America/Ojinaga',
            'America/Denver|America/Shiprock',
            'America/Denver|America/Yellowknife',
            'America/Denver|Canada/Mountain',
            'America/Denver|MST7MDT',
            'America/Denver|Navajo',
            'America/Denver|US/Mountain',
            'America/Fortaleza|America/Argentina/Buenos_Aires',
            'America/Fortaleza|America/Argentina/Catamarca',
            'America/Fortaleza|America/Argentina/ComodRivadavia',
            'America/Fortaleza|America/Argentina/Cordoba',
            'America/Fortaleza|America/Argentina/Jujuy',
            'America/Fortaleza|America/Argentina/La_Rioja',
            'America/Fortaleza|America/Argentina/Mendoza',
            'America/Fortaleza|America/Argentina/Rio_Gallegos',
            'America/Fortaleza|America/Argentina/Salta',
            'America/Fortaleza|America/Argentina/San_Juan',
            'America/Fortaleza|America/Argentina/San_Luis',
            'America/Fortaleza|America/Argentina/Tucuman',
            'America/Fortaleza|America/Argentina/Ushuaia',
            'America/Fortaleza|America/Belem',
            'America/Fortaleza|America/Buenos_Aires',
            'America/Fortaleza|America/Catamarca',
            'America/Fortaleza|America/Cayenne',
            'America/Fortaleza|America/Cordoba',
            'America/Fortaleza|America/Jujuy',
            'America/Fortaleza|America/Maceio',
            'America/Fortaleza|America/Mendoza',
            'America/Fortaleza|America/Paramaribo',
            'America/Fortaleza|America/Recife',
            'America/Fortaleza|America/Rosario',
            'America/Fortaleza|America/Santarem',
            'America/Fortaleza|Antarctica/Rothera',
            'America/Fortaleza|Atlantic/Stanley',
            'America/Fortaleza|Etc/GMT+3',
            'America/Halifax|America/Glace_Bay',
            'America/Halifax|America/Goose_Bay',
            'America/Halifax|America/Moncton',
            'America/Halifax|America/Thule',
            'America/Halifax|Atlantic/Bermuda',
            'America/Halifax|Canada/Atlantic',
            'America/Havana|Cuba',
            'America/La_Paz|America/Boa_Vista',
            'America/La_Paz|America/Guyana',
            'America/La_Paz|America/Manaus',
            'America/La_Paz|America/Porto_Velho',
            'America/La_Paz|Brazil/West',
            'America/La_Paz|Etc/GMT+4',
            'America/Lima|America/Bogota',
            'America/Lima|America/Guayaquil',
            'America/Lima|Etc/GMT+5',
            'America/Los_Angeles|America/Dawson',
            'America/Los_Angeles|America/Ensenada',
            'America/Los_Angeles|America/Santa_Isabel',
            'America/Los_Angeles|America/Tijuana',
            'America/Los_Angeles|America/Vancouver',
            'America/Los_Angeles|America/Whitehorse',
            'America/Los_Angeles|Canada/Pacific',
            'America/Los_Angeles|Canada/Yukon',
            'America/Los_Angeles|Mexico/BajaNorte',
            'America/Los_Angeles|PST8PDT',
            'America/Los_Angeles|US/Pacific',
            'America/Los_Angeles|US/Pacific-New',
            'America/Managua|America/Belize',
            'America/Managua|America/Costa_Rica',
            'America/Managua|America/El_Salvador',
            'America/Managua|America/Guatemala',
            'America/Managua|America/Regina',
            'America/Managua|America/Swift_Current',
            'America/Managua|America/Tegucigalpa',
            'America/Managua|Canada/Saskatchewan',
            'America/Mexico_City|America/Bahia_Banderas',
            'America/Mexico_City|America/Merida',
            'America/Mexico_City|America/Monterrey',
            'America/Mexico_City|Mexico/General',
            'America/New_York|America/Detroit',
            'America/New_York|America/Fort_Wayne',
            'America/New_York|America/Indiana/Indianapolis',
            'America/New_York|America/Indiana/Marengo',
            'America/New_York|America/Indiana/Petersburg',
            'America/New_York|America/Indiana/Vevay',
            'America/New_York|America/Indiana/Vincennes',
            'America/New_York|America/Indiana/Winamac',
            'America/New_York|America/Indianapolis',
            'America/New_York|America/Iqaluit',
            'America/New_York|America/Kentucky/Louisville',
            'America/New_York|America/Kentucky/Monticello',
            'America/New_York|America/Louisville',
            'America/New_York|America/Montreal',
            'America/New_York|America/Nassau',
            'America/New_York|America/Nipigon',
            'America/New_York|America/Pangnirtung',
            'America/New_York|America/Thunder_Bay',
            'America/New_York|America/Toronto',
            'America/New_York|Canada/Eastern',
            'America/New_York|EST5EDT',
            'America/New_York|US/East-Indiana',
            'America/New_York|US/Eastern',
            'America/New_York|US/Michigan',
            'America/Noronha|Atlantic/South_Georgia',
            'America/Noronha|Brazil/DeNoronha',
            'America/Noronha|Etc/GMT+2',
            'America/Panama|America/Atikokan',
            'America/Panama|America/Cayman',
            'America/Panama|America/Coral_Harbour',
            'America/Panama|America/Jamaica',
            'America/Panama|EST',
            'America/Panama|Jamaica',
            'America/Phoenix|America/Creston',
            'America/Phoenix|America/Dawson_Creek',
            'America/Phoenix|America/Hermosillo',
            'America/Phoenix|MST',
            'America/Phoenix|US/Arizona',
            'America/Rio_Branco|America/Eirunepe',
            'America/Rio_Branco|America/Porto_Acre',
            'America/Rio_Branco|Brazil/Acre',
            'America/Santiago|Chile/Continental',
            'America/Santo_Domingo|America/Anguilla',
            'America/Santo_Domingo|America/Antigua',
            'America/Santo_Domingo|America/Aruba',
            'America/Santo_Domingo|America/Barbados',
            'America/Santo_Domingo|America/Blanc-Sablon',
            'America/Santo_Domingo|America/Curacao',
            'America/Santo_Domingo|America/Dominica',
            'America/Santo_Domingo|America/Grenada',
            'America/Santo_Domingo|America/Guadeloupe',
            'America/Santo_Domingo|America/Kralendijk',
            'America/Santo_Domingo|America/Lower_Princes',
            'America/Santo_Domingo|America/Marigot',
            'America/Santo_Domingo|America/Martinique',
            'America/Santo_Domingo|America/Montserrat',
            'America/Santo_Domingo|America/Port_of_Spain',
            'America/Santo_Domingo|America/Puerto_Rico',
            'America/Santo_Domingo|America/St_Barthelemy',
            'America/Santo_Domingo|America/St_Kitts',
            'America/Santo_Domingo|America/St_Lucia',
            'America/Santo_Domingo|America/St_Thomas',
            'America/Santo_Domingo|America/St_Vincent',
            'America/Santo_Domingo|America/Tortola',
            'America/Santo_Domingo|America/Virgin',
            'America/Sao_Paulo|Brazil/East',
            'America/St_Johns|Canada/Newfoundland',
            'Antarctica/Palmer|America/Punta_Arenas',
            'Asia/Baghdad|Antarctica/Syowa',
            'Asia/Baghdad|Asia/Aden',
            'Asia/Baghdad|Asia/Bahrain',
            'Asia/Baghdad|Asia/Kuwait',
            'Asia/Baghdad|Asia/Qatar',
            'Asia/Baghdad|Asia/Riyadh',
            'Asia/Baghdad|Etc/GMT-3',
            'Asia/Baghdad|Europe/Minsk',
            'Asia/Bangkok|Asia/Ho_Chi_Minh',
            'Asia/Bangkok|Asia/Novokuznetsk',
            'Asia/Bangkok|Asia/Phnom_Penh',
            'Asia/Bangkok|Asia/Saigon',
            'Asia/Bangkok|Asia/Vientiane',
            'Asia/Bangkok|Etc/GMT-7',
            'Asia/Bangkok|Indian/Christmas',
            'Asia/Dhaka|Antarctica/Vostok',
            'Asia/Dhaka|Asia/Almaty',
            'Asia/Dhaka|Asia/Bishkek',
            'Asia/Dhaka|Asia/Dacca',
            'Asia/Dhaka|Asia/Kashgar',
            'Asia/Dhaka|Asia/Qyzylorda',
            'Asia/Dhaka|Asia/Thimbu',
            'Asia/Dhaka|Asia/Thimphu',
            'Asia/Dhaka|Asia/Urumqi',
            'Asia/Dhaka|Etc/GMT-6',
            'Asia/Dhaka|Indian/Chagos',
            'Asia/Dili|Etc/GMT-9',
            'Asia/Dili|Pacific/Palau',
            'Asia/Dubai|Asia/Muscat',
            'Asia/Dubai|Asia/Tbilisi',
            'Asia/Dubai|Asia/Yerevan',
            'Asia/Dubai|Etc/GMT-4',
            'Asia/Dubai|Europe/Samara',
            'Asia/Dubai|Indian/Mahe',
            'Asia/Dubai|Indian/Mauritius',
            'Asia/Dubai|Indian/Reunion',
            'Asia/Gaza|Asia/Hebron',
            'Asia/Hong_Kong|Hongkong',
            'Asia/Jakarta|Asia/Pontianak',
            'Asia/Jerusalem|Asia/Tel_Aviv',
            'Asia/Jerusalem|Israel',
            'Asia/Kamchatka|Asia/Anadyr',
            'Asia/Kamchatka|Etc/GMT-12',
            'Asia/Kamchatka|Kwajalein',
            'Asia/Kamchatka|Pacific/Funafuti',
            'Asia/Kamchatka|Pacific/Kwajalein',
            'Asia/Kamchatka|Pacific/Majuro',
            'Asia/Kamchatka|Pacific/Nauru',
            'Asia/Kamchatka|Pacific/Tarawa',
            'Asia/Kamchatka|Pacific/Wake',
            'Asia/Kamchatka|Pacific/Wallis',
            'Asia/Kathmandu|Asia/Katmandu',
            'Asia/Kolkata|Asia/Calcutta',
            'Asia/Kuala_Lumpur|Asia/Brunei',
            'Asia/Kuala_Lumpur|Asia/Kuching',
            'Asia/Kuala_Lumpur|Asia/Singapore',
            'Asia/Kuala_Lumpur|Etc/GMT-8',
            'Asia/Kuala_Lumpur|Singapore',
            'Asia/Makassar|Asia/Ujung_Pandang',
            'Asia/Rangoon|Asia/Yangon',
            'Asia/Rangoon|Indian/Cocos',
            'Asia/Seoul|ROK',
            'Asia/Shanghai|Asia/Chongqing',
            'Asia/Shanghai|Asia/Chungking',
            'Asia/Shanghai|Asia/Harbin',
            'Asia/Shanghai|Asia/Macao',
            'Asia/Shanghai|Asia/Macau',
            'Asia/Shanghai|Asia/Taipei',
            'Asia/Shanghai|PRC',
            'Asia/Shanghai|ROC',
            'Asia/Tashkent|Antarctica/Mawson',
            'Asia/Tashkent|Asia/Aqtau',
            'Asia/Tashkent|Asia/Aqtobe',
            'Asia/Tashkent|Asia/Ashgabat',
            'Asia/Tashkent|Asia/Ashkhabad',
            'Asia/Tashkent|Asia/Atyrau',
            'Asia/Tashkent|Asia/Dushanbe',
            'Asia/Tashkent|Asia/Oral',
            'Asia/Tashkent|Asia/Samarkand',
            'Asia/Tashkent|Etc/GMT-5',
            'Asia/Tashkent|Indian/Kerguelen',
            'Asia/Tashkent|Indian/Maldives',
            'Asia/Tehran|Iran',
            'Asia/Tokyo|Japan',
            'Asia/Ulaanbaatar|Asia/Choibalsan',
            'Asia/Ulaanbaatar|Asia/Ulan_Bator',
            'Asia/Vladivostok|Asia/Ust-Nera',
            'Asia/Yakutsk|Asia/Khandyga',
            'Atlantic/Azores|America/Scoresbysund',
            'Atlantic/Cape_Verde|Etc/GMT+1',
            'Australia/Adelaide|Australia/Broken_Hill',
            'Australia/Adelaide|Australia/South',
            'Australia/Adelaide|Australia/Yancowinna',
            'Australia/Brisbane|Australia/Lindeman',
            'Australia/Brisbane|Australia/Queensland',
            'Australia/Darwin|Australia/North',
            'Australia/Lord_Howe|Australia/LHI',
            'Australia/Perth|Australia/West',
            'Australia/Sydney|Australia/ACT',
            'Australia/Sydney|Australia/Canberra',
            'Australia/Sydney|Australia/Currie',
            'Australia/Sydney|Australia/Hobart',
            'Australia/Sydney|Australia/Melbourne',
            'Australia/Sydney|Australia/NSW',
            'Australia/Sydney|Australia/Tasmania',
            'Australia/Sydney|Australia/Victoria',
            'Etc/UCT|UCT',
            'Etc/UTC|Etc/Universal',
            'Etc/UTC|Etc/Zulu',
            'Etc/UTC|UTC',
            'Etc/UTC|Universal',
            'Etc/UTC|Zulu',
            'Europe/Athens|Asia/Nicosia',
            'Europe/Athens|EET',
            'Europe/Athens|Europe/Bucharest',
            'Europe/Athens|Europe/Helsinki',
            'Europe/Athens|Europe/Kiev',
            'Europe/Athens|Europe/Mariehamn',
            'Europe/Athens|Europe/Nicosia',
            'Europe/Athens|Europe/Riga',
            'Europe/Athens|Europe/Sofia',
            'Europe/Athens|Europe/Tallinn',
            'Europe/Athens|Europe/Uzhgorod',
            'Europe/Athens|Europe/Vilnius',
            'Europe/Athens|Europe/Zaporozhye',
            'Europe/Chisinau|Europe/Tiraspol',
            'Europe/Dublin|Eire',
            'Europe/Istanbul|Asia/Istanbul',
            'Europe/Istanbul|Turkey',
            'Europe/Lisbon|Atlantic/Canary',
            'Europe/Lisbon|Atlantic/Faeroe',
            'Europe/Lisbon|Atlantic/Faroe',
            'Europe/Lisbon|Atlantic/Madeira',
            'Europe/Lisbon|Portugal',
            'Europe/Lisbon|WET',
            'Europe/London|Europe/Belfast',
            'Europe/London|Europe/Guernsey',
            'Europe/London|Europe/Isle_of_Man',
            'Europe/London|Europe/Jersey',
            'Europe/London|GB',
            'Europe/London|GB-Eire',
            'Europe/Moscow|W-SU',
            'Europe/Paris|Africa/Ceuta',
            'Europe/Paris|Arctic/Longyearbyen',
            'Europe/Paris|Atlantic/Jan_Mayen',
            'Europe/Paris|CET',
            'Europe/Paris|Europe/Amsterdam',
            'Europe/Paris|Europe/Andorra',
            'Europe/Paris|Europe/Belgrade',
            'Europe/Paris|Europe/Berlin',
            'Europe/Paris|Europe/Bratislava',
            'Europe/Paris|Europe/Brussels',
            'Europe/Paris|Europe/Budapest',
            'Europe/Paris|Europe/Busingen',
            'Europe/Paris|Europe/Copenhagen',
            'Europe/Paris|Europe/Gibraltar',
            'Europe/Paris|Europe/Ljubljana',
            'Europe/Paris|Europe/Luxembourg',
            'Europe/Paris|Europe/Madrid',
            'Europe/Paris|Europe/Malta',
            'Europe/Paris|Europe/Monaco',
            'Europe/Paris|Europe/Oslo',
            'Europe/Paris|Europe/Podgorica',
            'Europe/Paris|Europe/Prague',
            'Europe/Paris|Europe/Rome',
            'Europe/Paris|Europe/San_Marino',
            'Europe/Paris|Europe/Sarajevo',
            'Europe/Paris|Europe/Skopje',
            'Europe/Paris|Europe/Stockholm',
            'Europe/Paris|Europe/Tirane',
            'Europe/Paris|Europe/Vaduz',
            'Europe/Paris|Europe/Vatican',
            'Europe/Paris|Europe/Vienna',
            'Europe/Paris|Europe/Warsaw',
            'Europe/Paris|Europe/Zagreb',
            'Europe/Paris|Europe/Zurich',
            'Europe/Paris|Poland',
            'Europe/Ulyanovsk|Europe/Astrakhan',
            'Pacific/Auckland|Antarctica/McMurdo',
            'Pacific/Auckland|Antarctica/South_Pole',
            'Pacific/Auckland|NZ',
            'Pacific/Chatham|NZ-CHAT',
            'Pacific/Easter|Chile/EasterIsland',
            'Pacific/Fakaofo|Etc/GMT-13',
            'Pacific/Fakaofo|Pacific/Enderbury',
            'Pacific/Galapagos|Etc/GMT+6',
            'Pacific/Gambier|Etc/GMT+9',
            'Pacific/Guadalcanal|Antarctica/Macquarie',
            'Pacific/Guadalcanal|Etc/GMT-11',
            'Pacific/Guadalcanal|Pacific/Efate',
            'Pacific/Guadalcanal|Pacific/Kosrae',
            'Pacific/Guadalcanal|Pacific/Noumea',
            'Pacific/Guadalcanal|Pacific/Pohnpei',
            'Pacific/Guadalcanal|Pacific/Ponape',
            'Pacific/Guam|Pacific/Saipan',
            'Pacific/Honolulu|HST',
            'Pacific/Honolulu|Pacific/Johnston',
            'Pacific/Honolulu|US/Hawaii',
            'Pacific/Kiritimati|Etc/GMT-14',
            'Pacific/Niue|Etc/GMT+11',
            'Pacific/Pago_Pago|Pacific/Midway',
            'Pacific/Pago_Pago|Pacific/Samoa',
            'Pacific/Pago_Pago|US/Samoa',
            'Pacific/Pitcairn|Etc/GMT+8',
            'Pacific/Port_Moresby|Antarctica/DumontDUrville',
            'Pacific/Port_Moresby|Etc/GMT-10',
            'Pacific/Port_Moresby|Pacific/Chuuk',
            'Pacific/Port_Moresby|Pacific/Truk',
            'Pacific/Port_Moresby|Pacific/Yap',
            'Pacific/Tahiti|Etc/GMT+10',
            'Pacific/Tahiti|Pacific/Rarotonga'
        ]
    });
    return moment;
}));
/*passbolt-mad@2.10.0#util/time/get_time_ago*/
define('passbolt-mad@2.10.0#util/time/get_time_ago', [
    'exports',
    'passbolt-mad/config/config',
    'moment/moment',
    'moment-timezone/builds/moment-timezone-with-data-2012-2022'
], function (exports, _config, _moment) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _config2 = _interopRequireDefault(_config);
    var _moment2 = _interopRequireDefault(_moment);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    function getTimeAgo(date) {
        return _moment2.default.tz(date, _config2.default.read('app.server_timezone')).fromNow();
    }
    exports.default = getTimeAgo;
});
/*passbolt-mad@2.10.0#view/helper/stache/time*/
define('passbolt-mad@2.10.0#view/helper/stache/time', [
    'can-stache',
    'passbolt-mad/util/time/get_time_ago'
], function (_canStache, _get_time_ago) {
    'use strict';
    var _canStache2 = _interopRequireDefault(_canStache);
    var _get_time_ago2 = _interopRequireDefault(_get_time_ago);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    _canStache2.default.registerHelper('getTimeAgo', function () {
        return _get_time_ago2.default.apply(this, arguments);
    });
});
/*passbolt-mad@2.10.0#view/helper/stache/uuid*/
define('passbolt-mad@2.10.0#view/helper/stache/uuid', [
    'can-stache',
    'uuid/v4'
], function (_canStache, _v) {
    'use strict';
    var _canStache2 = _interopRequireDefault(_canStache);
    var _v2 = _interopRequireDefault(_v);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    _canStache2.default.registerHelper('uuid', function () {
        return (0, _v2.default)();
    });
});
/*passbolt-mad@2.10.0#view/view*/
define('passbolt-mad@2.10.0#view/view', [
    'exports',
    'passbolt-mad/control/control',
    'passbolt-mad/helper/html',
    'passbolt-mad/view/helper/stache/i18n.js',
    'passbolt-mad/view/helper/stache/hash.js',
    'passbolt-mad/view/helper/stache/string.js',
    'passbolt-mad/view/helper/stache/time.js',
    'passbolt-mad/view/helper/stache/uuid.js'
], function (exports, _control, _html) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _control2 = _interopRequireDefault(_control);
    var _html2 = _interopRequireDefault(_html);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var View = _control2.default.extend('mad.View', {
        defaults: {
            template: null,
            element: null
        },
        render: function render(renderer, data) {
            data = data || {};
            var documentFragment = renderer(data);
            var html = $('<div>').append(documentFragment).html();
            return html;
        }
    }, {
        getController: function getController() {
            return this.options.controller;
        },
        addClass: function addClass(className) {
            $(this.element).addClass(className);
        },
        hide: function hide() {
            console.debug('view.hide()');
            $(this.element).hide();
        },
        removeClass: function removeClass(className) {
            $(this.element).removeClass(className);
        },
        position: function position(options) {
            _html2.default.position($(this.element), options);
        },
        render: function render() {
            return View.render(this.options.template, this.getController().getViewData());
        },
        insertInDom: function insertInDom(html) {
            $(this.element).html(html);
        },
        show: function show() {
            $(this.element).show();
        }
    });
    exports.default = View;
});
/*passbolt-mad@2.10.0#view/component/dialog*/
define('passbolt-mad@2.10.0#view/component/dialog', [
    'exports',
    'passbolt-mad/view/view'
], function (exports, _view) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _view2 = _interopRequireDefault(_view);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Dialog = _view2.default.extend('mad.view.component.Dialog', {}, {
        setTitle: function setTitle(title) {
            $('.dialog-header h2 .dialog-header-title', this.element).text(title);
        },
        setSubtitle: function setSubtitle(subTitle) {
            $('.dialog-header h2 .dialog-header-subtitle', this.element).text(subTitle);
        },
        '{element} .dialog-close click': function elementDialogCloseClick(el, ev) {
            ev.preventDefault();
            $(this.element).remove();
        },
        '{window} keyup': function windowKeyup(el, ev) {
            if (ev.keyCode == 27) {
                $(this.element).remove();
            }
        },
        '{element} .js-dialog-cancel click': function elementJsDialogCancelClick() {
            $(this.element).remove();
        }
    });
    exports.default = Dialog;
});
/*can-view-import@4.1.0#can-view-import*/
define('can-view-import@4.1.0#can-view-import', [
    'require',
    'exports',
    'module',
    'can-assign',
    'can-dom-data-state',
    'can-symbol',
    'can-globals/document/document',
    'can-child-nodes',
    'can-import-module',
    'can-dom-mutate',
    'can-dom-mutate/node',
    'can-view-nodelist',
    'can-view-callbacks',
    'can-log/',
    'can-log/dev/dev'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        var assign = require('can-assign');
        var canData = require('can-dom-data-state');
        var canSymbol = require('can-symbol');
        var DOCUMENT = require('can-globals/document/document');
        var getChildNodes = require('can-child-nodes');
        var importer = require('can-import-module');
        var domMutate = require('can-dom-mutate');
        var domMutateNode = require('can-dom-mutate/node');
        var nodeLists = require('can-view-nodelist');
        var viewCallbacks = require('can-view-callbacks');
        var tag = viewCallbacks.tag;
        var canLog = require('can-log/');
        var dev = require('can-log/dev/dev');
        function setViewModel(element, viewModel) {
            element[canSymbol.for('can.viewModel')] = viewModel;
        }
        function processImport(el, tagData) {
            var moduleName = el.getAttribute('from');
            var templateModule = tagData.scope.get('scope.helpers.module');
            var parentName = templateModule ? templateModule.id : undefined;
            if (!moduleName) {
                return Promise.reject('No module name provided');
            }
            var importPromise = importer(moduleName, parentName);
            importPromise.catch(function (err) {
                canLog.error(err);
            });
            setViewModel(el, importPromise);
            canData.set.call(el, 'scope', importPromise);
            var scope = tagData.scope.add(importPromise, { notContext: true });
            var handOffTag = el.getAttribute('can-tag');
            if (handOffTag) {
                var callback = tag(handOffTag);
                if (!callback || callback === viewCallbacks.defaultCallback) {
                } else {
                    canData.set.call(el, 'preventDataBindings', true);
                    callback(el, assign(tagData, { scope: scope }));
                    canData.set.call(el, 'preventDataBindings', false);
                    setViewModel(el, importPromise);
                    canData.set.call(el, 'scope', importPromise);
                }
            } else {
                var nodeList = nodeLists.register([], undefined, tagData.parentNodeList || true, false);
                nodeList.expression = '<' + this.tagName + '>';
                var frag = tagData.subtemplate ? tagData.subtemplate(scope, tagData.options, nodeList) : DOCUMENT().createDocumentFragment();
                var removalDisposal = domMutate.onNodeRemoval(el, function () {
                    if (!el.ownerDocument.contains(el)) {
                        removalDisposal();
                        nodeLists.unregister(nodeList);
                    }
                });
                domMutateNode.appendChild.call(el, frag);
                nodeLists.update(nodeList, getChildNodes(el));
            }
        }
        [
            'can-import',
            'can-dynamic-import'
        ].forEach(function (tagName) {
            tag(tagName, processImport.bind({ tagName: tagName }));
        });
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-view-model@4.0.1#can-view-model*/
define('can-view-model@4.0.1#can-view-model', [
    'require',
    'exports',
    'module',
    'can-simple-map',
    'can-namespace',
    'can-globals/document/document',
    'can-reflect',
    'can-symbol'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var SimpleMap = require('can-simple-map');
        var ns = require('can-namespace');
        var getDocument = require('can-globals/document/document');
        var canReflect = require('can-reflect');
        var canSymbol = require('can-symbol');
        var viewModelSymbol = canSymbol.for('can.viewModel');
        module.exports = ns.viewModel = function (el, attr, val) {
            if (typeof el === 'string') {
                el = getDocument().querySelector(el);
            } else if (canReflect.isListLike(el) && !el.nodeType) {
                el = el[0];
            }
            if (canReflect.isObservableLike(attr) && canReflect.isMapLike(attr)) {
                el[viewModelSymbol] = attr;
                return;
            }
            var scope = el[viewModelSymbol];
            if (!scope) {
                scope = new SimpleMap();
                el[viewModelSymbol] = scope;
            }
            switch (arguments.length) {
            case 0:
            case 1:
                return scope;
            case 2:
                return canReflect.getKeyValue(scope, attr);
            default:
                canReflect.setKeyValue(scope, attr, val);
                return el;
            }
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-attribute-observable@1.0.0#event*/
define('can-attribute-observable@1.0.0#event', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-dom-events',
    'can-dom-events/helpers/util'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var domEvents = require('can-dom-events');
    var isDomEventTarget = require('can-dom-events/helpers/util').isDomEventTarget;
    var canEvent = {
        on: function on(eventName, handler, queue) {
            if (isDomEventTarget(this)) {
                domEvents.addEventListener(this, eventName, handler, queue);
            } else {
                canReflect.onKeyValue(this, eventName, handler, queue);
            }
        },
        off: function off(eventName, handler, queue) {
            if (isDomEventTarget(this)) {
                domEvents.removeEventListener(this, eventName, handler, queue);
            } else {
                canReflect.offKeyValue(this, eventName, handler, queue);
            }
        },
        one: function one(event, handler, queue) {
            var one = function () {
                canEvent.off.call(this, event, one, queue);
                return handler.apply(this, arguments);
            };
            canEvent.on.call(this, event, one, queue);
            return this;
        }
    };
    module.exports = canEvent;
});
/*can-attribute-observable@1.0.0#get-event-name*/
define('can-attribute-observable@1.0.0#get-event-name', [
    'require',
    'exports',
    'module',
    './behaviors'
], function (require, exports, module) {
    'use strict';
    var attr = require('./behaviors');
    var isRadioInput = function isRadioInput(el) {
        return el.nodeName.toLowerCase() === 'input' && el.type === 'radio';
    };
    var isValidProp = function isValidProp(prop, bindingData) {
        return prop === 'checked' && !bindingData.legacyBindings;
    };
    module.exports = function getEventName(el, prop, bindingData) {
        var event = 'change';
        if (isRadioInput(el) && isValidProp(prop, bindingData)) {
            event = 'can-attribute-observable-radiochange';
        }
        if (attr.findSpecialListener(prop)) {
            event = prop;
        }
        return event;
    };
});
/*can-event-dom-radiochange@2.2.0#can-event-dom-radiochange*/
define('can-event-dom-radiochange@2.2.0#can-event-dom-radiochange', [
    'require',
    'exports',
    'module',
    'can-globals/document/document',
    'can-namespace'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var getDocument = require('can-globals/document/document');
        var namespace = require('can-namespace');
        function getRoot() {
            return getDocument().documentElement;
        }
        function findParentForm(el) {
            while (el) {
                if (el.nodeName === 'FORM') {
                    break;
                }
                el = el.parentNode;
            }
            return el;
        }
        function shouldReceiveEventFromRadio(source, dest) {
            var name = source.getAttribute('name');
            return name && name === dest.getAttribute('name') && findParentForm(source) === findParentForm(dest);
        }
        function isRadioInput(el) {
            return el.nodeName === 'INPUT' && el.type === 'radio';
        }
        function attachRootListener(domEvents, eventTypeTargets) {
            var root = getRoot();
            var newListener = function (event) {
                var target = event.target;
                if (!isRadioInput(target)) {
                    return;
                }
                for (var eventType in eventTypeTargets) {
                    var newEvent = { type: eventType };
                    var listeningNodes = eventTypeTargets[eventType];
                    listeningNodes.forEach(function (el) {
                        if (shouldReceiveEventFromRadio(target, el)) {
                            domEvents.dispatch(el, newEvent, false);
                        }
                    });
                }
            };
            domEvents.addEventListener(root, 'change', newListener);
            return newListener;
        }
        function detachRootListener(domEvents, listener) {
            var root = getRoot();
            domEvents.removeEventListener(root, 'change', listener);
        }
        var radioChangeEvent = {
            defaultEventType: 'radiochange',
            addEventListener: function (target, eventType, handler) {
                if (!isRadioInput(target)) {
                    throw new Error('Listeners for ' + eventType + ' must be radio inputs');
                }
                var eventTypeTrackedRadios = radioChangeEvent._eventTypeTrackedRadios;
                if (!eventTypeTrackedRadios) {
                    eventTypeTrackedRadios = radioChangeEvent._eventTypeTrackedRadios = {};
                    if (!radioChangeEvent._rootListener) {
                        radioChangeEvent._rootListener = attachRootListener(this, eventTypeTrackedRadios);
                    }
                }
                var trackedRadios = radioChangeEvent._eventTypeTrackedRadios[eventType];
                if (!trackedRadios) {
                    trackedRadios = radioChangeEvent._eventTypeTrackedRadios[eventType] = new Set();
                }
                trackedRadios.add(target);
                target.addEventListener(eventType, handler);
            },
            removeEventListener: function (target, eventType, handler) {
                target.removeEventListener(eventType, handler);
                var eventTypeTrackedRadios = radioChangeEvent._eventTypeTrackedRadios;
                if (!eventTypeTrackedRadios) {
                    return;
                }
                var trackedRadios = eventTypeTrackedRadios[eventType];
                if (!trackedRadios) {
                    return;
                }
                trackedRadios.delete(target);
                if (trackedRadios.size === 0) {
                    delete eventTypeTrackedRadios[eventType];
                    for (var key in eventTypeTrackedRadios) {
                        if (eventTypeTrackedRadios.hasOwnProperty(key)) {
                            return;
                        }
                    }
                    delete radioChangeEvent._eventTypeTrackedRadios;
                    detachRootListener(this, radioChangeEvent._rootListener);
                    delete radioChangeEvent._rootListener;
                }
            }
        };
        module.exports = namespace.domEventRadioChange = radioChangeEvent;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-attribute-observable@1.0.0#can-attribute-observable*/
define('can-attribute-observable@1.0.0#can-attribute-observable', [
    'require',
    'exports',
    'module',
    'can-queues',
    './event',
    'can-reflect',
    'can-observation',
    './behaviors',
    './get-event-name',
    'can-reflect-dependencies',
    'can-observation-recorder',
    'can-simple-observable/settable/settable',
    'can-dom-events',
    'can-event-dom-radiochange'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var queues = require('can-queues');
        var canEvent = require('./event');
        var canReflect = require('can-reflect');
        var Observation = require('can-observation');
        var attr = require('./behaviors');
        var getEventName = require('./get-event-name');
        var canReflectDeps = require('can-reflect-dependencies');
        var ObservationRecorder = require('can-observation-recorder');
        var SettableObservable = require('can-simple-observable/settable/settable');
        var domEvents = require('can-dom-events');
        var radioChangeEvent = require('can-event-dom-radiochange');
        var internalRadioChangeEventType = 'can-attribute-observable-radiochange';
        domEvents.addEvent(radioChangeEvent, internalRadioChangeEventType);
        var isSelect = function isSelect(el) {
            return el.nodeName.toLowerCase() === 'select';
        };
        var isMultipleSelect = function isMultipleSelect(el, prop) {
            return isSelect(el) && prop === 'value' && el.multiple;
        };
        var slice = Array.prototype.slice;
        function canUtilAEL() {
            var args = slice.call(arguments, 0);
            args.unshift(this);
            return domEvents.addEventListener.apply(null, args);
        }
        function canUtilREL() {
            var args = slice.call(arguments, 0);
            args.unshift(this);
            return domEvents.removeEventListener.apply(null, args);
        }
        function AttributeObservable(el, prop, bindingData, event) {
            this.el = el;
            this.bound = false;
            this.bindingData = bindingData;
            this.prop = isMultipleSelect(el, prop) ? 'values' : prop;
            this.event = event || getEventName(el, prop, bindingData);
            this.handler = this.handler.bind(this);
        }
        AttributeObservable.prototype = Object.create(SettableObservable.prototype);
        Object.assign(AttributeObservable.prototype, {
            constructor: AttributeObservable,
            get: function get() {
                if (ObservationRecorder.isRecording()) {
                    ObservationRecorder.add(this);
                    if (!this.bound) {
                        Observation.temporarilyBind(this);
                    }
                }
                return attr.get(this.el, this.prop);
            },
            set: function set(newVal) {
                attr.setAttrOrProp(this.el, this.prop, newVal);
                this.value = newVal;
                return newVal;
            },
            handler: function handler(newVal, event) {
                var old = this.value;
                var queuesArgs = [];
                this.value = attr.get(this.el, this.prop);
                if (this.value !== old) {
                    queuesArgs = [
                        this.handlers.getNode([]),
                        this,
                        [
                            newVal,
                            old
                        ]
                    ];
                    queues.enqueueByQueue.apply(queues, queuesArgs);
                }
            },
            onBound: function onBound() {
                var observable = this;
                observable.bound = true;
                observable._handler = function (event) {
                    observable.handler(attr.get(observable.el, observable.prop), event);
                };
                if (observable.event === internalRadioChangeEventType) {
                    canEvent.on.call(observable.el, 'change', observable._handler);
                }
                var specialBinding = attr.findSpecialListener(observable.prop);
                if (specialBinding) {
                    observable._specialDisposal = specialBinding.call(observable.el, observable.prop, observable._handler, canUtilAEL);
                }
                canEvent.on.call(observable.el, observable.event, observable._handler);
                this.value = attr.get(this.el, this.prop);
            },
            onUnbound: function onUnbound() {
                var observable = this;
                observable.bound = false;
                if (observable.event === internalRadioChangeEventType) {
                    canEvent.off.call(observable.el, 'change', observable._handler);
                }
                if (observable._specialDisposal) {
                    observable._specialDisposal.call(observable.el, canUtilREL);
                    observable._specialDisposal = null;
                }
                canEvent.off.call(observable.el, observable.event, observable._handler);
            },
            valueHasDependencies: function valueHasDependencies() {
                return true;
            },
            getValueDependencies: function getValueDependencies() {
                return {
                    keyDependencies: new Map([[
                            this.el,
                            new Set([this.prop])
                        ]])
                };
            }
        });
        canReflect.assignSymbols(AttributeObservable.prototype, {
            'can.isMapLike': false,
            'can.getValue': AttributeObservable.prototype.get,
            'can.setValue': AttributeObservable.prototype.set,
            'can.onValue': AttributeObservable.prototype.on,
            'can.offValue': AttributeObservable.prototype.off,
            'can.valueHasDependencies': AttributeObservable.prototype.hasDependencies,
            'can.getValueDependencies': AttributeObservable.prototype.getValueDependencies
        });
        module.exports = AttributeObservable;
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-stache-bindings@4.3.0#can-stache-bindings*/
define('can-stache-bindings@4.3.0#can-stache-bindings', [
    'require',
    'exports',
    'module',
    'can-bind',
    'can-stache/src/expression',
    'can-view-callbacks',
    'can-view-model',
    'can-stache-key',
    'can-observation-recorder',
    'can-simple-observable',
    'can-assign',
    'can-log/dev/dev',
    'can-dom-mutate',
    'can-dom-data-state',
    'can-symbol',
    'can-reflect',
    'can-reflect-dependencies',
    'can-attribute-encoder',
    'can-queues',
    'can-simple-observable/setter/setter',
    'can-attribute-observable',
    'can-view-scope/make-compute-like',
    'can-view-nodelist',
    'can-attribute-observable/event'
], function (require, exports, module) {
    'use strict';
    var Bind = require('can-bind');
    var expression = require('can-stache/src/expression');
    var viewCallbacks = require('can-view-callbacks');
    var canViewModel = require('can-view-model');
    var observeReader = require('can-stache-key');
    var ObservationRecorder = require('can-observation-recorder');
    var SimpleObservable = require('can-simple-observable');
    var assign = require('can-assign');
    var dev = require('can-log/dev/dev');
    var domMutate = require('can-dom-mutate');
    var domData = require('can-dom-data-state');
    var canSymbol = require('can-symbol');
    var canReflect = require('can-reflect');
    var canReflectDeps = require('can-reflect-dependencies');
    var encoder = require('can-attribute-encoder');
    var queues = require('can-queues');
    var SettableObservable = require('can-simple-observable/setter/setter');
    var AttributeObservable = require('can-attribute-observable');
    var makeCompute = require('can-view-scope/make-compute-like');
    var ViewNodeList = require('can-view-nodelist');
    var canEvent = require('can-attribute-observable/event');
    var bindings = new Map();
    var onMatchStr = 'on:', vmMatchStr = 'vm:', elMatchStr = 'el:', byMatchStr = ':by:', toMatchStr = ':to', fromMatchStr = ':from', bindMatchStr = ':bind', viewModelBindingStr = 'viewModel', attributeBindingStr = 'attribute', scopeBindingStr = 'scope', viewModelOrAttributeBindingStr = 'viewModelOrAttribute';
    var throwOnlyOneTypeOfBindingError = function () {
        throw new Error('can-stache-bindings - you can not have contextual bindings ( this:from=\'value\' ) and key bindings ( prop:from=\'value\' ) on one element.');
    };
    var checkBindingState = function (bindingState, bindingInfo) {
        var isSettingOnViewModel = bindingInfo.parentToChild && bindingInfo.child === viewModelBindingStr;
        if (isSettingOnViewModel) {
            var bindingName = bindingInfo.childName;
            var isSettingViewModel = isSettingOnViewModel && (bindingName === 'this' || bindingName === '.');
            if (isSettingViewModel) {
                if (bindingState.isSettingViewModel || bindingState.isSettingOnViewModel) {
                    throwOnlyOneTypeOfBindingError();
                } else {
                    return {
                        isSettingViewModel: true,
                        initialViewModelData: undefined
                    };
                }
            } else {
                if (bindingState.isSettingViewModel) {
                    throwOnlyOneTypeOfBindingError();
                } else {
                    return {
                        isSettingOnViewModel: true,
                        initialViewModelData: bindingState.initialViewModelData
                    };
                }
            }
        } else {
            return bindingState;
        }
    };
    var behaviors = {
        viewModel: function (el, tagData, makeViewModel, initialViewModelData, staticDataBindingsOnly) {
            var viewModel, onCompleteBindings = [], onTeardowns = {}, bindingInfos = {}, attributeViewModelBindings = assign({}, initialViewModelData), bindingsState = {
                    isSettingOnViewModel: false,
                    isSettingViewModel: false,
                    initialViewModelData: initialViewModelData || {}
                }, hasDataBinding = false;
            canReflect.each(el.attributes || [], function (node) {
                var dataBinding = makeDataBinding(node, el, {
                    templateType: tagData.templateType,
                    scope: tagData.scope,
                    getViewModel: function () {
                        return viewModel;
                    },
                    attributeViewModelBindings: attributeViewModelBindings,
                    alreadyUpdatedChild: true,
                    nodeList: tagData.parentNodeList,
                    favorViewModel: true
                });
                if (dataBinding) {
                    var bindingInfo = dataBinding.bindingInfo;
                    bindingsState = checkBindingState(bindingsState, bindingInfo);
                    hasDataBinding = true;
                    if (bindingInfo.parentToChild) {
                        var parentValue = bindingInfo.stickyParentToChild ? makeCompute(dataBinding.parent) : dataBinding.canBinding.parentValue;
                        if (parentValue !== undefined) {
                            if (bindingsState.isSettingViewModel) {
                                bindingsState.initialViewModelData = parentValue;
                            } else {
                                bindingsState.initialViewModelData[cleanVMName(bindingInfo.childName, tagData.scope)] = parentValue;
                            }
                        }
                    }
                    onCompleteBindings.push(dataBinding.canBinding.start.bind(dataBinding.canBinding));
                    onTeardowns[node.name] = dataBinding.canBinding.stop.bind(dataBinding.canBinding);
                }
            });
            if (staticDataBindingsOnly && !hasDataBinding) {
                return;
            }
            viewModel = makeViewModel(bindingsState.initialViewModelData, hasDataBinding);
            for (var i = 0, len = onCompleteBindings.length; i < len; i++) {
                onCompleteBindings[i]();
            }
            var attributeDisposal;
            if (!bindingsState.isSettingViewModel) {
                attributeDisposal = domMutate.onNodeAttributeChange(el, function (ev) {
                    var attrName = ev.attributeName, value = el.getAttribute(attrName);
                    if (onTeardowns[attrName]) {
                        onTeardowns[attrName]();
                    }
                    var parentBindingWasAttribute = bindingInfos[attrName] && bindingInfos[attrName].parent === attributeBindingStr;
                    if (value !== null || parentBindingWasAttribute) {
                        var dataBinding = makeDataBinding({
                            name: attrName,
                            value: value
                        }, el, {
                            templateType: tagData.templateType,
                            scope: tagData.scope,
                            getViewModel: function () {
                                return viewModel;
                            },
                            attributeViewModelBindings: attributeViewModelBindings,
                            initializeValues: true,
                            nodeList: tagData.parentNodeList
                        });
                        if (dataBinding) {
                            dataBinding.canBinding.start();
                            bindingInfos[attrName] = dataBinding.bindingInfo;
                            onTeardowns[attrName] = dataBinding.canBinding.stop.bind(dataBinding.canBinding);
                        }
                    }
                });
            }
            return function () {
                if (attributeDisposal) {
                    attributeDisposal();
                    attributeDisposal = undefined;
                }
                for (var attrName in onTeardowns) {
                    onTeardowns[attrName]();
                }
            };
        },
        data: function (el, attrData) {
            if (domData.get.call(el, 'preventDataBindings')) {
                return;
            }
            var viewModel, getViewModel = ObservationRecorder.ignore(function () {
                    return viewModel || (viewModel = canViewModel(el));
                }), teardown, attributeDisposal, removedDisposal;
            var dataBinding = makeDataBinding({
                name: attrData.attributeName,
                value: el.getAttribute(attrData.attributeName),
                nodeList: attrData.nodeList
            }, el, {
                templateType: attrData.templateType,
                scope: attrData.scope,
                getViewModel: getViewModel,
                syncChildWithParent: false
            });
            dataBinding.canBinding.start();
            var attributeListener = function (ev) {
                var attrName = ev.attributeName, value = el.getAttribute(attrName);
                if (attrName === attrData.attributeName) {
                    if (teardown) {
                        teardown();
                    }
                    if (value !== null) {
                        var dataBinding = makeDataBinding({
                            name: attrName,
                            value: value
                        }, el, {
                            templateType: attrData.templateType,
                            scope: attrData.scope,
                            getViewModel: getViewModel,
                            initializeValues: true,
                            nodeList: attrData.nodeList,
                            syncChildWithParent: false
                        });
                        if (dataBinding) {
                            dataBinding.canBinding.start();
                            teardown = dataBinding.canBinding.stop.bind(dataBinding.canBinding);
                        }
                        teardown = dataBinding.onTeardown;
                    }
                }
            };
            var tearItAllDown = function () {
                if (teardown) {
                    teardown();
                    teardown = undefined;
                }
                if (removedDisposal) {
                    removedDisposal();
                    removedDisposal = undefined;
                }
                if (attributeDisposal) {
                    attributeDisposal();
                    attributeDisposal = undefined;
                }
            };
            if (attrData.nodeList) {
                ViewNodeList.register([], tearItAllDown, attrData.nodeList, false);
            }
            teardown = dataBinding.canBinding.stop.bind(dataBinding.canBinding);
            attributeDisposal = domMutate.onNodeAttributeChange(el, attributeListener);
            removedDisposal = domMutate.onNodeRemoval(el, function () {
                if (el.ownerDocument.contains(el) === false) {
                    tearItAllDown();
                }
            });
        },
        event: function (el, data) {
            var attributeName = encoder.decode(data.attributeName), event, bindingContext;
            if (attributeName.indexOf(toMatchStr + ':') !== -1 || attributeName.indexOf(fromMatchStr + ':') !== -1 || attributeName.indexOf(bindMatchStr + ':') !== -1) {
                return this.data(el, data);
            }
            if (startsWith.call(attributeName, onMatchStr)) {
                event = attributeName.substr(onMatchStr.length);
                var viewModel = el[canSymbol.for('can.viewModel')];
                var byParent = data.scope;
                if (startsWith.call(event, elMatchStr)) {
                    event = event.substr(elMatchStr.length);
                    bindingContext = el;
                } else {
                    if (startsWith.call(event, vmMatchStr)) {
                        event = event.substr(vmMatchStr.length);
                        bindingContext = viewModel;
                        byParent = viewModel;
                    } else {
                        bindingContext = viewModel || el;
                    }
                    var byIndex = event.indexOf(byMatchStr);
                    if (byIndex >= 0) {
                        bindingContext = byParent.get(event.substr(byIndex + byMatchStr.length));
                        event = event.substr(0, byIndex);
                    }
                }
            } else {
                throw new Error('can-stache-bindings - unsupported event bindings ' + attributeName);
            }
            var handler = function (ev) {
                var attrVal = el.getAttribute(encoder.encode(attributeName));
                if (!attrVal) {
                    return;
                }
                var viewModel = canViewModel(el);
                var expr = expression.parse(attrVal, {
                    lookupRule: function () {
                        return expression.Lookup;
                    },
                    methodRule: 'call'
                });
                if (!(expr instanceof expression.Call)) {
                    throw new Error('can-stache-bindings: Event bindings must be a call expression. Make sure you have a () in ' + data.attributeName + '=' + JSON.stringify(attrVal));
                }
                var specialValues = {
                    element: el,
                    event: ev,
                    viewModel: viewModel,
                    arguments: arguments
                };
                var localScope = data.scope.add(specialValues, { special: true });
                var updateFn = function () {
                    var value = expr.value(localScope, { doNotWrapInObservation: true });
                    value = canReflect.isValueLike(value) ? canReflect.getValue(value) : value;
                    return typeof value === 'function' ? value(el) : value;
                };
                queues.batch.start();
                var mutateQueueArgs = [];
                mutateQueueArgs = [
                    updateFn,
                    null,
                    null,
                    {}
                ];
                queues.mutateQueue.enqueue.apply(queues.mutateQueue, mutateQueueArgs);
                queues.batch.stop();
            };
            var attributesDisposal, removalDisposal;
            var attributesHandler = function (ev) {
                var isEventAttribute = ev.attributeName === attributeName;
                var isRemoved = !el.getAttribute(attributeName);
                var isEventAttributeRemoved = isEventAttribute && isRemoved;
                if (isEventAttributeRemoved) {
                    unbindEvent();
                }
            };
            var removalHandler = function () {
                if (!el.ownerDocument.contains(el)) {
                    unbindEvent();
                }
            };
            var unbindEvent = function () {
                canEvent.off.call(bindingContext, event, handler);
                if (attributesDisposal) {
                    attributesDisposal();
                    attributesDisposal = undefined;
                }
                if (removalDisposal) {
                    removalDisposal();
                    removalDisposal = undefined;
                }
            };
            canEvent.on.call(bindingContext, event, handler);
            attributesDisposal = domMutate.onNodeAttributeChange(el, attributesHandler);
            removalDisposal = domMutate.onNodeRemoval(el, removalHandler);
        }
    };
    bindings.set(/[\w\.:]+:to$/, behaviors.data);
    bindings.set(/[\w\.:]+:from$/, behaviors.data);
    bindings.set(/[\w\.:]+:bind$/, behaviors.data);
    bindings.set(/[\w\.:]+:raw$/, behaviors.data);
    bindings.set(/[\w\.:]+:to:on:[\w\.:]+/, behaviors.data);
    bindings.set(/[\w\.:]+:from:on:[\w\.:]+/, behaviors.data);
    bindings.set(/[\w\.:]+:bind:on:[\w\.:]+/, behaviors.data);
    bindings.set(/on:[\w\.:]+/, behaviors.event);
    var getObservableFrom = {
        viewModelOrAttribute: function (el, scope, vmNameOrProp, bindingData, mustBeGettable, stickyCompute, event) {
            var viewModel = el[canSymbol.for('can.viewModel')];
            if (viewModel) {
                return this.viewModel.apply(this, arguments);
            } else {
                return this.attribute.apply(this, arguments);
            }
        },
        scope: function (el, scope, scopeProp, bindingData, mustBeGettable, stickyCompute) {
            if (!scopeProp) {
                return new SimpleObservable();
            } else {
                if (mustBeGettable || scopeProp.indexOf('(') >= 0) {
                    var parentExpression = expression.parse(scopeProp, { baseMethodType: 'Call' });
                    return parentExpression.value(scope);
                } else {
                    var observation = {};
                    canReflect.assignSymbols(observation, {
                        'can.getValue': function getValue() {
                        },
                        'can.valueHasDependencies': function hasValueDependencies() {
                            return false;
                        },
                        'can.setValue': function setValue(newVal) {
                            scope.set(cleanVMName(scopeProp, scope), newVal);
                        },
                        'can.getWhatIChange': function getWhatIChange() {
                            var data = scope.getDataForScopeSet(cleanVMName(scopeProp, scope));
                            return {
                                mutate: {
                                    keyDependencies: new Map([[
                                            data.parent,
                                            new Set([data.key])
                                        ]])
                                }
                            };
                        },
                        'can.getName': function getName() {
                        }
                    });
                    var data = scope.getDataForScopeSet(cleanVMName(scopeProp, scope));
                    if (data.parent && data.key) {
                        canReflectDeps.addMutatedBy(data.parent, data.key, observation);
                    }
                    return observation;
                }
            }
        },
        viewModel: function (el, scope, vmName, bindingData, mustBeGettable, stickyCompute, childEvent) {
            var setName = cleanVMName(vmName, scope);
            var isBoundToContext = vmName === '.' || vmName === 'this';
            var keysToRead = isBoundToContext ? [] : observeReader.reads(vmName);
            function getViewModelProperty() {
                var viewModel = bindingData.getViewModel();
                return observeReader.read(viewModel, keysToRead, {}).value;
            }
            var observation = new SettableObservable(getViewModelProperty, function setViewModelProperty(newVal) {
                var viewModel = bindingData.getViewModel();
                if (stickyCompute) {
                    var oldValue = canReflect.getKeyValue(viewModel, setName);
                    if (canReflect.isObservableLike(oldValue)) {
                        canReflect.setValue(oldValue, newVal);
                    } else {
                        canReflect.setKeyValue(viewModel, setName, new SimpleObservable(canReflect.getValue(stickyCompute)));
                    }
                } else {
                    if (isBoundToContext) {
                        canReflect.setValue(viewModel, newVal);
                    } else {
                        canReflect.setKeyValue(viewModel, setName, newVal);
                    }
                }
            });
            return observation;
        },
        attribute: function (el, scope, prop, bindingData, mustBeGettable, stickyCompute, event, bindingInfo) {
            return new AttributeObservable(el, prop, bindingData, event);
        }
    };
    var startsWith = String.prototype.startsWith || function (text) {
        return this.indexOf(text) === 0;
    };
    function getEventName(result) {
        if (result.special.on !== undefined) {
            return result.tokens[result.special.on + 1];
        }
    }
    var bindingRules = {
        to: {
            childToParent: true,
            parentToChild: false,
            syncChildWithParent: false
        },
        from: {
            childToParent: false,
            parentToChild: true,
            syncChildWithParent: false
        },
        bind: {
            childToParent: true,
            parentToChild: true,
            syncChildWithParent: true
        },
        raw: {
            childToParent: false,
            parentToChild: true,
            syncChildWithParent: false
        }
    };
    var bindingNames = [];
    var special = {
        vm: true,
        on: true
    };
    canReflect.each(bindingRules, function (value, key) {
        bindingNames.push(key);
        special[key] = true;
    });
    function tokenize(source) {
        var splitByColon = source.split(':');
        var result = {
            tokens: [],
            special: {}
        };
        splitByColon.forEach(function (token) {
            if (special[token]) {
                result.special[token] = result.tokens.push(token) - 1;
            } else {
                result.tokens.push(token);
            }
        });
        return result;
    }
    var getChildBindingStr = function (tokens, favorViewModel) {
        if (tokens.indexOf('vm') >= 0) {
            return viewModelBindingStr;
        } else if (tokens.indexOf('el') >= 0) {
            return attributeBindingStr;
        } else {
            return favorViewModel ? viewModelBindingStr : viewModelOrAttributeBindingStr;
        }
    };
    var getBindingInfo = function (node, attributeViewModelBindings, templateType, tagName, favorViewModel) {
        var bindingInfo, attributeName = encoder.decode(node.name), attributeValue = node.value || '';
        var result = tokenize(attributeName), dataBindingName, specialIndex;
        bindingNames.forEach(function (name) {
            if (result.special[name] !== undefined && result.special[name] > 0) {
                dataBindingName = name;
                specialIndex = result.special[name];
                return false;
            }
        });
        if (dataBindingName) {
            var childEventName = getEventName(result);
            var initializeValues = childEventName && dataBindingName !== 'bind' ? false : true;
            bindingInfo = assign({
                parent: scopeBindingStr,
                child: getChildBindingStr(result.tokens, favorViewModel),
                childName: result.tokens[specialIndex - 1],
                childEvent: childEventName,
                bindingAttributeName: attributeName,
                parentName: result.special.raw ? '"' + attributeValue + '"' : attributeValue,
                initializeValues: initializeValues
            }, bindingRules[dataBindingName]);
            if (attributeValue.trim().charAt(0) === '~') {
                bindingInfo.stickyParentToChild = true;
            }
            return bindingInfo;
        }
    };
    var makeDataBinding = function (node, el, bindingData) {
        var bindingInfo = getBindingInfo(node, bindingData.attributeViewModelBindings, bindingData.templateType, el.nodeName.toLowerCase(), bindingData.favorViewModel);
        if (!bindingInfo) {
            return;
        }
        var parentObservable = getObservableFrom[bindingInfo.parent](el, bindingData.scope, bindingInfo.parentName, bindingData, bindingInfo.parentToChild, undefined, undefined, bindingInfo), childObservable = getObservableFrom[bindingInfo.child](el, bindingData.scope, bindingInfo.childName, bindingData, bindingInfo.childToParent, bindingInfo.stickyParentToChild && parentObservable, bindingInfo.childEvent, bindingInfo);
        var childToParent = !!bindingInfo.childToParent;
        var parentToChild = !!bindingInfo.parentToChild;
        var bindingOptions = {
            child: childObservable,
            childToParent: childToParent,
            cycles: 0,
            onInitDoNotUpdateChild: bindingData.alreadyUpdatedChild,
            onInitSetUndefinedParentIfChildIsDefined: true,
            parent: parentObservable,
            parentToChild: parentToChild,
            priority: bindingData.nodeList ? bindingData.nodeList.nesting + 1 : undefined,
            queue: 'domUI',
            sticky: bindingInfo.syncChildWithParent ? 'childSticksToParent' : undefined
        };
        var canBinding = new Bind(bindingOptions);
        canBinding.startParent();
        return {
            bindingInfo: bindingInfo,
            canBinding: canBinding,
            parent: parentObservable
        };
    };
    var cleanVMName = function (name, scope) {
        return name.replace(/@/g, '');
    };
    var canStacheBindings = {
        behaviors: behaviors,
        getBindingInfo: getBindingInfo,
        bindings: bindings
    };
    canStacheBindings[canSymbol.for('can.callbackMap')] = bindings;
    viewCallbacks.attrs(canStacheBindings);
    module.exports = canStacheBindings;
});
/*steal-stache@4.1.2#add-bundles*/
define('steal-stache@4.1.2#add-bundles', [], function(){ return {}; });
/*steal-config-utils@1.0.0#import-specifiers*/
define('steal-config-utils@1.0.0#import-specifiers', [], function(){ return {}; });
/*steal-stache@4.1.2#steal-stache*/
define('steal-stache@4.1.2#steal-stache', [], function(){ return {}; });
/*passbolt-mad@2.10.0#view/template/helper/componentTag.stache!steal-stache@4.1.2#steal-stache*/
define('passbolt-mad@2.10.0#view/template/helper/componentTag.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('view/template/helper/componentTag.stache', [
        {
            'tokenType': 'chars',
            'args': [
                'id="',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '" ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#each attributes',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '@key',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '="',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'this',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '" ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                1
            ]
        },
        {
            'tokenType': 'done',
            'args': [1]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*passbolt-mad@2.10.0#helper/component*/
define('passbolt-mad@2.10.0#helper/component', [
    'exports',
    'can-construct',
    'passbolt-mad/helper/html',
    'passbolt-mad/view/view',
    'passbolt-mad/view/template/helper/componentTag.stache!'
], function (exports, _canConstruct, _html, _view, _componentTag) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canConstruct2 = _interopRequireDefault(_canConstruct);
    var _html2 = _interopRequireDefault(_html);
    var _view2 = _interopRequireDefault(_view);
    var _componentTag2 = _interopRequireDefault(_componentTag);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ComponentHelper = _canConstruct2.default.extend('mad.helper.Component', {
        create: function create(refElement, position, ComponentClass, options) {
            options = options || {};
            var classAttributes = {};
            if (typeof ComponentClass.defaults.attributes != 'undefined') {
                classAttributes = ComponentClass.defaults.attributes;
            }
            var attributes = $.extend({}, classAttributes, options.attributes);
            if (refElement.length == 0) {
                throw mad.Exception.get(mad.error.WRONG_PARAMETER, 'refElement');
            }
            var tag = options.tag || ComponentClass.defaults.tag;
            var componentHtml = this._renderTag(tag, options.id, attributes);
            var $component = _html2.default.create(refElement, position, componentHtml);
            return new ComponentClass($component[0], options);
        },
        _renderTag: function _renderTag(tag, id, attributes) {
            var componentHtml = '<' + tag;
            componentHtml += ' ' + _view2.default.render(_componentTag2.default, {
                id: id || '',
                attributes: attributes
            });
            componentHtml += '/>';
            return componentHtml;
        }
    }, {});
    exports.default = ComponentHelper;
});
/*passbolt-mad@2.10.0#model/state/componentState*/
define('passbolt-mad@2.10.0#model/state/componentState', [
    'exports',
    'can-define/map/map'
], function (exports, _map) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _map2 = _interopRequireDefault(_map);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ComponentState = _map2.default.extend({
        destroyed: {
            type: 'boolean',
            default: false
        },
        disabled: {
            type: 'boolean',
            default: false
        },
        empty: {
            type: 'boolean',
            default: false
        },
        hidden: {
            type: 'boolean',
            default: false
        },
        loaded: {
            type: 'boolean',
            default: false
        },
        started: {
            type: 'boolean',
            default: false
        }
    });
    exports.default = ComponentState;
});
/*passbolt-mad@2.10.0#component/component*/
define('passbolt-mad@2.10.0#component/component', [
    'exports',
    'passbolt-mad/control/control',
    'passbolt-mad/model/list/list',
    'passbolt-mad/model/state/componentState',
    'passbolt-mad/view/view',
    'jquery'
], function (exports, _control, _list, _componentState, _view, _jquery) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _control2 = _interopRequireDefault(_control);
    var _list2 = _interopRequireDefault(_list);
    var _componentState2 = _interopRequireDefault(_componentState);
    var _view2 = _interopRequireDefault(_view);
    var _jquery2 = _interopRequireDefault(_jquery);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
    };
    var Component = _control2.default.extend('mad.Component', {
        defaults: {
            icon: null,
            label: 'ComponentController',
            cssClasses: ['js_component'],
            loadedOnStart: true,
            tag: 'div',
            template: null,
            viewClass: _view2.default,
            stateClass: _componentState2.default,
            viewData: {},
            silentLoading: true
        },
        _components: new _list2.default()
    }, {
        init: function init(el, options) {
            this._super(el, options);
            this._initState(options);
            this._loadedDependencies = new _list2.default();
            this._registerComponent();
        },
        _initState: function _initState(options) {
            var _this = this;
            var state = new this.options.stateClass(options.state);
            state.on('destroyed', function (ev, destroyed) {
                return _this.onDestroyedChange(destroyed);
            });
            state.on('disabled', function (ev, disabled) {
                return _this.onDisabledChange(disabled);
            });
            state.on('hidden', function (ev, hidden) {
                return _this.onHiddenChange(hidden);
            });
            state.on('loaded', function (ev, loaded) {
                return _this.onLoadedChange(loaded);
            });
            state.on('started', function (ev, started) {
                return _this.onStartedChange(started);
            });
            state.on('empty', function (ev, empty) {
                return _this.onEmptyChange(empty);
            });
            this.state = state;
        },
        _registerComponent: function _registerComponent() {
            Component._components.push(this);
        },
        _unregisterComponent: function _unregisterComponent() {
            var id = this.getId();
            var index = Component._components.indexOf({ id: id });
            if (index != -1) {
                Component._components.splice(index, 1);
            }
        },
        addLoadedDependency: function addLoadedDependency(component) {
            var _this2 = this;
            this._loadedDependencies.push(component);
            if (component.state.loaded == false) {
                this.state.loaded = false;
            }
            component.state.on('loaded', function () {
                var loaded = _this2._loadedDependencies.reduce(function (carry, dependency) {
                    return carry && dependency.state.loaded;
                }, true);
                _this2.state.loaded = loaded;
            });
        },
        onDestroyedChange: function onDestroyedChange(destroyed) {
            if (destroyed) {
                (0, _jquery2.default)(this.element).removeClass('ready');
            }
        },
        onDisabledChange: function onDisabledChange(disabled) {
            if (disabled) {
                (0, _jquery2.default)(this.element).addClass('disabled');
            } else {
                (0, _jquery2.default)(this.element).removeClass('disabled');
            }
        },
        onHiddenChange: function onHiddenChange(hidden) {
            if (hidden) {
                (0, _jquery2.default)(this.element).addClass('hidden');
            } else {
                (0, _jquery2.default)(this.element).removeClass('hidden');
            }
        },
        onLoadedChange: function onLoadedChange(loaded) {
            if (loaded) {
                (0, _jquery2.default)(this.element).addClass('ready');
            } else {
                (0, _jquery2.default)(this.element).removeClass('ready');
            }
        },
        onStartedChange: function onStartedChange(started) {
        },
        onEmptyChange: function onEmptyChange(empty) {
            var emptyFeedback = (0, _jquery2.default)('.empty-content', this.element);
            if (empty) {
                (0, _jquery2.default)(this.element).addClass('empty');
                emptyFeedback.removeClass('hidden');
            } else {
                (0, _jquery2.default)(this.element).removeClass('empty');
                emptyFeedback.addClass('hidden');
            }
        },
        destroy: function destroy() {
            if (this.element && this.element != null) {
                for (var i in this.options.cssClasses) {
                    (0, _jquery2.default)(this.element).removeClass(this.options.cssClasses[i]);
                }
                (0, _jquery2.default)(this.element).removeClass(this.constructor.name);
            }
            if (this.view) {
                this.view.destroy();
            }
            this.state.destroyed = true;
            delete this._unregisterComponent();
            this._super();
        },
        destroyAndRemove: function destroyAndRemove() {
            var element = this.element;
            this.destroy();
            if (element) {
                (0, _jquery2.default)(element).remove();
            }
        },
        setViewData: function setViewData(name, value) {
            if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) == 'object') {
                var data = name;
                for (var i in data) {
                    this.setViewData(i, data[i]);
                }
            } else {
                this.options.viewData[name] = value;
            }
            return this;
        },
        getViewData: function getViewData(name) {
            if (typeof name == 'undefined') {
                return this.options.viewData;
            }
            return this.options.viewData[name];
        },
        start: function start() {
            this.beforeStart();
            this.initView();
            this.updateWrapperElement();
            this.render();
            this.afterStart();
            this.state.started = true;
            if (this.options.loadedOnStart) {
                this.state.loaded = true;
            }
            return this;
        },
        refresh: function refresh() {
            if (this.state.destroyed) {
                return;
            }
            (0, _jquery2.default)(this.element).empty();
            this.render();
            this.afterStart();
            return this;
        },
        beforeStart: function beforeStart() {
        },
        initView: function initView() {
            this.view = new this.options.viewClass(this.element, {
                template: this.options.template,
                cssClasses: this.options.cssClasses,
                controller: this
            });
        },
        afterStart: function afterStart() {
        },
        updateWrapperElement: function updateWrapperElement() {
            var _this3 = this;
            this.options.cssClasses.forEach(function (cssClass) {
                return (0, _jquery2.default)(_this3.element).addClass(cssClass);
            });
            if (this.state.disabled) {
                this.view.addClass('disabled');
            } else {
                this.view.removeClass('disabled');
            }
            if (this.state.hidden) {
                this.view.addClass('hidden');
            } else {
                this.view.removeClass('hidden');
            }
        },
        render: function render() {
            if (this.options.template) {
                this.setDefaultViewData();
                this.beforeRender();
                var render = this.view.render();
                render = this.afterRender(render);
                this.view.insertInDom(render);
            }
        },
        setDefaultViewData: function setDefaultViewData() {
            this.setViewData('control', this);
            this.setViewData('controller', this);
            this.setViewData('icon', this.options.icon);
            this.setViewData('label', this.options.label);
            this.setViewData('view', this.view);
            this.setViewData('id', this.id);
        },
        beforeRender: function beforeRender() {
        },
        afterRender: function afterRender(render) {
            return render;
        }
    });
    exports.default = Component;
});
/*passbolt-mad@2.10.0#component/composite*/
define('passbolt-mad@2.10.0#component/composite', [
    'exports',
    'passbolt-mad/component/component'
], function (exports, _component) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Composite = _component2.default.extend('mad.component.Composite', { defaults: { label: 'Composite Component Controller' } }, {
        init: function init(el, options) {
            this._components = [];
            this._super(el, options);
        },
        getComponent: function getComponent(id) {
            return this._components[id];
        },
        addComponent: function addComponent(component) {
            this._components[component.getId()] = component;
            return component;
        }
    });
    exports.default = Composite;
});
/*passbolt-mad@2.10.0#view/template/component/free_composite/workspace.stache!steal-stache@4.1.2#steal-stache*/
define('passbolt-mad@2.10.0#view/template/component/free_composite/workspace.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('view/template/component/free_composite/workspace.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_workspace grid_16 alpha omega',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                1
            ]
        },
        {
            'tokenType': 'comment',
            'args': [
                '---------------------------------------------------------------------------\n\tWorkspace header bar\n\t---------------------------------------------------------------------------',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_workspace_label grid_3 alpha',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t<%= label %>\n\t',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\n\t',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_workspace_actions_container grid_7',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\n\t',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_workspace_view_actions_container grid_6 omega',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\n\t',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'clear',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\n\t',
                15
            ]
        },
        {
            'tokenType': 'comment',
            'args': [
                '---------------------------------------------------------------------------\n\tMain area\n\t---------------------------------------------------------------------------',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\n\t',
                19
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                21
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                21
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_workspace_sidebar_first grid_3 alpha',
                21
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                21
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                21
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\n\t',
                22
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                24
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                24
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_workspace_main grid_7',
                24
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                24
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                24
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\n\t',
                25
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                27
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                27
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_workspace_sidebar_second grid_6 omega',
                27
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                27
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                27
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                27
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                28
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\n\t',
                28
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                30
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                30
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'clear',
                30
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                30
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                30
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                30
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                32
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                32
            ]
        },
        {
            'tokenType': 'done',
            'args': [33]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*passbolt-mad@2.10.0#component/free_composite*/
define('passbolt-mad@2.10.0#component/free_composite', [
    'exports',
    'passbolt-mad/helper/component',
    'passbolt-mad/component/composite',
    'passbolt-mad/view/template/component/free_composite/workspace.stache!'
], function (exports, _component, _composite, _workspace) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _composite2 = _interopRequireDefault(_composite);
    var _workspace2 = _interopRequireDefault(_workspace);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var FreeComposite = _composite2.default.extend('mad.component.FreeComposite', {
        defaults: {
            label: 'WorkspaceController',
            template: _workspace2.default
        }
    }, {
        addComponent: function addComponent(ComponentClass, componentOptions, area) {
            area = area || 'mad-container-main';
            var $area = $('.' + area, this.element);
            var component = _component2.default.create($area, 'inside_replace', ComponentClass, componentOptions);
            return this._super(component);
        }
    });
    exports.default = FreeComposite;
});
/*passbolt-mad@2.10.0#view/template/component/dialog/dialog.stache!steal-stache@4.1.2#steal-stache*/
define('passbolt-mad@2.10.0#view/template/component/dialog/dialog.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('view/template/component/dialog/dialog.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dialog',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dialog-header',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h2',
                false,
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h2',
                false,
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dialog-header-title',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'label',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(subtitle)',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dialog-header-subtitle',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'subtitle',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(titleInfo)',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'more_details tooltip-alt',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-info-circle',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'tooltip-text right',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(titleInfo.name)',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>titleInfo',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                7
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#else',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'titleInfo',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                9
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                12
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h2',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dialog-close',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-close',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                15
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                16
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visuallyhidden',
                16
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'close',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                18
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_dialog_content dialog-content',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                19
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(subtitle != null && subtitle != \'\')',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                20
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                21
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                21
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'strong',
                false,
                22
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'strong',
                false,
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                22
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'subtitle',
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                23
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'strong',
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                24
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                25
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                26
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                27
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                27
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                28
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                28
            ]
        },
        {
            'tokenType': 'done',
            'args': [29]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*passbolt-mad@2.10.0#component/dialog*/
define('passbolt-mad@2.10.0#component/dialog', [
    'exports',
    'passbolt-mad/view/component/dialog',
    'passbolt-mad/component/free_composite',
    'passbolt-mad/helper/html',
    'passbolt-mad/view/template/component/dialog/dialog.stache!'
], function (exports, _dialog, _free_composite, _html, _dialog3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _dialog2 = _interopRequireDefault(_dialog);
    var _free_composite2 = _interopRequireDefault(_free_composite);
    var _html2 = _interopRequireDefault(_html);
    var _dialog4 = _interopRequireDefault(_dialog3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Dialog = _free_composite2.default.extend('mad.component.Dialog', {
        defaults: {
            label: null,
            viewClass: _dialog2.default,
            template: _dialog4.default,
            subtitle: null,
            titleInfo: null,
            cssClasses: ['dialog-wrapper'],
            tag: 'div'
        },
        closeLatest: function closeLatest() {
            $('.dialog-wrapper:last').remove();
        },
        instantiate: function instantiate(options) {
            var refElt = $('body');
            var position = 'first';
            var $existingDialog = $('.dialog-wrapper:last');
            if ($existingDialog.length) {
                refElt = $existingDialog;
                position = 'after';
            }
            var $el = _html2.default.create(refElt, position, '<div/>');
            return new Dialog($el[0], options);
        }
    }, {
        beforeRender: function beforeRender() {
            this.setViewData('subtitle', this.options.subtitle);
            this.setViewData('titleInfo', this.options.titleInfo);
        },
        add: function add(Class, options) {
            if (typeof options == 'undefined' || options == null) {
                options = {};
            }
            var component = this.addComponent(Class, options, 'js_dialog_content');
            component.start();
            return component;
        },
        setTitle: function setTitle(title) {
            this.view.setTitle(title);
        },
        setSubtitle: function setSubtitle(subtitle) {
            this.view.setSubtitle(subtitle);
        }
    });
    exports.default = Dialog;
});
/*passbolt-mad@2.10.0#util/lang/i18n*/
define('passbolt-mad@2.10.0#util/lang/i18n', [
    'exports',
    'can-construct'
], function (exports, _canConstruct) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canConstruct2 = _interopRequireDefault(_canConstruct);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var glbl = typeof window !== 'undefined' ? window : global;
    var __ = function __(str) {
        var args = Array.prototype.slice.call(arguments, 1);
        return I18n.translate(str, args);
    };
    glbl.__ = __;
    var I18n = _canConstruct2.default.extend('mad.I18n', {
        dico: {},
        translate: function translate(str, vars) {
            vars = typeof vars != 'undefined' ? vars : [];
            return I18n.replaceHooks(this.getEntry(str), vars);
        },
        loadDico: function loadDico(dico) {
            for (var i in dico) {
                I18n.dico[i] = dico[i];
            }
        },
        replaceHooks: function replaceHooks(str, vars) {
            var returnValue = '';
            var split = [];
            split = str.split('%s');
            if (split.length < 2) {
                return str;
            }
            for (var i in split) {
                returnValue += split[i];
                if (vars[i] && vars[i] != null && (typeof vars[i] == 'string' || typeof vars[i] == 'number' || typeof vars[i] == 'boolean')) {
                    returnValue += vars[i];
                }
            }
            return returnValue;
        },
        getEntry: function getEntry(str) {
            if (typeof I18n.dico[str] != 'undefined' && this.dico[str] != '') {
                return I18n.dico[str];
            }
            return str;
        }
    }, {});
    exports.default = I18n;
});
/*passbolt-mad@2.10.0#control/bus*/
define('passbolt-mad@2.10.0#control/bus', [
    'exports',
    'passbolt-mad/control/control',
    'can-dom-events',
    'jquery'
], function (exports, _control, _canDomEvents, _jquery) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _control2 = _interopRequireDefault(_control);
    var _canDomEvents2 = _interopRequireDefault(_canDomEvents);
    var _jquery2 = _interopRequireDefault(_jquery);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Bus = _control2.default.extend('mad.Bus', {
        bus: null,
        singleton: function singleton(el) {
            if (Bus.bus) {
                return Bus.bus;
            }
            var bus = new Bus(el);
            Bus.bus = bus;
            Bus.element = bus.element;
            return bus;
        },
        destroy: function destroy() {
            Bus.bus.destroy();
            Bus.bus = null;
        },
        trigger: function trigger(type, data, options) {
            options = options || {};
            var evOptions = { type: type };
            var dataKey = 'data';
            if (options.dataKey) {
                dataKey = options.dataKey;
            }
            evOptions[dataKey] = data || {};
            _canDomEvents2.default.dispatch(Bus.element, evOptions);
        },
        triggerPlugin: function triggerPlugin(type, data) {
            var event = document.createEvent('CustomEvent');
            event.initCustomEvent(type, true, true, data);
            document.documentElement.dispatchEvent(event);
        },
        triggerRequest: function triggerRequest(rqstName, rqstData) {
            var data = [];
            var deferred = _jquery2.default.Deferred();
            if (Object.prototype.toString.call(rqstData) == '[object Array]') {
                data = rqstData;
            } else if (Object.prototype.toString.call(rqstData) == '[object Object]') {
                data = [rqstData];
            }
            data.unshift(deferred);
            Bus.bus.trigger(rqstName, data);
            return deferred.promise();
        },
        bind: function bind(eventName, func) {
            (0, _jquery2.default)(Bus.element).bind(eventName, func);
        }
    }, {});
    window.addEventListener('addon-message', function (event) {
        Bus.trigger(event.detail.event, event.detail.data);
    }, false);
    exports.default = Bus;
});
/*app/view/template/component/session/session_expired.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/session/session_expired.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/session/session_expired.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form-content',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '        ',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Your session has expired, you will be automatically redirected to the login page.\') ',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'submit-wrapper clearfix',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'confirm-button',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'submit',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value',
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'OK\') ',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value',
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button primary',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                9
            ]
        },
        {
            'tokenType': 'done',
            'args': [10]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/session/session_expired*/
define('app/component/session/session_expired', [
    'exports',
    'passbolt-mad/component/component',
    'app/view/template/component/session/session_expired.stache!'
], function (exports, _component, _session_expired) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _session_expired2 = _interopRequireDefault(_session_expired);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var SessionExpiredComponent = _component2.default.extend('passbolt.component.session.SessionExpired', {
        defaults: {
            label: 'Session Expired Controller',
            template: _session_expired2.default,
            timeToRedirect: 5000,
            countDownInterval: null
        }
    }, {
        afterStart: function afterStart() {
            var _this = this;
            var initialTime = new Date().getTime();
            this.options.countDownInterval = setInterval(function () {
                var elapsedTime = new Date().getTime() - initialTime;
                if (elapsedTime > _this.options.timeToRedirect) {
                    clearInterval(_this.options.countDownInterval);
                    location.href = APP_URL;
                }
            }, 1000);
        },
        destroy: function destroy() {
            if (this.options.countDownInterval != null) {
                clearInterval(this.options.countDownInterval);
            }
        },
        ' .submit-wrapper input click': function submitWrapperInputClick() {
            clearInterval(this.options.countDownInterval);
            location.href = APP_URL;
        }
    });
    exports.default = SessionExpiredComponent;
});
/*app/view/template/component/mfa/mfa_required.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/mfa/mfa_required.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/mfa/mfa_required.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form-content',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '        ',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Your multi factor authentication (MFA) session has expired, you will be automatically redirected to the MFA page.\') ',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'submit-wrapper clearfix',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'confirm-button',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'submit',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value',
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'OK\') ',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value',
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button primary',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                9
            ]
        },
        {
            'tokenType': 'done',
            'args': [10]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/mfa/mfa_required*/
define('app/component/mfa/mfa_required', [
    'exports',
    'passbolt-mad/component/component',
    'app/view/template/component/mfa/mfa_required.stache!'
], function (exports, _component, _mfa_required) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _mfa_required2 = _interopRequireDefault(_mfa_required);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var MfaRequiredComponent = _component2.default.extend('passbolt.component.mfa.MfaRequired', {
        defaults: {
            label: 'Multi Factor Authentication Expired Controller',
            url: null,
            template: _mfa_required2.default,
            timeToRedirect: 5000,
            countDownInterval: null
        }
    }, {
        afterStart: function afterStart() {
            var _this = this;
            var initialTime = new Date().getTime();
            this.options.countDownInterval = setInterval(function () {
                var elapsedTime = new Date().getTime() - initialTime;
                if (elapsedTime > _this.options.timeToRedirect) {
                    clearInterval(_this.options.countDownInterval);
                    location.href = APP_URL + _this.options.url;
                }
            }, 1000);
        },
        destroy: function destroy() {
            if (this.options.countDownInterval != null) {
                clearInterval(this.options.countDownInterval);
            }
        },
        ' .submit-wrapper input click': function submitWrapperInputClick() {
            clearInterval(this.options.countDownInterval);
            location.href = APP_URL + this.options.url;
        }
    });
    exports.default = MfaRequiredComponent;
});
/*app/net/ajax*/
define('app/net/ajax', [
    'exports',
    'passbolt-mad/net/ajax',
    'passbolt-mad/config/config',
    'passbolt-mad/component/dialog',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/control/bus',
    'app/component/session/session_expired',
    'app/component/mfa/mfa_required'
], function (exports, _ajax, _config, _dialog, _i18n, _bus, _session_expired, _mfa_required) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _config2 = _interopRequireDefault(_config);
    var _dialog2 = _interopRequireDefault(_dialog);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _bus2 = _interopRequireDefault(_bus);
    var _session_expired2 = _interopRequireDefault(_session_expired);
    var _mfa_required2 = _interopRequireDefault(_mfa_required);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var AppAjax = _ajax2.default.extend('app.net.Ajax', {
        request: function request(_request) {
            _request.beforeSend = function (xhr) {
                _request._xhr = xhr;
                var csrfToken = _config2.default.read('app.csrfToken');
                xhr.setRequestHeader('X-CSRF-Token', csrfToken);
            };
            return this._super(_request);
        },
        handleSuccess: function handleSuccess(request, data) {
            var _this = this;
            return this._super(request, data).then(function (data) {
                _this._triggerNotification(request, request._response);
                return Promise.resolve(data);
            });
        },
        handleError: function handleError(request, data) {
            var _this2 = this;
            return this._super(request, data).then(null, function (data) {
                _this2._triggerNotification(request, request._response);
                _this2._sessionExpired(request, data);
                _this2._mfaRequired(request, request._response);
                return Promise.reject(data);
            });
        },
        _triggerNotification: function _triggerNotification(request, response) {
            if (_bus2.default.bus && (request.silentNotify === undefined || !request.silentNotify)) {
                _bus2.default.trigger('passbolt_notify', {
                    title: response.header.title,
                    status: response.header.status,
                    data: response
                });
            }
        },
        _mfaRequired: function _mfaRequired(request, response) {
            if (response.header) {
                if (response.header.code === 403 && response.header.message === 'MFA authentication is required.') {
                    if ($('.mfa-required-dialog').length > 0) {
                        return;
                    }
                    var dialog = _dialog2.default.instantiate({
                        label: __('MFA Required'),
                        cssClasses: [
                            'mfa-required-dialog',
                            'dialog-wrapper'
                        ]
                    }).start();
                    dialog.add(_mfa_required2.default, { url: '/' });
                }
                return true;
            }
            return false;
        },
        _sessionExpired: function _sessionExpired(request, response) {
            if (response.header) {
                var sessionExpiredAutoRedirect = request.sessionExpiredAutoRedirect !== undefined ? request.sessionExpiredAutoRedirect : true;
                if (response.header.code === 403 && response.header.message === 'You need to login to access this location.' && sessionExpiredAutoRedirect) {
                    if ($('.session-expired-dialog').length > 0) {
                        return;
                    }
                    var dialog = _dialog2.default.instantiate({
                        label: __('Session expired'),
                        cssClasses: [
                            'session-expired-dialog',
                            'dialog-wrapper'
                        ]
                    }).start();
                    dialog.add(_session_expired2.default, {});
                }
            } else {
                this.response.header.title = response.header.message;
            }
        }
    }, {});
    exports.default = AppAjax;
});
/*browser-cookies@1.2.0#src/browser-cookies*/
define('browser-cookies@1.2.0#src/browser-cookies', function (require, exports, module) {
    exports.defaults = {};
    exports.set = function (name, value, options) {
        var opts = options || {};
        var defaults = exports.defaults;
        var expires = opts.expires || defaults.expires;
        var domain = opts.domain || defaults.domain;
        var path = opts.path !== undefined ? opts.path : defaults.path !== undefined ? defaults.path : '/';
        var secure = opts.secure !== undefined ? opts.secure : defaults.secure;
        var httponly = opts.httponly !== undefined ? opts.httponly : defaults.httponly;
        var samesite = opts.samesite !== undefined ? opts.samesite : defaults.samesite;
        var expDate = expires ? new Date(typeof expires === 'number' ? new Date().getTime() + expires * 86400000 : expires) : 0;
        document.cookie = name.replace(/[^+#$&^`|]/g, encodeURIComponent).replace('(', '%28').replace(')', '%29') + '=' + value.replace(/[^+#$&\/:<-\[\]-}]/g, encodeURIComponent) + (expDate && expDate.getTime() >= 0 ? ';expires=' + expDate.toUTCString() : '') + (domain ? ';domain=' + domain : '') + (path ? ';path=' + path : '') + (secure ? ';secure' : '') + (httponly ? ';httponly' : '') + (samesite ? ';samesite=' + samesite : '');
    };
    exports.get = function (name) {
        var cookies = document.cookie.split(';');
        while (cookies.length) {
            var cookie = cookies.pop();
            var separatorIndex = cookie.indexOf('=');
            separatorIndex = separatorIndex < 0 ? cookie.length : separatorIndex;
            var cookie_name = decodeURIComponent(cookie.slice(0, separatorIndex).replace(/^\s+/, ''));
            if (cookie_name === name) {
                return decodeURIComponent(cookie.slice(separatorIndex + 1));
            }
        }
        return null;
    };
    exports.erase = function (name, options) {
        exports.set(name, '', {
            expires: -1,
            domain: options && options.domain,
            path: options && options.path,
            secure: 0,
            httponly: 0
        });
    };
    exports.all = function () {
        var all = {};
        var cookies = document.cookie.split(';');
        while (cookies.length) {
            var cookie = cookies.pop();
            var separatorIndex = cookie.indexOf('=');
            separatorIndex = separatorIndex < 0 ? cookie.length : separatorIndex;
            var cookie_name = decodeURIComponent(cookie.slice(0, separatorIndex).replace(/^\s+/, ''));
            all[cookie_name] = decodeURIComponent(cookie.slice(separatorIndex + 1));
        }
        return all;
    };
});
/*can-connect@2.1.0#connect*/
define('can-connect@2.1.0#connect', [
    'require',
    'exports',
    'module',
    'can-util/js/assign/assign'
], function (require, exports, module) {
    'use strict';
    var assign = require('can-util/js/assign/assign');
    var connect = function (behaviors, options) {
        behaviors = behaviors.map(function (behavior, index) {
            var sortedIndex = -1;
            if (typeof behavior === 'string') {
                sortedIndex = connect.order.indexOf(behavior);
                behavior = behaviorsMap[behavior];
            } else if (behavior.isBehavior) {
                sortedIndex = connect.order.indexOf(behavior.behaviorName);
            } else {
                behavior = connect.behavior(behavior);
            }
            return {
                originalIndex: index,
                sortedIndex: sortedIndex,
                behavior: behavior
            };
        });
        behaviors.sort(function (b1, b2) {
            if (~b1.sortedIndex && ~b2.sortedIndex) {
                return b1.sortedIndex - b2.sortedIndex;
            }
            return b1.originalIndex - b2.originalIndex;
        });
        behaviors = behaviors.map(function (b) {
            return b.behavior;
        });
        var behavior = connect.base(connect.behavior('options', function () {
            return options;
        })());
        behaviors.forEach(function (behave) {
            behavior = behave(behavior);
        });
        if (behavior.init) {
            behavior.init();
        }
        return behavior;
    };
    connect.order = [
        'data/localstorage-cache',
        'data/url',
        'data/parse',
        'cache-requests',
        'data/combine-requests',
        'constructor',
        'constructor/store',
        'can/map',
        'can/ref',
        'fall-through-cache',
        'data/worker',
        'real-time',
        'data/callbacks-cache',
        'data/callbacks',
        'constructor/callbacks-once'
    ];
    connect.behavior = function (name, behavior) {
        if (typeof name !== 'string') {
            behavior = name;
            name = undefined;
        }
        var behaviorMixin = function (base) {
            var Behavior = function () {
            };
            Object.defineProperty(Behavior, 'name', { value: name });
            Behavior.prototype = base;
            var newBehavior = new Behavior();
            var res = typeof behavior === 'function' ? behavior.apply(newBehavior, arguments) : behavior;
            assign(newBehavior, res);
            newBehavior.__behaviorName = name;
            return newBehavior;
        };
        if (name) {
            behaviorMixin.behaviorName = name;
            behaviorsMap[name] = behaviorMixin;
        }
        behaviorMixin.isBehavior = true;
        return behaviorMixin;
    };
    var behaviorsMap = {};
    module.exports = connect;
});
/*can-connect@2.1.0#base/base*/
define('can-connect@2.1.0#base/base', [
    'require',
    'exports',
    'module',
    'can-connect/connect'
], function (require, exports, module) {
    'use strict';
    var connect = require('can-connect/connect');
    module.exports = connect.behavior('base', function (baseConnection) {
        return {
            id: function (instance) {
                var ids = [], algebra = this.algebra;
                if (algebra && algebra.clauses && algebra.clauses.id) {
                    for (var prop in algebra.clauses.id) {
                        ids.push(instance[prop]);
                    }
                }
                if (this.idProp && !ids.length) {
                    ids.push(instance[this.idProp]);
                }
                if (!ids.length) {
                    ids.push(instance.id);
                }
                return ids.length > 1 ? ids.join('@|@') : ids[0];
            },
            idProp: baseConnection.idProp || 'id',
            listSet: function (list) {
                return list[this.listSetProp];
            },
            listSetProp: '__listSet',
            init: function () {
            }
        };
    });
});
/*can-connect@2.1.0#can-connect*/
define('can-connect@2.1.0#can-connect', [
    'require',
    'exports',
    'module',
    'can-connect/connect',
    'can-connect/base/base',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var connect = require('can-connect/connect');
    var base = require('can-connect/base/base');
    var ns = require('can-namespace');
    connect.base = base;
    module.exports = ns.connect = connect;
});
/*can-ajax@1.4.0#can-ajax*/
define('can-ajax@1.4.0#can-ajax', [
    'require',
    'exports',
    'module',
    'can-globals/global/global',
    'can-reflect',
    'can-namespace',
    'can-parse-uri',
    'can-param'
], function (require, exports, module) {
    (function (global, require, exports, module) {
        'use strict';
        var Global = require('can-globals/global/global');
        var canReflect = require('can-reflect');
        var namespace = require('can-namespace');
        var parseURI = require('can-parse-uri');
        var param = require('can-param');
        var xhrs = [
                function () {
                    return new XMLHttpRequest();
                },
                function () {
                    return new ActiveXObject('Microsoft.XMLHTTP');
                },
                function () {
                    return new ActiveXObject('MSXML2.XMLHTTP.3.0');
                },
                function () {
                    return new ActiveXObject('MSXML2.XMLHTTP');
                }
            ], _xhrf = null;
        var originUrl = parseURI(Global().location.href);
        var globalSettings = {};
        var makeXhr = function () {
            if (_xhrf != null) {
                return _xhrf();
            }
            for (var i = 0, l = xhrs.length; i < l; i++) {
                try {
                    var f = xhrs[i], req = f();
                    if (req != null) {
                        _xhrf = f;
                        return req;
                    }
                } catch (e) {
                    continue;
                }
            }
            return function () {
            };
        };
        var contentTypes = {
            json: 'application/json',
            form: 'application/x-www-form-urlencoded'
        };
        var _xhrResp = function (xhr, options) {
            switch (options.dataType || xhr.getResponseHeader('Content-Type').split(';')[0]) {
            case 'text/xml':
            case 'xml':
                return xhr.responseXML;
            case 'text/json':
            case 'application/json':
            case 'text/javascript':
            case 'application/javascript':
            case 'application/x-javascript':
            case 'json':
                return xhr.responseText && JSON.parse(xhr.responseText);
            default:
                return xhr.responseText;
            }
        };
        function ajax(o) {
            var xhr = makeXhr(), timer, n = 0;
            var deferred = {}, isFormData;
            var promise = new Promise(function (resolve, reject) {
                deferred.resolve = resolve;
                deferred.reject = reject;
            });
            var requestUrl;
            promise.abort = function () {
                xhr.abort();
            };
            o = [
                {
                    userAgent: 'XMLHttpRequest',
                    lang: 'en',
                    type: 'GET',
                    data: null,
                    dataType: 'json'
                },
                globalSettings,
                o
            ].reduce(function (a, b, i) {
                return canReflect.assignDeep(a, b);
            });
            var async = o.async !== false;
            if (!o.contentType) {
                o.contentType = o.type.toUpperCase() === 'GET' ? contentTypes.form : contentTypes.json;
            }
            if (o.crossDomain == null) {
                try {
                    requestUrl = parseURI(o.url);
                    o.crossDomain = !!(requestUrl.protocol && requestUrl.protocol !== originUrl.protocol || requestUrl.host && requestUrl.host !== originUrl.host);
                } catch (e) {
                    o.crossDomain = true;
                }
            }
            if (o.timeout) {
                timer = setTimeout(function () {
                    xhr.abort();
                    if (o.timeoutFn) {
                        o.timeoutFn(o.url);
                    }
                }, o.timeout);
            }
            xhr.onreadystatechange = function () {
                try {
                    if (xhr.readyState === 4) {
                        if (timer) {
                            clearTimeout(timer);
                        }
                        if (xhr.status < 300) {
                            if (o.success) {
                                o.success(_xhrResp(xhr, o));
                            }
                        } else if (o.error) {
                            o.error(xhr, xhr.status, xhr.statusText);
                        }
                        if (o.complete) {
                            o.complete(xhr, xhr.statusText);
                        }
                        if (xhr.status >= 200 && xhr.status < 300) {
                            deferred.resolve(_xhrResp(xhr, o));
                        } else {
                            deferred.reject(xhr);
                        }
                    } else if (o.progress) {
                        o.progress(++n);
                    }
                } catch (e) {
                    deferred.reject(e);
                }
            };
            var url = o.url, data = null, type = o.type.toUpperCase();
            var isJsonContentType = o.contentType === contentTypes.json;
            var isPost = type === 'POST' || type === 'PUT';
            if (!isPost && o.data) {
                url += '?' + (isJsonContentType ? JSON.stringify(o.data) : param(o.data));
            }
            xhr.open(type, url, async);
            var isSimpleCors = o.crossDomain && [
                'GET',
                'POST',
                'HEAD'
            ].indexOf(type) !== -1;
            isFormData = typeof FormData !== 'undefined' && o.data instanceof FormData;
            if (isPost) {
                if (isFormData) {
                    data = o.data;
                } else {
                    data = isJsonContentType && !isSimpleCors ? typeof o.data === 'object' ? JSON.stringify(o.data) : o.data : param(o.data);
                }
                var setContentType = isJsonContentType && !isSimpleCors ? 'application/json' : 'application/x-www-form-urlencoded';
                xhr.setRequestHeader('Content-Type', setContentType);
            } else {
                xhr.setRequestHeader('Content-Type', o.contentType);
            }
            if (!isSimpleCors) {
                xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            }
            if (o.xhrFields) {
                for (var f in o.xhrFields) {
                    xhr[f] = o.xhrFields[f];
                }
            }
            xhr.send(data);
            return promise;
        }
        module.exports = namespace.ajax = ajax;
        module.exports.ajaxSetup = function (o) {
            globalSettings = o || {};
        };
    }(function () {
        return this;
    }(), require, exports, module));
});
/*can-connect@2.1.0#helpers/get-id-props*/
define('can-connect@2.1.0#helpers/get-id-props', function (require, exports, module) {
    'use strict';
    module.exports = function (connection) {
        var ids = [], algebra = connection.algebra;
        if (algebra && algebra.clauses && algebra.clauses.id) {
            for (var prop in algebra.clauses.id) {
                ids.push(prop);
            }
        }
        if (connection.idProp && !ids.length) {
            ids.push(connection.idProp);
        }
        if (!ids.length) {
            ids.push('id');
        }
        return ids;
    };
});
/*can-make-rest@0.1.3#can-make-rest*/
define('can-make-rest@0.1.3#can-make-rest', [
    'require',
    'exports',
    'module',
    'can-util/js/each/each'
], function (require, exports, module) {
    var each = require('can-util/js/each/each');
    var methodMapping = {
        item: {
            'GET': 'getData',
            'PUT': 'updateData',
            'DELETE': 'destroyData'
        },
        list: {
            'GET': 'getListData',
            'POST': 'createData'
        }
    };
    function inferIdProp(url) {
        var wrappedInBraces = /\{(.*)\}/;
        var matches = url.match(wrappedInBraces);
        var isUniqueMatch = matches && matches.length === 2;
        if (isUniqueMatch) {
            return matches[1];
        }
    }
    function getItemAndListUrls(url, idProp) {
        idProp = idProp || inferIdProp(url) || 'id';
        var itemRegex = new RegExp('\\/\\{' + idProp + '\\}.*');
        var rootIsItemUrl = itemRegex.test(url);
        var listUrl = rootIsItemUrl ? url.replace(itemRegex, '') : url;
        var itemUrl = rootIsItemUrl ? url : url.trim() + '/{' + idProp + '}';
        return {
            item: itemUrl,
            list: listUrl
        };
    }
    module.exports = function (url, idProp) {
        var data = {};
        each(getItemAndListUrls(url, idProp), function (url, type) {
            each(methodMapping[type], function (interfaceMethod, method) {
                data[interfaceMethod] = {
                    method: method,
                    url: url
                };
            });
        });
        return data;
    };
});
/*can-util@3.12.0#js/is-promise-like/is-promise-like*/
define('can-util@3.12.0#js/is-promise-like/is-promise-like', function (require, exports, module) {
    'use strict';
    module.exports = function (obj) {
        return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
    };
});
/*can-util@3.12.0#js/is-promise/is-promise*/
define('can-util@3.12.0#js/is-promise/is-promise', [
    'require',
    'exports',
    'module',
    'can-reflect',
    'can-namespace'
], function (require, exports, module) {
    'use strict';
    var canReflect = require('can-reflect');
    var namespace = require('can-namespace');
    module.exports = namespace.isPromise = function (obj) {
        return canReflect.isPromise(obj);
    };
});
/*can-util@3.12.0#js/make-promise/make-promise*/
define('can-util@3.12.0#js/make-promise/make-promise', [
    'require',
    'exports',
    'module',
    '../is-promise-like/is-promise-like',
    '../is-promise/is-promise'
], function (require, exports, module) {
    'use strict';
    var isPromiseLike = require('../is-promise-like/is-promise-like');
    var isPromise = require('../is-promise/is-promise');
    module.exports = function (obj) {
        if (isPromiseLike(obj) && !isPromise(obj)) {
            return new Promise(function (resolve, reject) {
                obj.then(resolve, reject);
            });
        } else {
            return obj;
        }
    };
});
/*can-validate-interface@1.0.2#index*/
define('can-validate-interface@1.0.2#index', function (require, exports, module) {
    'use strict';
    function flatten(arrays) {
        return arrays.reduce(function (ret, val) {
            return ret.concat(val);
        }, []);
    }
    function makeInterfaceValidator(interfacePropArrays) {
        var props = flatten(interfacePropArrays);
        return function (base) {
            var missingProps = props.reduce(function (missing, prop) {
                return prop in base ? missing : missing.concat(prop);
            }, []);
            return missingProps.length ? {
                message: 'missing expected properties',
                related: missingProps
            } : undefined;
        };
    }
    module.exports = makeInterfaceValidator;
});
/*can-connect@2.1.0#helpers/validate*/
define('can-connect@2.1.0#helpers/validate', [
    'require',
    'exports',
    'module',
    'can-validate-interface'
], function (require, exports, module) {
    'use strict';
    var makeInterfaceValidator = require('can-validate-interface');
    module.exports = function (extendingBehavior, interfaces) {
        var validatedBehaviour = validateArgumentInterface(extendingBehavior, 0, interfaces, function (errors, baseBehavior) {
            throw new BehaviorInterfaceError(baseBehavior, extendingBehavior, errors);
        });
        Object.keys(extendingBehavior).forEach(function (k) {
            validatedBehaviour[k] = extendingBehavior[k];
        });
        validatedBehaviour.__interfaces = interfaces;
        return validatedBehaviour;
    };
    function validateArgumentInterface(func, argIndex, interfaces, errorHandler) {
        return function () {
            var errors = makeInterfaceValidator(interfaces)(arguments[argIndex]);
            if (errors && errorHandler) {
                errorHandler(errors, arguments[argIndex]);
            }
            return func.apply(this, arguments);
        };
    }
    function BehaviorInterfaceError(baseBehavior, extendingBehavior, missingProps) {
        var extendingName = extendingBehavior.behaviorName || 'anonymous behavior', baseName = baseBehavior.__behaviorName || 'anonymous behavior', message = 'can-connect: Extending behavior "' + extendingName + '" found base behavior "' + baseName + '" was missing required properties: ' + JSON.stringify(missingProps.related), instance = new Error(message);
        if (Object.setPrototypeOf) {
            Object.setPrototypeOf(instance, Object.getPrototypeOf(this));
        }
        return instance;
    }
    BehaviorInterfaceError.prototype = Object.create(Error.prototype, { constructor: { value: Error } });
    if (Object.setPrototypeOf) {
        Object.setPrototypeOf(BehaviorInterfaceError, Error);
    } else {
        BehaviorInterfaceError.__proto__ = Error;
    }
});
/*can-connect@2.1.0#data/url/url*/
define('can-connect@2.1.0#data/url/url', [
    'require',
    'exports',
    'module',
    'can-util/js/assign/assign',
    'can-util/js/each/each',
    'can-ajax',
    'can-util/js/string/string',
    '../../helpers/get-id-props',
    'can-util/js/dev/dev',
    'can-connect',
    'can-make-rest',
    'can-util/js/make-promise/make-promise'
], function (require, exports, module) {
    'use strict';
    var assign = require('can-util/js/assign/assign');
    var each = require('can-util/js/each/each');
    var ajax = require('can-ajax');
    var string = require('can-util/js/string/string');
    var getIdProps = require('../../helpers/get-id-props');
    var dev = require('can-util/js/dev/dev');
    var connect = require('can-connect');
    var makeRest = require('can-make-rest');
    var defaultRest = makeRest('/resource/{id}');
    var makePromise = require('can-util/js/make-promise/make-promise');
    var urlBehavior = connect.behavior('data/url', function (baseConnection) {
        var behavior = {};
        each(defaultRest, function (defaultData, dataInterfaceName) {
            behavior[dataInterfaceName] = function (params) {
                var meta = methodMetaData[dataInterfaceName];
                if (typeof this.url === 'object') {
                    if (typeof this.url[dataInterfaceName] === 'function') {
                        return makePromise(this.url[dataInterfaceName](params));
                    } else if (this.url[dataInterfaceName]) {
                        var promise = makeAjax(this.url[dataInterfaceName], params, defaultData.method, this.ajax || ajax, findContentType(this.url, defaultData.method), meta);
                        return makePromise(promise);
                    }
                }
                var resource = typeof this.url === 'string' ? this.url : this.url.resource;
                if (resource) {
                    var idProps = getIdProps(this);
                    var resourceWithoutTrailingSlashes = resource.replace(/\/+$/, '');
                    var result = makeRest(resourceWithoutTrailingSlashes, idProps[0])[dataInterfaceName];
                    return makePromise(makeAjax(result.url, params, result.method, this.ajax || ajax, findContentType(this.url, result.method), meta));
                }
                return baseConnection[name].call(this, params);
            };
        });
        return behavior;
    });
    var methodMetaData = {
        getListData: {},
        getData: {},
        createData: {},
        updateData: {},
        destroyData: { includeData: false }
    };
    var findContentType = function (url, method) {
        if (typeof url === 'object' && url.contentType) {
            var acceptableType = url.contentType === 'application/x-www-form-urlencoded' || url.contentType === 'application/json';
            if (acceptableType) {
                return url.contentType;
            } else {
            }
        }
        return method === 'GET' ? 'application/x-www-form-urlencoded' : 'application/json';
    };
    function urlParamEncoder(key, value) {
        return encodeURIComponent(value);
    }
    var makeAjax = function (ajaxOb, data, type, ajax, contentType, reqOptions) {
        var params = {};
        if (typeof ajaxOb === 'string') {
            var parts = ajaxOb.split(/\s+/);
            params.url = parts.pop();
            if (parts.length) {
                params.type = parts.pop();
            }
        } else {
            assign(params, ajaxOb);
        }
        params.data = typeof data === 'object' && !Array.isArray(data) ? assign(params.data || {}, data) : data;
        params.url = string.replaceWith(params.url, params.data, urlParamEncoder, true);
        params.contentType = contentType;
        if (reqOptions.includeData === false) {
            delete params.data;
        }
        return ajax(assign({
            type: type || 'post',
            dataType: 'json'
        }, params));
    };
    module.exports = urlBehavior;
});
/*can-connect@2.1.0#data/parse/parse*/
define('can-connect@2.1.0#data/parse/parse', [
    'require',
    'exports',
    'module',
    'can-connect',
    'can-util/js/each/each',
    'can-util/js/get/get'
], function (require, exports, module) {
    'use strict';
    var connect = require('can-connect');
    var each = require('can-util/js/each/each');
    var getObject = require('can-util/js/get/get');
    module.exports = connect.behavior('data/parse', function (baseConnection) {
        var behavior = {
            parseListData: function (responseData) {
                if (baseConnection.parseListData) {
                    responseData = baseConnection.parseListData.apply(this, arguments);
                }
                var result;
                if (Array.isArray(responseData)) {
                    result = { data: responseData };
                } else {
                    var prop = this.parseListProp || 'data';
                    responseData.data = getObject(responseData, prop);
                    result = responseData;
                    if (prop !== 'data') {
                        delete responseData[prop];
                    }
                    if (!Array.isArray(result.data)) {
                        throw new Error('Could not get any raw data while converting using .parseListData');
                    }
                }
                var arr = [];
                for (var i = 0; i < result.data.length; i++) {
                    arr.push(this.parseInstanceData(result.data[i]));
                }
                result.data = arr;
                return result;
            },
            parseInstanceData: function (props) {
                if (baseConnection.parseInstanceData) {
                    props = baseConnection.parseInstanceData.apply(this, arguments) || props;
                }
                return this.parseInstanceProp ? getObject(props, this.parseInstanceProp) || props : props;
            }
        };
        each(pairs, function (parseFunction, name) {
            behavior[name] = function (params) {
                var self = this;
                return baseConnection[name].call(this, params).then(function () {
                    return self[parseFunction].apply(self, arguments);
                });
            };
        });
        return behavior;
    });
    var pairs = {
        getListData: 'parseListData',
        getData: 'parseInstanceData',
        createData: 'parseInstanceData',
        updateData: 'parseInstanceData',
        destroyData: 'parseInstanceData'
    };
});
/*can-connect@2.1.0#helpers/weak-reference-map*/
define('can-connect@2.1.0#helpers/weak-reference-map', [
    'require',
    'exports',
    'module',
    'can-util/js/assign/assign'
], function (require, exports, module) {
    'use strict';
    var assign = require('can-util/js/assign/assign');
    var WeakReferenceMap = function () {
        this.set = {};
    };
    assign(WeakReferenceMap.prototype, {
        has: function (key) {
            return !!this.set[key];
        },
        addReference: function (key, item, referenceCount) {
            if (typeof key === 'undefined') {
                throw new Error('can-connect: You must provide a key to store a value in a WeakReferenceMap');
            }
            var data = this.set[key];
            if (!data) {
                data = this.set[key] = {
                    item: item,
                    referenceCount: 0,
                    key: key
                };
            }
            data.referenceCount += referenceCount || 1;
        },
        referenceCount: function (key) {
            var data = this.set[key];
            if (data) {
                return data.referenceCount;
            }
        },
        deleteReference: function (key) {
            var data = this.set[key];
            if (data) {
                data.referenceCount--;
                if (data.referenceCount === 0) {
                    delete this.set[key];
                }
            }
        },
        get: function (key) {
            var data = this.set[key];
            if (data) {
                return data.item;
            }
        },
        forEach: function (cb) {
            for (var id in this.set) {
                cb(this.set[id].item, id);
            }
        }
    });
    module.exports = WeakReferenceMap;
});
/*can-connect@2.1.0#helpers/overwrite*/
define('can-connect@2.1.0#helpers/overwrite', function (require, exports, module) {
    'use strict';
    module.exports = function (d, s, id) {
        for (var prop in d) {
            if (d.hasOwnProperty(prop) && !(prop.substr(0, 2) === '__') && prop !== id && !(prop in s)) {
                delete d[prop];
            }
        }
        for (prop in s) {
            d[prop] = s[prop];
        }
        return d;
    };
});
/*can-connect@2.1.0#helpers/id-merge*/
define('can-connect@2.1.0#helpers/id-merge', function (require, exports, module) {
    'use strict';
    var map = [].map;
    module.exports = function (list, update, id, make) {
        var listIndex = 0, updateIndex = 0;
        while (listIndex < list.length && updateIndex < update.length) {
            var listItem = list[listIndex], updateItem = update[updateIndex], lID = id(listItem), uID = id(updateItem);
            if (id(listItem) === id(updateItem)) {
                listIndex++;
                updateIndex++;
                continue;
            }
            if (updateIndex + 1 < update.length && id(update[updateIndex + 1]) === lID) {
                list.splice(listIndex, 0, make(update[updateIndex]));
                listIndex++;
                updateIndex++;
                continue;
            } else if (listIndex + 1 < list.length && id(list[listIndex + 1]) === uID) {
                list.splice(listIndex, 1);
                listIndex++;
                updateIndex++;
                continue;
            } else {
                list.splice.apply(list, [
                    listIndex,
                    list.length - listIndex
                ].concat(map.call(update.slice(updateIndex), make)));
                return list;
            }
        }
        if (updateIndex === update.length && listIndex === list.length) {
            return;
        }
        list.splice.apply(list, [
            listIndex,
            list.length - listIndex
        ].concat(map.call(update.slice(updateIndex), make)));
        return;
    };
});
/*can-connect@2.1.0#constructor/constructor*/
define('can-connect@2.1.0#constructor/constructor', [
    'require',
    'exports',
    'module',
    'can-util/js/make-array/make-array',
    'can-util/js/assign/assign',
    'can-connect',
    'can-connect/helpers/weak-reference-map',
    'can-connect/helpers/overwrite',
    'can-connect/helpers/id-merge'
], function (require, exports, module) {
    'use strict';
    var makeArray = require('can-util/js/make-array/make-array');
    var assign = require('can-util/js/assign/assign');
    var connect = require('can-connect');
    var WeakReferenceMap = require('can-connect/helpers/weak-reference-map');
    var overwrite = require('can-connect/helpers/overwrite');
    var idMerge = require('can-connect/helpers/id-merge');
    module.exports = connect.behavior('constructor', function (baseConnection) {
        var behavior = {
            cidStore: new WeakReferenceMap(),
            _cid: 0,
            get: function (params) {
                var self = this;
                return this.getData(params).then(function (data) {
                    return self.hydrateInstance(data);
                });
            },
            getList: function (set) {
                set = set || {};
                var self = this;
                return this.getListData(set).then(function (data) {
                    return self.hydrateList(data, set);
                });
            },
            hydrateList: function (listData, set) {
                if (Array.isArray(listData)) {
                    listData = { data: listData };
                }
                var arr = [];
                for (var i = 0; i < listData.data.length; i++) {
                    arr.push(this.hydrateInstance(listData.data[i]));
                }
                listData.data = arr;
                if (this.list) {
                    return this.list(listData, set);
                } else {
                    var list = listData.data.slice(0);
                    list[this.listSetProp || '__listSet'] = set;
                    copyMetadata(listData, list);
                    return list;
                }
            },
            hydrateInstance: function (props) {
                if (this.instance) {
                    return this.instance(props);
                } else {
                    return assign({}, props);
                }
            },
            save: function (instance) {
                var serialized = this.serializeInstance(instance);
                var id = this.id(instance);
                var self = this;
                if (id === undefined) {
                    var cid = this._cid++;
                    this.cidStore.addReference(cid, instance);
                    return this.createData(serialized, cid).then(function (data) {
                        if (data !== undefined) {
                            self.createdInstance(instance, data);
                        }
                        self.cidStore.deleteReference(cid, instance);
                        return instance;
                    });
                } else {
                    return this.updateData(serialized).then(function (data) {
                        if (data !== undefined) {
                            self.updatedInstance(instance, data);
                        }
                        return instance;
                    });
                }
            },
            destroy: function (instance) {
                var serialized = this.serializeInstance(instance), self = this;
                return this.destroyData(serialized).then(function (data) {
                    if (data !== undefined) {
                        self.destroyedInstance(instance, data);
                    }
                    return instance;
                });
            },
            createdInstance: function (instance, props) {
                assign(instance, props);
            },
            updatedInstance: function (instance, data) {
                overwrite(instance, data, this.idProp);
            },
            updatedList: function (list, listData, set) {
                var instanceList = [];
                for (var i = 0; i < listData.data.length; i++) {
                    instanceList.push(this.hydrateInstance(listData.data[i]));
                }
                idMerge(list, instanceList, this.id.bind(this), this.hydrateInstance.bind(this));
                copyMetadata(listData, list);
            },
            destroyedInstance: function (instance, data) {
                overwrite(instance, data, this.idProp);
            },
            serializeInstance: function (instance) {
                return assign({}, instance);
            },
            serializeList: function (list) {
                var self = this;
                return makeArray(list).map(function (instance) {
                    return self.serializeInstance(instance);
                });
            },
            isNew: function (instance) {
                var id = this.id(instance);
                return !(id || id === 0);
            }
        };
        return behavior;
    });
    function copyMetadata(listData, list) {
        for (var prop in listData) {
            if (prop !== 'data') {
                if (typeof list.set === 'function') {
                    list.set(prop, listData[prop]);
                } else if (typeof list.attr === 'function') {
                    list.attr(prop, listData[prop]);
                } else {
                    list[prop] = listData[prop];
                }
            }
        }
    }
});
/*can-types@1.2.0#can-types*/
define('can-types@1.2.0#can-types', [
    'require',
    'exports',
    'module',
    'can-namespace',
    'can-reflect',
    'can-symbol',
    'can-log/dev/dev'
], function (require, exports, module) {
    var namespace = require('can-namespace');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var dev = require('can-log/dev/dev');
    var types = {
        isMapLike: function (obj) {
            return canReflect.isObservableLike(obj) && canReflect.isMapLike(obj);
        },
        isListLike: function (obj) {
            return canReflect.isObservableLike(obj) && canReflect.isListLike(obj);
        },
        isPromise: function (obj) {
            return canReflect.isPromise(obj);
        },
        isConstructor: function (func) {
            return canReflect.isConstructorLike(func);
        },
        isCallableForValue: function (obj) {
            return obj && canReflect.isFunctionLike(obj) && !canReflect.isConstructorLike(obj);
        },
        isCompute: function (obj) {
            return obj && obj.isComputed;
        },
        get iterator() {
            return canSymbol.iterator || canSymbol.for('iterator');
        },
        DefaultMap: null,
        DefaultList: null,
        queueTask: function (task) {
            var args = task[2] || [];
            task[0].apply(task[1], args);
        },
        wrapElement: function (element) {
            return element;
        },
        unwrapElement: function (element) {
            return element;
        }
    };
    if (namespace.types) {
        throw new Error('You can\'t have two versions of can-types, check your dependencies');
    } else {
        module.exports = namespace.types = types;
    }
});
/*can-connect@2.1.0#can/map/map*/
define('can-connect@2.1.0#can/map/map', [
    'require',
    'exports',
    'module',
    'can-util/js/each/each',
    'can-connect',
    'can-queues',
    'can-event-queue/map/map',
    'can-observation-recorder',
    'can-util/js/is-plain-object/is-plain-object',
    'can-types',
    'can-util/js/each/each',
    'can-util/js/dev/dev',
    'can-reflect',
    'can-symbol'
], function (require, exports, module) {
    'use strict';
    var each = require('can-util/js/each/each');
    var connect = require('can-connect');
    var queues = require('can-queues');
    var eventQueue = require('can-event-queue/map/map');
    var ObservationRecorder = require('can-observation-recorder');
    var isPlainObject = require('can-util/js/is-plain-object/is-plain-object');
    var types = require('can-types');
    var each = require('can-util/js/each/each');
    var dev = require('can-util/js/dev/dev');
    var canReflect = require('can-reflect');
    var canSymbol = require('can-symbol');
    var canMapBehavior = connect.behavior('can/map', function (baseConnection) {
        var behavior = {
            init: function () {
                if (!this.Map) {
                    throw new Error('can-connect/can/map/map must be configured with a Map type');
                }
                this.List = this.List || this.Map.List;
                if (!this.List) {
                    throw new Error('can-connect/can/map/map must be configured with a List type');
                }
                overwrite(this, this.Map, mapOverwrites);
                overwrite(this, this.List, listOverwrites);
                var connection = this;
                if (this.Map[canSymbol.for('can.onInstanceBoundChange')]) {
                    this.Map[canSymbol.for('can.onInstanceBoundChange')](function canConnectMap_onInstanceBoundChange(instance, isBound) {
                        var method = isBound ? 'addInstanceReference' : 'deleteInstanceReference';
                        if (connection[method]) {
                            connection[method](instance);
                        }
                    });
                } else {
                    console.warn('can-connect/can/map is unable to listen to onInstanceBoundChange on the Map type');
                }
                if (this.List[canSymbol.for('can.onInstanceBoundChange')]) {
                    this.List[canSymbol.for('can.onInstanceBoundChange')](function (list, isBound) {
                        var method = isBound ? 'addListReference' : 'deleteListReference';
                        if (connection[method]) {
                            connection[method](list);
                        }
                    });
                } else {
                    console.warn('can-connect/can/map is unable to listen to onInstanceBoundChange on the List type');
                }
                if (this.Map[canSymbol.for('can.onInstancePatches')]) {
                    this.Map[canSymbol.for('can.onInstancePatches')](function canConnectMap_onInstancePatches(instance, patches) {
                        patches.forEach(function (patch) {
                            if ((patch.type === 'add' || patch.type === 'set') && patch.key === connection.idProp && instance[canSymbol.for('can.isBound')]()) {
                                connection.addInstanceReference(instance);
                            }
                        });
                    });
                } else {
                    console.warn('can-connect/can/map is unable to listen to onInstancePatches on the Map type');
                }
                baseConnection.init.apply(this, arguments);
            },
            id: function (instance) {
                if (!isPlainObject(instance)) {
                    var ids = [], algebra = this.algebra;
                    if (algebra && algebra.clauses && algebra.clauses.id) {
                        for (var prop in algebra.clauses.id) {
                            ids.push(canReflect.getKeyValue(instance, prop));
                        }
                    }
                    if (this.idProp && !ids.length) {
                        ids.push(canReflect.getKeyValue(instance, this.idProp));
                    }
                    if (!ids.length) {
                        ids.push(canReflect.getKeyValue(instance, 'id'));
                    }
                    return ids.length > 1 ? ids.join('@|@') : ids[0];
                } else {
                    return baseConnection.id(instance);
                }
            },
            serializeInstance: function (instance) {
                return canReflect.serialize(instance);
            },
            serializeList: function (list) {
                return canReflect.serialize(list);
            },
            instance: function (props) {
                var _Map = this.Map || types.DefaultMap;
                return new _Map(props);
            },
            list: function (listData, set) {
                var _List = this.List || this.Map && this.Map.List || types.DefaultList;
                var list = new _List(listData.data);
                each(listData, function (val, prop) {
                    if (prop !== 'data') {
                        canReflect.setKeyValue(list, prop, val);
                    }
                });
                list.__listSet = set;
                return list;
            },
            updatedList: function (list, listData, set) {
                queues.batch.start();
                var enqueueOptions = {};
                queues.mutateQueue.enqueue(baseConnection.updatedList, this, arguments, enqueueOptions);
                queues.batch.stop();
            },
            save: function (instance) {
                canReflect.setKeyValue(instance, '_saving', true);
                var done = function () {
                    canReflect.setKeyValue(instance, '_saving', false);
                };
                var base = baseConnection.save.apply(this, arguments);
                base.then(done, done);
                return base;
            },
            destroy: function (instance) {
                canReflect.setKeyValue(instance, '_destroying', true);
                var done = function () {
                    canReflect.setKeyValue(instance, '_destroying', false);
                };
                var base = baseConnection.destroy.apply(this, arguments);
                base.then(done, done);
                return base;
            }
        };
        each([
            'created',
            'updated',
            'destroyed'
        ], function (funcName) {
            behavior[funcName + 'Instance'] = function (instance, props) {
                if (props && typeof props === 'object') {
                    if (this.constructor.removeAttr) {
                        canReflect.updateDeep(instance, props);
                    } else {
                        canReflect.assignDeep(instance, props);
                    }
                }
                if (funcName === 'created' && this.moveCreatedInstanceToInstanceStore) {
                    this.moveCreatedInstanceToInstanceStore(instance);
                }
                canMapBehavior.callbackInstanceEvents(funcName, instance);
            };
        });
        return behavior;
    });
    canMapBehavior.callbackInstanceEvents = function (funcName, instance) {
        var constructor = instance.constructor;
        queues.batch.start();
        eventQueue.dispatch.call(instance, {
            type: funcName,
            target: instance
        });
        eventQueue.dispatch.call(constructor, funcName, [instance]);
        queues.batch.stop();
    };
    var mapOverwrites = {
        static: {
            getList: function (base, connection) {
                return function (set) {
                    return connection.getList(set);
                };
            },
            findAll: function (base, connection) {
                return function (set) {
                    return connection.getList(set);
                };
            },
            get: function (base, connection) {
                return function (params) {
                    return connection.get(params);
                };
            },
            findOne: function (base, connection) {
                return function (params) {
                    return connection.get(params);
                };
            }
        },
        prototype: {
            isNew: function (base, connection) {
                return function () {
                    return connection.isNew(this);
                };
            },
            isSaving: function (base, connection) {
                return function () {
                    return !!canReflect.getKeyValue(this, '_saving');
                };
            },
            isDestroying: function (base, connection) {
                return function () {
                    return !!canReflect.getKeyValue(this, '_destroying');
                };
            },
            save: function (base, connection) {
                return function (success, error) {
                    var promise = connection.save(this);
                    promise.then(success, error);
                    return promise;
                };
            },
            destroy: function (base, connection) {
                return function (success, error) {
                    var promise;
                    if (this.isNew()) {
                        promise = Promise.resolve(this);
                        connection.destroyedInstance(this, {});
                    } else {
                        promise = connection.destroy(this);
                    }
                    promise.then(success, error);
                    return promise;
                };
            }
        },
        properties: {
            _saving: {
                enumerable: false,
                value: false,
                configurable: true,
                writable: true
            },
            _destroying: {
                enumerable: false,
                value: false,
                configurable: true,
                writable: true
            }
        }
    };
    var listOverwrites = {
        static: {
            _bubbleRule: function (base, connection) {
                return function (eventName, list) {
                    var bubbleRules = base(eventName, list);
                    bubbleRules.push('destroyed');
                    return bubbleRules;
                };
            }
        },
        prototype: {
            setup: function (base, connection) {
                return function (params) {
                    if (isPlainObject(params) && !Array.isArray(params)) {
                        this.__listSet = params;
                        base.apply(this);
                        this.replace(canReflect.isPromise(params) ? params : connection.getList(params));
                    } else {
                        base.apply(this, arguments);
                    }
                };
            }
        },
        properties: {}
    };
    var overwrite = function (connection, Constructor, overwrites) {
        var prop;
        for (prop in overwrites.properties) {
            canReflect.defineInstanceKey(Constructor, prop, overwrites.properties[prop]);
        }
        for (prop in overwrites.prototype) {
            Constructor.prototype[prop] = overwrites.prototype[prop](Constructor.prototype[prop], connection);
        }
        if (overwrites.static) {
            for (prop in overwrites.static) {
                Constructor[prop] = overwrites.static[prop](Constructor[prop], connection);
            }
        }
    };
    module.exports = canMapBehavior;
});
/*app/model/map/accountSetting*/
define('app/model/map/accountSetting', [
    'exports',
    'app/net/ajax',
    'passbolt-mad/config/config',
    'can-connect',
    'can-connect/data/url/url',
    'can-connect/data/parse/parse',
    'can-connect/constructor/constructor',
    'can-connect/can/map/map',
    'passbolt-mad/model/list/list',
    'passbolt-mad/model/map/map'
], function (exports, _ajax, _config, _canConnect, _url, _parse, _constructor, _map, _list, _map3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _config2 = _interopRequireDefault(_config);
    var _canConnect2 = _interopRequireDefault(_canConnect);
    var _url2 = _interopRequireDefault(_url);
    var _parse2 = _interopRequireDefault(_parse);
    var _constructor2 = _interopRequireDefault(_constructor);
    var _map2 = _interopRequireDefault(_map);
    var _list2 = _interopRequireDefault(_list);
    var _map4 = _interopRequireDefault(_map3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var AccountSetting = _map4.default.extend('passbolt.model.AccountSetting', {
        id: 'string',
        user_id: 'string',
        property_id: 'string',
        property: 'string',
        value: 'string'
    });
    _map4.default.setReference('AccountSetting', AccountSetting);
    AccountSetting.List = _list2.default.extend({ '#': { Type: AccountSetting } });
    AccountSetting.saveInConfig = function (accountSettings) {
        accountSettings.forEach(function (accountSetting) {
            _config2.default.write('accountSetting.' + accountSetting.property, accountSetting.value);
        });
    };
    AccountSetting.connection = (0, _canConnect2.default)([
        _parse2.default,
        _url2.default,
        _constructor2.default,
        _map2.default
    ], {
        Map: AccountSetting,
        List: AccountSetting.List,
        url: {
            resource: '/',
            getListData: function getListData(params) {
                params = params || {};
                params['api-version'] = 'v2';
                return _ajax2.default.request({
                    url: '/account/settings.json',
                    type: 'GET',
                    params: params
                });
            }
        }
    });
    exports.default = AccountSetting;
});
/*passbolt-mad@2.10.0#error/error_handler*/
define('passbolt-mad@2.10.0#error/error_handler', [
    'exports',
    'can-construct'
], function (exports, _canConstruct) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canConstruct2 = _interopRequireDefault(_canConstruct);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ErrorHandler = _canConstruct2.default.extend('mad.error.ErrorHandler', {
        _log: function _log(status, title, message, data) {
            var log = status.toUpperCase() + ' ' + title + ' ' + ('(' + message + ')');
            if (data) {
            }
        },
        handleException: function handleException(exception) {
            mad.error.ErrorHandler._log('exception', exception.name, exception.message, exception.stack || null);
            throw exception;
        },
        handleError: function handleError(status, title, message, data) {
            mad.error.ErrorHandler._log(status, title, message || '', data || null);
        }
    }, {});
    exports.default = ErrorHandler;
});
/*passbolt-mad@2.10.0#util/global/global*/
define('passbolt-mad@2.10.0#util/global/global', ['exports'], function (exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var glbl = typeof window !== 'undefined' ? window : global;
    function global(name, value) {
        glbl[name] = value;
    }
    exports.default = global;
});
/*passbolt-mad@2.10.0#bootstrap*/
define('passbolt-mad@2.10.0#bootstrap', [
    'exports',
    'passbolt-mad/config/config',
    'can-construct',
    'passbolt-mad/error/error_handler',
    'passbolt-mad/util/global/global',
    'passbolt-mad/helper/html',
    'passbolt-mad/control/bus',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/config/config.js'
], function (exports, _config, _canConstruct, _error_handler, _global, _html, _bus, _i18n, _config3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _config2 = _interopRequireDefault(_config);
    var _canConstruct2 = _interopRequireDefault(_canConstruct);
    var _error_handler2 = _interopRequireDefault(_error_handler);
    var _global2 = _interopRequireDefault(_global);
    var _html2 = _interopRequireDefault(_html);
    var _bus2 = _interopRequireDefault(_bus);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _config4 = _interopRequireDefault(_config3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    _config2.default.load(_config4.default);
    var Bootstrap = _canConstruct2.default.extend('mad.Bootstrap', { defaults: { callbacks: { ready: null } } }, {
        init: function init() {
            _config2.default.write('error.ErrorHandlerClass', _error_handler2.default);
            var baseUrl = $('base').attr('href');
            (0, _global2.default)('APP_URL', baseUrl);
            this.initEventBus();
        },
        initEventBus: function initEventBus() {
            var elt = _html2.default.create($('body'), 'first', '<div id="bus"/>');
            var bus = _bus2.default.singleton('#bus');
            mad.bus = bus;
        }
    });
    exports.default = Bootstrap;
});
/*passbolt-mad@2.10.0#model/map/action*/
define('passbolt-mad@2.10.0#model/map/action', [
    'exports',
    'can-define/list/list',
    'passbolt-mad/model/map/map'
], function (exports, _list, _map) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _list2 = _interopRequireDefault(_list);
    var _map2 = _interopRequireDefault(_map);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Action = _map2.default.extend('mad.model.Action', {
        id: { type: 'string' },
        label: { type: 'string' },
        name: { type: 'string' },
        icon: { type: 'string' },
        action: { type: '*' },
        cssClasses: {
            type: '*',
            default: function _default() {
                return [];
            }
        },
        enabled: {
            type: 'boolean',
            default: true
        },
        execute: function execute(data) {
            if (this.action) {
                this.action(data);
            }
        }
    });
    Action.List = _list2.default.extend({ '#': Action });
    exports.default = Action;
});
/*passbolt-mad@2.10.0#view/component/confirm*/
define('passbolt-mad@2.10.0#view/component/confirm', [
    'exports',
    'passbolt-mad/view/component/dialog',
    'can-dom-events'
], function (exports, _dialog, _canDomEvents) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _dialog2 = _interopRequireDefault(_dialog);
    var _canDomEvents2 = _interopRequireDefault(_canDomEvents);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ConfirmView = _dialog2.default.extend('mad.view.component.Confirm', {}, {
        '{element} .js-dialog-confirm click': function elementJsDialogConfirmClick(el, ev) {
            ev.preventDefault();
            _canDomEvents2.default.dispatch(this.element, { type: 'confirm_clicked' });
        }
    });
    exports.default = ConfirmView;
});
/*passbolt-mad@2.10.0#view/template/component/confirm/confirm.stache!steal-stache@4.1.2#steal-stache*/
define('passbolt-mad@2.10.0#view/template/component/confirm/confirm.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('view/template/component/confirm/confirm.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dialog confirm',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dialog-header',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h2',
                false,
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h2',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'label',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h2',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dialog-close',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-close',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visuallyhidden',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'close\')',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_dialog_content dialog-content',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form-content',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(subtitle != null && subtitle != \'\')',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'strong',
                false,
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'strong',
                false,
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'subtitle',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'strong',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                16
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                17
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                18
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                18
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(isString(content))',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                19
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'content',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                20
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#else',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                21
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>content',
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                22
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                23
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                24
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                25
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                26
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                27
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                27
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'submit-wrapper clearfix',
                27
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                27
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                27
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                27
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                28
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                28
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'submit',
                28
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                28
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value',
                28
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'submitButton.label',
                28
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value',
                28
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                28
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button primary js-dialog-confirm ',
                28
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'submitButton.cssClasses.join(\' \')',
                28
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                28
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                28
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'confirm-button',
                28
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                28
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                28
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                28
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                29
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                29
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-dialog-cancel cancel ',
                29
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'cancelButton.cssClasses.join(\' \')',
                29
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                29
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                29
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'cancel\')',
                29
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                29
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                29
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                30
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                31
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                31
            ]
        },
        {
            'tokenType': 'done',
            'args': [32]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*passbolt-mad@2.10.0#component/confirm*/
define('passbolt-mad@2.10.0#component/confirm', [
    'exports',
    'jquery',
    'passbolt-mad/component/dialog',
    'passbolt-mad/view/component/confirm',
    'passbolt-mad/helper/html',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/view/template/component/confirm/confirm.stache!'
], function (exports, _jquery, _dialog, _confirm, _html, _i18n, _confirm3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _jquery2 = _interopRequireDefault(_jquery);
    var _dialog2 = _interopRequireDefault(_dialog);
    var _confirm2 = _interopRequireDefault(_confirm);
    var _html2 = _interopRequireDefault(_html);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _confirm4 = _interopRequireDefault(_confirm3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Confirm = _dialog2.default.extend('mad.component.Confirm', {
        defaults: {
            label: 'Confirm component',
            viewClass: _confirm2.default,
            template: _confirm4.default,
            subtitle: null,
            submitButton: {
                label: __('OK'),
                cssClasses: []
            },
            content: 'default content',
            closeAfterAction: true,
            action: null,
            viewData: {}
        },
        instantiate: function instantiate(options) {
            var refElt = (0, _jquery2.default)('body');
            var position = 'first';
            var $existingDialog = (0, _jquery2.default)('.dialog-wrapper:last');
            if ($existingDialog.length) {
                refElt = $existingDialog;
                position = 'after';
            }
            var $el = _html2.default.create(refElt, position, '<div/>');
            return new Confirm($el[0], options);
        }
    }, {
        beforeRender: function beforeRender() {
            this._super();
            this.setViewData('content', this.options.content);
            this.setViewData('subtitle', this.options.subtitle);
            this.setViewData('submitButton', this.options.submitButton);
            this.setViewData('cancelButton', this.options.cancelButton);
        },
        '{element} confirm_clicked': function elementConfirm_clicked() {
            if (typeof this.options.action !== 'undefined') {
                this.options.action();
            }
            if (this.options.closeAfterAction === true) {
                Confirm.closeLatest();
            }
        }
    });
    exports.default = Confirm;
});
/*app/model/map/users_directory_report*/
define('app/model/map/users_directory_report', [
    'exports',
    'passbolt-mad/model/map/map'
], function (exports, _map) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _map2 = _interopRequireDefault(_map);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var UsersDirectoryReport = _map2.default.extend('passbolt.model.UsersDirectoryReport', {
        'users': 'array',
        'groups': 'array'
    });
    _map2.default.setReference('UsersDirectoryReport', UsersDirectoryReport);
    UsersDirectoryReport.prototype.getUsersSynchronized = function () {
        return this.users.filter(function (user) {
            return user.status != 'error' && user.status != 'ignore';
        });
    };
    UsersDirectoryReport.prototype.getUsersError = function () {
        return this.users.filter(function (user) {
            return user.status == 'error';
        });
    };
    UsersDirectoryReport.prototype.getUsersIgnored = function () {
        return this.users.filter(function (user) {
            return user.status == 'ignore';
        });
    };
    UsersDirectoryReport.prototype.getGroupsSynchronized = function () {
        return this.groups.filter(function (group) {
            return group.status != 'error' && group.status != 'ignore';
        });
    };
    UsersDirectoryReport.prototype.getGroupsError = function () {
        return this.groups.filter(function (group) {
            return group.status == 'error';
        });
    };
    UsersDirectoryReport.prototype.getGroupsIgnored = function () {
        return this.groups.filter(function (group) {
            return group.status == 'ignore';
        });
    };
    UsersDirectoryReport.prototype.hasError = function () {
        var errorsUsers = this.getErrorUsers();
        if (!errorsUsers.length) {
            return true;
        }
        var errorsGroups = this.getErrorGroups();
        if (!errorsGroups) {
            return true;
        }
        return false;
    };
    UsersDirectoryReport.prototype.toText = function () {
        var usersSynchronized = this.getUsersSynchronized();
        var usersError = this.getUsersError();
        var usersIgnored = this.getUsersIgnored();
        var groupsSynchronized = this.getGroupsSynchronized();
        var groupsError = this.getGroupsError();
        var groupsIgnored = this.getGroupsIgnored();
        var text = '';
        text += '---------------------------------------------------------------------\n';
        text += 'Users\n';
        text += '---------------------------------------------------------------------\n';
        if (usersSynchronized.length) {
            text += '\n';
            text += 'Synchronized:\n';
            usersSynchronized.forEach(function (user) {
                text += '- ' + user.message + '\n';
            });
        }
        if (usersError.length) {
            text += '\n';
            text += 'Errors:\n';
            usersError.forEach(function (user) {
                text += '- ' + user.message + '\n';
            });
        }
        if (usersIgnored.length) {
            text += '\n';
            text += 'Ignored:\n';
            usersIgnored.forEach(function (user) {
                text += '- ' + user.message + '\n';
            });
        }
        if (!usersSynchronized.length && !usersError.length && !usersIgnored.length) {
            text += '\n';
            text += 'No report to display\n';
        }
        text += '\n';
        text += '---------------------------------------------------------------------\n';
        text += 'Groups\n';
        text += '---------------------------------------------------------------------\n';
        if (groupsSynchronized.length) {
            text += '\n';
            text += 'Synchronized:\n';
            groupsSynchronized.forEach(function (group) {
                text += '- ' + group.message + '\n';
            });
        }
        if (groupsError.length) {
            text += '\n';
            text += 'Errors:\n';
            groupsError.forEach(function (group) {
                text += '- ' + group.message + '\n';
            });
        }
        if (groupsIgnored.length) {
            text += '\n';
            text += 'Ignored:\n';
            groupsIgnored.forEach(function (group) {
                text += '- ' + group.message + '\n';
            });
        }
        if (!groupsSynchronized.length && !groupsError.length && !groupsIgnored.length) {
            text += '\n';
            text += 'No report to display\n';
        }
        return text;
    };
    exports.default = UsersDirectoryReport;
});
/*app/model/service/users_directory*/
define('app/model/service/users_directory', [
    'exports',
    'app/net/ajax',
    'app/model/map/users_directory_report'
], function (exports, _ajax, _users_directory_report) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _users_directory_report2 = _interopRequireDefault(_users_directory_report);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
        }
    }
    var UsersDirectoryService = function UsersDirectoryService() {
        _classCallCheck(this, UsersDirectoryService);
    };
    UsersDirectoryService.dryRunSynchronize = function (params) {
        params = params || {};
        params['api-version'] = 'v2';
        return _ajax2.default.request({
            url: 'directorysync/synchronize/dry-run.json',
            type: 'GET',
            params: params
        }).then(function (data) {
            return new _users_directory_report2.default(data);
        });
    };
    UsersDirectoryService.synchronize = function (params) {
        params = params || {};
        params['api-version'] = 'v2';
        return _ajax2.default.request({
            url: 'directorysync/synchronize.json',
            type: 'GET',
            params: params
        }).then(function (data) {
            return new _users_directory_report2.default(data);
        });
    };
    exports.default = UsersDirectoryService;
});
/*urijs@1.19.1#src/punycode*/
;
(function (root) {
    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
    var freeModule = typeof module == 'object' && module && !module.nodeType && module;
    var freeGlobal = typeof global == 'object' && global;
    if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
        root = freeGlobal;
    }
    var punycode, maxInt = 2147483647, base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = '-', regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, errors = {
            'overflow': 'Overflow: input needs wider integers to process',
            'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
            'invalid-input': 'Invalid input'
        }, baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, key;
    function error(type) {
        throw new RangeError(errors[type]);
    }
    function map(array, fn) {
        var length = array.length;
        var result = [];
        while (length--) {
            result[length] = fn(array[length]);
        }
        return result;
    }
    function mapDomain(string, fn) {
        var parts = string.split('@');
        var result = '';
        if (parts.length > 1) {
            result = parts[0] + '@';
            string = parts[1];
        }
        string = string.replace(regexSeparators, '.');
        var labels = string.split('.');
        var encoded = map(labels, fn).join('.');
        return result + encoded;
    }
    function ucs2decode(string) {
        var output = [], counter = 0, length = string.length, value, extra;
        while (counter < length) {
            value = string.charCodeAt(counter++);
            if (value >= 55296 && value <= 56319 && counter < length) {
                extra = string.charCodeAt(counter++);
                if ((extra & 64512) == 56320) {
                    output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
                } else {
                    output.push(value);
                    counter--;
                }
            } else {
                output.push(value);
            }
        }
        return output;
    }
    function ucs2encode(array) {
        return map(array, function (value) {
            var output = '';
            if (value > 65535) {
                value -= 65536;
                output += stringFromCharCode(value >>> 10 & 1023 | 55296);
                value = 56320 | value & 1023;
            }
            output += stringFromCharCode(value);
            return output;
        }).join('');
    }
    function basicToDigit(codePoint) {
        if (codePoint - 48 < 10) {
            return codePoint - 22;
        }
        if (codePoint - 65 < 26) {
            return codePoint - 65;
        }
        if (codePoint - 97 < 26) {
            return codePoint - 97;
        }
        return base;
    }
    function digitToBasic(digit, flag) {
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    }
    function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for (; delta > baseMinusTMin * tMax >> 1; k += base) {
            delta = floor(delta / baseMinusTMin);
        }
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    }
    function decode(input) {
        var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, baseMinusT;
        basic = input.lastIndexOf(delimiter);
        if (basic < 0) {
            basic = 0;
        }
        for (j = 0; j < basic; ++j) {
            if (input.charCodeAt(j) >= 128) {
                error('not-basic');
            }
            output.push(input.charCodeAt(j));
        }
        for (index = basic > 0 ? basic + 1 : 0; index < inputLength;) {
            for (oldi = i, w = 1, k = base;; k += base) {
                if (index >= inputLength) {
                    error('invalid-input');
                }
                digit = basicToDigit(input.charCodeAt(index++));
                if (digit >= base || digit > floor((maxInt - i) / w)) {
                    error('overflow');
                }
                i += digit * w;
                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (digit < t) {
                    break;
                }
                baseMinusT = base - t;
                if (w > floor(maxInt / baseMinusT)) {
                    error('overflow');
                }
                w *= baseMinusT;
            }
            out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0);
            if (floor(i / out) > maxInt - n) {
                error('overflow');
            }
            n += floor(i / out);
            i %= out;
            output.splice(i++, 0, n);
        }
        return ucs2encode(output);
    }
    function encode(input) {
        var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], inputLength, handledCPCountPlusOne, baseMinusT, qMinusT;
        input = ucs2decode(input);
        inputLength = input.length;
        n = initialN;
        delta = 0;
        bias = initialBias;
        for (j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue < 128) {
                output.push(stringFromCharCode(currentValue));
            }
        }
        handledCPCount = basicLength = output.length;
        if (basicLength) {
            output.push(delimiter);
        }
        while (handledCPCount < inputLength) {
            for (m = maxInt, j = 0; j < inputLength; ++j) {
                currentValue = input[j];
                if (currentValue >= n && currentValue < m) {
                    m = currentValue;
                }
            }
            handledCPCountPlusOne = handledCPCount + 1;
            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                error('overflow');
            }
            delta += (m - n) * handledCPCountPlusOne;
            n = m;
            for (j = 0; j < inputLength; ++j) {
                currentValue = input[j];
                if (currentValue < n && ++delta > maxInt) {
                    error('overflow');
                }
                if (currentValue == n) {
                    for (q = delta, k = base;; k += base) {
                        t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                        if (q < t) {
                            break;
                        }
                        qMinusT = q - t;
                        baseMinusT = base - t;
                        output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                        q = floor(qMinusT / baseMinusT);
                    }
                    output.push(stringFromCharCode(digitToBasic(q, 0)));
                    bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                    delta = 0;
                    ++handledCPCount;
                }
            }
            ++delta;
            ++n;
        }
        return output.join('');
    }
    function toUnicode(input) {
        return mapDomain(input, function (string) {
            return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
    }
    function toASCII(input) {
        return mapDomain(input, function (string) {
            return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
        });
    }
    punycode = {
        'version': '1.3.2',
        'ucs2': {
            'decode': ucs2decode,
            'encode': ucs2encode
        },
        'decode': decode,
        'encode': encode,
        'toASCII': toASCII,
        'toUnicode': toUnicode
    };
    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
        define('urijs@1.19.1#src/punycode', function () {
            return punycode;
        });
    } else if (freeExports && freeModule) {
        if (module.exports == freeExports) {
            freeModule.exports = punycode;
        } else {
            for (key in punycode) {
                punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
            }
        }
    } else {
        root.punycode = punycode;
    }
}(this));
/*urijs@1.19.1#src/SecondLevelDomains*/
(function (root, factory) {
    'use strict';
    if (typeof module === 'object' && module.exports) {
        module.exports = factory();
    } else if (typeof define === 'function' && define.amd) {
        define('urijs@1.19.1#src/SecondLevelDomains', factory);
    } else {
        root.SecondLevelDomains = factory(root);
    }
}(this, function (root) {
    'use strict';
    var _SecondLevelDomains = root && root.SecondLevelDomains;
    var SLD = {
        list: {
            'ac': ' com gov mil net org ',
            'ae': ' ac co gov mil name net org pro sch ',
            'af': ' com edu gov net org ',
            'al': ' com edu gov mil net org ',
            'ao': ' co ed gv it og pb ',
            'ar': ' com edu gob gov int mil net org tur ',
            'at': ' ac co gv or ',
            'au': ' asn com csiro edu gov id net org ',
            'ba': ' co com edu gov mil net org rs unbi unmo unsa untz unze ',
            'bb': ' biz co com edu gov info net org store tv ',
            'bh': ' biz cc com edu gov info net org ',
            'bn': ' com edu gov net org ',
            'bo': ' com edu gob gov int mil net org tv ',
            'br': ' adm adv agr am arq art ato b bio blog bmd cim cng cnt com coop ecn edu eng esp etc eti far flog fm fnd fot fst g12 ggf gov imb ind inf jor jus lel mat med mil mus net nom not ntr odo org ppg pro psc psi qsl rec slg srv tmp trd tur tv vet vlog wiki zlg ',
            'bs': ' com edu gov net org ',
            'bz': ' du et om ov rg ',
            'ca': ' ab bc mb nb nf nl ns nt nu on pe qc sk yk ',
            'ck': ' biz co edu gen gov info net org ',
            'cn': ' ac ah bj com cq edu fj gd gov gs gx gz ha hb he hi hl hn jl js jx ln mil net nm nx org qh sc sd sh sn sx tj tw xj xz yn zj ',
            'co': ' com edu gov mil net nom org ',
            'cr': ' ac c co ed fi go or sa ',
            'cy': ' ac biz com ekloges gov ltd name net org parliament press pro tm ',
            'do': ' art com edu gob gov mil net org sld web ',
            'dz': ' art asso com edu gov net org pol ',
            'ec': ' com edu fin gov info med mil net org pro ',
            'eg': ' com edu eun gov mil name net org sci ',
            'er': ' com edu gov ind mil net org rochest w ',
            'es': ' com edu gob nom org ',
            'et': ' biz com edu gov info name net org ',
            'fj': ' ac biz com info mil name net org pro ',
            'fk': ' ac co gov net nom org ',
            'fr': ' asso com f gouv nom prd presse tm ',
            'gg': ' co net org ',
            'gh': ' com edu gov mil org ',
            'gn': ' ac com gov net org ',
            'gr': ' com edu gov mil net org ',
            'gt': ' com edu gob ind mil net org ',
            'gu': ' com edu gov net org ',
            'hk': ' com edu gov idv net org ',
            'hu': ' 2000 agrar bolt casino city co erotica erotika film forum games hotel info ingatlan jogasz konyvelo lakas media news org priv reklam sex shop sport suli szex tm tozsde utazas video ',
            'id': ' ac co go mil net or sch web ',
            'il': ' ac co gov idf k12 muni net org ',
            'in': ' ac co edu ernet firm gen gov i ind mil net nic org res ',
            'iq': ' com edu gov i mil net org ',
            'ir': ' ac co dnssec gov i id net org sch ',
            'it': ' edu gov ',
            'je': ' co net org ',
            'jo': ' com edu gov mil name net org sch ',
            'jp': ' ac ad co ed go gr lg ne or ',
            'ke': ' ac co go info me mobi ne or sc ',
            'kh': ' com edu gov mil net org per ',
            'ki': ' biz com de edu gov info mob net org tel ',
            'km': ' asso com coop edu gouv k medecin mil nom notaires pharmaciens presse tm veterinaire ',
            'kn': ' edu gov net org ',
            'kr': ' ac busan chungbuk chungnam co daegu daejeon es gangwon go gwangju gyeongbuk gyeonggi gyeongnam hs incheon jeju jeonbuk jeonnam k kg mil ms ne or pe re sc seoul ulsan ',
            'kw': ' com edu gov net org ',
            'ky': ' com edu gov net org ',
            'kz': ' com edu gov mil net org ',
            'lb': ' com edu gov net org ',
            'lk': ' assn com edu gov grp hotel int ltd net ngo org sch soc web ',
            'lr': ' com edu gov net org ',
            'lv': ' asn com conf edu gov id mil net org ',
            'ly': ' com edu gov id med net org plc sch ',
            'ma': ' ac co gov m net org press ',
            'mc': ' asso tm ',
            'me': ' ac co edu gov its net org priv ',
            'mg': ' com edu gov mil nom org prd tm ',
            'mk': ' com edu gov inf name net org pro ',
            'ml': ' com edu gov net org presse ',
            'mn': ' edu gov org ',
            'mo': ' com edu gov net org ',
            'mt': ' com edu gov net org ',
            'mv': ' aero biz com coop edu gov info int mil museum name net org pro ',
            'mw': ' ac co com coop edu gov int museum net org ',
            'mx': ' com edu gob net org ',
            'my': ' com edu gov mil name net org sch ',
            'nf': ' arts com firm info net other per rec store web ',
            'ng': ' biz com edu gov mil mobi name net org sch ',
            'ni': ' ac co com edu gob mil net nom org ',
            'np': ' com edu gov mil net org ',
            'nr': ' biz com edu gov info net org ',
            'om': ' ac biz co com edu gov med mil museum net org pro sch ',
            'pe': ' com edu gob mil net nom org sld ',
            'ph': ' com edu gov i mil net ngo org ',
            'pk': ' biz com edu fam gob gok gon gop gos gov net org web ',
            'pl': ' art bialystok biz com edu gda gdansk gorzow gov info katowice krakow lodz lublin mil net ngo olsztyn org poznan pwr radom slupsk szczecin torun warszawa waw wroc wroclaw zgora ',
            'pr': ' ac biz com edu est gov info isla name net org pro prof ',
            'ps': ' com edu gov net org plo sec ',
            'pw': ' belau co ed go ne or ',
            'ro': ' arts com firm info nom nt org rec store tm www ',
            'rs': ' ac co edu gov in org ',
            'sb': ' com edu gov net org ',
            'sc': ' com edu gov net org ',
            'sh': ' co com edu gov net nom org ',
            'sl': ' com edu gov net org ',
            'st': ' co com consulado edu embaixada gov mil net org principe saotome store ',
            'sv': ' com edu gob org red ',
            'sz': ' ac co org ',
            'tr': ' av bbs bel biz com dr edu gen gov info k12 name net org pol tel tsk tv web ',
            'tt': ' aero biz cat co com coop edu gov info int jobs mil mobi museum name net org pro tel travel ',
            'tw': ' club com ebiz edu game gov idv mil net org ',
            'mu': ' ac co com gov net or org ',
            'mz': ' ac co edu gov org ',
            'na': ' co com ',
            'nz': ' ac co cri geek gen govt health iwi maori mil net org parliament school ',
            'pa': ' abo ac com edu gob ing med net nom org sld ',
            'pt': ' com edu gov int net nome org publ ',
            'py': ' com edu gov mil net org ',
            'qa': ' com edu gov mil net org ',
            're': ' asso com nom ',
            'ru': ' ac adygeya altai amur arkhangelsk astrakhan bashkiria belgorod bir bryansk buryatia cbg chel chelyabinsk chita chukotka chuvashia com dagestan e-burg edu gov grozny int irkutsk ivanovo izhevsk jar joshkar-ola kalmykia kaluga kamchatka karelia kazan kchr kemerovo khabarovsk khakassia khv kirov koenig komi kostroma kranoyarsk kuban kurgan kursk lipetsk magadan mari mari-el marine mil mordovia mosreg msk murmansk nalchik net nnov nov novosibirsk nsk omsk orenburg org oryol penza perm pp pskov ptz rnd ryazan sakhalin samara saratov simbirsk smolensk spb stavropol stv surgut tambov tatarstan tom tomsk tsaritsyn tsk tula tuva tver tyumen udm udmurtia ulan-ude vladikavkaz vladimir vladivostok volgograd vologda voronezh vrn vyatka yakutia yamal yekaterinburg yuzhno-sakhalinsk ',
            'rw': ' ac co com edu gouv gov int mil net ',
            'sa': ' com edu gov med net org pub sch ',
            'sd': ' com edu gov info med net org tv ',
            'se': ' a ac b bd c d e f g h i k l m n o org p parti pp press r s t tm u w x y z ',
            'sg': ' com edu gov idn net org per ',
            'sn': ' art com edu gouv org perso univ ',
            'sy': ' com edu gov mil net news org ',
            'th': ' ac co go in mi net or ',
            'tj': ' ac biz co com edu go gov info int mil name net nic org test web ',
            'tn': ' agrinet com defense edunet ens fin gov ind info intl mincom nat net org perso rnrt rns rnu tourism ',
            'tz': ' ac co go ne or ',
            'ua': ' biz cherkassy chernigov chernovtsy ck cn co com crimea cv dn dnepropetrovsk donetsk dp edu gov if in ivano-frankivsk kh kharkov kherson khmelnitskiy kiev kirovograd km kr ks kv lg lugansk lutsk lviv me mk net nikolaev od odessa org pl poltava pp rovno rv sebastopol sumy te ternopil uzhgorod vinnica vn zaporizhzhe zhitomir zp zt ',
            'ug': ' ac co go ne or org sc ',
            'uk': ' ac bl british-library co cym gov govt icnet jet lea ltd me mil mod national-library-scotland nel net nhs nic nls org orgn parliament plc police sch scot soc ',
            'us': ' dni fed isa kids nsn ',
            'uy': ' com edu gub mil net org ',
            've': ' co com edu gob info mil net org web ',
            'vi': ' co com k12 net org ',
            'vn': ' ac biz com edu gov health info int name net org pro ',
            'ye': ' co com gov ltd me net org plc ',
            'yu': ' ac co edu gov org ',
            'za': ' ac agric alt bourse city co cybernet db edu gov grondar iaccess imt inca landesign law mil net ngo nis nom olivetti org pix school tm web ',
            'zm': ' ac co com edu gov net org sch ',
            'com': 'ar br cn de eu gb gr hu jpn kr no qc ru sa se uk us uy za ',
            'net': 'gb jp se uk ',
            'org': 'ae',
            'de': 'com '
        },
        has: function (domain) {
            var tldOffset = domain.lastIndexOf('.');
            if (tldOffset <= 0 || tldOffset >= domain.length - 1) {
                return false;
            }
            var sldOffset = domain.lastIndexOf('.', tldOffset - 1);
            if (sldOffset <= 0 || sldOffset >= tldOffset - 1) {
                return false;
            }
            var sldList = SLD.list[domain.slice(tldOffset + 1)];
            if (!sldList) {
                return false;
            }
            return sldList.indexOf(' ' + domain.slice(sldOffset + 1, tldOffset) + ' ') >= 0;
        },
        is: function (domain) {
            var tldOffset = domain.lastIndexOf('.');
            if (tldOffset <= 0 || tldOffset >= domain.length - 1) {
                return false;
            }
            var sldOffset = domain.lastIndexOf('.', tldOffset - 1);
            if (sldOffset >= 0) {
                return false;
            }
            var sldList = SLD.list[domain.slice(tldOffset + 1)];
            if (!sldList) {
                return false;
            }
            return sldList.indexOf(' ' + domain.slice(0, tldOffset) + ' ') >= 0;
        },
        get: function (domain) {
            var tldOffset = domain.lastIndexOf('.');
            if (tldOffset <= 0 || tldOffset >= domain.length - 1) {
                return null;
            }
            var sldOffset = domain.lastIndexOf('.', tldOffset - 1);
            if (sldOffset <= 0 || sldOffset >= tldOffset - 1) {
                return null;
            }
            var sldList = SLD.list[domain.slice(tldOffset + 1)];
            if (!sldList) {
                return null;
            }
            if (sldList.indexOf(' ' + domain.slice(sldOffset + 1, tldOffset) + ' ') < 0) {
                return null;
            }
            return domain.slice(sldOffset + 1);
        },
        noConflict: function () {
            if (root.SecondLevelDomains === this) {
                root.SecondLevelDomains = _SecondLevelDomains;
            }
            return this;
        }
    };
    return SLD;
}));
/*urijs@1.19.1#src/IPv6*/
(function (root, factory) {
    'use strict';
    if (typeof module === 'object' && module.exports) {
        module.exports = factory();
    } else if (typeof define === 'function' && define.amd) {
        define('urijs@1.19.1#src/IPv6', factory);
    } else {
        root.IPv6 = factory(root);
    }
}(this, function (root) {
    'use strict';
    var _IPv6 = root && root.IPv6;
    function bestPresentation(address) {
        var _address = address.toLowerCase();
        var segments = _address.split(':');
        var length = segments.length;
        var total = 8;
        if (segments[0] === '' && segments[1] === '' && segments[2] === '') {
            segments.shift();
            segments.shift();
        } else if (segments[0] === '' && segments[1] === '') {
            segments.shift();
        } else if (segments[length - 1] === '' && segments[length - 2] === '') {
            segments.pop();
        }
        length = segments.length;
        if (segments[length - 1].indexOf('.') !== -1) {
            total = 7;
        }
        var pos;
        for (pos = 0; pos < length; pos++) {
            if (segments[pos] === '') {
                break;
            }
        }
        if (pos < total) {
            segments.splice(pos, 1, '0000');
            while (segments.length < total) {
                segments.splice(pos, 0, '0000');
            }
        }
        var _segments;
        for (var i = 0; i < total; i++) {
            _segments = segments[i].split('');
            for (var j = 0; j < 3; j++) {
                if (_segments[0] === '0' && _segments.length > 1) {
                    _segments.splice(0, 1);
                } else {
                    break;
                }
            }
            segments[i] = _segments.join('');
        }
        var best = -1;
        var _best = 0;
        var _current = 0;
        var current = -1;
        var inzeroes = false;
        for (i = 0; i < total; i++) {
            if (inzeroes) {
                if (segments[i] === '0') {
                    _current += 1;
                } else {
                    inzeroes = false;
                    if (_current > _best) {
                        best = current;
                        _best = _current;
                    }
                }
            } else {
                if (segments[i] === '0') {
                    inzeroes = true;
                    current = i;
                    _current = 1;
                }
            }
        }
        if (_current > _best) {
            best = current;
            _best = _current;
        }
        if (_best > 1) {
            segments.splice(best, _best, '');
        }
        length = segments.length;
        var result = '';
        if (segments[0] === '') {
            result = ':';
        }
        for (i = 0; i < length; i++) {
            result += segments[i];
            if (i === length - 1) {
                break;
            }
            result += ':';
        }
        if (segments[length - 1] === '') {
            result += ':';
        }
        return result;
    }
    function noConflict() {
        if (root.IPv6 === this) {
            root.IPv6 = _IPv6;
        }
        return this;
    }
    return {
        best: bestPresentation,
        noConflict: noConflict
    };
}));
/*app/model/map/users_directory_settings*/
define('app/model/map/users_directory_settings', [
    'exports',
    'app/net/ajax',
    'can-connect',
    'can-connect/data/url/url',
    'can-connect/data/parse/parse',
    'can-connect/constructor/constructor',
    'can-connect/can/map/map',
    'passbolt-mad/model/map/map',
    'passbolt-mad/util/lang/i18n',
    'uuid/v4',
    'urijs/src/punycode',
    'urijs/src/SecondLevelDomains',
    'urijs/src/IPv6'
], function (exports, _ajax, _canConnect, _url, _parse, _constructor, _map, _map3, _i18n, _v) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _canConnect2 = _interopRequireDefault(_canConnect);
    var _url2 = _interopRequireDefault(_url);
    var _parse2 = _interopRequireDefault(_parse);
    var _constructor2 = _interopRequireDefault(_constructor);
    var _map2 = _interopRequireDefault(_map);
    var _map4 = _interopRequireDefault(_map3);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _v2 = _interopRequireDefault(_v);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var UsersDirectorySettings = _map4.default.extend('passbolt.model.UsersDirectorySettings', {
        id: {
            type: 'string',
            value: function value() {
                return (0, _v2.default)();
            }
        },
        directory_type: 'string',
        domain_name: 'string',
        connection_type: 'string',
        server: 'string',
        port: 'number',
        username: 'string',
        password: 'string',
        base_dn: 'string',
        group_path: 'string',
        user_path: 'string',
        group_object_class: 'string',
        user_object_class: 'string',
        default_user: 'string',
        default_group_admin_user: 'string',
        groups_parent_group: 'string',
        users_parent_group: 'string',
        enabled_users_only: 'boolean',
        sync_users_create: 'boolean',
        sync_users_delete: 'boolean',
        sync_groups_create: 'boolean',
        sync_groups_delete: 'boolean',
        sync_groups_update: 'boolean'
    });
    _map4.default.setReference('UsersDirectorySettings', UsersDirectorySettings);
    UsersDirectorySettings.validationRules = {
        domain_name: [
            {
                rule: 'required',
                message: __('A domain name is required.')
            },
            {
                rule: 'utf8',
                message: __('The domain name should be a valid utf8 string.')
            }
        ],
        server: [
            {
                rule: 'required',
                message: __('A host is required.')
            },
            {
                rule: 'utf8',
                message: __('The host should be a valid utf8 string.')
            }
        ],
        port: [
            {
                rule: 'required',
                message: __('A port is required.')
            },
            {
                rule: 'num',
                message: __('The port should be a valid integer.')
            }
        ],
        username: [{
                rule: 'utf8',
                message: __('The username should be a valid utf8 string.')
            }],
        password: [{
                rule: 'utf8',
                message: __('The password should be a valid utf8 string.')
            }],
        base_dn: [{
                rule: 'utf8',
                message: __('The base DN should be a valid utf8 string.')
            }],
        group_path: [{
                rule: 'utf8',
                message: __('The group path should be a valid utf8 string.')
            }],
        user_path: [{
                rule: 'utf8',
                message: __('The user path should be a valid utf8 string.')
            }],
        group_object_class: [{
                rule: 'utf8',
                message: __('The group object class should be a valid utf8 string.')
            }],
        user_object_class: [{
                rule: 'utf8',
                message: __('The user object class should be a valid utf8 string.')
            }],
        default_user: [
            {
                rule: 'required',
                message: __('A default admin is required.')
            },
            {
                rule: 'uuid',
                message: __('The default admin should be a valid uuid.')
            }
        ],
        default_group_admin_user: [
            {
                rule: 'required',
                message: __('A default group admin is required.')
            },
            {
                rule: 'uuid',
                message: __('The default group admin should be a valid uuid.')
            }
        ],
        groups_parent_group: [{
                rule: 'utf8',
                message: __('The users parent group should be a valid utf8 string.')
            }],
        users_parent_group: [{
                rule: 'utf8',
                message: __('The groups parent group should be a valid utf8 string.')
            }]
    };
    UsersDirectorySettings.prototype.isEnabled = function () {
        if (this.domain_name) {
            return true;
        }
        return false;
    };
    UsersDirectorySettings.prototype.testSettings = function (params) {
        return _ajax2.default.request({
            url: 'directorysync/settings/test.json?api-version=v2',
            type: 'POST',
            params: params
        });
    };
    UsersDirectorySettings.connection = (0, _canConnect2.default)([
        _parse2.default,
        _url2.default,
        _constructor2.default,
        _map2.default
    ], {
        Map: UsersDirectorySettings,
        url: {
            resource: '/',
            getData: function getData(params) {
                params = params || {};
                params['api-version'] = 'v2';
                return _ajax2.default.request({
                    url: 'directorysync/settings.json',
                    type: 'GET',
                    params: params
                });
            },
            updateData: function updateData(params) {
                return _ajax2.default.request({
                    url: 'directorysync/settings.json?api-version=v2',
                    type: 'PUT',
                    params: params
                });
            },
            destroyData: function destroyData() {
                return _ajax2.default.request({
                    url: 'directorysync/settings.json?api-version=v2',
                    type: 'DELETE'
                });
            }
        }
    });
    exports.default = UsersDirectorySettings;
});
/*passbolt-mad@2.10.0#form/feedback*/
define('passbolt-mad@2.10.0#form/feedback', [
    'exports',
    'passbolt-mad/component/component'
], function (exports, _component) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Feedback = _component2.default.extend('mad.form.Feedback', { defaults: {} }, {
        error: function error(message) {
            $(this.element).text(message);
            $(this.element).addClass('error');
        },
        reset: function reset() {
            $(this.element).text('');
            $(this.element).removeClass('error');
        },
        success: function success(message) {
            $(this.element).text(message);
            $(this.element).removeClass('error');
        }
    });
    exports.default = Feedback;
});
/*passbolt-mad@2.10.0#view/form/form*/
define('passbolt-mad@2.10.0#view/form/form', [
    'exports',
    'passbolt-mad/view/view'
], function (exports, _view) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _view2 = _interopRequireDefault(_view);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Form = _view2.default.extend('mad.view.Form', {}, {
        setElementState: function setElementState(element, state) {
            var eltId = element.getId();
            var $label = $('label[for="' + eltId + '"]');
            var $wrapper = $(element.element).parent('.js_form_element_wrapper');
            switch (state) {
            case 'success':
                if ($label) {
                    $label.removeClass('error');
                }
                if ($wrapper) {
                    $wrapper.removeClass('error');
                }
                break;
            case 'error':
                if ($label) {
                    $label.addClass('error');
                }
                if ($wrapper) {
                    $wrapper.addClass('error');
                }
                break;
            }
        }
    });
    exports.default = Form;
});
/*passbolt-mad@2.10.0#form/form*/
define('passbolt-mad@2.10.0#form/form', [
    'exports',
    'passbolt-mad/component/component',
    'passbolt-mad/model/map/map',
    'passbolt-mad/view/form/form',
    'can-util/js/get/get',
    'passbolt-mad/util/set/set'
], function (exports, _component, _map, _form, _get, _set) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _map2 = _interopRequireDefault(_map);
    var _form2 = _interopRequireDefault(_form);
    var _get2 = _interopRequireDefault(_get);
    var _set2 = _interopRequireDefault(_set);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Form = _component2.default.extend('mad.Form', {
        defaults: {
            label: 'Form Component',
            cssClasses: ['form'],
            tag: 'form',
            viewClass: _form2.default,
            callbacks: {
                error: null,
                submit: null
            },
            action: null,
            validateOnChange: 'afterFirstValidation'
        }
    }, {
        init: function init(el, options) {
            this.elements = {};
            this.feedbackElements = {};
            this.data = {};
            this.validations = 0;
            this._super(el, options);
        },
        beforeRender: function beforeRender() {
            this.setViewData('action', this.options.action);
        },
        reset: function reset() {
            this.validations = 0;
            for (var eltId in this.elements) {
                var element = this.elements[eltId];
                var feedbackElement = this.feedbackElements[element.getId()];
                element.setValue(this.options.defaultValue);
                if (feedbackElement != undefined) {
                    feedbackElement.reset();
                }
            }
        },
        load: function load(data) {
            for (var eltId in this.elements) {
                var element = this.elements[eltId];
                var modelReference = element.options.modelReference;
                var value = null;
                if (modelReference != null) {
                    value = this._getModelPropValue(data, modelReference);
                } else {
                    value = data[eltId];
                }
                if (typeof value !== 'undefined') {
                    element.setValue(value);
                }
            }
        },
        _getModelPropValue: function _getModelPropValue(data, modelReference) {
            var returnValue = null;
            var index = modelReference.indexOf('[].');
            if (index != -1) {
                returnValue = [];
                var subModelReference = modelReference.substr(0, index);
                var subData = (0, _get2.default)(data, subModelReference);
                subData.forEach(function (item) {
                    var prop = modelReference.substr(index + 3);
                    returnValue.push((0, _get2.default)(item, prop));
                });
            } else {
                returnValue = (0, _get2.default)(data, modelReference);
            }
            return returnValue;
        },
        getElement: function getElement(eltId) {
            return this.elements[eltId];
        },
        addElement: function addElement(element, feedback) {
            var eltId = element.getId();
            this.elements[eltId] = element;
            if (typeof feedback != 'undefined') {
                this.feedbackElements[eltId] = feedback;
            }
            return element;
        },
        removeElement: function removeElement(element) {
            var eltId = element.getId();
            element = this.getElement(eltId);
            if (element == undefined) {
                throw mad.Exception.get(mad.error.ELEMENT_NOT_FOUND, eltId);
            }
            delete this.elements[eltId];
            delete this.feedbackElements[eltId];
        },
        getData: function getData() {
            var data = {};
            for (var eltId in this.elements) {
                var element = this.elements[eltId];
                var modelReference = element.options.modelReference;
                var value = element.getValue();
                if (value == null) {
                    continue;
                } else if (Array.isArray(value)) {
                    (function () {
                        var propName = modelReference.substr(modelReference.lastIndexOf('[].') + 3);
                        var propValuePath = modelReference.substr(0, modelReference.lastIndexOf('[].'));
                        var propValue = value.reduce(function (carry, item) {
                            var arr = {};
                            arr[propName] = item;
                            carry.push(arr);
                            return carry;
                        }, []);
                        (0, _set2.default)(data, propValuePath, propValue);
                    }());
                } else {
                    (0, _set2.default)(data, modelReference, value);
                }
            }
            return data;
        },
        showErrors: function showErrors(errors) {
            for (var i in this.elements) {
                var element = this.elements[i];
                var modelReference = element.options.modelReference;
                var elementErrors = (0, _get2.default)(errors, modelReference);
                var eltId = element.getId();
                if (elementErrors) {
                    element.state.error = true;
                    if (this.feedbackElements[eltId]) {
                        var error = '';
                        for (var rule in elementErrors) {
                            error += elementErrors[rule] + ' ';
                        }
                        this.feedbackElements[eltId].error(error);
                    }
                }
            }
        },
        validateElement: function validateElement(element, formData) {
            var returnValue = true;
            var modelReference = element.options.modelReference;
            var validationResult = [];
            var eltId = element.getId();
            if (element.requireValidation(formData)) {
                var value = element.getValue();
                var validateFunction = element.getValidateFunction();
                if (validateFunction != null) {
                    var validateFuncResult = validateFunction(value, {});
                    if (validateFuncResult !== true) {
                        validationResult.push(validateFuncResult);
                    }
                } else if (modelReference != null) {
                    var split = modelReference.split('.');
                    var Model = null;
                    var prop = split[split.length - 1];
                    for (var i = 0; i < split.length - 1; i++) {
                        if (Model == null) {
                            Model = _map2.default.getReference(split[i]);
                        } else {
                            var definitions = Model.prototype._define.definitions;
                            var mapName = split[i];
                            var isList = false;
                            if (/\[\]$/.test(split[i])) {
                                mapName = split[i].replace('[]', '');
                                isList = true;
                            }
                            var definition = definitions[mapName];
                            if (definition.Type) {
                                if (isList) {
                                    Model = definition.Type.itemReference;
                                } else {
                                    Model = definition.Type;
                                }
                            }
                        }
                    }
                    validationResult = Model.validateAttribute(prop, value, {}, this.options.action);
                }
                if (validationResult.length > 0) {
                    this.elements[eltId].state.error = true;
                    if (this.feedbackElements[eltId]) {
                        this.feedbackElements[eltId].error(validationResult[0]);
                    }
                    this.view.setElementState(this.elements[eltId], 'error');
                    returnValue = false;
                } else {
                    this.elements[eltId].state.error = false;
                    if (this.feedbackElements[eltId]) {
                        this.feedbackElements[eltId].success('');
                    }
                    this.view.setElementState(this.elements[eltId], 'success');
                }
            }
            return returnValue;
        },
        validate: function validate() {
            var returnValue = true;
            var formData = this.getData();
            for (var i in this.elements) {
                returnValue &= this.validateElement(this.elements[i], formData);
            }
            this.validations++;
            return returnValue;
        },
        '{element} submit': function elementSubmit(el, ev) {
            ev.preventDefault();
            if (this.validate()) {
                if (this.options.callbacks.submit) {
                    this.options.callbacks.submit(this.getData());
                }
            } else {
                if (this.options.callbacks.error) {
                    this.options.callbacks.error();
                }
            }
        },
        '{element} changed': function elementChanged(el, ev) {
            var validateOnChange = this.options.validateOnChange === true || this.options.validateOnChange === 'afterFirstValidation' && this.validations > 0;
            if (validateOnChange) {
                var formElement = this.getElement(ev.target.id);
                if (formElement) {
                    var formData = this.getData();
                    this.validateElement(formElement, formData);
                } else {
                    throw mad.Exception.get('No form element found.');
                }
            }
        }
    });
    exports.default = Form;
});
/*passbolt-mad@2.10.0#view/form/element*/
define('passbolt-mad@2.10.0#view/form/element', [
    'exports',
    'passbolt-mad/view/view'
], function (exports, _view) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _view2 = _interopRequireDefault(_view);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Element = _view2.default.extend('mad.view.form.Element', {}, {
        getName: function getName() {
            return this.element.attr('name');
        },
        setValue: function setValue(value) {
        },
        reset: function reset() {
        }
    });
    exports.default = Element;
});
/*passbolt-mad@2.10.0#model/state/formElementState*/
define('passbolt-mad@2.10.0#model/state/formElementState', [
    'exports',
    'passbolt-mad/model/state/componentState'
], function (exports, _componentState) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _componentState2 = _interopRequireDefault(_componentState);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var FormElementState = _componentState2.default.extend({
        error: {
            type: 'boolean',
            default: false
        }
    });
    exports.default = FormElementState;
});
/*passbolt-mad@2.10.0#form/element*/
define('passbolt-mad@2.10.0#form/element', [
    'exports',
    'passbolt-mad/component/component',
    'passbolt-mad/view/form/element',
    'passbolt-mad/model/state/formElementState'
], function (exports, _component, _element, _formElementState) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _element2 = _interopRequireDefault(_element);
    var _formElementState2 = _interopRequireDefault(_formElementState);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Element = _component2.default.extend('mad.form.Element', {
        defaults: {
            label: 'Form Element Component',
            cssClasses: ['form-element'],
            tag: null,
            viewClass: _element2.default,
            stateClass: _formElementState2.default,
            modelReference: null,
            validate: true,
            validateFunction: null,
            defaultValue: null,
            value: null,
            callbacks: {
                changed: function changed(el, ev, value) {
                }
            }
        }
    }, {
        init: function init(el, options) {
            this._super(el, options);
            this.defaultValue = options.value;
            this.value = options.value;
            this._initStateListener();
        },
        _initStateListener: function _initStateListener() {
            var _this = this;
            this.state.on('error', function (ev, error) {
                return _this.onErrorChange(error);
            });
        },
        updateWrapperElement: function updateWrapperElement() {
            if (this.state.disabled) {
                $(this.element).attr('disabled', 'disabled').addClass('disabled');
            } else {
                $(this.element).removeAttr('disabled').removeClass('disabled');
            }
            this._super();
        },
        afterStart: function afterStart() {
            this.setValue(this.options.value);
        },
        onDisabledChange: function onDisabledChange(disabled) {
            if (disabled) {
                $(this.element).attr('disabled', 'disabled').addClass('disabled');
            } else {
                $(this.element).removeAttr('disabled').removeClass('disabled');
            }
        },
        onErrorChange: function onErrorChange(error) {
            if (error) {
                $(this.element).addClass('error');
            } else {
                $(this.element).removeClass('error');
            }
        },
        getValue: function getValue() {
            return this.value;
        },
        setValue: function setValue(value) {
            this.value = value;
            this.view.setValue(this.value);
            return this;
        },
        getValidateFunction: function getValidateFunction() {
            return this.options.validateFunction;
        },
        requireValidation: function requireValidation(formData) {
            if (typeof this.options.validate == 'function') {
                return this.options.validate(formData);
            }
            return this.options.validate;
        },
        reset: function reset() {
            this.setValue(this.options.value);
        },
        '{element} changed': function elementChanged(el, ev) {
            this.value = ev.data.value;
            if (this.options.callbacks.changed) {
                this.options.callbacks.changed(this.value);
            }
        }
    });
    exports.default = Element;
});
/*passbolt-mad@2.10.0#form/choice_element*/
define('passbolt-mad@2.10.0#form/choice_element', [
    'exports',
    'passbolt-mad/form/element'
], function (exports, _element) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _element2 = _interopRequireDefault(_element);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ChoiceElement = _element2.default.extend('mad.form.ChoiceElement', {
        defaults: {
            availableValues: {},
            valueClasses: {}
        }
    }, {
        beforeRender: function beforeRender() {
            this._super();
            this.setViewData('id', this.options.id);
            this.setViewData('availableValues', this.options.availableValues);
            this.setViewData('counter', 0);
            this.setViewData('valueClasses', this.options.valueClasses);
            this.setViewData('state', this.state);
        },
        setAvailableValues: function setAvailableValues(values) {
            this.options.availableValues = values;
            this.refresh();
        }
    });
    exports.default = ChoiceElement;
});
/*passbolt-mad@2.10.0#view/form/element/radio*/
define('passbolt-mad@2.10.0#view/form/element/radio', [
    'exports',
    'can-dom-events',
    'passbolt-mad/view/form/element'
], function (exports, _canDomEvents, _element) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canDomEvents2 = _interopRequireDefault(_canDomEvents);
    var _element2 = _interopRequireDefault(_element);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Radio = _element2.default.extend('mad.view.form.Radio', {}, {
        getValue: function getValue() {
            var returnValue = [];
            $(this.element).find('input:checked').each(function () {
                returnValue.push($(this).val());
            });
            return returnValue;
        },
        setValue: function setValue(value) {
            value = typeof value != 'undefined' && value != null ? value : [];
            $(this.element).find('input').each(function () {
                if (value.indexOf($(this).val()) != -1) {
                    $(this).attr('checked', true);
                    $(this)[0].checked = true;
                } else {
                    $(this)[0].checked = false;
                    $(this).removeAttr('checked');
                }
            });
        },
        '{element} input change': function elementInputChange(el, ev) {
            ev.stopPropagation();
            if ($(el).is(':checked')) {
                _canDomEvents2.default.dispatch(this.element, {
                    type: 'changed',
                    data: { value: $(el).val() }
                });
            }
        }
    });
    exports.default = Radio;
});
/*passbolt-mad@2.10.0#view/template/form/radio.stache!steal-stache@4.1.2#steal-stache*/
define('passbolt-mad@2.10.0#view/template/form/radio.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('view/template/form/radio.stache', [
        {
            'tokenType': 'special',
            'args': [
                '#each(availableValues)',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input radio',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'radio',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'radio_',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '../id',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'scope.key',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'radio_',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '../id',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '_',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'hash(scope.key)',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(../controller.state.disabled)',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'disabled',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'disabled',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'for',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'radio_',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '../id',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '_',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'hash(scope.key)',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'for',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'this',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                6
            ]
        },
        {
            'tokenType': 'done',
            'args': [6]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*passbolt-mad@2.10.0#form/element/radio*/
define('passbolt-mad@2.10.0#form/element/radio', [
    'exports',
    'passbolt-mad/form/choice_element',
    'passbolt-mad/view/form/element/radio',
    'passbolt-mad/view/template/form/radio.stache!'
], function (exports, _choice_element, _radio, _radio3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _choice_element2 = _interopRequireDefault(_choice_element);
    var _radio2 = _interopRequireDefault(_radio);
    var _radio4 = _interopRequireDefault(_radio3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Radio = _choice_element2.default.extend('mad.form.Radio', {
        defaults: {
            label: 'Radio Form Element',
            tag: 'div',
            template: _radio4.default,
            viewClass: _radio2.default
        }
    }, {
        onDisabledChange: function onDisabledChange(disabled) {
            if (disabled) {
                $(this.element).addClass('disabled');
                $('input', this.element).attr('disabled', 'disabled').addClass('disabled');
            } else {
                $(this.element).removeClass('disabled');
                $('input', this.element).removeAttr('disabled').removeClass('disabled');
            }
        }
    });
    exports.default = Radio;
});
/*passbolt-mad@2.10.0#view/form/element/dropdown*/
define('passbolt-mad@2.10.0#view/form/element/dropdown', [
    'exports',
    'can-dom-events',
    'passbolt-mad/view/form/element'
], function (exports, _canDomEvents, _element) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canDomEvents2 = _interopRequireDefault(_canDomEvents);
    var _element2 = _interopRequireDefault(_element);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Dropdown = _element2.default.extend('mad.view.form.Dropdown', {}, {
        getValue: function getValue() {
            var value = $(this.element).val();
            if (value === 'true') {
                value = true;
            } else if (value === 'false') {
                value = false;
            }
            return value;
        },
        setValue: function setValue(value) {
            if (value === true) {
                value = 'true';
            } else if (value === false) {
                value = 'false';
            }
            $(this.element).val(value);
        },
        '{element} change': function elementChange(el) {
            _canDomEvents2.default.dispatch(el, {
                type: 'changed',
                data: { value: this.getValue() }
            });
        }
    });
    exports.default = Dropdown;
});
/*passbolt-mad@2.10.0#view/template/form/dropdown.stache!steal-stache@4.1.2#steal-stache*/
define('passbolt-mad@2.10.0#view/template/form/dropdown.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('view/template/form/dropdown.stache', [
        {
            'tokenType': 'special',
            'args': [
                '#if(controller.options.emptyValue)',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'option',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'option',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'select a value\') ',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'option',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#each(availableValues)',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'option',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'scope.key',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'option',
                false,
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'this',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'option',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                6
            ]
        },
        {
            'tokenType': 'done',
            'args': [6]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*passbolt-mad@2.10.0#form/element/dropdown*/
define('passbolt-mad@2.10.0#form/element/dropdown', [
    'exports',
    'passbolt-mad/form/choice_element',
    'passbolt-mad/view/form/element/dropdown',
    'passbolt-mad/view/template/form/dropdown.stache!'
], function (exports, _choice_element, _dropdown, _dropdown3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _choice_element2 = _interopRequireDefault(_choice_element);
    var _dropdown2 = _interopRequireDefault(_dropdown);
    var _dropdown4 = _interopRequireDefault(_dropdown3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Dropdown = _choice_element2.default.extend('mad.form.Dropdown', {
        defaults: {
            label: 'DropDown Form Element',
            tag: 'div',
            template: _dropdown4.default,
            viewClass: _dropdown2.default,
            emptyValue: true
        }
    }, {});
    exports.default = Dropdown;
});
/*app/view/template/form/administration/users_directory/settings.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/form/administration/users_directory/settings.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/form/administration/users_directory/settings.stache', [
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-ldap-toggle-button',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Users Directory',
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'description enabled',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\tA Users Directory is configured. The users and groups of passbolt will synchronize with it.\n',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'description disabled',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\tNo Users Directory is configured. Enable it to synchronise your users and groups with passbolt.\n',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form-content',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion section-general',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-header',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                11
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Credentials\')',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-content',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'radiolist required',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                14
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                14
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Directory type\')',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-directory-type-radio',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input radio ad openldap',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                16
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                17
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'singleline connection_info protocol_host_port clearfix js_form_element_wrapper required ad openldap',
                17
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                17
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                18
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                18
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Server url\')',
                18
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                18
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text field_protocol_host ad openldap',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                19
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text protocol ad openldap',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                20
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'select',
                false,
                21
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                21
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-connection-connection-type-input',
                21
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                21
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                21
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required fluid',
                21
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                21
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'required',
                21
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required',
                21
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'required',
                21
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'select',
                false,
                21
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'select',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                21
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                22
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                23
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text host ad openldap',
                23
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                23
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                24
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                24
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-server-input',
                24
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                24
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                24
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                24
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                24
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                24
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required fluid',
                24
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                24
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                24
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'host',
                24
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                24
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                24
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                25
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                25
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-server-input-feedback',
                25
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                25
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                25
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                25
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                25
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                25
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                25
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                26
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                27
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                27
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                28
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                28
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text port ad openldap',
                28
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                28
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                28
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                28
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                29
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                29
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-port-input',
                29
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                29
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                29
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                29
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                29
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                29
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required fluid',
                29
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                29
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                29
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'port',
                29
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                29
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                29
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                29
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                30
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                30
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-port-input-feedback',
                30
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                30
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                30
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                30
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                30
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                30
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                30
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                31
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                31
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                32
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                32
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                33
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                33
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'singleline clearfix',
                33
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                33
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                33
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                33
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                34
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                34
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text first-field js_form_element_wrapper ad openldap',
                34
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                34
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                34
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                34
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                35
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                35
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Username\')',
                35
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                35
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                35
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                36
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                36
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-username-input',
                36
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                36
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                36
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                36
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                36
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                36
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fluid',
                36
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                36
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                36
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'username',
                36
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                36
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                36
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                36
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                37
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                37
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-username-input-feedback',
                37
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                37
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                37
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                37
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                37
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                37
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                37
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                37
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                38
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                38
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                39
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                39
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text last-field js_form_element_wrapper ad openldap',
                39
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                39
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                39
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                39
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                40
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                40
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Password\')',
                40
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                40
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                40
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                41
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                41
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-password-input',
                41
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                41
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                41
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(edit',
                41
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                41
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#else',
                41
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'password',
                41
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                41
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                41
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                41
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fluid',
                41
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                41
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                41
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'password',
                41
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                41
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                41
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                41
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                42
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                42
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-password-input-feedback',
                42
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                42
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                42
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                42
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                42
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                42
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                42
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                42
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                43
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                43
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                44
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                44
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                45
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                45
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text js_form_element_wrapper required ad openldap',
                45
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                45
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                45
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                45
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                46
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                46
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Domain\')',
                46
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                46
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                46
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                47
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                47
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-domain-name-input',
                47
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                47
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                47
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                47
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                47
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                47
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required fluid',
                47
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                47
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                47
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'domain.ext',
                47
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                47
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                47
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                47
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                48
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                48
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-domain-name-input-feedback',
                48
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                48
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                48
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                48
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                48
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                48
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                48
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                48
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                49
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                49
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                50
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                50
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text js_form_element_wrapper ad openldap',
                50
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                50
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                50
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                50
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                51
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                51
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Base DN\')',
                51
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                51
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                51
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                52
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                52
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-base-dn-input',
                52
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                52
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                52
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                52
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                52
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                52
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fluid',
                52
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                52
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                52
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'OU=OrgUsers,DC=mydomain,DC=local',
                52
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                52
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                52
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                52
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                53
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                53
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-base-dn-input-feedback',
                53
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                53
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                53
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                53
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                53
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                53
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                53
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                53
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                54
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                54
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                54
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                54
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                54
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'The base DN (default naming context) for the domain. If this is empty then it will be queried from the RootDSE.',
                54
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                54
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                54
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                55
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                55
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                56
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                56
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                57
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                57
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                59
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                59
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion default-closed section-directory-configuration',
                59
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                59
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                59
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                59
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                60
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                60
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-header',
                60
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                60
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                60
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                60
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                60
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Directory configuration\')',
                60
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                60
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                60
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                60
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                61
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                61
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-content',
                61
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                61
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                61
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                61
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                62
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                62
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text js_form_element_wrapper ad openldap',
                62
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                62
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                62
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                62
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                63
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                63
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Group path\')',
                63
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                63
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                63
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                64
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                64
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-group-path-input',
                64
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                64
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                64
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                64
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                64
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                64
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required fluid',
                64
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                64
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                64
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'Group Path',
                64
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                64
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                64
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                64
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                65
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                65
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                65
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                65
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                65
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Group path is used in addition to the base DN while searching groups.\')',
                65
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                65
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                65
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                66
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                66
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-group-path-input-feedback',
                66
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                66
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                66
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                66
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                66
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                66
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                66
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                66
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                67
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                67
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                68
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                68
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text js_form_element_wrapper ad openldap',
                68
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                68
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                68
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                68
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                69
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                69
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'User path\')',
                69
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                69
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                69
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                70
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                70
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-user-path-input',
                70
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                70
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                70
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                70
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                70
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                70
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required fluid',
                70
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                70
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                70
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'User Path',
                70
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                70
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                70
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                70
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                71
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                71
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                71
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                71
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                71
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'User path is used in addition to base DN while searching users.\')',
                71
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                71
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                71
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                72
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                72
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-user-path-input-feedback',
                72
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                72
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                72
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                72
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                72
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                72
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                72
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                72
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                73
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                73
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                74
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                74
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text js_form_element_wrapper openldap',
                74
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                74
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                74
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                74
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                75
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                75
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Group object class\')',
                75
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                75
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                75
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                76
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                76
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-group-object-class-input',
                76
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                76
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                76
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                76
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                76
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                76
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required fluid',
                76
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                76
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                76
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'GroupObjectClass',
                76
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                76
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                76
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                76
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                77
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                77
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                77
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                77
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                77
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'For Openldap only. Defines which group object to use. (Default: posixGroup)\')',
                77
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                77
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                77
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                78
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                78
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-group-object-class-input-feedback',
                78
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                78
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                78
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                78
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                78
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                78
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                78
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                78
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                79
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                79
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                80
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                80
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text js_form_element_wrapper openldap',
                80
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                80
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                80
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                80
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                81
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                81
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'User object class\')',
                81
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                81
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                81
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                82
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                82
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-user-object-class-input',
                82
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                82
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                82
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                82
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                82
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                82
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required fluid',
                82
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                82
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                82
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'UserObjectClass',
                82
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                82
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                82
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                82
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                83
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                83
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                83
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                83
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                83
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'For Openldap only. Defines which user object to use. (Default: inetOrgPerson)\')',
                83
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                83
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                83
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                84
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                84
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-user-object-class-input-feedback',
                84
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                84
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                84
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                84
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                84
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                84
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                84
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                84
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                85
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                85
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                86
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                86
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                87
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                87
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                89
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                89
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion default-closed section-sync-options',
                89
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                89
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                89
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                89
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                90
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                90
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-header',
                90
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                90
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                90
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                90
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                90
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Synchronization options\')',
                90
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                90
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                90
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                90
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                91
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                91
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-content',
                91
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                91
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                91
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                91
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                92
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                92
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input select js_form_element_wrapper required ad openldap',
                92
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                92
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                92
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                92
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                93
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                93
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Default admin\')',
                93
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                93
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                93
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'select',
                false,
                94
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                94
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-default-user-select',
                94
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                94
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                94
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required fluid',
                94
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                94
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'required',
                94
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required',
                94
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'required',
                94
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'select',
                false,
                94
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'select',
                94
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                94
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                95
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                95
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                95
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                95
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                95
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'The default admin user is the admin user that will perform the operations for the the directory.\')',
                95
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                95
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                95
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                96
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                96
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-default-user-select-feedback',
                96
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                96
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                96
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                96
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                96
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                96
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                96
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                96
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                97
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                97
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                98
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                98
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input select js_form_element_wrapper required ad openldap',
                98
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                98
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                98
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                98
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                99
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                99
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Default group admin\')',
                99
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                99
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                99
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'select',
                false,
                100
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                100
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-default-group-admin-user-select',
                100
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                100
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                100
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required fluid',
                100
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                100
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'required',
                100
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required',
                100
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'required',
                100
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'select',
                false,
                100
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'select',
                100
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                100
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                101
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                101
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                101
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                101
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                101
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'The default group admin user is the admin user that will be the group manager of newly created group.\')',
                101
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                101
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                101
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                102
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                102
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-default-group-admin-user-select-feedback',
                102
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                102
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                102
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                102
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                102
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                102
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                102
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                102
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                103
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                103
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                104
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                104
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text js_form_element_wrapper ad openldap',
                104
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                104
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                104
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                104
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                105
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                105
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Groups parent group\')',
                105
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                105
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                105
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                106
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                106
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-groups-parent-group-input',
                106
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                106
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                106
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                106
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                106
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                106
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fluid',
                106
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                106
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                106
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'Group name',
                106
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                106
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                106
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                106
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                107
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                107
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                107
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                107
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                107
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Synchronize only the groups which are members of this group.\')',
                107
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                107
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                107
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                108
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                108
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-groups-parent-group-input-feedback',
                108
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                108
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                108
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                108
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                108
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                108
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                108
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                108
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                109
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                109
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                110
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                110
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text js_form_element_wrapper ad openldap',
                110
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                110
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                110
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                110
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                111
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                111
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Users parent group\')',
                111
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                111
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                111
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                112
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                112
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-users-parent-group-input',
                112
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                112
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                112
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                112
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                112
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                112
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fluid',
                112
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                112
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                112
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'Group name',
                112
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                112
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                112
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                112
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                113
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                113
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                113
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                113
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                113
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Synchronize only the users which are members of this group.\')',
                113
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                113
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                113
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                114
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                114
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-users-parent-group-input-feedback',
                114
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                114
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                114
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                114
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                114
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                114
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                114
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                114
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                115
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                115
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                116
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                116
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text clearfix ad',
                116
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                116
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                116
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                116
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                117
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                117
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Enabled users only\')',
                117
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                117
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                117
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                118
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                118
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-enabled-users-only-toggle-button',
                118
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                118
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                118
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch ad',
                118
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                118
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                118
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                118
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                118
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                119
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                119
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                120
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                120
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text clearfix ad openldap',
                120
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                120
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                120
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                120
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                121
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                121
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Sync operations\')',
                121
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                121
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                121
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                122
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                122
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'col6',
                122
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                122
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                122
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                122
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                123
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                123
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-sync-users-create-toggle-button',
                123
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                123
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                123
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch ad openldap',
                123
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                123
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                123
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                123
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                123
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                124
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                124
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-sync-users-delete-toggle-button',
                124
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                124
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                124
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch ad openldap',
                124
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                124
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                124
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                124
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                124
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                125
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                125
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                126
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                126
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'col6 last',
                126
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                126
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                126
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                126
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                127
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                127
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-sync-groups-create-toggle-button',
                127
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                127
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                127
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch ad openldap',
                127
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                127
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                127
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                127
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                127
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                128
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                128
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-sync-groups-delete-toggle-button',
                128
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                128
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                128
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch ad openldap',
                128
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                128
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                128
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                128
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                128
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                129
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                129
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-sync-groups-update-toggle-button',
                129
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                129
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                129
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch ad openldap',
                129
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                129
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                129
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                129
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                129
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                130
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                130
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                131
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                131
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                132
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                132
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                133
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                133
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                134
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                134
            ]
        },
        {
            'tokenType': 'done',
            'args': [135]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*passbolt-mad@2.10.0#view/form/element/textbox*/
define('passbolt-mad@2.10.0#view/form/element/textbox', [
    'exports',
    'can-dom-events',
    'passbolt-mad/view/form/element'
], function (exports, _canDomEvents, _element) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canDomEvents2 = _interopRequireDefault(_canDomEvents);
    var _element2 = _interopRequireDefault(_element);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Textbox = _element2.default.extend('mad.view.form.Textbox', {}, {
        _changeTimeout: null,
        getValue: function getValue() {
            return $(this.element).val();
        },
        setValue: function setValue(value) {
            $(this.element).val(value);
        },
        '{element} input': function elementInput() {
            var _this = this;
            var newValue = this.getValue();
            if (newValue.length >= this.getController().options.onChangeAfterLength) {
                if (this._changeTimeout != null) {
                    clearTimeout(this._changeTimeout);
                }
                this._changeTimeout = setTimeout(function () {
                    _canDomEvents2.default.dispatch(_this.element, {
                        type: 'changed',
                        data: { value: _this.getValue() }
                    });
                }, this.getController().options.onChangeTimeout);
            }
        }
    });
    exports.default = Textbox;
});
/*passbolt-mad@2.10.0#form/element/textbox*/
define('passbolt-mad@2.10.0#form/element/textbox', [
    'exports',
    'passbolt-mad/form/element',
    'passbolt-mad/view/form/element/textbox'
], function (exports, _element, _textbox) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _element2 = _interopRequireDefault(_element);
    var _textbox2 = _interopRequireDefault(_textbox);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Textbox = _element2.default.extend('mad.form.Textbox', {
        defaults: {
            label: 'Textbox Form Element',
            tag: 'input',
            viewClass: _textbox2.default,
            onChangeTimeout: 0,
            onChangeAfterLength: 0
        }
    }, {});
    exports.default = Textbox;
});
/*passbolt-mad@2.10.0#view/form/element/toggle_button*/
define('passbolt-mad@2.10.0#view/form/element/toggle_button', [
    'exports',
    'can-dom-events',
    'passbolt-mad/view/form/element'
], function (exports, _canDomEvents, _element) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canDomEvents2 = _interopRequireDefault(_canDomEvents);
    var _element2 = _interopRequireDefault(_element);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ToggleButton = _element2.default.extend('mad.view.form.ToggleButton', {}, {
        setValue: function setValue(value) {
            var $checkbox = $('input', this.element);
            $checkbox.prop('checked', value);
        },
        '{element} .toggle-switch-button click': function elementToggleSwitchButtonClick() {
            if (this.getController().state.disabled) {
                return;
            }
            var $checkbox = $('input', this.element);
            var isChecked = $checkbox.is(':checked');
            _canDomEvents2.default.dispatch(this.element, {
                type: 'changed',
                data: { value: !isChecked }
            });
        },
        '{element} input change': function elementInputChange() {
            if (this.getController().state.disabled) {
                return;
            }
            var $checkbox = $('input', this.element);
            var isChecked = $checkbox.is(':checked');
            _canDomEvents2.default.dispatch(this.element, {
                type: 'changed',
                data: { value: isChecked }
            });
        }
    });
    exports.default = ToggleButton;
});
/*passbolt-mad@2.10.0#view/template/form/toggle_button.stache!steal-stache@4.1.2#steal-stache*/
define('passbolt-mad@2.10.0#view/template/form/toggle_button.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('view/template/form/toggle_button.stache', [
        {
            'tokenType': 'special',
            'args': [
                '#if(label)',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'for',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'toggle_button_',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'for',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'label',
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'checkbox',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'toggle_button_',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'key',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'toggle_button_',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'toggle-switch-checkbox checkbox',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(controller.state.disabled)',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'disabled',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'disabled',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'disabled',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'toggle-switch-button',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'for',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'toggle_button_',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'for',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                2
            ]
        },
        {
            'tokenType': 'done',
            'args': [3]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*passbolt-mad@2.10.0#form/element/toggle_button*/
define('passbolt-mad@2.10.0#form/element/toggle_button', [
    'exports',
    'passbolt-mad/form/element',
    'passbolt-mad/view/form/element/toggle_button',
    'passbolt-mad/view/template/form/toggle_button.stache!'
], function (exports, _element, _toggle_button, _toggle_button3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _element2 = _interopRequireDefault(_element);
    var _toggle_button2 = _interopRequireDefault(_toggle_button);
    var _toggle_button4 = _interopRequireDefault(_toggle_button3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ToggleButton = _element2.default.extend('mad.form.ToggleButton', {
        defaults: {
            label: 'Toggle Button Element',
            tag: 'div',
            template: _toggle_button4.default,
            viewClass: _toggle_button2.default
        }
    }, {
        onDisabledChange: function onDisabledChange(disabled) {
            if (disabled) {
                $(this.element).addClass('disabled');
                $('input', this.element).attr('disabled', 'disabled').addClass('disabled');
            } else {
                $(this.element).removeClass('disabled');
                $('input', this.element).removeAttr('disabled').removeClass('disabled');
            }
        }
    });
    exports.default = ToggleButton;
});
/*chosen-js@1.8.7#chosen.jquery*/
define('chosen-js@1.8.7#chosen.jquery', [
    'module',
    '@loader',
    'require'
], function (module, loader, require) {
    loader.get('@@global-helpers').prepareGlobal({
        require: require,
        name: module.id,
        deps: []
    });
    var define = loader.global.define;
    var require = loader.global.require;
    var source = '(function() {\n  var $, AbstractChosen, Chosen, SelectParser,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  SelectParser = (function() {\n    function SelectParser() {\n      this.options_index = 0;\n      this.parsed = [];\n    }\n\n    SelectParser.prototype.add_node = function(child) {\n      if (child.nodeName.toUpperCase() === "OPTGROUP") {\n        return this.add_group(child);\n      } else {\n        return this.add_option(child);\n      }\n    };\n\n    SelectParser.prototype.add_group = function(group) {\n      var group_position, i, len, option, ref, results1;\n      group_position = this.parsed.length;\n      this.parsed.push({\n        array_index: group_position,\n        group: true,\n        label: group.label,\n        title: group.title ? group.title : void 0,\n        children: 0,\n        disabled: group.disabled,\n        classes: group.className\n      });\n      ref = group.childNodes;\n      results1 = [];\n      for (i = 0, len = ref.length; i < len; i++) {\n        option = ref[i];\n        results1.push(this.add_option(option, group_position, group.disabled));\n      }\n      return results1;\n    };\n\n    SelectParser.prototype.add_option = function(option, group_position, group_disabled) {\n      if (option.nodeName.toUpperCase() === "OPTION") {\n        if (option.text !== "") {\n          if (group_position != null) {\n            this.parsed[group_position].children += 1;\n          }\n          this.parsed.push({\n            array_index: this.parsed.length,\n            options_index: this.options_index,\n            value: option.value,\n            text: option.text,\n            html: option.innerHTML,\n            title: option.title ? option.title : void 0,\n            selected: option.selected,\n            disabled: group_disabled === true ? group_disabled : option.disabled,\n            group_array_index: group_position,\n            group_label: group_position != null ? this.parsed[group_position].label : null,\n            classes: option.className,\n            style: option.style.cssText\n          });\n        } else {\n          this.parsed.push({\n            array_index: this.parsed.length,\n            options_index: this.options_index,\n            empty: true\n          });\n        }\n        return this.options_index += 1;\n      }\n    };\n\n    return SelectParser;\n\n  })();\n\n  SelectParser.select_to_array = function(select) {\n    var child, i, len, parser, ref;\n    parser = new SelectParser();\n    ref = select.childNodes;\n    for (i = 0, len = ref.length; i < len; i++) {\n      child = ref[i];\n      parser.add_node(child);\n    }\n    return parser.parsed;\n  };\n\n  AbstractChosen = (function() {\n    function AbstractChosen(form_field, options1) {\n      this.form_field = form_field;\n      this.options = options1 != null ? options1 : {};\n      this.label_click_handler = bind(this.label_click_handler, this);\n      if (!AbstractChosen.browser_is_supported()) {\n        return;\n      }\n      this.is_multiple = this.form_field.multiple;\n      this.set_default_text();\n      this.set_default_values();\n      this.setup();\n      this.set_up_html();\n      this.register_observers();\n      this.on_ready();\n    }\n\n    AbstractChosen.prototype.set_default_values = function() {\n      this.click_test_action = (function(_this) {\n        return function(evt) {\n          return _this.test_active_click(evt);\n        };\n      })(this);\n      this.activate_action = (function(_this) {\n        return function(evt) {\n          return _this.activate_field(evt);\n        };\n      })(this);\n      this.active_field = false;\n      this.mouse_on_container = false;\n      this.results_showing = false;\n      this.result_highlighted = null;\n      this.is_rtl = this.options.rtl || /\\bchosen-rtl\\b/.test(this.form_field.className);\n      this.allow_single_deselect = (this.options.allow_single_deselect != null) && (this.form_field.options[0] != null) && this.form_field.options[0].text === "" ? this.options.allow_single_deselect : false;\n      this.disable_search_threshold = this.options.disable_search_threshold || 0;\n      this.disable_search = this.options.disable_search || false;\n      this.enable_split_word_search = this.options.enable_split_word_search != null ? this.options.enable_split_word_search : true;\n      this.group_search = this.options.group_search != null ? this.options.group_search : true;\n      this.search_contains = this.options.search_contains || false;\n      this.single_backstroke_delete = this.options.single_backstroke_delete != null ? this.options.single_backstroke_delete : true;\n      this.max_selected_options = this.options.max_selected_options || Infinity;\n      this.inherit_select_classes = this.options.inherit_select_classes || false;\n      this.display_selected_options = this.options.display_selected_options != null ? this.options.display_selected_options : true;\n      this.display_disabled_options = this.options.display_disabled_options != null ? this.options.display_disabled_options : true;\n      this.include_group_label_in_selected = this.options.include_group_label_in_selected || false;\n      this.max_shown_results = this.options.max_shown_results || Number.POSITIVE_INFINITY;\n      this.case_sensitive_search = this.options.case_sensitive_search || false;\n      return this.hide_results_on_select = this.options.hide_results_on_select != null ? this.options.hide_results_on_select : true;\n    };\n\n    AbstractChosen.prototype.set_default_text = function() {\n      if (this.form_field.getAttribute("data-placeholder")) {\n        this.default_text = this.form_field.getAttribute("data-placeholder");\n      } else if (this.is_multiple) {\n        this.default_text = this.options.placeholder_text_multiple || this.options.placeholder_text || AbstractChosen.default_multiple_text;\n      } else {\n        this.default_text = this.options.placeholder_text_single || this.options.placeholder_text || AbstractChosen.default_single_text;\n      }\n      this.default_text = this.escape_html(this.default_text);\n      return this.results_none_found = this.form_field.getAttribute("data-no_results_text") || this.options.no_results_text || AbstractChosen.default_no_result_text;\n    };\n\n    AbstractChosen.prototype.choice_label = function(item) {\n      if (this.include_group_label_in_selected && (item.group_label != null)) {\n        return "<b class=\'group-name\'>" + (this.escape_html(item.group_label)) + "</b>" + item.html;\n      } else {\n        return item.html;\n      }\n    };\n\n    AbstractChosen.prototype.mouse_enter = function() {\n      return this.mouse_on_container = true;\n    };\n\n    AbstractChosen.prototype.mouse_leave = function() {\n      return this.mouse_on_container = false;\n    };\n\n    AbstractChosen.prototype.input_focus = function(evt) {\n      if (this.is_multiple) {\n        if (!this.active_field) {\n          return setTimeout(((function(_this) {\n            return function() {\n              return _this.container_mousedown();\n            };\n          })(this)), 50);\n        }\n      } else {\n        if (!this.active_field) {\n          return this.activate_field();\n        }\n      }\n    };\n\n    AbstractChosen.prototype.input_blur = function(evt) {\n      if (!this.mouse_on_container) {\n        this.active_field = false;\n        return setTimeout(((function(_this) {\n          return function() {\n            return _this.blur_test();\n          };\n        })(this)), 100);\n      }\n    };\n\n    AbstractChosen.prototype.label_click_handler = function(evt) {\n      if (this.is_multiple) {\n        return this.container_mousedown(evt);\n      } else {\n        return this.activate_field();\n      }\n    };\n\n    AbstractChosen.prototype.results_option_build = function(options) {\n      var content, data, data_content, i, len, ref, shown_results;\n      content = \'\';\n      shown_results = 0;\n      ref = this.results_data;\n      for (i = 0, len = ref.length; i < len; i++) {\n        data = ref[i];\n        data_content = \'\';\n        if (data.group) {\n          data_content = this.result_add_group(data);\n        } else {\n          data_content = this.result_add_option(data);\n        }\n        if (data_content !== \'\') {\n          shown_results++;\n          content += data_content;\n        }\n        if (options != null ? options.first : void 0) {\n          if (data.selected && this.is_multiple) {\n            this.choice_build(data);\n          } else if (data.selected && !this.is_multiple) {\n            this.single_set_selected_text(this.choice_label(data));\n          }\n        }\n        if (shown_results >= this.max_shown_results) {\n          break;\n        }\n      }\n      return content;\n    };\n\n    AbstractChosen.prototype.result_add_option = function(option) {\n      var classes, option_el;\n      if (!option.search_match) {\n        return \'\';\n      }\n      if (!this.include_option_in_results(option)) {\n        return \'\';\n      }\n      classes = [];\n      if (!option.disabled && !(option.selected && this.is_multiple)) {\n        classes.push("active-result");\n      }\n      if (option.disabled && !(option.selected && this.is_multiple)) {\n        classes.push("disabled-result");\n      }\n      if (option.selected) {\n        classes.push("result-selected");\n      }\n      if (option.group_array_index != null) {\n        classes.push("group-option");\n      }\n      if (option.classes !== "") {\n        classes.push(option.classes);\n      }\n      option_el = document.createElement("li");\n      option_el.className = classes.join(" ");\n      if (option.style) {\n        option_el.style.cssText = option.style;\n      }\n      option_el.setAttribute("data-option-array-index", option.array_index);\n      option_el.innerHTML = option.highlighted_html || option.html;\n      if (option.title) {\n        option_el.title = option.title;\n      }\n      return this.outerHTML(option_el);\n    };\n\n    AbstractChosen.prototype.result_add_group = function(group) {\n      var classes, group_el;\n      if (!(group.search_match || group.group_match)) {\n        return \'\';\n      }\n      if (!(group.active_options > 0)) {\n        return \'\';\n      }\n      classes = [];\n      classes.push("group-result");\n      if (group.classes) {\n        classes.push(group.classes);\n      }\n      group_el = document.createElement("li");\n      group_el.className = classes.join(" ");\n      group_el.innerHTML = group.highlighted_html || this.escape_html(group.label);\n      if (group.title) {\n        group_el.title = group.title;\n      }\n      return this.outerHTML(group_el);\n    };\n\n    AbstractChosen.prototype.results_update_field = function() {\n      this.set_default_text();\n      if (!this.is_multiple) {\n        this.results_reset_cleanup();\n      }\n      this.result_clear_highlight();\n      this.results_build();\n      if (this.results_showing) {\n        return this.winnow_results();\n      }\n    };\n\n    AbstractChosen.prototype.reset_single_select_options = function() {\n      var i, len, ref, result, results1;\n      ref = this.results_data;\n      results1 = [];\n      for (i = 0, len = ref.length; i < len; i++) {\n        result = ref[i];\n        if (result.selected) {\n          results1.push(result.selected = false);\n        } else {\n          results1.push(void 0);\n        }\n      }\n      return results1;\n    };\n\n    AbstractChosen.prototype.results_toggle = function() {\n      if (this.results_showing) {\n        return this.results_hide();\n      } else {\n        return this.results_show();\n      }\n    };\n\n    AbstractChosen.prototype.results_search = function(evt) {\n      if (this.results_showing) {\n        return this.winnow_results();\n      } else {\n        return this.results_show();\n      }\n    };\n\n    AbstractChosen.prototype.winnow_results = function(options) {\n      var escapedQuery, fix, i, len, option, prefix, query, ref, regex, results, results_group, search_match, startpos, suffix, text;\n      this.no_results_clear();\n      results = 0;\n      query = this.get_search_text();\n      escapedQuery = query.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, "\\\\$&");\n      regex = this.get_search_regex(escapedQuery);\n      ref = this.results_data;\n      for (i = 0, len = ref.length; i < len; i++) {\n        option = ref[i];\n        option.search_match = false;\n        results_group = null;\n        search_match = null;\n        option.highlighted_html = \'\';\n        if (this.include_option_in_results(option)) {\n          if (option.group) {\n            option.group_match = false;\n            option.active_options = 0;\n          }\n          if ((option.group_array_index != null) && this.results_data[option.group_array_index]) {\n            results_group = this.results_data[option.group_array_index];\n            if (results_group.active_options === 0 && results_group.search_match) {\n              results += 1;\n            }\n            results_group.active_options += 1;\n          }\n          text = option.group ? option.label : option.text;\n          if (!(option.group && !this.group_search)) {\n            search_match = this.search_string_match(text, regex);\n            option.search_match = search_match != null;\n            if (option.search_match && !option.group) {\n              results += 1;\n            }\n            if (option.search_match) {\n              if (query.length) {\n                startpos = search_match.index;\n                prefix = text.slice(0, startpos);\n                fix = text.slice(startpos, startpos + query.length);\n                suffix = text.slice(startpos + query.length);\n                option.highlighted_html = (this.escape_html(prefix)) + "<em>" + (this.escape_html(fix)) + "</em>" + (this.escape_html(suffix));\n              }\n              if (results_group != null) {\n                results_group.group_match = true;\n              }\n            } else if ((option.group_array_index != null) && this.results_data[option.group_array_index].search_match) {\n              option.search_match = true;\n            }\n          }\n        }\n      }\n      this.result_clear_highlight();\n      if (results < 1 && query.length) {\n        this.update_results_content("");\n        return this.no_results(query);\n      } else {\n        this.update_results_content(this.results_option_build());\n        if (!(options != null ? options.skip_highlight : void 0)) {\n          return this.winnow_results_set_highlight();\n        }\n      }\n    };\n\n    AbstractChosen.prototype.get_search_regex = function(escaped_search_string) {\n      var regex_flag, regex_string;\n      regex_string = this.search_contains ? escaped_search_string : "(^|\\\\s|\\\\b)" + escaped_search_string + "[^\\\\s]*";\n      if (!(this.enable_split_word_search || this.search_contains)) {\n        regex_string = "^" + regex_string;\n      }\n      regex_flag = this.case_sensitive_search ? "" : "i";\n      return new RegExp(regex_string, regex_flag);\n    };\n\n    AbstractChosen.prototype.search_string_match = function(search_string, regex) {\n      var match;\n      match = regex.exec(search_string);\n      if (!this.search_contains && (match != null ? match[1] : void 0)) {\n        match.index += 1;\n      }\n      return match;\n    };\n\n    AbstractChosen.prototype.choices_count = function() {\n      var i, len, option, ref;\n      if (this.selected_option_count != null) {\n        return this.selected_option_count;\n      }\n      this.selected_option_count = 0;\n      ref = this.form_field.options;\n      for (i = 0, len = ref.length; i < len; i++) {\n        option = ref[i];\n        if (option.selected) {\n          this.selected_option_count += 1;\n        }\n      }\n      return this.selected_option_count;\n    };\n\n    AbstractChosen.prototype.choices_click = function(evt) {\n      evt.preventDefault();\n      this.activate_field();\n      if (!(this.results_showing || this.is_disabled)) {\n        return this.results_show();\n      }\n    };\n\n    AbstractChosen.prototype.keydown_checker = function(evt) {\n      var ref, stroke;\n      stroke = (ref = evt.which) != null ? ref : evt.keyCode;\n      this.search_field_scale();\n      if (stroke !== 8 && this.pending_backstroke) {\n        this.clear_backstroke();\n      }\n      switch (stroke) {\n        case 8:\n          this.backstroke_length = this.get_search_field_value().length;\n          break;\n        case 9:\n          if (this.results_showing && !this.is_multiple) {\n            this.result_select(evt);\n          }\n          this.mouse_on_container = false;\n          break;\n        case 13:\n          if (this.results_showing) {\n            evt.preventDefault();\n          }\n          break;\n        case 27:\n          if (this.results_showing) {\n            evt.preventDefault();\n          }\n          break;\n        case 32:\n          if (this.disable_search) {\n            evt.preventDefault();\n          }\n          break;\n        case 38:\n          evt.preventDefault();\n          this.keyup_arrow();\n          break;\n        case 40:\n          evt.preventDefault();\n          this.keydown_arrow();\n          break;\n      }\n    };\n\n    AbstractChosen.prototype.keyup_checker = function(evt) {\n      var ref, stroke;\n      stroke = (ref = evt.which) != null ? ref : evt.keyCode;\n      this.search_field_scale();\n      switch (stroke) {\n        case 8:\n          if (this.is_multiple && this.backstroke_length < 1 && this.choices_count() > 0) {\n            this.keydown_backstroke();\n          } else if (!this.pending_backstroke) {\n            this.result_clear_highlight();\n            this.results_search();\n          }\n          break;\n        case 13:\n          evt.preventDefault();\n          if (this.results_showing) {\n            this.result_select(evt);\n          }\n          break;\n        case 27:\n          if (this.results_showing) {\n            this.results_hide();\n          }\n          break;\n        case 9:\n        case 16:\n        case 17:\n        case 18:\n        case 38:\n        case 40:\n        case 91:\n          break;\n        default:\n          this.results_search();\n          break;\n      }\n    };\n\n    AbstractChosen.prototype.clipboard_event_checker = function(evt) {\n      if (this.is_disabled) {\n        return;\n      }\n      return setTimeout(((function(_this) {\n        return function() {\n          return _this.results_search();\n        };\n      })(this)), 50);\n    };\n\n    AbstractChosen.prototype.container_width = function() {\n      if (this.options.width != null) {\n        return this.options.width;\n      } else {\n        return this.form_field.offsetWidth + "px";\n      }\n    };\n\n    AbstractChosen.prototype.include_option_in_results = function(option) {\n      if (this.is_multiple && (!this.display_selected_options && option.selected)) {\n        return false;\n      }\n      if (!this.display_disabled_options && option.disabled) {\n        return false;\n      }\n      if (option.empty) {\n        return false;\n      }\n      return true;\n    };\n\n    AbstractChosen.prototype.search_results_touchstart = function(evt) {\n      this.touch_started = true;\n      return this.search_results_mouseover(evt);\n    };\n\n    AbstractChosen.prototype.search_results_touchmove = function(evt) {\n      this.touch_started = false;\n      return this.search_results_mouseout(evt);\n    };\n\n    AbstractChosen.prototype.search_results_touchend = function(evt) {\n      if (this.touch_started) {\n        return this.search_results_mouseup(evt);\n      }\n    };\n\n    AbstractChosen.prototype.outerHTML = function(element) {\n      var tmp;\n      if (element.outerHTML) {\n        return element.outerHTML;\n      }\n      tmp = document.createElement("div");\n      tmp.appendChild(element);\n      return tmp.innerHTML;\n    };\n\n    AbstractChosen.prototype.get_single_html = function() {\n      return "<a class=\\"chosen-single chosen-default\\">\\n  <span>" + this.default_text + "</span>\\n  <div><b></b></div>\\n</a>\\n<div class=\\"chosen-drop\\">\\n  <div class=\\"chosen-search\\">\\n    <input class=\\"chosen-search-input\\" type=\\"text\\" autocomplete=\\"off\\" />\\n  </div>\\n  <ul class=\\"chosen-results\\"></ul>\\n</div>";\n    };\n\n    AbstractChosen.prototype.get_multi_html = function() {\n      return "<ul class=\\"chosen-choices\\">\\n  <li class=\\"search-field\\">\\n    <input class=\\"chosen-search-input\\" type=\\"text\\" autocomplete=\\"off\\" value=\\"" + this.default_text + "\\" />\\n  </li>\\n</ul>\\n<div class=\\"chosen-drop\\">\\n  <ul class=\\"chosen-results\\"></ul>\\n</div>";\n    };\n\n    AbstractChosen.prototype.get_no_results_html = function(terms) {\n      return "<li class=\\"no-results\\">\\n  " + this.results_none_found + " <span>" + (this.escape_html(terms)) + "</span>\\n</li>";\n    };\n\n    AbstractChosen.browser_is_supported = function() {\n      if ("Microsoft Internet Explorer" === window.navigator.appName) {\n        return document.documentMode >= 8;\n      }\n      if (/iP(od|hone)/i.test(window.navigator.userAgent) || /IEMobile/i.test(window.navigator.userAgent) || /Windows Phone/i.test(window.navigator.userAgent) || /BlackBerry/i.test(window.navigator.userAgent) || /BB10/i.test(window.navigator.userAgent) || /Android.*Mobile/i.test(window.navigator.userAgent)) {\n        return false;\n      }\n      return true;\n    };\n\n    AbstractChosen.default_multiple_text = "Select Some Options";\n\n    AbstractChosen.default_single_text = "Select an Option";\n\n    AbstractChosen.default_no_result_text = "No results match";\n\n    return AbstractChosen;\n\n  })();\n\n  $ = jQuery;\n\n  $.fn.extend({\n    chosen: function(options) {\n      if (!AbstractChosen.browser_is_supported()) {\n        return this;\n      }\n      return this.each(function(input_field) {\n        var $this, chosen;\n        $this = $(this);\n        chosen = $this.data(\'chosen\');\n        if (options === \'destroy\') {\n          if (chosen instanceof Chosen) {\n            chosen.destroy();\n          }\n          return;\n        }\n        if (!(chosen instanceof Chosen)) {\n          $this.data(\'chosen\', new Chosen(this, options));\n        }\n      });\n    }\n  });\n\n  Chosen = (function(superClass) {\n    extend(Chosen, superClass);\n\n    function Chosen() {\n      return Chosen.__super__.constructor.apply(this, arguments);\n    }\n\n    Chosen.prototype.setup = function() {\n      this.form_field_jq = $(this.form_field);\n      return this.current_selectedIndex = this.form_field.selectedIndex;\n    };\n\n    Chosen.prototype.set_up_html = function() {\n      var container_classes, container_props;\n      container_classes = ["chosen-container"];\n      container_classes.push("chosen-container-" + (this.is_multiple ? "multi" : "single"));\n      if (this.inherit_select_classes && this.form_field.className) {\n        container_classes.push(this.form_field.className);\n      }\n      if (this.is_rtl) {\n        container_classes.push("chosen-rtl");\n      }\n      container_props = {\n        \'class\': container_classes.join(\' \'),\n        \'title\': this.form_field.title\n      };\n      if (this.form_field.id.length) {\n        container_props.id = this.form_field.id.replace(/[^\\w]/g, \'_\') + "_chosen";\n      }\n      this.container = $("<div />", container_props);\n      this.container.width(this.container_width());\n      if (this.is_multiple) {\n        this.container.html(this.get_multi_html());\n      } else {\n        this.container.html(this.get_single_html());\n      }\n      this.form_field_jq.hide().after(this.container);\n      this.dropdown = this.container.find(\'div.chosen-drop\').first();\n      this.search_field = this.container.find(\'input\').first();\n      this.search_results = this.container.find(\'ul.chosen-results\').first();\n      this.search_field_scale();\n      this.search_no_results = this.container.find(\'li.no-results\').first();\n      if (this.is_multiple) {\n        this.search_choices = this.container.find(\'ul.chosen-choices\').first();\n        this.search_container = this.container.find(\'li.search-field\').first();\n      } else {\n        this.search_container = this.container.find(\'div.chosen-search\').first();\n        this.selected_item = this.container.find(\'.chosen-single\').first();\n      }\n      this.results_build();\n      this.set_tab_index();\n      return this.set_label_behavior();\n    };\n\n    Chosen.prototype.on_ready = function() {\n      return this.form_field_jq.trigger("chosen:ready", {\n        chosen: this\n      });\n    };\n\n    Chosen.prototype.register_observers = function() {\n      this.container.on(\'touchstart.chosen\', (function(_this) {\n        return function(evt) {\n          _this.container_mousedown(evt);\n        };\n      })(this));\n      this.container.on(\'touchend.chosen\', (function(_this) {\n        return function(evt) {\n          _this.container_mouseup(evt);\n        };\n      })(this));\n      this.container.on(\'mousedown.chosen\', (function(_this) {\n        return function(evt) {\n          _this.container_mousedown(evt);\n        };\n      })(this));\n      this.container.on(\'mouseup.chosen\', (function(_this) {\n        return function(evt) {\n          _this.container_mouseup(evt);\n        };\n      })(this));\n      this.container.on(\'mouseenter.chosen\', (function(_this) {\n        return function(evt) {\n          _this.mouse_enter(evt);\n        };\n      })(this));\n      this.container.on(\'mouseleave.chosen\', (function(_this) {\n        return function(evt) {\n          _this.mouse_leave(evt);\n        };\n      })(this));\n      this.search_results.on(\'mouseup.chosen\', (function(_this) {\n        return function(evt) {\n          _this.search_results_mouseup(evt);\n        };\n      })(this));\n      this.search_results.on(\'mouseover.chosen\', (function(_this) {\n        return function(evt) {\n          _this.search_results_mouseover(evt);\n        };\n      })(this));\n      this.search_results.on(\'mouseout.chosen\', (function(_this) {\n        return function(evt) {\n          _this.search_results_mouseout(evt);\n        };\n      })(this));\n      this.search_results.on(\'mousewheel.chosen DOMMouseScroll.chosen\', (function(_this) {\n        return function(evt) {\n          _this.search_results_mousewheel(evt);\n        };\n      })(this));\n      this.search_results.on(\'touchstart.chosen\', (function(_this) {\n        return function(evt) {\n          _this.search_results_touchstart(evt);\n        };\n      })(this));\n      this.search_results.on(\'touchmove.chosen\', (function(_this) {\n        return function(evt) {\n          _this.search_results_touchmove(evt);\n        };\n      })(this));\n      this.search_results.on(\'touchend.chosen\', (function(_this) {\n        return function(evt) {\n          _this.search_results_touchend(evt);\n        };\n      })(this));\n      this.form_field_jq.on("chosen:updated.chosen", (function(_this) {\n        return function(evt) {\n          _this.results_update_field(evt);\n        };\n      })(this));\n      this.form_field_jq.on("chosen:activate.chosen", (function(_this) {\n        return function(evt) {\n          _this.activate_field(evt);\n        };\n      })(this));\n      this.form_field_jq.on("chosen:open.chosen", (function(_this) {\n        return function(evt) {\n          _this.container_mousedown(evt);\n        };\n      })(this));\n      this.form_field_jq.on("chosen:close.chosen", (function(_this) {\n        return function(evt) {\n          _this.close_field(evt);\n        };\n      })(this));\n      this.search_field.on(\'blur.chosen\', (function(_this) {\n        return function(evt) {\n          _this.input_blur(evt);\n        };\n      })(this));\n      this.search_field.on(\'keyup.chosen\', (function(_this) {\n        return function(evt) {\n          _this.keyup_checker(evt);\n        };\n      })(this));\n      this.search_field.on(\'keydown.chosen\', (function(_this) {\n        return function(evt) {\n          _this.keydown_checker(evt);\n        };\n      })(this));\n      this.search_field.on(\'focus.chosen\', (function(_this) {\n        return function(evt) {\n          _this.input_focus(evt);\n        };\n      })(this));\n      this.search_field.on(\'cut.chosen\', (function(_this) {\n        return function(evt) {\n          _this.clipboard_event_checker(evt);\n        };\n      })(this));\n      this.search_field.on(\'paste.chosen\', (function(_this) {\n        return function(evt) {\n          _this.clipboard_event_checker(evt);\n        };\n      })(this));\n      if (this.is_multiple) {\n        return this.search_choices.on(\'click.chosen\', (function(_this) {\n          return function(evt) {\n            _this.choices_click(evt);\n          };\n        })(this));\n      } else {\n        return this.container.on(\'click.chosen\', function(evt) {\n          evt.preventDefault();\n        });\n      }\n    };\n\n    Chosen.prototype.destroy = function() {\n      $(this.container[0].ownerDocument).off(\'click.chosen\', this.click_test_action);\n      if (this.form_field_label.length > 0) {\n        this.form_field_label.off(\'click.chosen\');\n      }\n      if (this.search_field[0].tabIndex) {\n        this.form_field_jq[0].tabIndex = this.search_field[0].tabIndex;\n      }\n      this.container.remove();\n      this.form_field_jq.removeData(\'chosen\');\n      return this.form_field_jq.show();\n    };\n\n    Chosen.prototype.search_field_disabled = function() {\n      this.is_disabled = this.form_field.disabled || this.form_field_jq.parents(\'fieldset\').is(\':disabled\');\n      this.container.toggleClass(\'chosen-disabled\', this.is_disabled);\n      this.search_field[0].disabled = this.is_disabled;\n      if (!this.is_multiple) {\n        this.selected_item.off(\'focus.chosen\', this.activate_field);\n      }\n      if (this.is_disabled) {\n        return this.close_field();\n      } else if (!this.is_multiple) {\n        return this.selected_item.on(\'focus.chosen\', this.activate_field);\n      }\n    };\n\n    Chosen.prototype.container_mousedown = function(evt) {\n      var ref;\n      if (this.is_disabled) {\n        return;\n      }\n      if (evt && ((ref = evt.type) === \'mousedown\' || ref === \'touchstart\') && !this.results_showing) {\n        evt.preventDefault();\n      }\n      if (!((evt != null) && ($(evt.target)).hasClass("search-choice-close"))) {\n        if (!this.active_field) {\n          if (this.is_multiple) {\n            this.search_field.val("");\n          }\n          $(this.container[0].ownerDocument).on(\'click.chosen\', this.click_test_action);\n          this.results_show();\n        } else if (!this.is_multiple && evt && (($(evt.target)[0] === this.selected_item[0]) || $(evt.target).parents("a.chosen-single").length)) {\n          evt.preventDefault();\n          this.results_toggle();\n        }\n        return this.activate_field();\n      }\n    };\n\n    Chosen.prototype.container_mouseup = function(evt) {\n      if (evt.target.nodeName === "ABBR" && !this.is_disabled) {\n        return this.results_reset(evt);\n      }\n    };\n\n    Chosen.prototype.search_results_mousewheel = function(evt) {\n      var delta;\n      if (evt.originalEvent) {\n        delta = evt.originalEvent.deltaY || -evt.originalEvent.wheelDelta || evt.originalEvent.detail;\n      }\n      if (delta != null) {\n        evt.preventDefault();\n        if (evt.type === \'DOMMouseScroll\') {\n          delta = delta * 40;\n        }\n        return this.search_results.scrollTop(delta + this.search_results.scrollTop());\n      }\n    };\n\n    Chosen.prototype.blur_test = function(evt) {\n      if (!this.active_field && this.container.hasClass("chosen-container-active")) {\n        return this.close_field();\n      }\n    };\n\n    Chosen.prototype.close_field = function() {\n      $(this.container[0].ownerDocument).off("click.chosen", this.click_test_action);\n      this.active_field = false;\n      this.results_hide();\n      this.container.removeClass("chosen-container-active");\n      this.clear_backstroke();\n      this.show_search_field_default();\n      this.search_field_scale();\n      return this.search_field.blur();\n    };\n\n    Chosen.prototype.activate_field = function() {\n      if (this.is_disabled) {\n        return;\n      }\n      this.container.addClass("chosen-container-active");\n      this.active_field = true;\n      this.search_field.val(this.search_field.val());\n      return this.search_field.focus();\n    };\n\n    Chosen.prototype.test_active_click = function(evt) {\n      var active_container;\n      active_container = $(evt.target).closest(\'.chosen-container\');\n      if (active_container.length && this.container[0] === active_container[0]) {\n        return this.active_field = true;\n      } else {\n        return this.close_field();\n      }\n    };\n\n    Chosen.prototype.results_build = function() {\n      this.parsing = true;\n      this.selected_option_count = null;\n      this.results_data = SelectParser.select_to_array(this.form_field);\n      if (this.is_multiple) {\n        this.search_choices.find("li.search-choice").remove();\n      } else {\n        this.single_set_selected_text();\n        if (this.disable_search || this.form_field.options.length <= this.disable_search_threshold) {\n          this.search_field[0].readOnly = true;\n          this.container.addClass("chosen-container-single-nosearch");\n        } else {\n          this.search_field[0].readOnly = false;\n          this.container.removeClass("chosen-container-single-nosearch");\n        }\n      }\n      this.update_results_content(this.results_option_build({\n        first: true\n      }));\n      this.search_field_disabled();\n      this.show_search_field_default();\n      this.search_field_scale();\n      return this.parsing = false;\n    };\n\n    Chosen.prototype.result_do_highlight = function(el) {\n      var high_bottom, high_top, maxHeight, visible_bottom, visible_top;\n      if (el.length) {\n        this.result_clear_highlight();\n        this.result_highlight = el;\n        this.result_highlight.addClass("highlighted");\n        maxHeight = parseInt(this.search_results.css("maxHeight"), 10);\n        visible_top = this.search_results.scrollTop();\n        visible_bottom = maxHeight + visible_top;\n        high_top = this.result_highlight.position().top + this.search_results.scrollTop();\n        high_bottom = high_top + this.result_highlight.outerHeight();\n        if (high_bottom >= visible_bottom) {\n          return this.search_results.scrollTop((high_bottom - maxHeight) > 0 ? high_bottom - maxHeight : 0);\n        } else if (high_top < visible_top) {\n          return this.search_results.scrollTop(high_top);\n        }\n      }\n    };\n\n    Chosen.prototype.result_clear_highlight = function() {\n      if (this.result_highlight) {\n        this.result_highlight.removeClass("highlighted");\n      }\n      return this.result_highlight = null;\n    };\n\n    Chosen.prototype.results_show = function() {\n      if (this.is_multiple && this.max_selected_options <= this.choices_count()) {\n        this.form_field_jq.trigger("chosen:maxselected", {\n          chosen: this\n        });\n        return false;\n      }\n      this.container.addClass("chosen-with-drop");\n      this.results_showing = true;\n      this.search_field.focus();\n      this.search_field.val(this.get_search_field_value());\n      this.winnow_results();\n      return this.form_field_jq.trigger("chosen:showing_dropdown", {\n        chosen: this\n      });\n    };\n\n    Chosen.prototype.update_results_content = function(content) {\n      return this.search_results.html(content);\n    };\n\n    Chosen.prototype.results_hide = function() {\n      if (this.results_showing) {\n        this.result_clear_highlight();\n        this.container.removeClass("chosen-with-drop");\n        this.form_field_jq.trigger("chosen:hiding_dropdown", {\n          chosen: this\n        });\n      }\n      return this.results_showing = false;\n    };\n\n    Chosen.prototype.set_tab_index = function(el) {\n      var ti;\n      if (this.form_field.tabIndex) {\n        ti = this.form_field.tabIndex;\n        this.form_field.tabIndex = -1;\n        return this.search_field[0].tabIndex = ti;\n      }\n    };\n\n    Chosen.prototype.set_label_behavior = function() {\n      this.form_field_label = this.form_field_jq.parents("label");\n      if (!this.form_field_label.length && this.form_field.id.length) {\n        this.form_field_label = $("label[for=\'" + this.form_field.id + "\']");\n      }\n      if (this.form_field_label.length > 0) {\n        return this.form_field_label.on(\'click.chosen\', this.label_click_handler);\n      }\n    };\n\n    Chosen.prototype.show_search_field_default = function() {\n      if (this.is_multiple && this.choices_count() < 1 && !this.active_field) {\n        this.search_field.val(this.default_text);\n        return this.search_field.addClass("default");\n      } else {\n        this.search_field.val("");\n        return this.search_field.removeClass("default");\n      }\n    };\n\n    Chosen.prototype.search_results_mouseup = function(evt) {\n      var target;\n      target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();\n      if (target.length) {\n        this.result_highlight = target;\n        this.result_select(evt);\n        return this.search_field.focus();\n      }\n    };\n\n    Chosen.prototype.search_results_mouseover = function(evt) {\n      var target;\n      target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();\n      if (target) {\n        return this.result_do_highlight(target);\n      }\n    };\n\n    Chosen.prototype.search_results_mouseout = function(evt) {\n      if ($(evt.target).hasClass("active-result") || $(evt.target).parents(\'.active-result\').first()) {\n        return this.result_clear_highlight();\n      }\n    };\n\n    Chosen.prototype.choice_build = function(item) {\n      var choice, close_link;\n      choice = $(\'<li />\', {\n        "class": "search-choice"\n      }).html("<span>" + (this.choice_label(item)) + "</span>");\n      if (item.disabled) {\n        choice.addClass(\'search-choice-disabled\');\n      } else {\n        close_link = $(\'<a />\', {\n          "class": \'search-choice-close\',\n          \'data-option-array-index\': item.array_index\n        });\n        close_link.on(\'click.chosen\', (function(_this) {\n          return function(evt) {\n            return _this.choice_destroy_link_click(evt);\n          };\n        })(this));\n        choice.append(close_link);\n      }\n      return this.search_container.before(choice);\n    };\n\n    Chosen.prototype.choice_destroy_link_click = function(evt) {\n      evt.preventDefault();\n      evt.stopPropagation();\n      if (!this.is_disabled) {\n        return this.choice_destroy($(evt.target));\n      }\n    };\n\n    Chosen.prototype.choice_destroy = function(link) {\n      if (this.result_deselect(link[0].getAttribute("data-option-array-index"))) {\n        if (this.active_field) {\n          this.search_field.focus();\n        } else {\n          this.show_search_field_default();\n        }\n        if (this.is_multiple && this.choices_count() > 0 && this.get_search_field_value().length < 1) {\n          this.results_hide();\n        }\n        link.parents(\'li\').first().remove();\n        return this.search_field_scale();\n      }\n    };\n\n    Chosen.prototype.results_reset = function() {\n      this.reset_single_select_options();\n      this.form_field.options[0].selected = true;\n      this.single_set_selected_text();\n      this.show_search_field_default();\n      this.results_reset_cleanup();\n      this.trigger_form_field_change();\n      if (this.active_field) {\n        return this.results_hide();\n      }\n    };\n\n    Chosen.prototype.results_reset_cleanup = function() {\n      this.current_selectedIndex = this.form_field.selectedIndex;\n      return this.selected_item.find("abbr").remove();\n    };\n\n    Chosen.prototype.result_select = function(evt) {\n      var high, item;\n      if (this.result_highlight) {\n        high = this.result_highlight;\n        this.result_clear_highlight();\n        if (this.is_multiple && this.max_selected_options <= this.choices_count()) {\n          this.form_field_jq.trigger("chosen:maxselected", {\n            chosen: this\n          });\n          return false;\n        }\n        if (this.is_multiple) {\n          high.removeClass("active-result");\n        } else {\n          this.reset_single_select_options();\n        }\n        high.addClass("result-selected");\n        item = this.results_data[high[0].getAttribute("data-option-array-index")];\n        item.selected = true;\n        this.form_field.options[item.options_index].selected = true;\n        this.selected_option_count = null;\n        if (this.is_multiple) {\n          this.choice_build(item);\n        } else {\n          this.single_set_selected_text(this.choice_label(item));\n        }\n        if (this.is_multiple && (!this.hide_results_on_select || (evt.metaKey || evt.ctrlKey))) {\n          if (evt.metaKey || evt.ctrlKey) {\n            this.winnow_results({\n              skip_highlight: true\n            });\n          } else {\n            this.search_field.val("");\n            this.winnow_results();\n          }\n        } else {\n          this.results_hide();\n          this.show_search_field_default();\n        }\n        if (this.is_multiple || this.form_field.selectedIndex !== this.current_selectedIndex) {\n          this.trigger_form_field_change({\n            selected: this.form_field.options[item.options_index].value\n          });\n        }\n        this.current_selectedIndex = this.form_field.selectedIndex;\n        evt.preventDefault();\n        return this.search_field_scale();\n      }\n    };\n\n    Chosen.prototype.single_set_selected_text = function(text) {\n      if (text == null) {\n        text = this.default_text;\n      }\n      if (text === this.default_text) {\n        this.selected_item.addClass("chosen-default");\n      } else {\n        this.single_deselect_control_build();\n        this.selected_item.removeClass("chosen-default");\n      }\n      return this.selected_item.find("span").html(text);\n    };\n\n    Chosen.prototype.result_deselect = function(pos) {\n      var result_data;\n      result_data = this.results_data[pos];\n      if (!this.form_field.options[result_data.options_index].disabled) {\n        result_data.selected = false;\n        this.form_field.options[result_data.options_index].selected = false;\n        this.selected_option_count = null;\n        this.result_clear_highlight();\n        if (this.results_showing) {\n          this.winnow_results();\n        }\n        this.trigger_form_field_change({\n          deselected: this.form_field.options[result_data.options_index].value\n        });\n        this.search_field_scale();\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    Chosen.prototype.single_deselect_control_build = function() {\n      if (!this.allow_single_deselect) {\n        return;\n      }\n      if (!this.selected_item.find("abbr").length) {\n        this.selected_item.find("span").first().after("<abbr class=\\"search-choice-close\\"></abbr>");\n      }\n      return this.selected_item.addClass("chosen-single-with-deselect");\n    };\n\n    Chosen.prototype.get_search_field_value = function() {\n      return this.search_field.val();\n    };\n\n    Chosen.prototype.get_search_text = function() {\n      return $.trim(this.get_search_field_value());\n    };\n\n    Chosen.prototype.escape_html = function(text) {\n      return $(\'<div/>\').text(text).html();\n    };\n\n    Chosen.prototype.winnow_results_set_highlight = function() {\n      var do_high, selected_results;\n      selected_results = !this.is_multiple ? this.search_results.find(".result-selected.active-result") : [];\n      do_high = selected_results.length ? selected_results.first() : this.search_results.find(".active-result").first();\n      if (do_high != null) {\n        return this.result_do_highlight(do_high);\n      }\n    };\n\n    Chosen.prototype.no_results = function(terms) {\n      var no_results_html;\n      no_results_html = this.get_no_results_html(terms);\n      this.search_results.append(no_results_html);\n      return this.form_field_jq.trigger("chosen:no_results", {\n        chosen: this\n      });\n    };\n\n    Chosen.prototype.no_results_clear = function() {\n      return this.search_results.find(".no-results").remove();\n    };\n\n    Chosen.prototype.keydown_arrow = function() {\n      var next_sib;\n      if (this.results_showing && this.result_highlight) {\n        next_sib = this.result_highlight.nextAll("li.active-result").first();\n        if (next_sib) {\n          return this.result_do_highlight(next_sib);\n        }\n      } else {\n        return this.results_show();\n      }\n    };\n\n    Chosen.prototype.keyup_arrow = function() {\n      var prev_sibs;\n      if (!this.results_showing && !this.is_multiple) {\n        return this.results_show();\n      } else if (this.result_highlight) {\n        prev_sibs = this.result_highlight.prevAll("li.active-result");\n        if (prev_sibs.length) {\n          return this.result_do_highlight(prev_sibs.first());\n        } else {\n          if (this.choices_count() > 0) {\n            this.results_hide();\n          }\n          return this.result_clear_highlight();\n        }\n      }\n    };\n\n    Chosen.prototype.keydown_backstroke = function() {\n      var next_available_destroy;\n      if (this.pending_backstroke) {\n        this.choice_destroy(this.pending_backstroke.find("a").first());\n        return this.clear_backstroke();\n      } else {\n        next_available_destroy = this.search_container.siblings("li.search-choice").last();\n        if (next_available_destroy.length && !next_available_destroy.hasClass("search-choice-disabled")) {\n          this.pending_backstroke = next_available_destroy;\n          if (this.single_backstroke_delete) {\n            return this.keydown_backstroke();\n          } else {\n            return this.pending_backstroke.addClass("search-choice-focus");\n          }\n        }\n      }\n    };\n\n    Chosen.prototype.clear_backstroke = function() {\n      if (this.pending_backstroke) {\n        this.pending_backstroke.removeClass("search-choice-focus");\n      }\n      return this.pending_backstroke = null;\n    };\n\n    Chosen.prototype.search_field_scale = function() {\n      var div, i, len, style, style_block, styles, width;\n      if (!this.is_multiple) {\n        return;\n      }\n      style_block = {\n        position: \'absolute\',\n        left: \'-1000px\',\n        top: \'-1000px\',\n        display: \'none\',\n        whiteSpace: \'pre\'\n      };\n      styles = [\'fontSize\', \'fontStyle\', \'fontWeight\', \'fontFamily\', \'lineHeight\', \'textTransform\', \'letterSpacing\'];\n      for (i = 0, len = styles.length; i < len; i++) {\n        style = styles[i];\n        style_block[style] = this.search_field.css(style);\n      }\n      div = $(\'<div />\').css(style_block);\n      div.text(this.get_search_field_value());\n      $(\'body\').append(div);\n      width = div.width() + 25;\n      div.remove();\n      if (this.container.is(\':visible\')) {\n        width = Math.min(this.container.outerWidth() - 10, width);\n      }\n      return this.search_field.width(width);\n    };\n\n    Chosen.prototype.trigger_form_field_change = function(extra) {\n      this.form_field_jq.trigger("input", extra);\n      return this.form_field_jq.trigger("change", extra);\n    };\n\n    return Chosen;\n\n  })(AbstractChosen);\n\n}).call(this);\n';
    loader.global.define = undefined;
    loader.global.module = undefined;
    loader.global.exports = undefined;
    loader.__exec({
        'source': source,
        'address': module.uri
    });
    loader.global.require = require;
    loader.global.define = define;
    return loader.get('@@global-helpers').retrieveGlobal(module.id, undefined);
});
/*app/form/administration/users_directory/settings*/
define('app/form/administration/users_directory/settings', [
    'exports',
    'passbolt-mad/form/feedback',
    'passbolt-mad/form/form',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/form/element/radio',
    'can-dom-events',
    'passbolt-mad/form/element/dropdown',
    'app/view/template/form/administration/users_directory/settings.stache!',
    'passbolt-mad/form/element/textbox',
    'passbolt-mad/form/element/toggle_button',
    'chosen-js/chosen.jquery'
], function (exports, _feedback, _form, _i18n, _radio, _canDomEvents, _dropdown, _settings, _textbox, _toggle_button) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _feedback2 = _interopRequireDefault(_feedback);
    var _form2 = _interopRequireDefault(_form);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _radio2 = _interopRequireDefault(_radio);
    var _canDomEvents2 = _interopRequireDefault(_canDomEvents);
    var _dropdown2 = _interopRequireDefault(_dropdown);
    var _settings2 = _interopRequireDefault(_settings);
    var _textbox2 = _interopRequireDefault(_textbox);
    var _toggle_button2 = _interopRequireDefault(_toggle_button);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var UsersDirectorySettingsForm = _form2.default.extend('passbolt.form.administration.users_directory.Settings', {
        defaults: {
            template: _settings2.default,
            silentLoading: false,
            loadedOnStart: false,
            defaultAdmin: null,
            defaultGroupAdmin: null
        }
    }, {
        init: function init(el, options) {
            this._super(el, options);
            this.usersDirectorySettings = null;
            this.users = null;
        },
        afterStart: function afterStart() {
            this._initForm(this.usersDirectorySettings);
            this._super();
        },
        isEnabled: function isEnabled() {
            return this.enabled;
        },
        _initForm: function _initForm() {
            this._initFormGeneralSwitch();
            this._initFormCredantialsSection();
            this._initFormDirectorySection();
            this._initFormSynchronisationSection();
        },
        loadForm: function loadForm(usersDirectorySettings, users) {
            this.usersDirectorySettings = usersDirectorySettings;
            this.users = users;
            this.load({ 'UsersDirectorySettings': this.usersDirectorySettings });
            this._initGeneralSwitch();
            this._enableFormFields();
            this._initChoosenFields();
            this.state.loaded = true;
            this.enabled = usersDirectorySettings.isEnabled();
        },
        _initGeneralSwitch: function _initGeneralSwitch() {
            if (this.usersDirectorySettings.isEnabled()) {
                $('.ldap-settings').addClass('enabled');
                this.generalToggleButton.setValue(true);
            } else {
                $('.ldap-settings').removeClass('enabled');
                this.generalToggleButton.setValue(false);
            }
        },
        _enableFormFields: function _enableFormFields() {
            for (var i in this.elements) {
                this.elements[i].state.disabled = false;
            }
        },
        _initChoosenFields: function _initChoosenFields() {
            var $connectionChosenField = $('#js-connection-connection-type-input');
            var $adminChosenField = $('#js-default-user-select');
            var $groupAdminChosenField = $('#js-default-group-admin-user-select');
            $connectionChosenField.chosen({
                width: '100%',
                disable_search: true
            }).change(function () {
                var value = $connectionChosenField.val();
                _canDomEvents2.default.dispatch($connectionChosenField[0], {
                    type: 'changed',
                    data: { value: value }
                });
            });
            var admins = this.users.filter(function (user) {
                return user.role.name == 'admin';
            }).reduce(function (carry, user) {
                carry[user.id] = user.profile.fullName() + ' (' + user.username + ')';
                return carry;
            }, {});
            this.defaultUserDropdown.setAvailableValues(admins);
            var defaultAdmin = this.usersDirectorySettings.default_user ? this.usersDirectorySettings.default_user : this.options.defaultAdmin;
            this.defaultUserDropdown.setValue(defaultAdmin);
            $adminChosenField.chosen({ width: '80%' }).change(function () {
                var value = $adminChosenField.val();
                _canDomEvents2.default.dispatch($adminChosenField[0], {
                    type: 'changed',
                    data: { value: value }
                });
            });
            $adminChosenField.val(defaultAdmin).trigger('chosen:updated');
            var users = this.users.reduce(function (carry, user) {
                carry[user.id] = user.profile.fullName() + ' (' + user.username + ')';
                return carry;
            }, {});
            this.defaultGroupAdminUserDropdown.setAvailableValues(users);
            var defaultGroupAdmin = this.usersDirectorySettings.default_group_admin_user ? this.usersDirectorySettings.default_group_admin_user : this.options.defaultGroupAdmin;
            this.defaultGroupAdminUserDropdown.setValue(defaultGroupAdmin);
            $groupAdminChosenField.chosen({ width: '80%' }).change(function () {
                var value = $groupAdminChosenField.val();
                _canDomEvents2.default.dispatch($groupAdminChosenField[0], {
                    type: 'changed',
                    data: { value: value }
                });
            });
            $groupAdminChosenField.val(defaultGroupAdmin).trigger('chosen:updated');
        },
        _initFormGeneralSwitch: function _initFormGeneralSwitch() {
            this.generalToggleButton = this.addElement(new _toggle_button2.default('#js-ldap-toggle-button', {
                modelReference: 'UsersDirectorySettings.enabled',
                label: null,
                state: { disabled: true },
                validate: false
            }).start());
        },
        _initFormCredantialsSection: function _initFormCredantialsSection() {
            this.directoryTypeRadio = this.addElement(new _radio2.default('#js-directory-type-radio', {
                modelReference: 'UsersDirectorySettings.directory_type',
                state: { disabled: true },
                availableValues: {
                    'ad': __('Active Directory'),
                    'openldap': 'Open Ldap'
                },
                value: 'ad'
            }).start());
            this.addElement(new _textbox2.default('#js-domain-name-input', {
                modelReference: 'UsersDirectorySettings.domain_name',
                state: { disabled: true }
            }).start(), new _feedback2.default('#js-domain-name-input-feedback', {}).start());
            this.addElement(new _dropdown2.default('#js-connection-connection-type-input', {
                modelReference: 'UsersDirectorySettings.connection_type',
                state: { disabled: true },
                availableValues: {
                    'plain': 'ldap://',
                    'ssl': 'ldaps:// (ssl)',
                    'tls': 'ldaps:// (tls)'
                },
                value: 'plain',
                emptyValue: false
            }).start());
            this.addElement(new _textbox2.default('#js-server-input', {
                modelReference: 'UsersDirectorySettings.server',
                state: { disabled: true }
            }).start(), new _feedback2.default('#js-server-input-feedback', {}).start());
            this.addElement(new _textbox2.default('#js-port-input', {
                modelReference: 'UsersDirectorySettings.port',
                state: { disabled: true },
                value: 389
            }).start(), new _feedback2.default('#js-port-input-feedback', {}).start());
            this.addElement(new _textbox2.default('#js-username-input', {
                modelReference: 'UsersDirectorySettings.username',
                state: { disabled: true }
            }).start(), new _feedback2.default('#js-username-input-feedback', {}).start());
            this.addElement(new _textbox2.default('#js-password-input', {
                modelReference: 'UsersDirectorySettings.password',
                state: { disabled: true }
            }).start(), new _feedback2.default('#js-password-input-feedback', {}).start());
            this.addElement(new _textbox2.default('#js-base-dn-input', {
                modelReference: 'UsersDirectorySettings.base_dn',
                state: { disabled: true }
            }).start(), new _feedback2.default('#js-base-dn-input-feedback', {}).start());
        },
        _initFormDirectorySection: function _initFormDirectorySection() {
            this.addElement(new _textbox2.default('#js-group-path-input', {
                modelReference: 'UsersDirectorySettings.group_path',
                state: { disabled: true }
            }).start(), new _feedback2.default('#js-group-path-input-feedback', {}).start());
            this.addElement(new _textbox2.default('#js-user-path-input', {
                modelReference: 'UsersDirectorySettings.user_path',
                state: { disabled: true }
            }).start(), new _feedback2.default('#js-user-path-input-feedback', {}).start());
            this.addElement(new _textbox2.default('#js-group-object-class-input', {
                modelReference: 'UsersDirectorySettings.group_object_class',
                state: { disabled: true }
            }).start(), new _feedback2.default('#js-group-object-class-input-feedback', {}).start());
            this.addElement(new _textbox2.default('#js-user-object-class-input', {
                modelReference: 'UsersDirectorySettings.user_object_class',
                state: { disabled: true }
            }).start(), new _feedback2.default('#js-user-object-class-input-feedback', {}).start());
        },
        _initFormSynchronisationSection: function _initFormSynchronisationSection() {
            this.defaultUserDropdown = this.addElement(new _dropdown2.default('#js-default-user-select', {
                modelReference: 'UsersDirectorySettings.default_user',
                state: { disabled: true },
                availableValues: this._admins
            }).start(), new _feedback2.default('#js-default-user-select-feedback', {}).start());
            this.defaultGroupAdminUserDropdown = this.addElement(new _dropdown2.default('#js-default-group-admin-user-select', {
                modelReference: 'UsersDirectorySettings.default_group_admin_user',
                state: { disabled: true },
                availableValues: this._users
            }).start(), new _feedback2.default('#js-default-group-admin-user-select-feedback', {}).start());
            this.addElement(new _textbox2.default('#js-groups-parent-group-input', {
                modelReference: 'UsersDirectorySettings.groups_parent_group',
                state: { disabled: true }
            }).start(), new _feedback2.default('#js-groups-parent-group-input-feedback', {}).start());
            this.addElement(new _textbox2.default('#js-users-parent-group-input', {
                modelReference: 'UsersDirectorySettings.users_parent_group',
                state: { disabled: true }
            }).start(), new _feedback2.default('#js-users-parent-group-input-feedback', {}).start());
            this.addElement(new _toggle_button2.default('#js-enabled-users-only-toggle-button', {
                label: __('Only for AD. Synchronize only the users that are enabled'),
                modelReference: 'UsersDirectorySettings.enabled_users_only',
                state: { disabled: true },
                value: true
            }).start());
            this.addElement(new _toggle_button2.default('#js-sync-users-create-toggle-button', {
                label: __('Create users'),
                modelReference: 'UsersDirectorySettings.sync_users_create',
                state: { disabled: true },
                value: true
            }).start());
            this.addElement(new _toggle_button2.default('#js-sync-users-delete-toggle-button', {
                label: __('Delete users'),
                modelReference: 'UsersDirectorySettings.sync_users_delete',
                state: { disabled: true },
                value: true
            }).start());
            this.addElement(new _toggle_button2.default('#js-sync-groups-create-toggle-button', {
                label: __('Create groups'),
                modelReference: 'UsersDirectorySettings.sync_groups_create',
                state: { disabled: true },
                value: true
            }).start());
            this.addElement(new _toggle_button2.default('#js-sync-groups-delete-toggle-button', {
                label: __('Delete groups'),
                modelReference: 'UsersDirectorySettings.sync_groups_delete',
                state: { disabled: true },
                value: true
            }).start());
            this.addElement(new _toggle_button2.default('#js-sync-groups-update-toggle-button', {
                label: __('Update groups'),
                modelReference: 'UsersDirectorySettings.sync_groups_update',
                state: { disabled: true },
                value: true
            }).start());
        },
        showFieldsForDirectoryType: function showFieldsForDirectoryType(directoryType) {
            $('.section-directory-configuration .accordion-content div.input, .section-sync-options .accordion-content div.input').each(function (i, elt) {
                if (!$(elt).hasClass(directoryType)) {
                    $(elt).hide();
                } else {
                    $(elt).show();
                }
            });
        },
        '{element} #js-ldap-toggle-button changed': function elementJsLdapToggleButtonChanged(el, ev) {
            var enabled = ev.data.value;
            if (enabled) {
                $('.ldap-settings').addClass('enabled');
            } else {
                $('.ldap-settings').removeClass('enabled');
            }
            this.enabled = enabled;
        }
    });
    exports.default = UsersDirectorySettingsForm;
});
/*passbolt-mad@2.10.0#util/map/map*/
define('passbolt-mad@2.10.0#util/map/map', [
    'exports',
    'can-construct'
], function (exports, _canConstruct) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canConstruct2 = _interopRequireDefault(_canConstruct);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
    };
    var MadMap = _canConstruct2.default.extend('mad.Map', {
        mapObject: function mapObject(object, map) {
            console.warn('Please call the function mapObject directly on the map object.');
            return map.mapObject(object);
        },
        mapObjects: function mapObjects(arr, map) {
            console.warn('Please call the function mapObject directly on the map object.');
            return map.mapObjects(arr);
        }
    }, {
        map: {},
        init: function init(map) {
            this.map = map;
        },
        _getObjFieldPointer: function _getObjFieldPointer(object, key) {
            var returnValue = object;
            var split = key.split('.');
            for (var i = 0; i < split.length; i++) {
                if (returnValue[split[i]] === undefined) {
                    return null;
                }
                returnValue = returnValue[split[i]];
            }
            return returnValue;
        },
        mapObject: function mapObject(object) {
            var returnValue = {};
            for (var key in this.map) {
                var mapKeyElts = key.split('.');
                var current = returnValue;
                var position = 0;
                for (var i in mapKeyElts) {
                    var mapKeyElt = mapKeyElts[i];
                    if (position == mapKeyElts.length - 1) {
                        if (_typeof(this.map[key]) == 'object') {
                            var func = this.map[key].func;
                            var keyToMap = this.map[key].key;
                            var objectFieldToMap = this._getObjFieldPointer(object, keyToMap);
                            if (objectFieldToMap != null) {
                                current[mapKeyElt] = func(objectFieldToMap, this, object, returnValue);
                            }
                        } else {
                            var _objectFieldToMap = this._getObjFieldPointer(object, this.map[key]);
                            if (_objectFieldToMap != null) {
                                current[mapKeyElt] = _objectFieldToMap;
                            }
                        }
                    } else {
                        if (typeof current[mapKeyElt] == 'undefined') {
                            current[mapKeyElt] = [];
                        }
                        current = current[mapKeyElt];
                    }
                    position++;
                }
            }
            return returnValue;
        },
        mapObjects: function mapObjects(data) {
            var self = this;
            var returnValue = [];
            data.forEach(function (elt, i) {
                returnValue[i] = self.mapObject(elt);
            });
            return returnValue;
        }
    });
    exports.default = MadMap;
});
/*passbolt-mad@2.10.0#view/component/tree*/
define('passbolt-mad@2.10.0#view/component/tree', [
    'exports',
    'can-dom-data',
    'can-dom-events',
    'passbolt-mad/view/view',
    'passbolt-mad/helper/html'
], function (exports, _canDomData, _canDomEvents, _view, _html) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canDomData2 = _interopRequireDefault(_canDomData);
    var _canDomEvents2 = _interopRequireDefault(_canDomEvents);
    var _view2 = _interopRequireDefault(_view);
    var _html2 = _interopRequireDefault(_html);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Tree = _view2.default.extend('mad.view.component.Tree', {}, {
        getItemElement: function getItemElement(item) {
            var control = this.getController();
            return $('#' + control.options.prefixItemId + item.id, this.element);
        },
        insertItem: function insertItem(item, refItem, position) {
            position = position || 'last';
            var $item = null;
            var $refElement = null;
            var itemRender = '';
            var control = this.getController();
            var mappedItem = control.getMap().mapObject(item);
            if (control.options.prefixItemId != '' && control.options.prefixItemId != undefined) {
                mappedItem.id = control.options.prefixItemId + mappedItem.id;
            }
            control.setViewData('mappedItem', mappedItem);
            var hasChildren = mappedItem.children && mappedItem.children.length ? true : false;
            control.setViewData('hasChildren', hasChildren);
            var cssClasses = [];
            if (typeof mappedItem['cssClasses'] != 'undefined') {
                cssClasses = cssClasses.concat(mappedItem['cssClasses']);
            }
            control.setViewData('cssClasses', cssClasses);
            if (refItem !== undefined && refItem !== null) {
                $refElement = this.getItemElement(refItem);
                if (!$refElement.length) {
                    throw new mad.Exception.get('No HTMLElement found for the given item (%0).', [refItem.id]);
                }
                switch (position) {
                case 'first':
                case 'last':
                case 'inside': {
                        var $refList = $refElement.find('ul:first');
                        if (!$refList.length) {
                            $refElement = $('<ul></ul>').appendTo($refElement);
                        } else {
                            $refElement = $refList;
                        }
                        break;
                    }
                case 'before':
                case 'after': {
                        break;
                    }
                }
            } else {
                $refElement = this.element;
            }
            itemRender = _view2.default.render(control.options.itemTemplate, control.getViewData());
            $item = _html2.default.create($refElement, position, itemRender);
            _canDomData2.default.set($item[0], control.getItemClass().shortName, item);
            return $item;
        },
        removeItem: function removeItem(item) {
            this.getItemElement(item).remove();
        },
        refreshItem: function refreshItem(item) {
            var self = this;
            var $item = this.getItemElement(item);
            var control = this.getController();
            var mappedItem = control.getMap().mapObject(item);
            mappedItem.id = control.options.prefixItemId + mappedItem.id;
            control.setViewData('mappedItem', mappedItem);
            var hasChildren = mappedItem.children && mappedItem.children.length ? true : false;
            control.setViewData('hasChildren', hasChildren);
            var cssClasses = [];
            if (typeof mappedItem['cssClasses'] != 'undefined') {
                cssClasses = cssClasses.concat(mappedItem['cssClasses']);
            }
            control.setViewData('cssClasses', cssClasses);
            var itemRender = _view2.default.render(control.options.itemTemplate, control.getViewData());
            $item.replaceWith(itemRender);
            $item = this.getItemElement(item);
            _canDomData2.default.set($item[0], control.getItemClass().shortName, item);
            if (hasChildren) {
                item.children.forEach(function (item) {
                    self.insertItem(item, mappedItem.id, 'last');
                });
            }
            return $item;
        },
        reset: function reset() {
            if (!this.element) {
                return;
            }
            $('li', this.element).remove();
        },
        selectItem: function selectItem(item) {
            this.unselectAll();
            var $item = this.getItemElement(item);
            $('.row:first', $item).addClass('selected');
        },
        unselectItem: function unselectItem(item) {
            var $item = this.getItemElement(item);
            $item.removeClass('selected');
        },
        unselectAll: function unselectAll() {
            $('.row.selected', this.element).removeClass('selected');
        },
        rightSelectItem: function rightSelectItem(item) {
        },
        hoverItem: function hoverItem(item, el, ev) {
        },
        '{element} li .main-cell a click': function elementLiMainCellAClick(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            var data = null;
            var li = $(el).parents('li:first');
            var itemClass = this.getController().getItemClass();
            if (itemClass) {
                data = _canDomData2.default.get(li[0], itemClass.shortName);
            } else {
                data = li[0].id;
            }
            _canDomEvents2.default.dispatch(this.element, {
                type: 'item_selected',
                data: {
                    item: data,
                    srcEv: ev
                }
            });
            return false;
        },
        '{element} li a contextmenu': function elementLiAContextmenu(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            if (ev.which == 3) {
                var data = null;
                var li = $(el).parents('li:first');
                var itemClass = this.getController().getItemClass();
                if (itemClass) {
                    data = _canDomData2.default.get(li[0], itemClass.shortName);
                } else {
                    data = li[0].id;
                }
                _canDomEvents2.default.dispatch(this.element, {
                    type: 'item_right_selected',
                    data: {
                        item: data,
                        srcEv: ev
                    }
                });
            }
            return false;
        },
        '{element} li a hover': function elementLiAHover(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            var data = null;
            var li = el.parents('li:first');
            var itemClass = this.getController().getItemClass();
            if (itemClass) {
                data = _canDomData2.default.get(li[0], itemClass.shortName);
            } else {
                data = li[0].id;
            }
            _canDomEvents2.default.dispatch(this.element, {
                type: 'item_hovered',
                data: {
                    item: data,
                    srcEv: ev
                }
            });
            return false;
        }
    });
    exports.default = Tree;
});
/*passbolt-mad@2.10.0#view/template/component/tree/treeItem.stache!steal-stache@4.1.2#steal-stache*/
define('passbolt-mad@2.10.0#view/template/component/tree/treeItem.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('view/template/component/tree/treeItem.stache', [
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.id ',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' cssClasses ',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'row',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'main-cell-wrapper',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'main-cell',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.label ',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#hasChildren',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                12
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/hasChildren',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                15
            ]
        },
        {
            'tokenType': 'done',
            'args': [16]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*passbolt-mad@2.10.0#component/tree*/
define('passbolt-mad@2.10.0#component/tree', [
    'exports',
    'passbolt-mad/component/component',
    'passbolt-mad/util/map/map',
    'passbolt-mad/model/map/map',
    'passbolt-mad/view/component/tree',
    'passbolt-mad/view/template/component/tree/treeItem.stache!'
], function (exports, _component, _map, _map3, _tree, _treeItem) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _map2 = _interopRequireDefault(_map);
    var _map4 = _interopRequireDefault(_map3);
    var _tree2 = _interopRequireDefault(_tree);
    var _treeItem2 = _interopRequireDefault(_treeItem);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
    };
    var Tree = _component2.default.extend('mad.component.Tree', {
        defaults: {
            label: 'Tree Component',
            cssClasses: ['tree'],
            tag: 'ul',
            viewClass: _tree2.default,
            itemTemplate: _treeItem2.default,
            itemClass: _map4.default,
            items: null,
            map: null,
            prefixItemId: '',
            callbacks: {
                item_selected: null,
                item_right_selected: null,
                item_hovered: null
            }
        }
    }, {
        init: function init(el, options) {
            options.items = new options.itemClass.List();
            if (options.map == null) {
                options.map = this._getDefaultMap();
            }
            this._super(el, options);
        },
        _getDefaultMap: function _getDefaultMap() {
            return new _map2.default({
                id: 'id',
                label: {
                    key: 'id',
                    func: function func(value, map, rowObject) {
                        var fields = [
                            'label',
                            'title',
                            'name',
                            'id'
                        ];
                        for (var i in fields) {
                            if (typeof rowObject[fields[i]] != 'undefined') {
                                return rowObject[fields[i]];
                            }
                        }
                        return null;
                    }
                },
                cssClasses: {
                    key: 'cssClasses',
                    func: function func(value, map, rowObject) {
                        return value.join(' ');
                    }
                },
                children: {
                    key: 'children',
                    func: _map2.default.mapObjects
                }
            });
        },
        insertItem: function insertItem(item, refItem, position) {
            var self = this;
            this.options.items.push(item);
            this.view.insertItem(item, refItem, position);
            this.state.empty = false;
            if (_typeof(this.options.map.map.children) != undefined && this.options.map.map.children != null) {
                var children = this.options.map._getObjFieldPointer(item, this.options.map.map.children.key);
                if ((typeof children === 'undefined' ? 'undefined' : _typeof(children)) != undefined && children != null && children.length > 0) {
                    children.forEach(function (childItem) {
                        self.insertItem(childItem, item, 'last');
                    });
                }
            }
        },
        removeItem: function removeItem(item) {
            var position = this.options.items.indexOf(item);
            if (position != -1) {
                this.options.items.splice(position, 1);
                this.view.removeItem(item);
            }
            this.state.empty = this.options.items.length == 0;
        },
        refreshItem: function refreshItem(item) {
            if (this.getItemClass() == null) {
                throw new mad.Exception('The associated itemClass can not be null');
            }
            if (!(item instanceof this.getItemClass())) {
                throw new mad.error.WrongParameter('item', this.getItemClass().fullName);
            }
            this.view.refreshItem(item);
        },
        reset: function reset() {
            this.options.items.splice(0);
            this.view.reset();
        },
        load: function load(items) {
            var _this = this;
            if (!items || !this.element) {
                return;
            }
            this.state.empty = items.length == 0;
            items.forEach(function (item) {
                _this.insertItem(item);
            });
        },
        getItemClass: function getItemClass() {
            return this.options.itemClass;
        },
        setItemClass: function setItemClass(itemClass) {
            this.options.itemClass = itemClass;
        },
        getMap: function getMap() {
            return this.options.map;
        },
        setMap: function setMap(map) {
            this.options.map = map;
        },
        selectItem: function selectItem(item) {
            this.view.selectItem(item);
        },
        rightSelectItem: function rightSelectItem(item) {
            this.view.rightSelectItem(item);
        },
        unselectItem: function unselectItem(item) {
            this.view.unselectAll();
        },
        hoverItem: function hoverItem(item) {
            this.view.hoverItem(item);
        },
        unselectAll: function unselectAll() {
            this.view.unselectAll();
        },
        '{element} item_selected': function elementItem_selected(el, ev) {
            var item = ev.data.item;
            var srcEv = ev.data.srcEv;
            this.selectItem(item);
            if (this.options.callbacks.itemSelected) {
                this.options.callbacks.itemSelected(el, ev, item, srcEv);
            }
        },
        '{element} item_right_selected': function elementItem_right_selected(el, ev) {
            var item = ev.data.item;
            var srcEv = ev.data.srcEv;
            this.rightSelectItem(item);
            if (this.options.callbacks.itemRightSelected) {
                this.options.callbacks.itemRightSelected(el, ev, item, srcEv);
            }
        },
        '{element} item_hovered': function elementItem_hovered(el, ev) {
            var item = ev.data.item;
            var srcEv = ev.data.srcEv;
            this.hoverItem(item);
            if (this.options.callbacks.itemHovered) {
                this.options.callbacks.itemHovered(el, ev, item, srcEv);
            }
        }
    });
    exports.default = Tree;
});
/*passbolt-mad@2.10.0#view/template/component/menu/menu_item.stache!steal-stache@4.1.2#steal-stache*/
define('passbolt-mad@2.10.0#view/template/component/menu/menu_item.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('view/template/component/menu/menu_item.stache', [
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'mappedItem.id',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'mappedItem.cssClasses',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#unless(mappedItem.enabled',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' disabled',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/unless',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'row',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'main-cell-wrapper',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'main-cell',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'mappedItem.label',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\n',
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(hasChildren)',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                12
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                15
            ]
        },
        {
            'tokenType': 'done',
            'args': [16]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*passbolt-mad@2.10.0#component/menu*/
define('passbolt-mad@2.10.0#component/menu', [
    'exports',
    'passbolt-mad/model/map/action',
    'passbolt-mad/util/map/map',
    'passbolt-mad/component/tree',
    'passbolt-mad/view/template/component/menu/menu_item.stache!'
], function (exports, _action, _map, _tree, _menu_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _map2 = _interopRequireDefault(_map);
    var _tree2 = _interopRequireDefault(_tree);
    var _menu_item2 = _interopRequireDefault(_menu_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Menu = _tree2.default.extend('mad.component.Menu', {
        defaults: {
            label: 'Menu',
            cssClasses: ['menu'],
            itemTemplate: _menu_item2.default,
            itemClass: _action2.default,
            map: new _map2.default({
                id: 'id',
                label: 'label',
                cssClasses: 'cssClasses',
                enabled: 'enabled',
                children: {
                    key: 'children',
                    func: _map2.default.mapObjects
                }
            })
        }
    }, {
        enableItem: function enableItem(id) {
            var item = this.options.items.filter({ id: id }).pop();
            if (item) {
                item.enabled = true;
                this.refreshItem(item);
            }
        },
        disableItem: function disableItem(id) {
            var item = this.options.items.filter({ id: id }).pop();
            if (item) {
                item.enabled = false;
                this.refreshItem(item);
            }
        },
        '{element} item_selected': function elementItem_selected(el, ev) {
            var item = ev.data.item;
            this._super(el, ev, item);
            if (item.enabled) {
                item.execute(this);
            }
        }
    });
    exports.default = Menu;
});
/*passbolt-mad@2.10.0#component/button*/
define('passbolt-mad@2.10.0#component/button', [
    'exports',
    'passbolt-mad/component/component'
], function (exports, _component) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Button = _component2.default.extend('mad.component.Button', {
        defaults: {
            label: 'Button Component',
            template: null,
            value: null,
            events: { click: null },
            tag: 'button'
        }
    }, {
        init: function init(el, options) {
            this._super(el, options);
            this.value = options.value;
        },
        onDisabledChange: function onDisabledChange(disabled) {
            if (disabled) {
                $(this.element).attr('disabled', 'disabled');
            } else {
                $(this.element).removeAttr('disabled');
            }
            this._super(disabled);
        },
        updateWrapperElement: function updateWrapperElement() {
            if (this.state.disabled) {
                $(this.element).attr('disabled', 'disabled');
            } else {
                $(this.element).removeAttr('disabled');
            }
            this._super();
        },
        getValue: function getValue() {
            return this.value;
        },
        setValue: function setValue(value) {
            this.value = value;
            return this;
        },
        '{element} click': function elementClick(el, ev) {
            if (this.state.disabled) {
                ev.stopImmediatePropagation();
            } else {
                if (this.options.events.click) {
                    this.options.events.click(this.element, ev, this.value);
                }
            }
        }
    });
    exports.default = Button;
});
/*app/view/template/component/administration/users_directory/primary_menu.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/administration/users_directory/primary_menu.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/administration/users_directory/primary_menu.stache', [
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-ldap-settings-save-button',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button disabled',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'disabled',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'disabled',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'disabled',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-save',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'save settings\')',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-ldap-settings-test-button',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button disabled',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'disabled',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'disabled',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'disabled',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-plug',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'test settings\')',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-ldap-settings-simulate-button',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button disabled',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'disabled',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'disabled',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'disabled',
                14
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-magic',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                15
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                16
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                16
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'simulate synchronize\')',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                18
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                19
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                19
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-ldap-settings-synchronize-button',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button disabled',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'disabled',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'disabled',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'disabled',
                20
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                20
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                21
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                21
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-refresh',
                21
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                21
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                21
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                21
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                22
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                22
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'synchronize\')',
                22
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                22
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                23
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                24
            ]
        },
        {
            'tokenType': 'done',
            'args': [25]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/administration/users_directory/primary_menu*/
define('app/component/administration/users_directory/primary_menu', [
    'exports',
    'passbolt-mad/component/button',
    'passbolt-mad/component/component',
    'app/view/template/component/administration/users_directory/primary_menu.stache!'
], function (exports, _button, _component, _primary_menu) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _button2 = _interopRequireDefault(_button);
    var _component2 = _interopRequireDefault(_component);
    var _primary_menu2 = _interopRequireDefault(_primary_menu);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PrimaryMenu = _component2.default.extend('passbolt.component.administration.ldap.PrimaryMenu', {
        defaults: {
            template: _primary_menu2.default,
            settings: {}
        }
    }, {
        afterStart: function afterStart() {
            var disabled = this.options.settings ? !this.options.settings.isEnabled() : true;
            this.saveButton = new _button2.default('#js-ldap-settings-save-button', { state: { disabled: true } });
            this.saveButton.start();
            this.testButton = new _button2.default('#js-ldap-settings-test-button', { state: { disabled: disabled } });
            this.testButton.start();
            this.simulateButton = new _button2.default('#js-ldap-settings-simulate-button', { state: { disabled: disabled } });
            this.simulateButton.start();
            this.synchronizeButton = new _button2.default('#js-ldap-settings-synchronize-button', { state: { disabled: disabled } });
            this.synchronizeButton.start();
        }
    });
    exports.default = PrimaryMenu;
});
/*app/view/template/component/dialog/progress.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/dialog/progress.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/dialog/progress.stache', [
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dialog',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dialog-header',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h2',
                false,
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h2',
                false,
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dialog-header-title',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'label',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(subtitle)',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dialog-header-subtitle',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'subtitle',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(titleInfo)',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'more_details tooltip-alt',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-info-circle',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'tooltip-text right',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(titleInfo.name)',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                7
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>titleInfo',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#else',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                9
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'titleInfo',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h2',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dialog-close',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                15
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                16
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-close',
                16
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                16
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                17
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visuallyhidden',
                17
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'close',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                18
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                19
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_dialog_content dialog-content',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                20
            ]
        },
        {
            'tokenType': 'comment',
            'args': [
                ' Form content class to have the white background ',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                21
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                22
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                22
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form-content',
                22
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                22
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                22
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                23
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                23
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Take a deep breath and enjoy being in the present moment...\') ',
                23
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                23
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                24
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                24
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'progress-bar-wrapper',
                24
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                24
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                24
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                25
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                25
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_progress_bar_container',
                25
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                25
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                25
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'progress-bar big infinite',
                25
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                25
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                25
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                26
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                26
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'progress',
                26
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                26
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                26
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                26
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                27
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                27
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                28
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                28
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                29
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                29
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'progress-details',
                29
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                29
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                29
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                29
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                30
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                30
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_progress_step_label',
                30
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                30
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                30
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'progress-step-label',
                30
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                30
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '&nbsp;',
                30
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                30
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                31
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'style',
                31
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'float:right',
                31
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'style',
                31
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                31
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'progress-percent',
                31
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                31
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                31
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                31
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                31
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_progress_percent',
                31
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                31
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                31
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                31
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                31
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                31
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                32
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                32
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                33
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                33
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                34
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                34
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                35
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                35
            ]
        },
        {
            'tokenType': 'done',
            'args': [36]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/dialog/progress*/
define('app/component/dialog/progress', [
    'exports',
    'passbolt-mad/component/dialog',
    'passbolt-mad/helper/html',
    'passbolt-mad/util/lang/i18n',
    'app/view/template/component/dialog/progress.stache!'
], function (exports, _dialog, _html, _i18n, _progress) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _dialog2 = _interopRequireDefault(_dialog);
    var _html2 = _interopRequireDefault(_html);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _progress2 = _interopRequireDefault(_progress);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ProgressDialog = _dialog2.default.extend('passbolt.component.ProgressDialog', {
        defaults: {
            label: 'Progress dialog component',
            template: _progress2.default
        },
        instantiate: function instantiate(options) {
            var refElt = $('body');
            var position = 'first';
            var $existingDialog = $('.dialog-wrapper:last');
            if ($existingDialog.length) {
                refElt = $existingDialog;
                position = 'after';
            }
            var $el = _html2.default.create(refElt, position, '<div/>');
            return new ProgressDialog($el[0], options);
        }
    }, {});
    exports.default = ProgressDialog;
});
/*app/view/template/component/administration/users_directory/settings.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/administration/users_directory/settings.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/administration/users_directory/settings.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'grid grid-responsive-12',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'row',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'ldap-settings col8',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'form',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-ldap-settings-form',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'form',
                false,
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'form',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '&nbsp;',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n        ',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'col4 last',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h2',
                false,
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h2',
                false,
                9
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Need help?\')',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h2',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Check out our ldap configuration guide\')',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'href',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'https://help.passbolt.com/configure/ldap',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'href',
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'target',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '_blank',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'target',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-life-ring',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Read documentation\')',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                17
            ]
        },
        {
            'tokenType': 'done',
            'args': [18]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/breadcrumb/breadcrumb_item.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/breadcrumb/breadcrumb_item.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/breadcrumb/breadcrumb_item.stache', [
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.id ',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' cssClasses.join(\'\') ',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'main-cell',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.label ',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                5
            ]
        },
        {
            'tokenType': 'done',
            'args': [6]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/administration/users_directory/synchronize_report.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/administration/users_directory/synchronize_report.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/administration/users_directory/synchronize_report.stache', [
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(usersSynchronized)',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' usersSynchronized ',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' user(s)',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(groupsSynchronized)',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' and',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(groupsSynchronized)',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' groupsSynchronized ',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' group(s)',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(!resourcesSynchronized)',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'No resources',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    were synchronized\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(groupsError || usersError)',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'error inline-error',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Some resources were not synchronized and require your attention, see the full report.',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                7
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\n',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion operation-details closed',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-header',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'link',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Full report\')',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-content hidden',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'style',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'display: none;',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'style',
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                15
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                16
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text',
                16
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                16
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                17
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'for',
                17
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_debug',
                17
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'for',
                17
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visuallyhidden',
                17
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                17
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Full report\')',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                17
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'textarea',
                false,
                18
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'textarea',
                false,
                18
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'textarea',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                18
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                19
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                20
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                21
            ]
        },
        {
            'tokenType': 'done',
            'args': [22]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/administration/users_directory/synchronize_simulation_report.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/administration/users_directory/synchronize_simulation_report.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/administration/users_directory/synchronize_simulation_report.stache', [
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' ',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(usersSynchronized)',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' usersSynchronized ',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' user(s)',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(groupsSynchronized)',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' and',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(groupsSynchronized)',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' groupsSynchronized ',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' group(s)',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(!resourcesSynchronized)',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'No resources',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    will be synchronized\n',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(groupsError || usersError)',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'error inline-error',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Some resources won\'t be synchronized and will require your attention, see the full report.',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\n',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion operation-details closed',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-header',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'link',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                14
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                14
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Full report\')',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                15
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                16
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-content hidden',
                16
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'style',
                16
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'display: none;',
                16
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'style',
                16
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                16
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                17
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text',
                17
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                17
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                18
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'for',
                18
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_debug',
                18
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'for',
                18
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                18
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visuallyhidden',
                18
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                18
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                18
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Full report\')',
                18
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                18
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'textarea',
                false,
                19
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'textarea',
                false,
                19
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'textarea',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                19
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                20
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                21
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                22
            ]
        },
        {
            'tokenType': 'done',
            'args': [23]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/administration/users_directory/test_settings_report.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/administration/users_directory/test_settings_report.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/administration/users_directory/test_settings_report.stache', [
        {
            'tokenType': 'special',
            'args': [
                '<displayUserHtml',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'user.profile.first_name',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' ',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'user.profile.last_name',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'em',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'em',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '(',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'user.username',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ')',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'em',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/displayUserHtml',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '<displayGroupHtml',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'group.name',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/displayGroupHtml',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                7
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '<displayGroupObject',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'group',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>displayGroupHtml',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                11
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#each(group.users)',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                12
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>displayUserObject',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                14
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#each(group.groups)',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                15
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>displayGroupObject',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                16
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                18
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                19
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/displayGroupObject',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                20
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '<displayUserObject',
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                22
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                23
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'user',
                23
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                23
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>displayUserHtml',
                23
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                23
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/displayUserObject',
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                24
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '<displayEntity',
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                26
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(user)',
                27
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                27
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>displayUserObject',
                28
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                28
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                29
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                29
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(group)',
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                30
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>displayGroupObject',
                31
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                31
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                32
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                32
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/displayEntity',
                33
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                33
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                35
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                35
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'ldap-test-settings-report',
                35
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                35
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                35
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                35
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                36
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                36
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                36
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(usersCount)',
                37
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' usersCount ',
                37
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' user(s)',
                37
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(groupsCount)',
                37
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' and',
                37
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                37
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                37
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                37
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(groupsCount)',
                38
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' groupsCount ',
                38
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' group(s)',
                38
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                38
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                38
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '# eq(totalCount, 0)',
                39
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'No results',
                39
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/eq',
                39
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        have been found.\n    ',
                39
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                41
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                41
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(totalCount)',
                43
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                43
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                44
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                44
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion entities-list closed',
                44
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                44
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                44
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                44
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                45
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                45
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-header',
                45
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                45
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                45
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                45
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                46
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                46
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'link',
                46
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                46
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                46
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'See list\')',
                46
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                46
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                46
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                47
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                47
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                48
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                48
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-content hidden',
                48
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                48
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'style',
                48
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'display: none;',
                48
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'style',
                48
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                48
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                48
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'table',
                false,
                49
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'table',
                false,
                49
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                49
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'tbody',
                false,
                50
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tbody',
                false,
                50
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                50
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'tr',
                false,
                51
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tr',
                false,
                51
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                51
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                52
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                52
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Groups\')',
                52
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                52
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                52
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                53
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                53
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Users\')',
                53
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                53
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                53
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tr',
                54
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                54
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'tr',
                false,
                55
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tr',
                false,
                55
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                55
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                56
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                56
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                56
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#each(groups)',
                57
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                            ',
                57
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>displayGroupHtml',
                58
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'br',
                true,
                58
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'br',
                true,
                58
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                58
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                59
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                59
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                60
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                60
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                61
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                61
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                61
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#each(users)',
                62
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                            ',
                62
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>displayUserHtml',
                63
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'br',
                true,
                63
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'br',
                true,
                63
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                63
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                64
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                64
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                65
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                65
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tr',
                66
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                66
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tbody',
                67
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                67
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'table',
                68
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                68
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                69
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                69
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                70
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                70
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                72
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                72
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion entities-structure closed',
                72
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                72
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                72
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                72
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                73
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                73
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-header',
                73
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                73
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                73
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                73
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                74
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                74
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'link',
                74
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                74
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                74
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'See structure\')',
                74
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                74
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                74
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                75
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                75
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                76
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                76
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-content hidden',
                76
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                76
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'style',
                76
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'display: none;',
                76
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'style',
                76
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                76
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                76
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                77
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                77
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'directory-structure',
                77
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                77
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                77
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                77
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                78
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                78
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                78
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                79
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                79
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'group',
                79
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                79
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                79
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                79
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Root\')',
                80
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                80
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                81
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                81
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                            ',
                81
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#each(tree)',
                82
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                                ',
                82
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>displayEntity',
                83
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                            ',
                83
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                84
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                84
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                85
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                85
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                86
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                86
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                87
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                87
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                88
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                88
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                89
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                89
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                90
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                90
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                91
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                91
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                91
            ]
        },
        {
            'tokenType': 'done',
            'args': [93]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/model/map/image_storage*/
define('app/model/map/image_storage', [
    'exports',
    'passbolt-mad/model/map/map'
], function (exports, _map) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _map2 = _interopRequireDefault(_map);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ImageStorage = _map2.default.extend('passbolt.model.ImageStorage', {
        imagePath: function imagePath(version) {
            if (typeof this.url == 'undefined') {
                return '';
            }
            if (typeof this.url[version] == 'undefined') {
                return '';
            } else {
                return this.url[version];
            }
        }
    });
    _map2.default.setReference('ImageStorage', ImageStorage);
    exports.default = ImageStorage;
});
/*app/model/map/profile*/
define('app/model/map/profile', [
    'exports',
    'passbolt-mad/model/map/map',
    'passbolt-mad/util/lang/i18n',
    'app/model/map/image_storage'
], function (exports, _map, _i18n, _image_storage) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _map2 = _interopRequireDefault(_map);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _image_storage2 = _interopRequireDefault(_image_storage);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Profile = _map2.default.extend('passbolt.model.Profile', {
        id: 'string',
        first_name: 'string',
        last_name: 'string',
        avatar: _image_storage2.default,
        fullName: function fullName() {
            return Profile.fullName(this);
        },
        avatarPath: function avatarPath(version) {
            return Profile.avatarPath(this, version);
        }
    });
    _map2.default.setReference('Profile', Profile);
    Profile.fullName = function (profile) {
        var fullName = profile.first_name + ' ' + profile.last_name;
        return fullName;
    };
    Profile.avatarPath = function (profile, version) {
        if (typeof profile.avatar != 'undefined' && profile.avatar.url != undefined) {
            return profile.avatar.imagePath(version);
        } else {
            return 'img/avatar/user.png';
        }
    };
    Profile.validationRules = {
        first_name: [
            {
                rule: 'required',
                message: __('A first name is required')
            },
            {
                rule: 'notEmpty',
                message: __('A first name is required')
            },
            {
                rule: 'utf8',
                message: __('First name should be a valid utf8 string.')
            },
            {
                rule: [
                    'lengthBetween',
                    0,
                    255
                ],
                message: __('The first name length should be maximum 255 characters.')
            }
        ],
        last_name: [
            {
                rule: 'required',
                message: __('A last name is required')
            },
            {
                rule: 'notEmpty',
                message: __('A last name is required')
            },
            {
                rule: 'utf8',
                message: __('Last name should be a valid utf8 string.')
            },
            {
                rule: [
                    'lengthBetween',
                    0,
                    255
                ],
                message: __('The last name length should be maximum 255 characters.')
            }
        ]
    };
    exports.default = Profile;
});
/*app/model/map/role*/
define('app/model/map/role', [
    'exports',
    'app/net/ajax',
    'can-connect',
    'can-connect/data/url/url',
    'can-connect/data/parse/parse',
    'can-connect/constructor/constructor',
    'can-connect/can/map/map',
    'passbolt-mad/model/list/list',
    'passbolt-mad/model/map/map'
], function (exports, _ajax, _canConnect, _url, _parse, _constructor, _map, _list, _map3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _canConnect2 = _interopRequireDefault(_canConnect);
    var _url2 = _interopRequireDefault(_url);
    var _parse2 = _interopRequireDefault(_parse);
    var _constructor2 = _interopRequireDefault(_constructor);
    var _map2 = _interopRequireDefault(_map);
    var _list2 = _interopRequireDefault(_list);
    var _map4 = _interopRequireDefault(_map3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Role = _map4.default.extend('passbolt.model.Role', {
        id: 'string',
        name: 'string'
    });
    _map4.default.setReference('Role', Role);
    Role.List = _list2.default.extend({ '#': { Type: Role } });
    Role.getCache = function () {
        return this.cache;
    };
    Role.setCache = function (roles) {
        this.cache = roles;
    };
    Role.toId = function (roleName) {
        return this.cache.reduce(function (carry, item) {
            if (roleName == item.name) {
                carry = item.id;
            }
            return carry;
        }, '');
    };
    Role.connection = (0, _canConnect2.default)([
        _parse2.default,
        _url2.default,
        _constructor2.default,
        _map2.default
    ], {
        Map: Role,
        List: Role.List,
        url: {
            resource: '/',
            getListData: function getListData(params) {
                params = params || {};
                params['api-version'] = 'v2';
                return _ajax2.default.request({
                    url: 'roles.json',
                    type: 'GET',
                    params: params
                });
            }
        }
    });
    exports.default = Role;
});
/*app/model/map/user*/
define('app/model/map/user', [
    'exports',
    'app/net/ajax',
    'passbolt-mad/config/config',
    'can-connect',
    'can-connect/data/url/url',
    'can-connect/data/parse/parse',
    'can-connect/constructor/constructor',
    'can-connect/can/map/map',
    'passbolt-mad/model/list/list',
    'passbolt-mad/model/map/map',
    'passbolt-mad/util/lang/i18n',
    'app/model/map/profile',
    'app/model/map/role',
    'uuid/v4'
], function (exports, _ajax, _config, _canConnect, _url, _parse, _constructor, _map, _list, _map3, _i18n, _profile, _role, _v) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _config2 = _interopRequireDefault(_config);
    var _canConnect2 = _interopRequireDefault(_canConnect);
    var _url2 = _interopRequireDefault(_url);
    var _parse2 = _interopRequireDefault(_parse);
    var _constructor2 = _interopRequireDefault(_constructor);
    var _map2 = _interopRequireDefault(_map);
    var _list2 = _interopRequireDefault(_list);
    var _map4 = _interopRequireDefault(_map3);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _profile2 = _interopRequireDefault(_profile);
    var _role2 = _interopRequireDefault(_role);
    var _v2 = _interopRequireDefault(_v);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var User = _map4.default.extend('passbolt.model.User', {
        id: 'string',
        username: 'string',
        email: 'string',
        active: 'boolean',
        last_logged_in: 'string',
        profile: _profile2.default,
        role: _role2.default,
        isAdmin: function isAdmin() {
            return this.role && this.role.name == 'admin';
        },
        deleteDryRun: function deleteDryRun() {
            return _ajax2.default.request({
                url: 'users/' + this.id + '/dry-run.json?api-version=v2',
                type: 'DELETE',
                silentNotify: true
            });
        }
    });
    _map4.default.setReference('User', User);
    User.List = _list2.default.extend({ '#': { Type: User } });
    User.validationRules = {
        id: [{ rule: 'uuid' }],
        username: [
            {
                rule: 'required',
                message: __('A username is required.')
            },
            {
                rule: 'notEmpty',
                message: __('A username is required.')
            },
            {
                rule: [
                    'lengthBetween',
                    0,
                    255
                ],
                message: __('The username length should be maximum 254 characters.')
            },
            {
                rule: ['email'],
                message: __('The username should be a valid email address.')
            }
        ]
    };
    User.getFilteredFields = function (filteredCase) {
        var filteredFields = false;
        switch (filteredCase) {
        case 'edit_profile':
            filteredFields = [
                'id',
                'profile.first_name',
                'profile.last_name'
            ];
            break;
        }
        return filteredFields;
    };
    User.current = null;
    User.prototype.delete = function (transfer) {
        var _this = this;
        var request = {
            _xhr: null,
            id: (0, _v2.default)(),
            url: 'users/' + this.id + '.json?api-version=v2',
            method: 'DELETE',
            headers: { 'X-CSRF-Token': _config2.default.read('app.csrfToken') },
            beforeSend: function beforeSend(xhr) {
                request._xhr = xhr;
            },
            data: { transfer: transfer }
        };
        _ajax2.default._registerRequest(request);
        return $.ajax(request).then(function (data) {
            return _ajax2.default.handleSuccess(request, data);
        }).then(function () {
            _this.destroy();
        }).then(null, function (jqXHR) {
            var jsonData = {};
            if (jqXHR.responseText) {
                try {
                    jsonData = $.parseJSON(jqXHR.responseText);
                } catch (e) {
                }
            }
            return _ajax2.default.handleError(request, jsonData);
        });
    };
    User.getCurrent = function () {
        return User.current;
    };
    User.setCurrent = function (user) {
        User.current = user;
    };
    User.prototype.saveAvatar = function (file) {
        var _this2 = this;
        var request = {
            _xhr: null,
            id: (0, _v2.default)(),
            url: 'users/' + this.id + '.json?api-version=v2',
            method: 'POST',
            cache: false,
            contentType: false,
            processData: false,
            headers: { 'X-CSRF-Token': _config2.default.read('app.csrfToken') },
            beforeSend: function beforeSend(xhr) {
                request._xhr = xhr;
            }
        };
        request.params = new FormData();
        request.params.id = this.id;
        request.params.append('id', this.id);
        request.params.append('profile[avatar][file]', file);
        request.data = request.params;
        _ajax2.default._registerRequest(request);
        return $.ajax(request).then(function (data) {
            return _ajax2.default.handleSuccess(request, data).then(function (data) {
                _this2.profile.assign({ avatar: data.profile.avatar });
                _this2.dispatch('updated');
                _ajax2.default._unregisterRequest(request);
                return Promise.resolve(_this2);
            });
        }, function (jqXHR) {
            var jsonData = {};
            if (jqXHR.responseText) {
                try {
                    jsonData = $.parseJSON(jqXHR.responseText);
                } catch (e) {
                }
            }
            return _ajax2.default.handleError(request, jsonData);
        });
    };
    User.connection = (0, _canConnect2.default)([
        _parse2.default,
        _url2.default,
        _constructor2.default,
        _map2.default
    ], {
        Map: User,
        List: User.List,
        url: {
            resource: '/',
            createData: function createData(params) {
                return _ajax2.default.request({
                    url: 'users.json?api-version=v2',
                    type: 'POST',
                    params: params
                });
            },
            updateData: function updateData(params) {
                var _params = User.filterAttributes(params);
                return _ajax2.default.request({
                    url: 'users/{id}.json?api-version=v2',
                    type: 'PUT',
                    params: _params
                });
            },
            getData: function getData(params) {
                params = params || {};
                params['api-version'] = 'v2';
                return _ajax2.default.request({
                    url: 'users/{id}.json',
                    type: 'GET',
                    params: params
                });
            },
            getListData: function getListData(params) {
                params = params || {};
                params['api-version'] = 'v2';
                return _ajax2.default.request({
                    url: 'users.json',
                    type: 'GET',
                    params: params
                }).then(function (users) {
                    return users;
                });
            },
            destroyData: function destroyData() {
                return Promise.resolve({});
            }
        }
    });
    exports.default = User;
});
/*app/component/administration/users_directory/users_directory_settings*/
define('app/component/administration/users_directory/users_directory_settings', [
    'exports',
    'passbolt-mad/model/map/action',
    'passbolt-mad/component/component',
    'passbolt-mad/helper/component',
    'passbolt-mad/component/confirm',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/control/bus',
    'app/model/service/users_directory',
    'app/model/map/users_directory_settings',
    'app/form/administration/users_directory/settings',
    'passbolt-mad/component/menu',
    'app/component/administration/users_directory/primary_menu',
    'app/component/dialog/progress',
    'can-route',
    'app/view/template/component/administration/users_directory/settings.stache!',
    'app/view/template/component/breadcrumb/breadcrumb_item.stache!',
    'app/view/template/component/administration/users_directory/synchronize_report.stache!',
    'app/view/template/component/administration/users_directory/synchronize_simulation_report.stache!',
    'app/view/template/component/administration/users_directory/test_settings_report.stache!',
    'app/model/map/user'
], function (exports, _action, _component, _component3, _confirm, _i18n, _bus, _users_directory, _users_directory_settings, _settings, _menu, _primary_menu, _progress, _canRoute, _settings3, _breadcrumb_item, _synchronize_report, _synchronize_simulation_report, _test_settings_report, _user) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _component2 = _interopRequireDefault(_component);
    var _component4 = _interopRequireDefault(_component3);
    var _confirm2 = _interopRequireDefault(_confirm);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _bus2 = _interopRequireDefault(_bus);
    var _users_directory2 = _interopRequireDefault(_users_directory);
    var _users_directory_settings2 = _interopRequireDefault(_users_directory_settings);
    var _settings2 = _interopRequireDefault(_settings);
    var _menu2 = _interopRequireDefault(_menu);
    var _primary_menu2 = _interopRequireDefault(_primary_menu);
    var _progress2 = _interopRequireDefault(_progress);
    var _canRoute2 = _interopRequireDefault(_canRoute);
    var _settings4 = _interopRequireDefault(_settings3);
    var _breadcrumb_item2 = _interopRequireDefault(_breadcrumb_item);
    var _synchronize_report2 = _interopRequireDefault(_synchronize_report);
    var _synchronize_simulation_report2 = _interopRequireDefault(_synchronize_simulation_report);
    var _test_settings_report2 = _interopRequireDefault(_test_settings_report);
    var _user2 = _interopRequireDefault(_user);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var UsersDirectorySettingsAdmin = _component2.default.extend('passbolt.component.administration.users_directory.UsersDirectorySettings', { defaults: { template: _settings4.default } }, {
        init: function init(el, options) {
            this._super(el, options);
            this.usersDirectorySettings = null;
            this.users = null;
        },
        afterStart: function afterStart() {
            this._initPrimaryMenu();
            this._initBreadcrumb();
            this._initForm();
            this._getSettingsAndLoad();
        },
        _initPrimaryMenu: function _initPrimaryMenu() {
            var selector = $('#js_wsp_primary_menu_wrapper');
            this.primaryMenu = _component4.default.create(selector, 'inside_replace', _primary_menu2.default, { settings: this.usersDirectorySettings });
            this.primaryMenu.start();
        },
        _initBreadcrumb: function _initBreadcrumb() {
            var _this = this;
            var breadcrumbWrapperSelector = '#js_wsp_administration_breadcrumb';
            var options = { itemTemplate: _breadcrumb_item2.default };
            var breadcrumb = _component4.default.create($(breadcrumbWrapperSelector), 'inside_replace', _menu2.default, options);
            breadcrumb.start();
            var items = [];
            var administrationAction = new _action2.default({
                label: __('Administration'),
                action: function action() {
                    return _this._goToSection('mfa');
                }
            });
            items.push(administrationAction);
            var UsersDirectoryAction = new _action2.default({
                label: __('Users Directory'),
                action: function action() {
                    return _this._goToSection('usersDirectory');
                }
            });
            items.push(UsersDirectoryAction);
            var configurationAction = new _action2.default({
                label: __('Settings'),
                action: function action() {
                    return _this._goToSection('usersDirectory');
                }
            });
            items.push(configurationAction);
            breadcrumb.load(items);
        },
        _initForm: function _initForm() {
            var currentUser = _user2.default.getCurrent();
            var defaultAdmin = null;
            var defaultGroupAdmin = null;
            if (currentUser.isAdmin()) {
                defaultAdmin = currentUser.id;
                defaultGroupAdmin = currentUser.id;
            }
            this.form = new _settings2.default('#js-ldap-settings-form', {
                defaultAdmin: defaultAdmin,
                defaultGroupAdmin: defaultGroupAdmin
            });
            this.addLoadedDependency(this.form);
            this.form.start();
        },
        _getSettingsAndLoad: function _getSettingsAndLoad() {
            var _this2 = this;
            if (!this.usersDirectorySettings) {
                return _users_directory_settings2.default.findOne().then(function (usersDirectorySettings) {
                    _this2.usersDirectorySettings = usersDirectorySettings;
                }).then(function () {
                    return _user2.default.findAll({ contain: { profile: 1 } });
                }).then(function (users) {
                    _this2.users = users;
                    _this2.form.loadForm(_this2.usersDirectorySettings, _this2.users);
                    _this2._initPrimaryMenu();
                    _this2._afterLoading();
                });
            } else {
                this.form.loadForm(this.usersDirectorySettings, this.users);
                this._initPrimaryMenu();
                this._afterLoading();
            }
        },
        _afterLoading: function _afterLoading() {
            var self = this;
            $('.accordion.default-closed', this.element).addClass('closed');
            var selectedDirectory = $('input[checked=checked]', self.form.directoryTypeRadio.element).val();
            self.form.showFieldsForDirectoryType(selectedDirectory);
            $(self.form.directoryTypeRadio.element).on('change', function (elt) {
                self.form.showFieldsForDirectoryType(elt.target.value);
            });
        },
        _goToSection: function _goToSection(section) {
            _canRoute2.default.data.update({
                controller: 'Administration',
                action: section
            });
            this.refresh();
        },
        _showProgressDialog: function _showProgressDialog(title) {
            var label = title;
            var progressDialog = _progress2.default.instantiate({ label: label });
            progressDialog.start();
            return progressDialog;
        },
        _synchronizeSimulation: function _synchronizeSimulation() {
            var _this3 = this;
            var progressDialog = this._showProgressDialog(__('Synchronize simulation'));
            return _users_directory2.default.dryRunSynchronize().then(function (report) {
                progressDialog.destroyAndRemove();
                _this3._showSynchronizeSimulationReport(report);
            }, function () {
                progressDialog.destroyAndRemove();
            });
        },
        _showSynchronizeSimulationReport: function _showSynchronizeSimulationReport(report) {
            var _this4 = this;
            var simulateReportDialog = _confirm2.default.instantiate({
                label: __('Synchronize simulation report'),
                subtitle: __('The operation was successfull.'),
                content: _synchronize_simulation_report2.default,
                submitButton: {
                    label: 'Synchronize',
                    cssClasses: ['primary']
                },
                action: function action() {
                    simulateReportDialog.destroyAndRemove();
                    setTimeout(function () {
                        return _this4._synchronize();
                    }, 0);
                }
            });
            simulateReportDialog.setViewData('usersSynchronized', report.getUsersSynchronized().length);
            simulateReportDialog.setViewData('usersError', report.getUsersError().length);
            simulateReportDialog.setViewData('groupsSynchronized', report.getGroupsSynchronized().length);
            simulateReportDialog.setViewData('groupsError', report.getGroupsError().length);
            simulateReportDialog.setViewData('resourcesSynchronized', report.getUsersSynchronized().length + report.getGroupsSynchronized().length == 0);
            simulateReportDialog.start();
            $('textarea', simulateReportDialog.element).text(report.toText());
        },
        _synchronize: function _synchronize() {
            var _this5 = this;
            var progressDialog = this._showProgressDialog(__('Synchronize'));
            return _users_directory2.default.synchronize().then(function (report) {
                progressDialog.destroyAndRemove();
                _this5._showSynchronizeReport(report);
            }, function () {
                progressDialog.destroyAndRemove();
            });
        },
        _scrollToFirstError: function _scrollToFirstError() {
            var errorEltSelector = 'div.error';
            $('.accordion-content:hidden').each(function (i, $elt) {
                if ($(errorEltSelector, $elt).length) {
                    $($elt).toggle();
                }
            });
            var $firstError = $(errorEltSelector + ':first');
            if ($firstError.length) {
                $('.workspace-main > .grid').animate({ scrollTop: $firstError.position().top }, 500, 'swing');
            }
        },
        _showSynchronizeReport: function _showSynchronizeReport(report) {
            var synchronizeReportDialog = _confirm2.default.instantiate({
                label: __('Synchronize report'),
                subtitle: __('The operation was successful.'),
                content: _synchronize_report2.default,
                submitButton: {
                    label: 'OK',
                    cssClasses: ['primary']
                },
                cancelButton: { cssClasses: ['hidden'] },
                action: function action() {
                    return synchronizeReportDialog.destroyAndRemove();
                }
            });
            synchronizeReportDialog.setViewData('usersSynchronized', report.getUsersSynchronized().length);
            synchronizeReportDialog.setViewData('usersError', report.getUsersError().length);
            synchronizeReportDialog.setViewData('groupsSynchronized', report.getGroupsSynchronized().length);
            synchronizeReportDialog.setViewData('groupsError', report.getGroupsError().length);
            synchronizeReportDialog.setViewData('resourcesSynchronized', report.getUsersSynchronized().length + report.getGroupsSynchronized().length == 0);
            synchronizeReportDialog.start();
            $('textarea', synchronizeReportDialog.element).text(report.toText());
        },
        _toggleAccordion: function _toggleAccordion(elt) {
            var isClosed = elt.hasClass('closed');
            $('.accordion-content', elt).toggle();
            if (isClosed) {
                elt.removeClass('closed');
            } else {
                elt.addClass('closed');
            }
        },
        _showTestSettingsReport: function _showTestSettingsReport(data) {
            var testSettingsReportDialog = _confirm2.default.instantiate({
                label: __('Test settings report'),
                subtitle: __('A connection could be established. Well done!'),
                content: _test_settings_report2.default,
                submitButton: {
                    label: 'OK',
                    cssClasses: ['primary']
                },
                cancelButton: { cssClasses: ['hidden'] },
                action: function action() {
                    return testSettingsReportDialog.destroyAndRemove();
                }
            });
            testSettingsReportDialog.setViewData('users', data.users);
            testSettingsReportDialog.setViewData('usersCount', data.users.length);
            testSettingsReportDialog.setViewData('groups', data.groups);
            testSettingsReportDialog.setViewData('groupsCount', data.groups.length);
            testSettingsReportDialog.setViewData('totalCount', data.groups.length + data.groups.length);
            testSettingsReportDialog.setViewData('tree', data.tree);
            testSettingsReportDialog.start();
        },
        '#js-ldap-settings-form changed': function jsLdapSettingsFormChanged() {
            this.primaryMenu.saveButton.state.disabled = false;
            this.primaryMenu.testButton.state.disabled = !this.form.isEnabled();
        },
        '{window} #js_wsp_primary_menu_wrapper #js-ldap-settings-simulate-button click': function windowJs_wsp_primary_menu_wrapperJsLdapSettingsSimulateButtonClick() {
            this._synchronizeSimulation();
        },
        '{window} #js_wsp_primary_menu_wrapper #js-ldap-settings-synchronize-button click': function windowJs_wsp_primary_menu_wrapperJsLdapSettingsSynchronizeButtonClick() {
            this._synchronize();
        },
        '{window} .accordion-header click': function windowAccordionHeaderClick(elt) {
            this._toggleAccordion($(elt).parent('.accordion'));
        },
        '{window} #js_wsp_primary_menu_wrapper #js-ldap-settings-save-button click': function windowJs_wsp_primary_menu_wrapperJsLdapSettingsSaveButtonClick() {
            var _this6 = this;
            var data = this.form.getData();
            if (data.UsersDirectorySettings.enabled) {
                if (this.form.validate()) {
                    this.usersDirectorySettings.assign(data.UsersDirectorySettings);
                    this.usersDirectorySettings.save().then(function () {
                        _canRoute2.default.data.update({
                            controller: 'Administration',
                            action: 'usersDirectory'
                        });
                        _this6.refresh();
                        _bus2.default.trigger('passbolt_notify', {
                            title: 'app_directorysync_settings_update_success',
                            status: 'success'
                        });
                    });
                } else {
                    this._scrollToFirstError();
                }
            } else {
                this.usersDirectorySettings.destroy().then(function () {
                    _this6.usersDirectorySettings = new _users_directory_settings2.default({});
                    _canRoute2.default.data.update({
                        controller: 'Administration',
                        action: 'usersDirectory'
                    });
                    _this6.refresh();
                });
            }
        },
        '{window} #js_wsp_primary_menu_wrapper #js-ldap-settings-test-button click': function windowJs_wsp_primary_menu_wrapperJsLdapSettingsTestButtonClick() {
            var _this7 = this;
            var data = this.form.getData();
            if (data.UsersDirectorySettings.enabled) {
                if (this.form.validate()) {
                    this.usersDirectorySettings.assign(data.UsersDirectorySettings);
                    this.usersDirectorySettings.testSettings(data.UsersDirectorySettings).then(function (data) {
                        _this7._showTestSettingsReport(data);
                    });
                } else {
                    this._scrollToFirstError();
                }
            }
        }
    });
    exports.default = UsersDirectorySettingsAdmin;
});
/*app/model/map/mfa_settings*/
define('app/model/map/mfa_settings', [
    'exports',
    'app/net/ajax',
    'can-connect',
    'can-connect/data/url/url',
    'can-connect/data/parse/parse',
    'can-connect/constructor/constructor',
    'can-connect/can/map/map',
    'passbolt-mad/model/map/map',
    'can-util/js/get/get',
    'passbolt-mad/util/lang/i18n',
    'uuid/v4',
    'urijs/src/punycode',
    'urijs/src/SecondLevelDomains',
    'urijs/src/IPv6'
], function (exports, _ajax, _canConnect, _url, _parse, _constructor, _map, _map3, _get, _i18n, _v) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _canConnect2 = _interopRequireDefault(_canConnect);
    var _url2 = _interopRequireDefault(_url);
    var _parse2 = _interopRequireDefault(_parse);
    var _constructor2 = _interopRequireDefault(_constructor);
    var _map2 = _interopRequireDefault(_map);
    var _map4 = _interopRequireDefault(_map3);
    var _get2 = _interopRequireDefault(_get);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _v2 = _interopRequireDefault(_v);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var MfaSettings = _map4.default.extend('passbolt.model.MfaSettings', {
        id: {
            type: 'string',
            value: function value() {
                return (0, _v2.default)();
            }
        },
        totp_provider: 'boolean',
        yubikey_provider: 'boolean',
        yubikey_client_id: 'string',
        yubikey_secret_key: 'string',
        duo_provider: 'boolean',
        duo_host_name: 'string',
        duo_integration_key: 'string',
        duo_salt: 'string',
        duo_secret_key: 'string'
    });
    _map4.default.setReference('MfaSettings', MfaSettings);
    MfaSettings.validationRules = {
        yubikey_client_id: [
            {
                rule: 'required',
                message: __('A client identifier is required.')
            },
            {
                rule: '/^[0-9]{1,64}$/',
                message: __('The client identifier should be an integer.')
            }
        ],
        yubikey_secret_key: [
            {
                rule: 'required',
                message: __('A secret key is required.')
            },
            {
                rule: '/^[a-zA-Z0-9/=]{10,128}$/',
                message: __('This secret key is not valid.')
            }
        ],
        duo_host_name: [
            {
                rule: 'required',
                message: __('A hostname is required.')
            },
            {
                rule: '/^api-[a-fA-F0-9]{8,16}.duosecurity.com$/',
                message: __('This is not a valid hostname.')
            }
        ],
        duo_integration_key: [
            {
                rule: 'required',
                message: __('An integration key is required.')
            },
            {
                rule: '/^[a-zA-Z0-9]{16,32}$/',
                message: __('This is not a valid integration key.')
            }
        ],
        duo_salt: [
            {
                rule: 'required',
                message: __('A salt is required.')
            },
            {
                rule: [
                    'lengthBetween',
                    40,
                    128
                ],
                message: __('The salt should be between 40 and 128 characters in length.')
            }
        ],
        duo_secret_key: [
            {
                rule: 'required',
                message: __('A secret key is required.')
            },
            {
                rule: '/^[a-zA-Z0-9]{32,128}$/',
                message: __('This is not a valid secret key.')
            }
        ]
    };
    MfaSettings.mapFromApi = function (data) {
        data.providers = data.providers || [];
        return {
            totp_provider: data.providers.find(function (provider) {
                return provider == 'totp';
            }) != undefined,
            yubikey_provider: data.providers.find(function (provider) {
                return provider == 'yubikey';
            }) != undefined,
            yubikey_client_id: (0, _get2.default)(data, 'yubikey.clientId'),
            yubikey_secret_key: (0, _get2.default)(data, 'yubikey.secretKey'),
            duo_provider: data.providers.find(function (provider) {
                return provider == 'duo';
            }) != undefined,
            duo_host_name: (0, _get2.default)(data, 'duo.hostName'),
            duo_integration_key: (0, _get2.default)(data, 'duo.integrationKey'),
            duo_salt: (0, _get2.default)(data, 'duo.salt'),
            duo_secret_key: (0, _get2.default)(data, 'duo.secretKey')
        };
    };
    MfaSettings.mapToApi = function (data) {
        var result = { providers: [] };
        if (data.totp_provider) {
            result.providers.push('totp');
        }
        if (data.yubikey_provider) {
            result.providers.push('yubikey');
            result.yubikey = {
                clientId: data.yubikey_client_id,
                secretKey: data.yubikey_secret_key
            };
        }
        if (data.duo_provider) {
            result.providers.push('duo');
            result.duo = {
                hostName: data.duo_host_name,
                integrationKey: data.duo_integration_key,
                salt: data.duo_salt,
                secretKey: data.duo_secret_key
            };
        }
        return result;
    };
    MfaSettings.connection = (0, _canConnect2.default)([
        _parse2.default,
        _url2.default,
        _constructor2.default,
        _map2.default
    ], {
        Map: MfaSettings,
        url: {
            resource: '/',
            getData: function getData() {
                var params = {};
                params['api-version'] = 'v2';
                return _ajax2.default.request({
                    url: 'mfa/settings.json',
                    type: 'GET',
                    params: params
                }).then(function (settings) {
                    return MfaSettings.mapFromApi(settings);
                });
            },
            updateData: function updateData(params) {
                return _ajax2.default.request({
                    url: 'mfa/settings.json?api-version=v2',
                    type: 'POST',
                    params: MfaSettings.mapToApi(params)
                });
            }
        }
    });
    exports.default = MfaSettings;
});
/*app/view/template/form/administration/mfa/settings.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/form/administration/mfa/settings.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/form/administration/mfa/settings.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'provider-section totp',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-totp-provider-toggle-button',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Time-based One Time Password\')',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'description enabled',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'The Time-based One Time Password provider is enabled for all users. They can setup this provider in their profile and use it as second factor authentication.\')',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'description disabled',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'The Time-based One Time Password provider is disabled for all users.\')',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'provider-section yubikey',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-yubikey-provider-toggle-button',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Yubikey',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'description enabled',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'The Yubikey provider is enabled for all users. They can setup this provider in their profile and use it as second factor authentication.\')',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                15
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                16
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'description disabled',
                16
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                16
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'The Yubikey provider is disabled for all users.\')',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                18
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form-content',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                19
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text js_form_element_wrapper',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                20
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                21
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                21
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Client identifier\')',
                21
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                21
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                22
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                22
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-yubikey-client-id-input',
                22
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                22
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                22
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                22
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                22
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                22
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required fluid',
                22
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                22
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                22
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '123456789',
                22
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                22
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                22
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                23
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                23
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-yubikey-client-id-input-feedback',
                23
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                23
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                23
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                23
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                23
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                24
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                25
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                25
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text js_form_element_wrapper',
                25
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                25
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                25
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                26
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                26
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Secret key\')',
                26
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                26
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                27
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                27
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-yubikey-secret-key-input',
                27
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                27
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                27
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(edit',
                27
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                27
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#else',
                27
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'password',
                27
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                27
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                27
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                27
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required fluid',
                27
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                27
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                27
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '**********',
                27
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                27
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                27
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                27
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                28
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                28
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-yubikey-secret-key-input-feedback',
                28
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                28
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                28
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                28
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                28
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                28
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                28
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                28
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                29
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                29
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                30
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                31
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                31
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                33
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                33
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'provider-section duo',
                33
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                33
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                33
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                33
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                34
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                34
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                34
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                34
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-duo-provider-toggle-button',
                34
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                34
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                34
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch',
                34
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                34
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                34
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                34
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                34
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                34
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Duo',
                34
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                34
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                34
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                34
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                35
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                35
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'description enabled',
                35
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                35
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                35
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                35
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'The Duo provider is enabled for all users. They can setup this provider in their profile and use it as second factor authentication.\')',
                36
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                36
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                37
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                37
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                38
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                38
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'description disabled',
                38
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                38
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                38
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                38
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'The Duo provider is disabled for all users.\')',
                39
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                39
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                40
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                40
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                41
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                41
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form-content',
                41
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                41
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                41
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                41
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                42
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                42
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text js_form_element_wrapper',
                42
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                42
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                42
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                42
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                43
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                43
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Hostname\')',
                43
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                43
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                43
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                44
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                44
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-duo-host-name-input',
                44
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                44
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                44
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                44
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                44
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                44
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required fluid',
                44
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                44
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                44
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'api-24zlkn4.duosecurity.com',
                44
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                44
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                44
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                44
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                45
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                45
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-duo-host-name-input-feedback',
                45
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                45
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                45
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                45
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                45
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                45
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                45
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                45
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                46
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                46
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                47
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                47
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text js_form_element_wrapper',
                47
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                47
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                47
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                47
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                48
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                48
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Integration key\')',
                48
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                48
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                48
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                49
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                49
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-duo-integration-key-input',
                49
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                49
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                49
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                49
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                49
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                49
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required fluid',
                49
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                49
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                49
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'HASJKDSQJO213123KQSLDF',
                49
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                49
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                49
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                49
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                50
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                50
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-duo-integration-key-input-feedback',
                50
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                50
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                50
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                50
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                50
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                50
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                50
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                50
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                51
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                51
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                52
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                52
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text js_form_element_wrapper',
                52
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                52
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                52
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                52
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                53
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                53
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Salt\')',
                53
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                53
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                53
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                54
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                54
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-duo-salt-input',
                54
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                54
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                54
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(edit',
                54
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                54
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#else',
                54
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'password',
                54
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                54
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                54
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                54
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required fluid',
                54
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                54
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                54
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '**********',
                54
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                54
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                54
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                54
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                55
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                55
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-duo-salt-input-feedback',
                55
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                55
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                55
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                55
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                55
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                55
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                55
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                55
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                56
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                56
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                57
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                57
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text js_form_element_wrapper',
                57
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                57
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                57
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                57
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                58
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                58
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Secret key\')',
                58
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                58
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                58
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                59
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                59
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-duo-secret-key-input',
                59
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                59
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                59
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(edit',
                59
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                59
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#else',
                59
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'password',
                59
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                59
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                59
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                59
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required fluid',
                59
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                59
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                59
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '**********',
                59
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                59
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                59
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                59
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                60
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                60
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-duo-secret-key-input-feedback',
                60
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                60
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                60
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                60
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                60
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                60
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                60
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                60
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                61
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                61
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                62
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                62
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                63
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                63
            ]
        },
        {
            'tokenType': 'done',
            'args': [64]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/form/administration/mfa/settings*/
define('app/form/administration/mfa/settings', [
    'exports',
    'passbolt-mad/form/feedback',
    'passbolt-mad/form/form',
    'passbolt-mad/form/element/textbox',
    'passbolt-mad/form/element/toggle_button',
    'app/view/template/form/administration/mfa/settings.stache!'
], function (exports, _feedback, _form, _textbox, _toggle_button, _settings) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _feedback2 = _interopRequireDefault(_feedback);
    var _form2 = _interopRequireDefault(_form);
    var _textbox2 = _interopRequireDefault(_textbox);
    var _toggle_button2 = _interopRequireDefault(_toggle_button);
    var _settings2 = _interopRequireDefault(_settings);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var MfaSettingsForm = _form2.default.extend('passbolt.form.administration.mfa.Settings', {
        defaults: {
            template: _settings2.default,
            silentLoading: false,
            loadedOnStart: false
        }
    }, {
        loadForm: function loadForm(mfaSettings) {
            this.options.mfaSettings = mfaSettings;
            this._enableForm();
        },
        afterStart: function afterStart() {
            this._initForm();
            this._super();
        },
        beforeRender: function beforeRender() {
            this._super();
            this.setViewData('edit', this.options.edit);
        },
        _initForm: function _initForm() {
            this._initFormTotpSection();
            this._initFormYubikeySection();
            this._initFormDuoSection();
        },
        _initFormTotpSection: function _initFormTotpSection() {
            this.addElement(new _toggle_button2.default('#js-totp-provider-toggle-button', {
                label: null,
                modelReference: 'MfaSettings.totp_provider',
                state: { disabled: true }
            }).start());
        },
        _initFormYubikeySection: function _initFormYubikeySection() {
            this.addElement(new _toggle_button2.default('#js-yubikey-provider-toggle-button', {
                label: null,
                modelReference: 'MfaSettings.yubikey_provider',
                state: { disabled: true }
            }).start());
            this.addElement(new _textbox2.default('#js-yubikey-client-id-input', {
                modelReference: 'MfaSettings.yubikey_client_id',
                state: { disabled: true },
                validate: function validate(formData) {
                    return formData.MfaSettings.yubikey_provider;
                }
            }).start(), new _feedback2.default('#js-yubikey-client-id-input-feedback', {}).start());
            this.addElement(new _textbox2.default('#js-yubikey-secret-key-input', {
                modelReference: 'MfaSettings.yubikey_secret_key',
                state: { disabled: true },
                validate: function validate(formData) {
                    return formData.MfaSettings.yubikey_provider;
                }
            }).start(), new _feedback2.default('#js-yubikey-secret-key-input-feedback', {}).start());
        },
        _initFormDuoSection: function _initFormDuoSection() {
            this.addElement(new _toggle_button2.default('#js-duo-provider-toggle-button', {
                label: null,
                modelReference: 'MfaSettings.duo_provider',
                state: { disabled: true }
            }).start());
            this.addElement(new _textbox2.default('#js-duo-host-name-input', {
                modelReference: 'MfaSettings.duo_host_name',
                state: { disabled: true },
                validate: function validate(formData) {
                    return formData.MfaSettings.duo_provider;
                }
            }).start(), new _feedback2.default('#js-duo-host-name-input-feedback', {}).start());
            this.addElement(new _textbox2.default('#js-duo-integration-key-input', {
                modelReference: 'MfaSettings.duo_integration_key',
                state: { disabled: true },
                validate: function validate(formData) {
                    return formData.MfaSettings.duo_provider;
                }
            }).start(), new _feedback2.default('#js-duo-integration-key-input-feedback', {}).start());
            this.addElement(new _textbox2.default('#js-duo-salt-input', {
                modelReference: 'MfaSettings.duo_salt',
                state: { disabled: true },
                validate: function validate(formData) {
                    return formData.MfaSettings.duo_provider;
                }
            }).start(), new _feedback2.default('#js-duo-salt-input-feedback', {}).start());
            this.addElement(new _textbox2.default('#js-duo-secret-key-input', {
                modelReference: 'MfaSettings.duo_secret_key',
                state: { disabled: true },
                validate: function validate(formData) {
                    return formData.MfaSettings.duo_provider;
                }
            }).start(), new _feedback2.default('#js-duo-secret-key-input-feedback', {}).start());
        },
        _enableForm: function _enableForm() {
            var mfaSettings = this.options.mfaSettings;
            this.load({ 'MfaSettings': mfaSettings });
            if (mfaSettings.totp_provider) {
                $('.provider-section.totp').addClass('enabled');
            } else {
                $('.provider-section.totp').removeClass('enabled');
            }
            if (mfaSettings.yubikey_provider) {
                $('.provider-section.yubikey').addClass('enabled');
            } else {
                $('.provider-section.yubikey').removeClass('enabled');
            }
            if (mfaSettings.duo_provider) {
                $('.provider-section.duo').addClass('enabled');
            } else {
                $('.provider-section.duo').removeClass('enabled');
            }
            for (var i in this.elements) {
                this.elements[i].state.disabled = false;
            }
            this.state.loaded = true;
        },
        '{element} #js-totp-provider-toggle-button changed': function elementJsTotpProviderToggleButtonChanged(el, ev) {
            var enabled = ev.data.value;
            if (enabled) {
                $('.provider-section.totp').addClass('enabled');
            } else {
                $('.provider-section.totp').removeClass('enabled');
            }
        },
        '{element} #js-yubikey-provider-toggle-button changed': function elementJsYubikeyProviderToggleButtonChanged(el, ev) {
            var enabled = ev.data.value;
            if (enabled) {
                $('.provider-section.yubikey').addClass('enabled');
            } else {
                $('.provider-section.yubikey').removeClass('enabled');
            }
        },
        '{element} #js-duo-provider-toggle-button changed': function elementJsDuoProviderToggleButtonChanged(el, ev) {
            var enabled = ev.data.value;
            if (enabled) {
                $('.provider-section.duo').addClass('enabled');
            } else {
                $('.provider-section.duo').removeClass('enabled');
            }
        }
    });
    exports.default = MfaSettingsForm;
});
/*app/view/template/component/administration/mfa/primary_menu.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/administration/mfa/primary_menu.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/administration/mfa/primary_menu.stache', [
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-mfa-settings-save-button',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-save',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'save settings\'',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                6
            ]
        },
        {
            'tokenType': 'done',
            'args': [7]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/administration/mfa/primary_menu*/
define('app/component/administration/mfa/primary_menu', [
    'exports',
    'passbolt-mad/component/button',
    'passbolt-mad/component/component',
    'app/view/template/component/administration/mfa/primary_menu.stache!'
], function (exports, _button, _component, _primary_menu) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _button2 = _interopRequireDefault(_button);
    var _component2 = _interopRequireDefault(_component);
    var _primary_menu2 = _interopRequireDefault(_primary_menu);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PrimaryMenu = _component2.default.extend('passbolt.component.administration.mfa.PrimaryMenu', { defaults: { template: _primary_menu2.default } }, {
        afterStart: function afterStart() {
            this.saveButton = new _button2.default('#js-mfa-settings-save-button', { state: { disabled: true } });
            this.saveButton.start();
        }
    });
    exports.default = PrimaryMenu;
});
/*app/view/template/component/administration/mfa/settings.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/administration/mfa/settings.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/administration/mfa/settings.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'grid grid-responsive-12',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'row',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'mfa-settings col8',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'form',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-mfa-settings-form',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'form',
                false,
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'form',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '&nbsp;',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n        ',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'col4 last',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h2',
                false,
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h2',
                false,
                9
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Need help?\')',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h2',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Check out our Multi Factor Authentication configuration guide\')',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'href',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'https://help.passbolt.com/configure',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'href',
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'target',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '_blank',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'target',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-life-ring',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Read documentation\')',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                17
            ]
        },
        {
            'tokenType': 'done',
            'args': [18]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/administration/mfa/mfa_settings*/
define('app/component/administration/mfa/mfa_settings', [
    'exports',
    'passbolt-mad/model/map/action',
    'passbolt-mad/component/component',
    'passbolt-mad/helper/component',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/component/menu',
    'app/model/map/mfa_settings',
    'app/form/administration/mfa/settings',
    'app/component/administration/mfa/primary_menu',
    'can-route',
    'app/view/template/component/administration/mfa/settings.stache!',
    'app/view/template/component/breadcrumb/breadcrumb_item.stache!'
], function (exports, _action, _component, _component3, _i18n, _menu, _mfa_settings, _settings, _primary_menu, _canRoute, _settings3, _breadcrumb_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _component2 = _interopRequireDefault(_component);
    var _component4 = _interopRequireDefault(_component3);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _menu2 = _interopRequireDefault(_menu);
    var _mfa_settings2 = _interopRequireDefault(_mfa_settings);
    var _settings2 = _interopRequireDefault(_settings);
    var _primary_menu2 = _interopRequireDefault(_primary_menu);
    var _canRoute2 = _interopRequireDefault(_canRoute);
    var _settings4 = _interopRequireDefault(_settings3);
    var _breadcrumb_item2 = _interopRequireDefault(_breadcrumb_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var MfaSettingsAdmin = _component2.default.extend('passbolt.component.administration.mfa.MfaSettings', {
        defaults: {
            template: _settings4.default,
            silentLoading: false
        }
    }, {
        afterStart: function afterStart() {
            this._initPrimaryMenu();
            this._initBreadcrumb();
            this._initForm();
        },
        _initPrimaryMenu: function _initPrimaryMenu() {
            var selector = $('#js_wsp_primary_menu_wrapper');
            var menu = _component4.default.create(selector, 'inside_replace', _primary_menu2.default);
            menu.start();
            this.primaryMenu = menu;
        },
        _initBreadcrumb: function _initBreadcrumb() {
            var _this = this;
            var breadcrumbWrapperSelector = '#js_wsp_administration_breadcrumb';
            var options = { itemTemplate: _breadcrumb_item2.default };
            var breadcrumb = _component4.default.create($(breadcrumbWrapperSelector), 'inside_replace', _menu2.default, options);
            breadcrumb.start();
            var items = [];
            var administrationAction = new _action2.default({
                label: __('Administration'),
                action: function action() {
                    return _this._goToSection('mfa');
                }
            });
            items.push(administrationAction);
            var mfaAction = new _action2.default({
                label: __('Multi factor authentication'),
                action: function action() {
                    return _this._goToSection('mfa');
                }
            });
            items.push(mfaAction);
            var mfaSettingsAction = new _action2.default({
                label: __('Settings'),
                action: function action() {
                    return _this._goToSection('mfa');
                }
            });
            items.push(mfaSettingsAction);
            breadcrumb.load(items);
        },
        _initForm: function _initForm() {
            var _this2 = this;
            this.form = new _settings2.default('#js-mfa-settings-form');
            this.addLoadedDependency(this.form);
            this.form.start();
            if (!this.mfaSettings) {
                return _mfa_settings2.default.findOne().then(function (mfaSettings) {
                    _this2.mfaSettings = mfaSettings;
                    _this2.form.loadForm(mfaSettings);
                });
            } else {
                this.form.loadForm(this.mfaSettings);
            }
        },
        _goToSection: function _goToSection(section) {
            _canRoute2.default.data.update({
                controller: 'Administration',
                action: section
            });
            this.refresh();
        },
        '#js-mfa-settings-form changed': function jsMfaSettingsFormChanged() {
            this.primaryMenu.saveButton.state.disabled = false;
        },
        '{window} #js_wsp_primary_menu_wrapper #js-mfa-settings-save-button click': function windowJs_wsp_primary_menu_wrapperJsMfaSettingsSaveButtonClick() {
            var _this3 = this;
            if (this.form.validate()) {
                this.state.loaded = false;
                var data = this.form.getData();
                this.mfaSettings.assign(data.MfaSettings);
                this.mfaSettings.save().then(function () {
                    _this3.state.loaded = true;
                    _this3.refresh();
                });
            }
        }
    });
    exports.default = MfaSettingsAdmin;
});
/*app/model/map/email_notification_settings*/
define('app/model/map/email_notification_settings', [
    'exports',
    'app/net/ajax',
    'can-connect',
    'can-connect/data/url/url',
    'can-connect/data/parse/parse',
    'can-connect/constructor/constructor',
    'can-connect/can/map/map',
    'passbolt-mad/model/map/map',
    'passbolt-mad/util/lang/i18n',
    'uuid/v4',
    'urijs/src/punycode',
    'urijs/src/SecondLevelDomains',
    'urijs/src/IPv6'
], function (exports, _ajax, _canConnect, _url, _parse, _constructor, _map, _map3, _i18n, _v) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _canConnect2 = _interopRequireDefault(_canConnect);
    var _url2 = _interopRequireDefault(_url);
    var _parse2 = _interopRequireDefault(_parse);
    var _constructor2 = _interopRequireDefault(_constructor);
    var _map2 = _interopRequireDefault(_map);
    var _map4 = _interopRequireDefault(_map3);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _v2 = _interopRequireDefault(_v);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var EmailNotificationSettings = _map4.default.extend('passbolt.model.EmailNotificationSettings', {
        id: {
            type: 'string',
            value: function value() {
                return (0, _v2.default)();
            }
        },
        'show_comment': 'boolean',
        'show_description': 'boolean',
        'show_secret': 'boolean',
        'show_uri': 'boolean',
        'show_username': 'boolean',
        'send_comment_add': 'boolean',
        'send_password_create': 'boolean',
        'send_password_share': 'boolean',
        'send_password_update': 'boolean',
        'send_password_delete': 'boolean',
        'send_user_create': 'boolean',
        'send_user_recover': 'boolean',
        'send_group_delete': 'boolean',
        'send_group_user_add': 'boolean',
        'send_group_user_delete': 'boolean',
        'send_group_user_update': 'boolean',
        'send_group_manager_update': 'boolean'
    });
    _map4.default.setReference('EmailNotificationSettings', EmailNotificationSettings);
    EmailNotificationSettings.settingsOverridenByfile = function (data) {
        return data.sources_file === true && data.sources_database === true;
    };
    EmailNotificationSettings.fileConfigExists = function (data) {
        return data.sources_file === true;
    };
    EmailNotificationSettings.connection = (0, _canConnect2.default)([
        _parse2.default,
        _url2.default,
        _constructor2.default,
        _map2.default
    ], {
        Map: EmailNotificationSettings,
        url: {
            resource: '/',
            getData: function getData() {
                var params = {};
                params['api-version'] = 'v2';
                return _ajax2.default.request({
                    url: 'settings/emails/notifications.json',
                    type: 'GET',
                    params: params
                });
            },
            updateData: function updateData(params) {
                return _ajax2.default.request({
                    url: 'settings/emails/notifications.json?api-version=v2',
                    type: 'POST',
                    params: params
                });
            }
        }
    });
    exports.default = EmailNotificationSettings;
});
/*app/view/template/form/administration/email_notification/settings.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/form/administration/email_notification/settings.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/form/administration/email_notification/settings.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'row',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'col6',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Passwords\')',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-send-password-create-toggle-button',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-send-password-update-toggle-button',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-send-password-delete-toggle-button',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-send-password-share-toggle-button',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'col6 last',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Group membership\')',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-send-group-delete-toggle-button',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-send-group-user-add-toggle-button',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-send-group-user-delete-toggle-button',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-send-group-user-update-toggle-button',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                16
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                17
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'row',
                17
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                17
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                18
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                18
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'col6',
                18
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                18
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                18
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                19
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                19
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Registration & Recovery\')',
                19
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                19
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-send-user-create-toggle-button',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                20
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                20
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                21
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                21
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-send-user-recover-toggle-button',
                21
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                21
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                21
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch',
                21
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                21
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                21
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                21
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                22
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                22
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Comments\')',
                22
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                22
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                23
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                23
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-send-comment-add-toggle-button',
                23
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                23
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch',
                23
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                23
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                23
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                24
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                25
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                25
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'col6 last',
                25
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                25
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                25
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                26
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                26
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Group manager\')',
                26
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                26
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                27
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                27
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-send-group-manager-update-toggle-button',
                27
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                27
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                27
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch',
                27
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                27
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                27
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                27
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                27
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                28
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                28
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                29
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                29
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                30
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                30
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'row',
                30
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                30
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                30
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                31
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                31
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Email content visibility',
                31
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                31
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                31
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                32
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                32
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\tIn this section you can adjust the composition of the emails, e.g. which information will be included in the\n\t\tnotification.\n\t',
                32
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                35
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                35
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                36
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                36
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'col6',
                36
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                36
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                36
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                36
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                37
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                37
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Passwords\')',
                37
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                37
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                37
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                38
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                38
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-show-username-toggle-button',
                38
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                38
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                38
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch',
                38
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                38
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                38
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                38
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                38
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                39
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                39
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-show-uri-toggle-button',
                39
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                39
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                39
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch',
                39
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                39
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                39
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                39
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                39
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                40
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                40
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-show-secret-toggle-button',
                40
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                40
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                40
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch',
                40
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                40
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                40
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                40
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                40
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                41
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                41
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-show-description-toggle-button',
                41
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                41
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                41
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch',
                41
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                41
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                41
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                41
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                41
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                42
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                42
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                43
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                43
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'col6 last',
                43
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                43
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                43
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                43
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                44
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                44
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Comments\')',
                44
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                44
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                44
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                45
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                45
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-show-comment-toggle-button',
                45
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                45
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                45
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input toggle-switch',
                45
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                45
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                45
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                45
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                45
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                46
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                46
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                47
            ]
        },
        {
            'tokenType': 'done',
            'args': [47]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/form/administration/email_notification/settings*/
define('app/form/administration/email_notification/settings', [
    'exports',
    'passbolt-mad/form/form',
    'passbolt-mad/form/element/toggle_button',
    'app/view/template/form/administration/email_notification/settings.stache!'
], function (exports, _form, _toggle_button, _settings) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _form2 = _interopRequireDefault(_form);
    var _toggle_button2 = _interopRequireDefault(_toggle_button);
    var _settings2 = _interopRequireDefault(_settings);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var EmailNotificationsSettingsForm = _form2.default.extend('passbolt.form.administration.email_notification.Settings', {
        defaults: {
            template: _settings2.default,
            silentLoading: false,
            loadedOnStart: false
        }
    }, {
        loadForm: function loadForm(emailNotificationSettings) {
            this.options.emailNotificationSettings = emailNotificationSettings;
            this._enableForm();
        },
        afterStart: function afterStart() {
            this._initForm();
            this._super();
        },
        _initForm: function _initForm() {
            this._initFormPasswordSection();
            this._initFormRegistrationSection();
            this._initFormCommentSection();
            this._initFormGroupSection();
            this._initFormGroupManagerSection();
            this._initFormShowSection();
        },
        _initFormPasswordSection: function _initFormPasswordSection() {
            this.addElement(new _toggle_button2.default('#js-send-password-create-toggle-button', {
                label: __('When a password is created, notify its creator.'),
                modelReference: 'EmailNotificationSettings.send_password_create',
                state: { disabled: true }
            }).start());
            this.addElement(new _toggle_button2.default('#js-send-password-update-toggle-button', {
                label: __('When a password is updated, notify the users who have access to it.'),
                modelReference: 'EmailNotificationSettings.send_password_update',
                state: { disabled: true }
            }).start());
            this.addElement(new _toggle_button2.default('#js-send-password-delete-toggle-button', {
                label: __('When a password is deleted, notify the users who had access to it.'),
                modelReference: 'EmailNotificationSettings.send_password_delete',
                state: { disabled: true }
            }).start());
            this.addElement(new _toggle_button2.default('#js-send-password-share-toggle-button', {
                label: __('When a password is shared, notify the users who gain access to it.'),
                modelReference: 'EmailNotificationSettings.send_password_share',
                state: { disabled: true }
            }).start());
        },
        _initFormRegistrationSection: function _initFormRegistrationSection() {
            this.addElement(new _toggle_button2.default('#js-send-user-create-toggle-button', {
                label: __('When new users are invited to passbolt, notify them.'),
                modelReference: 'EmailNotificationSettings.send_user_create',
                state: { disabled: true }
            }).start());
            this.addElement(new _toggle_button2.default('#js-send-user-recover-toggle-button', {
                label: __('When users try to recover their account, notify them.'),
                modelReference: 'EmailNotificationSettings.send_user_recover',
                state: { disabled: true }
            }).start());
        },
        _initFormCommentSection: function _initFormCommentSection() {
            this.addElement(new _toggle_button2.default('#js-send-comment-add-toggle-button', {
                label: __('When a comment is posted on a password, notify the users who have access to this password.'),
                modelReference: 'EmailNotificationSettings.send_comment_add',
                state: { disabled: true }
            }).start());
        },
        _initFormGroupSection: function _initFormGroupSection() {
            this.addElement(new _toggle_button2.default('#js-send-group-delete-toggle-button', {
                label: __('When a group is deleted, notify the users who were member of it.'),
                modelReference: 'EmailNotificationSettings.send_group_delete',
                state: { disabled: true }
            }).start());
            this.addElement(new _toggle_button2.default('#js-send-group-user-add-toggle-button', {
                label: __('When users are added to a group, notify them.'),
                modelReference: 'EmailNotificationSettings.send_group_user_add',
                state: { disabled: true }
            }).start());
            this.addElement(new _toggle_button2.default('#js-send-group-user-delete-toggle-button', {
                label: __('When users are removed from a group, notify them.'),
                modelReference: 'EmailNotificationSettings.send_group_user_delete',
                state: { disabled: true }
            }).start());
            this.addElement(new _toggle_button2.default('#js-send-group-user-update-toggle-button', {
                label: __('When user roles change in a group, notify the corresponding users.'),
                modelReference: 'EmailNotificationSettings.send_group_user_update',
                state: { disabled: true }
            }).start());
        },
        _initFormGroupManagerSection: function _initFormGroupManagerSection() {
            this.addElement(new _toggle_button2.default('#js-send-group-manager-update-toggle-button', {
                label: __('When members of a group change, notify the group manager(s).'),
                modelReference: 'EmailNotificationSettings.send_group_manager_update',
                state: { disabled: true }
            }).start());
        },
        _initFormShowSection: function _initFormShowSection() {
            this.addElement(new _toggle_button2.default('#js-show-username-toggle-button', {
                label: __('Username'),
                modelReference: 'EmailNotificationSettings.show_username',
                state: { disabled: true }
            }).start());
            this.addElement(new _toggle_button2.default('#js-show-uri-toggle-button', {
                label: __('URI'),
                modelReference: 'EmailNotificationSettings.show_uri',
                state: { disabled: true }
            }).start());
            this.addElement(new _toggle_button2.default('#js-show-secret-toggle-button', {
                label: __('Encrypted secret'),
                modelReference: 'EmailNotificationSettings.show_secret',
                state: { disabled: true }
            }).start());
            this.addElement(new _toggle_button2.default('#js-show-description-toggle-button', {
                label: __('Description'),
                modelReference: 'EmailNotificationSettings.show_description',
                state: { disabled: true }
            }).start());
            this.addElement(new _toggle_button2.default('#js-show-comment-toggle-button', {
                label: __('Comment content'),
                modelReference: 'EmailNotificationSettings.show_comment',
                state: { disabled: true }
            }).start());
        },
        _enableForm: function _enableForm() {
            var emailNotificationSettings = this.options.emailNotificationSettings;
            this.load({ 'EmailNotificationSettings': emailNotificationSettings });
            for (var i in this.elements) {
                this.elements[i].state.disabled = false;
            }
            this.state.loaded = true;
        }
    });
    exports.default = EmailNotificationsSettingsForm;
});
/*app/view/template/component/administration/email_notification/primary_menu.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/administration/email_notification/primary_menu.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/administration/email_notification/primary_menu.stache', [
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-email-notification-settings-save-button',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-save',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'save settings\'',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                6
            ]
        },
        {
            'tokenType': 'done',
            'args': [7]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/administration/email_notification/primary_menu*/
define('app/component/administration/email_notification/primary_menu', [
    'exports',
    'passbolt-mad/component/button',
    'passbolt-mad/component/component',
    'app/view/template/component/administration/email_notification/primary_menu.stache!'
], function (exports, _button, _component, _primary_menu) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _button2 = _interopRequireDefault(_button);
    var _component2 = _interopRequireDefault(_component);
    var _primary_menu2 = _interopRequireDefault(_primary_menu);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PrimaryMenu = _component2.default.extend('passbolt.component.administration.email_notification.PrimaryMenu', { defaults: { template: _primary_menu2.default } }, {
        afterStart: function afterStart() {
            this.saveButton = new _button2.default('#js-email-notification-settings-save-button', { state: { disabled: true } });
            this.saveButton.start();
        }
    });
    exports.default = PrimaryMenu;
});
/*app/view/template/component/administration/email_notification/settings.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/administration/email_notification/settings.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/administration/email_notification/settings.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'grid grid-responsive-12',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'row',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'email-notification-settings col8',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'br',
                true,
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'br',
                true,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'warning message hidden',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'email-notification-setting-overridden-banner',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '                ',
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Settings have been found in your database as well as in your passbolt.php (or environment variables). The settings displayed in the form below are the one stored in your database and have precedence over others.\') ',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'warning message hidden',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'email-notification-fileconfig-exists-banner',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'You seem to have Email Notification Settings defined in your passbolt.php (or via environment variables). Submitting the form will overwrite those settings with the ones you choose in the form below.\') ',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n            ',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Email delivery',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                15
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                16
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            In this section you can choose which email notifications will be sent.\n        ',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                18
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'form',
                false,
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-email-notification-settings-form',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                19
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'form',
                false,
                19
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'form',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                19
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                20
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '&nbsp;',
                20
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                20
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                21
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                22
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                22
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'col4 last',
                22
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                22
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                22
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                23
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                23
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Need some help?\')',
                23
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                23
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                24
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                24
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'notice message',
                24
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                24
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                24
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                25
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                25
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'For more information about email notification, checkout the dedicated page on the help website.\')',
                25
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                25
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                26
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                26
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                26
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                26
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'href',
                26
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'https://help.passbolt.com/configure/notifications/email',
                26
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'href',
                26
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'target',
                26
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '_blank',
                26
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'target',
                26
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                26
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                27
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                27
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-life-ring',
                27
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                27
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                27
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                27
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                27
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                28
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                28
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Read documentation\')',
                28
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                28
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                28
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                29
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                29
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                30
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                31
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                31
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                32
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                32
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                33
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                33
            ]
        },
        {
            'tokenType': 'done',
            'args': [34]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/administration/email_notification/email_notification_settings*/
define('app/component/administration/email_notification/email_notification_settings', [
    'exports',
    'passbolt-mad/model/map/action',
    'passbolt-mad/component/component',
    'passbolt-mad/helper/component',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/component/menu',
    'app/model/map/email_notification_settings',
    'app/form/administration/email_notification/settings',
    'app/component/administration/email_notification/primary_menu',
    'can-route',
    'app/view/template/component/administration/email_notification/settings.stache!',
    'app/view/template/component/breadcrumb/breadcrumb_item.stache!'
], function (exports, _action, _component, _component3, _i18n, _menu, _email_notification_settings, _settings, _primary_menu, _canRoute, _settings3, _breadcrumb_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _component2 = _interopRequireDefault(_component);
    var _component4 = _interopRequireDefault(_component3);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _menu2 = _interopRequireDefault(_menu);
    var _email_notification_settings2 = _interopRequireDefault(_email_notification_settings);
    var _settings2 = _interopRequireDefault(_settings);
    var _primary_menu2 = _interopRequireDefault(_primary_menu);
    var _canRoute2 = _interopRequireDefault(_canRoute);
    var _settings4 = _interopRequireDefault(_settings3);
    var _breadcrumb_item2 = _interopRequireDefault(_breadcrumb_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var EmailNotificationSettingsComponent = _component2.default.extend('passbolt.component.administration.email_notification.EmailNotificationSettings', {
        defaults: {
            template: _settings4.default,
            silentLoading: false,
            settingsOverriden: false,
            fileConfigExists: false
        }
    }, {
        afterStart: function afterStart() {
            this._initPrimaryMenu();
            this._initBreadcrumb();
            this._initForm();
        },
        _initPrimaryMenu: function _initPrimaryMenu() {
            var selector = $('#js_wsp_primary_menu_wrapper');
            var menu = _component4.default.create(selector, 'inside_replace', _primary_menu2.default);
            menu.start();
            this.primaryMenu = menu;
        },
        _initBreadcrumb: function _initBreadcrumb() {
            var _this = this;
            var breadcrumbWrapperSelector = '#js_wsp_administration_breadcrumb';
            var options = { itemTemplate: _breadcrumb_item2.default };
            var breadcrumb = _component4.default.create($(breadcrumbWrapperSelector), 'inside_replace', _menu2.default, options);
            breadcrumb.start();
            var items = [];
            var administrationAction = new _action2.default({
                label: __('Administration'),
                action: function action() {
                    return _this._goToSection('emailNotification');
                }
            });
            items.push(administrationAction);
            var emailNotificationSettingsAction = new _action2.default({
                label: __('Email Notification Settings'),
                action: function action() {
                    return _this._goToSection('emailNotification');
                }
            });
            items.push(emailNotificationSettingsAction);
            breadcrumb.load(items);
        },
        _initForm: function _initForm() {
            var _this2 = this;
            this.form = new _settings2.default('#js-email-notification-settings-form');
            this.addLoadedDependency(this.form);
            this.form.start();
            if (!this.emailNotificationSettings) {
                return _email_notification_settings2.default.findOne().then(function (settings) {
                    _this2.emailNotificationSettings = settings;
                    _this2.form.loadForm(_this2.emailNotificationSettings);
                    _this2._showWarning();
                });
            } else {
                this.form.loadForm(this.emailNotificationSettings);
                this._showWarning();
            }
        },
        _showWarning: function _showWarning() {
            var settings = this.emailNotificationSettings;
            if (_email_notification_settings2.default.fileConfigExists(settings)) {
                document.getElementById('email-notification-fileconfig-exists-banner').classList.remove('hidden');
                if (_email_notification_settings2.default.settingsOverridenByfile(settings)) {
                    document.getElementById('email-notification-fileconfig-exists-banner').classList.add('hidden');
                    document.getElementById('email-notification-setting-overridden-banner').classList.remove('hidden');
                }
            }
        },
        _goToSection: function _goToSection(section) {
            _canRoute2.default.data.update({
                controller: 'Administration',
                action: section
            });
            this.refresh();
        },
        '#js-email-notification-settings-form changed': function jsEmailNotificationSettingsFormChanged() {
            this.primaryMenu.saveButton.state.disabled = false;
        },
        '{window} #js_wsp_primary_menu_wrapper #js-email-notification-settings-save-button click': function windowJs_wsp_primary_menu_wrapperJsEmailNotificationSettingsSaveButtonClick() {
            var _this3 = this;
            if (this.form.validate()) {
                this.state.loaded = false;
                var data = this.form.getData();
                this.emailNotificationSettings.assign(data.EmailNotificationSettings);
                this.emailNotificationSettings.save().then(function (settingsUpdated) {
                    _this3.emailNotificationSettings = settingsUpdated;
                    _this3.refresh();
                }).catch(function () {
                    _this3.emailNotificationSettings = null;
                    _this3.refresh();
                });
            }
        }
    });
    exports.default = EmailNotificationSettingsComponent;
});
/*app/view/template/component/administration/workspace.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/administration/workspace.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/administration/workspace.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_administration_workspace',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'panel left',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'navigation first',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wk_administration_menu',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'clearfix',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'panel middle',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wsp_administration_breadcrumb',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'breadcrumbs',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wk_administration_main',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'workspace-main',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                17
            ]
        },
        {
            'tokenType': 'done',
            'args': [17]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/administration/workspace*/
define('app/component/administration/workspace', [
    'exports',
    'passbolt-mad/model/map/action',
    'passbolt-mad/component/component',
    'passbolt-mad/config/config',
    'passbolt-mad/util/lang/i18n',
    'app/component/administration/users_directory/users_directory_settings',
    'passbolt-mad/component/menu',
    'app/component/administration/mfa/mfa_settings',
    'app/component/administration/email_notification/email_notification_settings',
    'can-route',
    'app/view/template/component/administration/workspace.stache!',
    'uuid/v4'
], function (exports, _action, _component, _config, _i18n, _users_directory_settings, _menu, _mfa_settings, _email_notification_settings, _canRoute, _workspace, _v) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _component2 = _interopRequireDefault(_component);
    var _config2 = _interopRequireDefault(_config);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _users_directory_settings2 = _interopRequireDefault(_users_directory_settings);
    var _menu2 = _interopRequireDefault(_menu);
    var _mfa_settings2 = _interopRequireDefault(_mfa_settings);
    var _email_notification_settings2 = _interopRequireDefault(_email_notification_settings);
    var _canRoute2 = _interopRequireDefault(_canRoute);
    var _workspace2 = _interopRequireDefault(_workspace);
    var _v2 = _interopRequireDefault(_v);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var AdministrationWorkspace = _component2.default.extend('passbolt.component.administration.Workspace', {
        defaults: {
            name: 'administration_workspace',
            template: _workspace2.default,
            sections: [
                'profile',
                'keys'
            ],
            silentLoading: false
        }
    }, {
        init: function init(el, options) {
            this._super(el, options);
        },
        afterStart: function afterStart() {
            $('#js_wsp_primary_menu_wrapper').empty();
            $('#js_wsp_administration_breadcrumb').empty();
            this._initPrimarySidebar();
            this._initMfaSection();
            this._initUsersDirectorySection();
            this._initEmailNotificationSection();
        },
        _initPrimarySidebar: function _initPrimarySidebar() {
            var _this = this;
            var plugins = _config2.default.read('server.passbolt.plugins');
            var menu = new _menu2.default('#js_wk_administration_menu', {});
            menu.start();
            if (plugins.multiFactorAuthentication) {
                var mfaSettings = new _action2.default({
                    id: (0, _v2.default)(),
                    name: 'mfa',
                    label: __('Multi Factor Authentication'),
                    action: function action() {
                        return _this._goToSection('mfa');
                    }
                });
                menu.insertItem(mfaSettings);
                if (/mfa/.test(_canRoute2.default.data.action)) {
                    menu.selectItem(mfaSettings);
                }
            }
            if (plugins.directorySync) {
                var usersDirectorySettingsItem = new _action2.default({
                    id: (0, _v2.default)(),
                    name: 'usersDirectory',
                    label: __('Users Directory'),
                    action: function action() {
                        return _this._goToSection('usersDirectory');
                    }
                });
                menu.insertItem(usersDirectorySettingsItem);
                if (/usersDirectory/.test(_canRoute2.default.data.action)) {
                    menu.selectItem(usersDirectorySettingsItem);
                }
            }
            if (plugins.emailNotificationSettings) {
                var emailNotificationSettingsItem = new _action2.default({
                    id: 'js_app_nav_left_email_notification_link',
                    name: 'emailNotification',
                    label: __('Email Notifications'),
                    action: function action() {
                        return _this._goToSection('emailNotification');
                    }
                });
                menu.insertItem(emailNotificationSettingsItem);
                if (/emailNotification/.test(_canRoute2.default.data.action)) {
                    menu.selectItem(emailNotificationSettingsItem);
                }
            }
        },
        _initMfaSection: function _initMfaSection() {
            if (_canRoute2.default.data.action != 'mfa') {
                return;
            }
            var section = new _mfa_settings2.default('#js_wk_administration_main');
            section.start();
        },
        _initUsersDirectorySection: function _initUsersDirectorySection() {
            if (_canRoute2.default.data.action != 'usersDirectory') {
                return;
            }
            var section = new _users_directory_settings2.default('#js_wk_administration_main');
            section.start();
        },
        _initEmailNotificationSection: function _initEmailNotificationSection() {
            if (_canRoute2.default.data.action != 'emailNotification') {
                return;
            }
            var section = new _email_notification_settings2.default('#js_wk_administration_main');
            section.start();
        },
        _goToSection: function _goToSection(section) {
            _canRoute2.default.data.update({
                controller: 'Administration',
                action: section
            });
            this.refresh();
        }
    });
    exports.default = AdministrationWorkspace;
});
/*passbolt-mad@2.10.0#view/component/dropdown_menu*/
define('passbolt-mad@2.10.0#view/component/dropdown_menu', [
    'exports',
    'can-dom-data',
    'can-dom-events',
    'passbolt-mad/view/component/tree'
], function (exports, _canDomData, _canDomEvents, _tree) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canDomData2 = _interopRequireDefault(_canDomData);
    var _canDomEvents2 = _interopRequireDefault(_canDomEvents);
    var _tree2 = _interopRequireDefault(_tree);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var DropdownMenu = _tree2.default.extend('mad.view.component.DropdownMenu', {}, {
        open: function open(item) {
            var li = $('#' + item.id, this.element);
            li.removeClass('closed').addClass('opened');
            var control = $('.control:first', li);
            control.removeClass('open').addClass('close');
        },
        close: function close(item) {
            var li = $('#' + item.id, this.element);
            li.removeClass('opened').addClass('closed');
            var control = $('.control:first', li);
            control.removeClass('close').addClass('open');
        },
        '{element} li mouseover': function elementLiMouseover(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            var data = null;
            var itemClass = this.getController().getItemClass();
            if (this.getController().getItemClass()) {
                data = _canDomData2.default.get(el, itemClass.shortName);
            } else {
                data = el.id;
            }
            _canDomEvents2.default.dispatch(this.element, {
                type: 'item_opened',
                data: {
                    item: data,
                    srcEv: ev
                }
            });
        },
        '{element} li mouseleave': function elementLiMouseleave(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            var data = null;
            var itemClass = this.getController().getItemClass();
            if (this.getController().getItemClass()) {
                data = _canDomData2.default.get(el, itemClass.shortName);
            } else {
                data = el.id;
            }
            _canDomEvents2.default.dispatch(this.element, {
                type: 'item_closed',
                data: {
                    item: data,
                    srcEv: ev
                }
            });
        }
    });
    exports.default = DropdownMenu;
});
/*passbolt-mad@2.10.0#view/component/contextual_menu*/
define('passbolt-mad@2.10.0#view/component/contextual_menu', [
    'exports',
    'passbolt-mad/view/component/dropdown_menu'
], function (exports, _dropdown_menu) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _dropdown_menu2 = _interopRequireDefault(_dropdown_menu);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ContextualMenu = _dropdown_menu2.default.extend('mad.view.component.ContextualMenu', {}, {
        '{document} mouseup': function documentMouseup(el, ev) {
            var controller = this.getController();
            var menuIsSrc = this.element.id == ev.target.id;
            var menuIsParent = $(ev.target).parents('#' + controller.getId()).length;
            if (!menuIsSrc && !menuIsParent) {
                controller.destroyAndRemove();
            }
        },
        '{element} contextmenu': function elementContextmenu(el, ev) {
            ev.preventDefault();
        }
    });
    exports.default = ContextualMenu;
});
/*passbolt-mad@2.10.0#component/dropdown_menu*/
define('passbolt-mad@2.10.0#component/dropdown_menu', [
    'exports',
    'passbolt-mad/component/menu',
    'passbolt-mad/view/component/dropdown_menu'
], function (exports, _menu, _dropdown_menu) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _menu2 = _interopRequireDefault(_menu);
    var _dropdown_menu2 = _interopRequireDefault(_dropdown_menu);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var DropdownMenu = _menu2.default.extend('mad.component.DropdownMenu', {
        defaults: {
            label: 'Drop Down Menu Component',
            viewClass: _dropdown_menu2.default,
            cssClasses: ['dropdownmenu'],
            callbacks: {
                item_selected: null,
                item_right_selected: null,
                item_hovered: null
            }
        }
    }, {
        open: function open(item) {
            this.view.open(item);
        },
        close: function close(item) {
            this.view.close(item);
        },
        '{element} item_opened': function elementItem_opened(el, ev) {
            var item = ev.data.item;
            this.open(item);
        },
        'element} item_closed': function elementItem_closed(el, ev) {
            var item = ev.data.item;
            this.close(item);
        }
    });
    exports.default = DropdownMenu;
});
/*passbolt-mad@2.10.0#component/contextual_menu*/
define('passbolt-mad@2.10.0#component/contextual_menu', [
    'exports',
    'passbolt-mad/view/component/contextual_menu',
    'passbolt-mad/component/dropdown_menu',
    'passbolt-mad/helper/html'
], function (exports, _contextual_menu, _dropdown_menu, _html) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _contextual_menu2 = _interopRequireDefault(_contextual_menu);
    var _dropdown_menu2 = _interopRequireDefault(_dropdown_menu);
    var _html2 = _interopRequireDefault(_html);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ContextualMenu = _dropdown_menu2.default.extend('mad.component.ContextualMenu', {
        defaults: {
            viewClass: _contextual_menu2.default,
            cssClasses: ['contextual-menu'],
            source: null,
            coordinates: {
                x: null,
                y: null
            }
        },
        _instance: null,
        instantiate: function instantiate(options) {
            if (this._instance) {
                this._instance.destroyAndRemove();
            }
            _html2.default.create('body', 'last', '<ul id="js_contextual_menu" />');
            var instance = new this('#js_contextual_menu', options);
            this._instance = instance;
            return instance;
        }
    }, {
        afterStart: function afterStart() {
            this._super();
            this.view.position({ coordinates: this.options.coordinates });
            $(this.element).show();
        }
    });
    exports.default = ContextualMenu;
});
/*app/view/component/navigation/filter*/
define('app/view/component/navigation/filter', [
    'exports',
    'passbolt-mad/view/view'
], function (exports, _view) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _view2 = _interopRequireDefault(_view);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var FilterView = _view2.default.extend('passbolt.view.component.navigation.Filter', {}, {
        'form submit': function formSubmit() {
            $(this.element).trigger('update');
        }
    });
    exports.default = FilterView;
});
/*app/view/template/form/user/avatar.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/form/user/avatar.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/form/user/avatar.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form-content',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text input-password-wrapper',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input required',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'for',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_avatar',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'for',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Avatar\') ',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'file',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_avatar',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'select an image\') ',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'submit-wrapper clearfix',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'submit',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button primary',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value',
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'save\') ',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-dialog-cancel cancel',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                14
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'cancel\') ',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                15
            ]
        },
        {
            'tokenType': 'done',
            'args': [16]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/form/user/edit_avatar*/
define('app/form/user/edit_avatar', [
    'exports',
    'passbolt-mad/form/form',
    'app/view/template/form/user/avatar.stache!'
], function (exports, _form, _avatar) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _form2 = _interopRequireDefault(_form);
    var _avatar2 = _interopRequireDefault(_avatar);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var EditAvatarForm = _form2.default.extend('passbolt.form.user.Avatar', { defaults: { template: _avatar2.default } }, {
        afterStart: function afterStart() {
            this.on();
        }
    });
    exports.default = EditAvatarForm;
});
/*app/view/template/component/breadcrumb/breadcrumb.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/breadcrumb/breadcrumb.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/breadcrumb/breadcrumb.stache', [
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                2
            ]
        },
        {
            'tokenType': 'done',
            'args': [3]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/settings/workspace_breadcrumb*/
define('app/component/settings/workspace_breadcrumb', [
    'exports',
    'passbolt-mad/model/map/action',
    'passbolt-mad/component/component',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/component/menu',
    'can-route',
    'app/model/map/user',
    'uuid/v4',
    'app/view/template/component/breadcrumb/breadcrumb.stache!',
    'app/view/template/component/breadcrumb/breadcrumb_item.stache!'
], function (exports, _action, _component, _i18n, _menu, _canRoute, _user, _v, _breadcrumb, _breadcrumb_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _component2 = _interopRequireDefault(_component);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _menu2 = _interopRequireDefault(_menu);
    var _canRoute2 = _interopRequireDefault(_canRoute);
    var _user2 = _interopRequireDefault(_user);
    var _v2 = _interopRequireDefault(_v);
    var _breadcrumb2 = _interopRequireDefault(_breadcrumb);
    var _breadcrumb_item2 = _interopRequireDefault(_breadcrumb_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var WorkspaceBreadcrumbComponent = _component2.default.extend('passbolt.component.settings.WorkspaceBreadcrumb', {
        defaults: {
            template: _breadcrumb2.default,
            status: 'hidden',
            filter: null
        }
    }, {
        init: function init(el, options) {
            this._super(el, options);
            this._initRouteListener();
        },
        _initRouteListener: function _initRouteListener() {
            var _this = this;
            var executeFunc = function executeFunc() {
                return _this._dispatchRoute();
            };
            _canRoute2.default.data.on('action', executeFunc);
            this.state.on('destroyed', function () {
                return _canRoute2.default.data.off('action', executeFunc);
            });
        },
        _dispatchRoute: function _dispatchRoute() {
            if (_canRoute2.default.data.controller == 'Settings') {
                var section = _canRoute2.default.data.action;
                this.refreshMenuItems(section);
            }
        },
        afterStart: function afterStart() {
            var menuSelector = '#' + this.getId() + ' ul';
            this.options.menu = new _menu2.default(menuSelector, { itemTemplate: _breadcrumb_item2.default });
            this.options.menu.start();
            this.menuItems = [];
            this.sectionMenuItems = [];
            var allUsersItem = new _action2.default({
                id: (0, _v2.default)(),
                label: __('All users'),
                action: function action() {
                    return _canRoute2.default.data.update({
                        controller: 'User',
                        action: 'index'
                    });
                }
            });
            this.menuItems.push(allUsersItem);
            var profileItem = new _action2.default({
                id: (0, _v2.default)(),
                label: _user2.default.getCurrent().profile.fullName(),
                action: function action() {
                    return _canRoute2.default.data.update({
                        controller: 'Settings',
                        action: 'profile'
                    });
                }
            });
            this.menuItems.push(profileItem);
            this.sectionMenuItems['profile'] = [new _action2.default({
                    id: (0, _v2.default)(),
                    label: __('Profile'),
                    action: function action() {
                        return;
                    }
                })];
            this.sectionMenuItems['keys'] = [new _action2.default({
                    id: (0, _v2.default)(),
                    label: __('Keys inspector'),
                    action: function action() {
                        return;
                    }
                })];
            this.sectionMenuItems['theme'] = [new _action2.default({
                    id: (0, _v2.default)(),
                    label: __('Theme'),
                    action: function action() {
                        return;
                    }
                })];
            this.sectionMenuItems['mfa'] = [new _action2.default({
                    id: (0, _v2.default)(),
                    label: __('Multi factor authentication'),
                    action: function action() {
                        return;
                    }
                })];
            this._dispatchRoute();
        },
        load: function load() {
        },
        destroy: function destroy() {
            $('#' + this.getId() + ' ul').empty();
            this._super();
        },
        refreshMenuItems: function refreshMenuItems(section) {
            var menuItems = this.sectionMenuItems[section] !== undefined ? $.merge($.merge([], this.menuItems), this.sectionMenuItems[section]) : this.menuItems;
            this.options.menu.reset();
            this.options.menu.load(menuItems);
        },
        '{mad.bus.element} request_settings_section': function madBusElementRequest_settings_section(el, ev) {
            var section = ev.data.section;
            this.refreshMenuItems(section);
        }
    });
    exports.default = WorkspaceBreadcrumbComponent;
});
/*app/view/template/component/gpgkey/keys.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/gpgkey/keys.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/gpgkey/keys.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'grid grid-responsive-12',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'row',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'col6 key-info',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Information for public and secret key',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'table',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'table-info',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'privkeyinfo',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'table',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'tr',
                false,
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tr',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Key Id',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'keyId',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input select tooltip-top',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'data-tooltip',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'sorry you can only have one key set at the moment',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'data-tooltip',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t\t',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'select',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'data[Key][0]',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'KeyId',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'disabled',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'disabled',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'disabled',
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'select',
                false,
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t\t\t',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'option',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value',
                12
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' gpgkey.key_id ',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'option',
                false,
                12
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' gpgkey.key_id ',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'option',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t\t',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'select',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tr',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                16
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'tr',
                false,
                17
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tr',
                false,
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                17
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                18
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Uid',
                18
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                18
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'uid',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                19
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' gpgkey.uid ',
                19
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                19
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tr',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                20
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'tr',
                false,
                21
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tr',
                false,
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                21
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                22
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Fingerprint',
                22
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                22
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                23
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fingerprint',
                23
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                23
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' gpgkey.fingerprint ',
                23
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                23
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tr',
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                24
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'tr',
                false,
                25
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tr',
                false,
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                25
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                26
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Created',
                26
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                26
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                27
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                27
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'created',
                27
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                27
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                27
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' gpgkey.key_created ',
                27
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                27
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                27
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tr',
                28
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                28
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'tr',
                false,
                29
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tr',
                false,
                29
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                29
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                30
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Expires',
                30
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                30
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                31
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                31
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'expires',
                31
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                31
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                31
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' gpgkey.expires ',
                31
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                31
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                31
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tr',
                32
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                32
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'tr',
                false,
                33
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tr',
                false,
                33
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                33
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                34
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                34
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Key Length',
                34
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                34
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                34
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                35
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                35
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'length',
                35
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                35
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                35
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' gpgkey.bits ',
                35
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                35
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                35
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tr',
                36
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                36
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'tr',
                false,
                37
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tr',
                false,
                37
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                37
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                38
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                38
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Algorithm',
                38
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                38
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                38
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                39
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                39
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'algorithm',
                39
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                39
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                39
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' gpgkey.type ',
                39
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                39
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                39
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tr',
                40
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                40
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'table',
                41
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                41
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                42
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                42
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                43
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                43
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'col6 last key-export',
                43
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                43
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                43
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                43
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                44
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                44
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Public key block',
                44
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                44
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                44
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                45
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                45
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input textarea gpgkey',
                45
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                45
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'rel',
                45
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'publicKey',
                45
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'rel',
                45
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                45
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                45
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'textarea',
                false,
                46
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                46
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'publicKeyUnarmored',
                46
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                46
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                46
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fluid code',
                46
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                46
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                46
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                46
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                46
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'data[Gpgkey][key]',
                46
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                46
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'textarea',
                false,
                46
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' gpgkey.armored_key ',
                46
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'textarea',
                46
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                46
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                47
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                47
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                48
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                48
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                49
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                49
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                50
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                50
            ]
        },
        {
            'tokenType': 'done',
            'args': [51]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/gpgkey/keys*/
define('app/component/gpgkey/keys', [
    'exports',
    'passbolt-mad/component/component',
    'app/model/map/user',
    'app/view/template/component/gpgkey/keys.stache!'
], function (exports, _component, _user, _keys) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _user2 = _interopRequireDefault(_user);
    var _keys2 = _interopRequireDefault(_keys);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Keys = _component2.default.extend('passbolt.component.gpgkey.Keys', { defaults: { template: _keys2.default } }, {
        beforeRender: function beforeRender() {
            this._super();
            var gpgKey = _user2.default.getCurrent().gpgkey;
            this.setViewData('gpgkey', gpgKey);
        }
    });
    exports.default = Keys;
});
/*app/view/template/component/settings/workspace_primary_menu.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/settings/workspace_primary_menu.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/settings/workspace_primary_menu.stache', [
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_settings_wk_menu_edition_button',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button section-profile',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-edit',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'edit\') ',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_settings_wk_menu_download_public_key',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button section-keys',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-download',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Public\') ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_settings_wk_menu_download_private_key',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button section-keys',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-download',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                12
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Private\') ',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                14
            ]
        },
        {
            'tokenType': 'done',
            'args': [15]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/settings/workspace_primary_menu*/
define('app/component/settings/workspace_primary_menu', [
    'exports',
    'passbolt-mad/component/button',
    'passbolt-mad/component/component',
    'passbolt-mad/control/bus',
    'can-route',
    'app/view/template/component/settings/workspace_primary_menu.stache!'
], function (exports, _button, _component, _bus, _canRoute, _workspace_primary_menu) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _button2 = _interopRequireDefault(_button);
    var _component2 = _interopRequireDefault(_component);
    var _bus2 = _interopRequireDefault(_bus);
    var _canRoute2 = _interopRequireDefault(_canRoute);
    var _workspace_primary_menu2 = _interopRequireDefault(_workspace_primary_menu);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var SettingsWorkspaceMenu = _component2.default.extend('passbolt.component.settings.WorkspacePrimaryMenu', {
        defaults: {
            label: 'Settings Workspace Menu',
            template: _workspace_primary_menu2.default
        }
    }, {
        init: function init(el, options) {
            this._super(el, options);
            this._initRouteListener();
        },
        _initRouteListener: function _initRouteListener() {
            var _this = this;
            var executeFunc = function executeFunc() {
                return _this._dispatchRoute();
            };
            _canRoute2.default.data.on('action', executeFunc);
            this.state.on('destroyed', function () {
                return _canRoute2.default.data.off('action', executeFunc);
            });
        },
        _dispatchRoute: function _dispatchRoute() {
            if (_canRoute2.default.data.controller == 'Settings') {
                var section = _canRoute2.default.data.action;
                this._enableSection(section);
            }
        },
        _enableSection: function _enableSection(section) {
            if (section == 'profile') {
                this.options.editButton.state.hidden = false;
                this.options.publicKeyButton.state.hidden = true;
                this.options.privateKeyButton.state.hidden = true;
            } else if (section == 'keys') {
                this.options.editButton.state.hidden = true;
                this.options.publicKeyButton.state.hidden = false;
                this.options.privateKeyButton.state.hidden = false;
            } else {
                this.options.editButton.state.hidden = true;
                this.options.publicKeyButton.state.hidden = true;
                this.options.privateKeyButton.state.hidden = true;
            }
        },
        afterStart: function afterStart() {
            var editButton = new _button2.default('#js_settings_wk_menu_edition_button', { state: { hidden: true } });
            editButton.start();
            this.options.editButton = editButton;
            var publicKeyButton = new _button2.default('#js_settings_wk_menu_download_public_key', { state: { hidden: true } });
            publicKeyButton.start();
            this.options.publicKeyButton = publicKeyButton;
            var privateKeyButton = new _button2.default('#js_settings_wk_menu_download_private_key', { state: { hidden: true } });
            privateKeyButton.start();
            this.options.privateKeyButton = privateKeyButton;
            this.on();
            this._dispatchRoute();
        },
        '{editButton.element} click': function editButtonElementClick() {
            _bus2.default.trigger('request_profile_edition');
        },
        '{publicKeyButton.element} click': function publicKeyButtonElementClick() {
            _bus2.default.trigger('passbolt.settings.download_public_key');
        },
        '{privateKeyButton.element} click': function privateKeyButtonElementClick() {
            _bus2.default.trigger('passbolt.settings.download_private_key');
        }
    });
    exports.default = SettingsWorkspaceMenu;
});
/*app/view/template/component/profile/profile.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/profile/profile.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/profile/profile.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'grid grid-responsive-12',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'row',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'profile col8',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Profile\') ',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'section profile-detailed-information',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'avatar',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'img',
                true,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'src',
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' user.profile.avatarPath(\'medium\') ',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'src',
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'alt',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'profile picture',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'alt',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'img',
                true,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'edit',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'edit-avatar-action',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'title',
                11
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Change Avatar\') ',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'title',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t\t',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-camera',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t\t',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'help-text',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Click here to upload a new picture.',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                16
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'table',
                false,
                17
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'table-info profile',
                17
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'table',
                false,
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                17
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'tbody',
                false,
                18
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tbody',
                false,
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                18
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'tr',
                false,
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'name',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tr',
                false,
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t',
                19
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                20
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Name\') ',
                20
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t',
                20
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                21
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                21
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                21
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                21
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                21
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' user.profile.first_name ',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' ',
                21
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' user.profile.last_name ',
                21
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                21
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tr',
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                22
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'tr',
                false,
                23
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'email',
                23
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tr',
                false,
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t',
                23
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                24
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                24
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                24
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                24
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                24
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Email\') ',
                24
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t',
                24
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                25
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                25
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                25
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                25
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                25
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' user.username ',
                25
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                25
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tr',
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                26
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'tr',
                false,
                27
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                27
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'role',
                27
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                27
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tr',
                false,
                27
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t',
                27
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                28
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                28
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                28
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                28
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                28
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Role\') ',
                28
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                28
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t',
                28
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                29
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                29
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                29
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                29
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                29
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' user.role.name ',
                29
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                29
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                29
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tr',
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                30
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'tr',
                false,
                31
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                31
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modified',
                31
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                31
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tr',
                false,
                31
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t',
                31
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                32
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                32
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                32
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                32
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                32
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Modified\') ',
                32
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                32
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t',
                32
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                33
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                33
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                33
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                33
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                33
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' getTimeAgo(user.profile.modified) ',
                33
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                33
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                33
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tr',
                34
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                34
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'tr',
                false,
                35
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                35
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'created',
                35
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                35
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tr',
                false,
                35
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t',
                35
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                36
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                36
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                36
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                36
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                36
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Created\') ',
                36
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                36
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t',
                36
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                37
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                37
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                37
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                37
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                37
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' getTimeAgo(user.profile.created) ',
                37
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                37
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                37
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tr',
                38
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                38
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'tr',
                false,
                39
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                39
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'publickey_keyid',
                39
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                39
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tr',
                false,
                39
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t',
                39
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                40
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                40
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                40
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                40
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                40
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Public key\') ',
                40
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                40
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t',
                40
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                41
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                41
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                41
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                41
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                41
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t\t',
                41
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' user.gpgkey.key_id ',
                42
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t\t',
                42
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                43
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                43
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'em',
                false,
                43
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'em',
                false,
                43
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Note: Sorry, it is not possible to change your key at the moment. ',
                43
            ]
        },
        {
            'tokenType': 'comment',
            'args': [
                '<a>learn more \u203A</a>',
                43
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'em',
                43
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                43
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t',
                43
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                44
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                44
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tr',
                45
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                45
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tbody',
                46
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                46
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'table',
                47
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                47
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                48
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                48
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                49
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                49
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                50
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                50
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                51
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                51
            ]
        },
        {
            'tokenType': 'done',
            'args': [52]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/profile/profile*/
define('app/component/profile/profile', [
    'exports',
    'passbolt-mad/component/component',
    'passbolt-mad/control/bus',
    'app/view/template/component/profile/profile.stache!'
], function (exports, _component, _bus, _profile) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _bus2 = _interopRequireDefault(_bus);
    var _profile2 = _interopRequireDefault(_profile);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ProfileComponent = _component2.default.extend('passbolt.component.profile.Profile', {
        defaults: {
            template: _profile2.default,
            user: null
        }
    }, {
        'beforeRender': function beforeRender() {
            this._super();
            this.setViewData('user', this.options.user);
        },
        '{user} updated': function userUpdated() {
            this.refresh();
        },
        '{element} .edit-action click': function elementEditActionClick() {
            var user = this.options.user;
            _bus2.default.trigger('request_profile_edition', { user: user });
        },
        '{element} .edit-avatar-action click': function elementEditAvatarActionClick() {
            var user = this.options.user;
            _bus2.default.trigger('request_profile_avatar_edition', { user: user });
        }
    });
    exports.default = ProfileComponent;
});
/*passbolt-mad@2.10.0#view/component/tab*/
define('passbolt-mad@2.10.0#view/component/tab', [
    'exports',
    'passbolt-mad/view/view'
], function (exports, _view) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _view2 = _interopRequireDefault(_view);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Tab = _view2.default.extend('mad.view.component.Tab', {}, {
        selectTab: function selectTab(tabId) {
            this.getController().getComponent(tabId).view.addClass('selected');
            $('#js_tab_nav_' + tabId, this.element).find('a').addClass('selected');
        },
        unselectTab: function unselectTab(tabId) {
            this.getController().getComponent(tabId).view.removeClass('selected');
            $('#js_tab_nav_' + tabId, this.element).find('a').removeClass('selected');
        }
    });
    exports.default = Tab;
});
/*passbolt-mad@2.10.0#view/template/component/tab/tab.stache!steal-stache@4.1.2#steal-stache*/
define('passbolt-mad@2.10.0#view/template/component/tab/tab.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('view/template/component/tab/tab.stache', [
        {
            'tokenType': 'special',
            'args': [
                '#if(autoMenu)',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_tabs_nav tabs-nav',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_tabs_content tabs-content',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                5
            ]
        },
        {
            'tokenType': 'done',
            'args': [6]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*passbolt-mad@2.10.0#component/tab*/
define('passbolt-mad@2.10.0#component/tab', [
    'exports',
    'passbolt-mad/model/map/action',
    'passbolt-mad/helper/component',
    'passbolt-mad/component/composite',
    'passbolt-mad/component/menu',
    'passbolt-mad/view/component/tab',
    'passbolt-mad/view/template/component/tab/tab.stache!',
    'uuid/v4'
], function (exports, _action, _component, _composite, _menu, _tab, _tab3, _v) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _component2 = _interopRequireDefault(_component);
    var _composite2 = _interopRequireDefault(_composite);
    var _menu2 = _interopRequireDefault(_menu);
    var _tab2 = _interopRequireDefault(_tab);
    var _tab4 = _interopRequireDefault(_tab3);
    var _v2 = _interopRequireDefault(_v);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Tab = _composite2.default.extend('mad.component.Tab', {
        defaults: {
            label: 'Tab Controller',
            viewClass: _tab2.default,
            template: _tab4.default,
            autoMenu: true
        }
    }, {
        init: function init(el, options) {
            this._super(el, options);
            this._activeTab = null;
            this._tabSettings = {};
        },
        beforeRender: function beforeRender() {
            this.setViewData('autoMenu', this.options.autoMenu);
        },
        afterStart: function afterStart() {
            if (this.options.autoMenu) {
                this.options.menu = new _menu2.default('.js_tabs_nav');
                this.options.menu.start();
            }
            this.on();
        },
        '{menu.element} item_selected': function menuElementItem_selected(el, ev) {
            var item = ev.data.item;
            if (this.options.autoMenu) {
                var tabId = item.id.replace('js_tab_nav_', '');
                this.enableTab(tabId);
            }
        },
        addTab: function addTab(ComponentClass, options) {
            options.id = options.id || (0, _v2.default)();
            options.cssClasses = options.cssClasses || [];
            options.cssClasses.push('tab-content');
            this.addMenuEntry(options);
            this._tabSettings[options.id] = {
                ComponentClass: ComponentClass,
                options: options
            };
        },
        addMenuEntry: function addMenuEntry(tabOptions) {
            if (!this.options.autoMenu) {
                return;
            }
            var menuEntry = new _action2.default({
                id: 'js_tab_nav_' + tabOptions.id,
                label: tabOptions.label
            });
            this.options.menu.insertItem(menuEntry);
        },
        selectMenuEntry: function selectMenuEntry(tabId) {
            if (this.options.autoMenu) {
                $('#js_tab_nav_' + tabId + ' a').addClass('selected');
            }
        },
        unselectMenuEntry: function unselectMenuEntry(tabId) {
            if (this.options.autoMenu) {
                $('#js_tab_nav_' + tabId + ' a').removeClass('selected');
            }
        },
        enableTab: function enableTab(tabId) {
            if (this._activeTab) {
                var previousTabId = this._activeTab.getId();
                this.unselectMenuEntry(previousTabId);
                this._activeTab.destroyAndRemove();
            }
            this.selectMenuEntry(tabId);
            var tabSettings = this._tabSettings[tabId];
            var tabSelector = $('.js_tabs_content', this.element);
            var tab = _component2.default.create(tabSelector, 'last', tabSettings.ComponentClass, tabSettings.options);
            tab.start();
            this._activeTab = tab;
        }
    });
    exports.default = Tab;
});
/*app/model/map/theme*/
define('app/model/map/theme', [
    'exports',
    'app/net/ajax',
    'passbolt-mad/config/config',
    'can-connect',
    'can-connect/data/url/url',
    'can-connect/data/parse/parse',
    'can-connect/constructor/constructor',
    'can-connect/can/map/map',
    'passbolt-mad/model/list/list',
    'passbolt-mad/model/map/map'
], function (exports, _ajax, _config, _canConnect, _url, _parse, _constructor, _map, _list, _map3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _config2 = _interopRequireDefault(_config);
    var _canConnect2 = _interopRequireDefault(_canConnect);
    var _url2 = _interopRequireDefault(_url);
    var _parse2 = _interopRequireDefault(_parse);
    var _constructor2 = _interopRequireDefault(_constructor);
    var _map2 = _interopRequireDefault(_map);
    var _list2 = _interopRequireDefault(_list);
    var _map4 = _interopRequireDefault(_map3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Theme = _map4.default.extend('passbolt.model.Theme', {
        id: 'string',
        name: 'string',
        preview: 'string'
    });
    _map4.default.setReference('Theme', Theme);
    Theme.List = _list2.default.extend({ '#': { Type: Theme } });
    Theme.select = function (theme) {
        return _ajax2.default.request({
            url: '/account/settings/themes.json',
            type: 'POST',
            params: { value: theme.name }
        }).then(function () {
            _config2.default.write('accountSetting.theme', theme.name);
        });
    };
    Theme.connection = (0, _canConnect2.default)([
        _parse2.default,
        _url2.default,
        _constructor2.default,
        _map2.default
    ], {
        Map: Theme,
        List: Theme.List,
        url: {
            resource: '/',
            getListData: function getListData(params) {
                params = params || {};
                params['api-version'] = 'v2';
                return _ajax2.default.request({
                    url: '/account/settings/themes.json',
                    type: 'GET',
                    params: params
                });
            }
        }
    });
    exports.default = Theme;
});
/*app/view/template/component/settings/theme.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/settings/theme.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/settings/theme.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'grid grid-responsive-12',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'row',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Theme\') ',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'row themes',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'col12',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_theme_tree',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                11
            ]
        },
        {
            'tokenType': 'done',
            'args': [12]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/settings/theme_item.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/settings/theme_item.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/settings/theme_item.stache', [
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.id ',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' cssClasses.join(\' \') ',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'main-cell row theme',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'img',
                true,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'src',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.preview ',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'src',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'img',
                true,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'theme-desc',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' capitalize(mappedItem.name) ',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                10
            ]
        },
        {
            'tokenType': 'done',
            'args': [11]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/settings/theme*/
define('app/component/settings/theme', [
    'exports',
    'passbolt-mad/component/component',
    'passbolt-mad/config/config',
    'passbolt-mad/control/bus',
    'passbolt-mad/util/map/map',
    'app/model/map/theme',
    'passbolt-mad/component/tree',
    'app/view/template/component/settings/theme.stache!',
    'app/view/template/component/settings/theme_item.stache!'
], function (exports, _component, _config, _bus, _map, _theme, _tree, _theme3, _theme_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _config2 = _interopRequireDefault(_config);
    var _bus2 = _interopRequireDefault(_bus);
    var _map2 = _interopRequireDefault(_map);
    var _theme2 = _interopRequireDefault(_theme);
    var _tree2 = _interopRequireDefault(_tree);
    var _theme4 = _interopRequireDefault(_theme3);
    var _theme_item2 = _interopRequireDefault(_theme_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ThemeComponent = _component2.default.extend('passbolt.component.settings.Theme', {
        defaults: {
            template: _theme4.default,
            tree: null,
            user: null
        }
    }, {
        afterStart: function afterStart() {
            var _this = this;
            this._findThemes().then(function (themes) {
                return _this._initTree(themes);
            });
        },
        _findThemes: function _findThemes() {
            return _theme2.default.findAll();
        },
        _initTree: function _initTree(themes) {
            var _this2 = this;
            var tree = new _tree2.default('#js_theme_tree', {
                map: this._getTreeMap(),
                itemTemplate: _theme_item2.default
            });
            this.options.tree = tree;
            tree.start();
            tree.load(themes);
            var selectedThemeName = _config2.default.read('accountSetting.theme') || 'default';
            themes.forEach(function (theme) {
                if (theme.name == selectedThemeName) {
                    _this2.options.tree.selectItem(theme);
                }
            });
        },
        _getTreeMap: function _getTreeMap() {
            return new _map2.default({
                id: 'id',
                name: 'name',
                preview: 'preview'
            });
        },
        _selectTheme: function _selectTheme(theme) {
            var _this3 = this;
            _theme2.default.select(theme).then(function () {
                var cssSelector = '#js_css_theme';
                var version = _config2.default.read('server.app.version.number');
                var themePath = APP_URL + 'css/themes/' + theme.name + '/api_main.min.css?v=' + version;
                $(cssSelector).attr('href', themePath);
                _this3.options.tree.selectItem(theme);
                _bus2.default.trigger('passbolt.plugin.account_settings_updated', theme);
            });
        },
        '{element} item_selected': function elementItem_selected(el, ev) {
            var item = ev.data.item;
            this._selectTheme(item);
        }
    });
    exports.default = ThemeComponent;
});
/*app/model/utility/session*/
define('app/model/utility/session', [
    'exports',
    'app/net/ajax',
    'passbolt-mad/config/config'
], function (exports, _ajax, _config) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _config2 = _interopRequireDefault(_config);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
        }
    }
    var Session = function Session() {
        _classCallCheck(this, Session);
    };
    Session.getTimeout = function () {
        return _config2.default.read('server.app.session_timeout') * 60 * 1000;
    };
    Session.check = function (autoRedirect) {
        autoRedirect = autoRedirect != undefined ? autoRedirect : true;
        return _ajax2.default.request({
            url: APP_URL + 'auth/checkSession.json',
            type: 'GET',
            sessionExpiredAutoRedirect: autoRedirect
        });
    };
    exports.default = Session;
});
/*app/component/settings/mfa*/
define('app/component/settings/mfa', [
    'exports',
    'passbolt-mad/component/component',
    'passbolt-mad/helper/html',
    'app/model/utility/session'
], function (exports, _component, _html, _session) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _html2 = _interopRequireDefault(_html);
    var _session2 = _interopRequireDefault(_session);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var MfaComponent = _component2.default.extend('passbolt.component.settings.mfa', { defaults: {} }, {
        afterStart: function afterStart() {
            var _this = this;
            _session2.default.check().then(function () {
                var iframeContent = '<iframe id=\'js_mfa_iframe\' src=\'' + APP_URL + '/mfa/setup/select\' width=\'100%\' height=\'100%\'></iframe>';
                _html2.default.create($(_this.element), 'inside_replace', iframeContent);
            });
        }
    });
    exports.default = MfaComponent;
});
/*app/view/template/form/user/create.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/form/user/create.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/form/user/create.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form-content',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'hidden',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'User.id',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_user_id',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form_field',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'hidden',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'User.role_id',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_role_id',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form_field',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text required',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'for',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_first_name',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'for',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                7
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'First Name\') ',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'User.profile.first_name',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_first_name',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'first name',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_first_name_feedback',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text required',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'for',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_last_name',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'for',
                14
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                14
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Last Name\') ',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'User.profile.last_name',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_last_name',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'last name',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                15
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                16
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                16
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_last_name_feedback',
                16
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                16
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                16
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                18
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text required clearfix',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                20
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                21
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'for',
                21
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_username',
                21
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'for',
                21
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                21
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Username / Email\') ',
                21
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                21
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                22
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                22
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'User.username',
                22
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                22
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                22
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required ',
                22
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' action ',
                22
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                22
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                22
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                22
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                22
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                22
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_username',
                22
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                22
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                22
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'email',
                22
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                22
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#unless(create)',
                22
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'disabled',
                22
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'disabled',
                22
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/unless',
                22
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                22
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                23
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                23
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_username_feedback',
                23
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                23
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                23
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                23
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                24
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                25
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(isAdmin',
                27
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                27
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                28
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                28
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text required',
                28
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                28
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                28
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                28
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                29
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'for',
                29
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_is_admin',
                29
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'for',
                29
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                29
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Role\') ',
                29
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                29
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                29
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                30
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                30
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_is_admin',
                30
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                30
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                30
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                31
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                31
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_is_admin_checkbox',
                31
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                31
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                31
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'is_admin',
                31
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                31
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                31
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'checkbox',
                31
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                31
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                31
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                31
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                32
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                32
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'This user is an administrator\') ',
                32
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                32
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                32
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                33
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                33
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(action == \'create\')',
                34
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                34
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                35
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                35
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message helptext',
                35
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                35
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                35
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Note: Administrators can add and delete users. They can also create groups and assign group managers. Admin can not see all passwords.\') ',
                35
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                35
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                35
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                36
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                36
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                37
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                37
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                38
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                38
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                39
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                39
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                41
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                41
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'submit-wrapper clearfix',
                41
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                41
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                41
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                41
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                42
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                42
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'submit',
                42
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                42
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                42
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button primary',
                42
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                42
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value',
                42
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'save\')',
                42
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value',
                42
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                42
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                42
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                43
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                43
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-dialog-cancel cancel',
                43
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                43
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                43
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'cancel\')',
                43
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                43
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                43
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                44
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                44
            ]
        },
        {
            'tokenType': 'done',
            'args': [45]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/form/user/create*/
define('app/form/user/create', [
    'exports',
    'passbolt-mad/form/feedback',
    'passbolt-mad/form/form',
    'can-util/js/get/get',
    'passbolt-mad/form/element/textbox',
    'app/model/map/user',
    'app/model/map/role',
    'app/view/template/form/user/create.stache!'
], function (exports, _feedback, _form, _get, _textbox, _user, _role, _create) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _feedback2 = _interopRequireDefault(_feedback);
    var _form2 = _interopRequireDefault(_form);
    var _get2 = _interopRequireDefault(_get);
    var _textbox2 = _interopRequireDefault(_textbox);
    var _user2 = _interopRequireDefault(_user);
    var _role2 = _interopRequireDefault(_role);
    var _create2 = _interopRequireDefault(_create);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var CreateForm = _form2.default.extend('passbolt.form.user.Create', {
        defaults: {
            action: 'create',
            template: _create2.default,
            userRoleIdElement: null
        }
    }, {
        beforeRender: function beforeRender() {
            this._super();
            this.setViewData('create', this.options.action == 'create');
            this.setViewData('isAdmin', _user2.default.getCurrent().isAdmin());
        },
        afterStart: function afterStart() {
            var isAdmin = _user2.default.getCurrent().isAdmin();
            var editingOwnProfile = false;
            if (this.options.data != undefined && this.options.data.id == _user2.default.getCurrent().id) {
                editingOwnProfile = true;
            }
            this.addElement(new _textbox2.default('#js_field_user_id', {
                modelReference: 'User.id',
                validate: false
            }).start());
            var roleId = (0, _get2.default)(this.options.data, 'User.role_id');
            if (!roleId) {
                roleId = _role2.default.toId('user');
            }
            this.options.userRoleIdElement = this.addElement(new _textbox2.default('#js_field_role_id', {
                modelReference: 'User.role_id',
                validate: false,
                value: roleId
            }).start());
            this.addElement(new _textbox2.default('#js_field_first_name', { modelReference: 'User.profile.first_name' }).start(), new _feedback2.default('#js_field_first_name_feedback', {}).start());
            this.addElement(new _textbox2.default('#js_field_last_name', { modelReference: 'User.profile.last_name' }).start(), new _feedback2.default('#js_field_last_name_feedback', {}).start());
            if (isAdmin === true) {
                if (this.options.data.isAdmin()) {
                    $('#js_field_is_admin input').prop('checked', true);
                }
                if (editingOwnProfile == true) {
                    $('input[type=checkbox]', $('#js_field_is_admin')).attr('disabled', true);
                    $('#js_field_is_admin').parent().addClass('disabled');
                }
            }
            this.addElement(new _textbox2.default('#js_field_username', {
                modelReference: 'User.username',
                state: { disabled: this.options.action == 'edit' }
            }).start(), new _feedback2.default('#js_field_username_feedback', {}).start());
            if (this.options.data != null) {
                this.load({ User: this.options.data });
            }
            this.on();
        },
        '#js_field_is_admin input change': function js_field_is_adminInputChange(el) {
            var isChecked = $(el).is(':checked');
            if (isChecked) {
                this.options.userRoleIdElement.setValue(_role2.default.toId('admin'));
            } else {
                this.options.userRoleIdElement.setValue(_role2.default.toId('user'));
            }
        }
    });
    exports.default = CreateForm;
});
/*app/view/template/component/settings/workspace.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/settings/workspace.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/settings/workspace.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_settings_workspace',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'panel left',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'navigation first',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wk_settings_menu',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'clearfix',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'panel middle',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wsp_settings_breadcrumb',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'breadcrumbs',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wk_settings_main',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                17
            ]
        },
        {
            'tokenType': 'done',
            'args': [17]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/settings/workspace*/
define('app/component/settings/workspace', [
    'exports',
    'passbolt-mad/model/map/action',
    'app/form/user/edit_avatar',
    'app/component/settings/workspace_breadcrumb',
    'passbolt-mad/component/component',
    'passbolt-mad/helper/component',
    'passbolt-mad/config/config',
    'passbolt-mad/component/dialog',
    'passbolt-mad/util/lang/i18n',
    'app/component/gpgkey/keys',
    'passbolt-mad/component/menu',
    'app/component/settings/workspace_primary_menu',
    'app/component/profile/profile',
    'can-route',
    'passbolt-mad/component/tab',
    'app/component/settings/theme',
    'app/component/settings/mfa',
    'app/model/map/user',
    'app/form/user/create',
    'uuid/v4',
    'app/view/template/component/settings/workspace.stache!'
], function (exports, _action, _edit_avatar, _workspace_breadcrumb, _component, _component3, _config, _dialog, _i18n, _keys, _menu, _workspace_primary_menu, _profile, _canRoute, _tab, _theme, _mfa, _user, _create, _v, _workspace) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _edit_avatar2 = _interopRequireDefault(_edit_avatar);
    var _workspace_breadcrumb2 = _interopRequireDefault(_workspace_breadcrumb);
    var _component2 = _interopRequireDefault(_component);
    var _component4 = _interopRequireDefault(_component3);
    var _config2 = _interopRequireDefault(_config);
    var _dialog2 = _interopRequireDefault(_dialog);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _keys2 = _interopRequireDefault(_keys);
    var _menu2 = _interopRequireDefault(_menu);
    var _workspace_primary_menu2 = _interopRequireDefault(_workspace_primary_menu);
    var _profile2 = _interopRequireDefault(_profile);
    var _canRoute2 = _interopRequireDefault(_canRoute);
    var _tab2 = _interopRequireDefault(_tab);
    var _theme2 = _interopRequireDefault(_theme);
    var _mfa2 = _interopRequireDefault(_mfa);
    var _user2 = _interopRequireDefault(_user);
    var _create2 = _interopRequireDefault(_create);
    var _v2 = _interopRequireDefault(_v);
    var _workspace2 = _interopRequireDefault(_workspace);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var SettingsWorkspaceComponent = _component2.default.extend('passbolt.component.settings.Workspace', {
        defaults: {
            name: 'settings_workspace',
            template: _workspace2.default,
            sections: [
                'profile',
                'keys'
            ],
            silentLoading: false
        }
    }, {
        init: function init(el, options) {
            this._super(el, options);
            this._initRouteListener();
        },
        _initRouteListener: function _initRouteListener() {
            var _this = this;
            var executeFunc = function executeFunc() {
                return _this._dispatchRoute();
            };
            _canRoute2.default.data.on('action', executeFunc);
            this.state.on('destroyed', function () {
                return _canRoute2.default.data.off('action', executeFunc);
            });
        },
        _dispatchRoute: function _dispatchRoute() {
            if (_canRoute2.default.data.controller == 'Settings') {
                var section = _canRoute2.default.data.action;
                this._enableSection(section);
            }
        },
        afterStart: function afterStart() {
            this._initPrimaryMenu();
            this._initPrimarySidebar();
            this._initBreadcrumb();
            this._initTabs();
            this._dispatchRoute();
        },
        _initPrimaryMenu: function _initPrimaryMenu() {
            var selector = $('#js_wsp_primary_menu_wrapper');
            var menu = _component4.default.create(selector, 'last', _workspace_primary_menu2.default, {});
            menu.start();
        },
        _initBreadcrumb: function _initBreadcrumb() {
            var component = new _workspace_breadcrumb2.default('#js_wsp_settings_breadcrumb', {});
            component.start();
            component.load();
        },
        _initPrimarySidebar: function _initPrimarySidebar() {
            var _this2 = this;
            var menu = new _menu2.default('#js_wk_settings_menu', {});
            menu.start();
            this.options.primarySidebarMenu = menu;
            var profileItem = new _action2.default({
                id: (0, _v2.default)(),
                name: 'profile',
                label: __('Profile'),
                action: function action() {
                    return _this2._goToSection('profile');
                }
            });
            menu.insertItem(profileItem);
            var plugins = _config2.default.read('server.passbolt.plugins');
            if (plugins) {
                if (plugins.accountSettings) {
                    var themeItem = new _action2.default({
                        id: (0, _v2.default)(),
                        name: 'theme',
                        label: __('Theme'),
                        action: function action() {
                            return _this2._goToSection('theme');
                        }
                    });
                    menu.insertItem(themeItem);
                }
                if (plugins.multiFactorAuthentication) {
                    var mfaItem = new _action2.default({
                        id: (0, _v2.default)(),
                        name: 'mfa',
                        label: __('Multi Factor Authentication'),
                        action: function action() {
                            return _this2._goToSection('mfa');
                        }
                    });
                    menu.insertItem(mfaItem);
                }
            }
            var keysItem = new _action2.default({
                id: (0, _v2.default)(),
                name: 'keys',
                label: __('Keys inspector'),
                action: function action() {
                    return _this2._goToSection('keys');
                }
            });
            menu.insertItem(keysItem);
        },
        _initTabs: function _initTabs() {
            var tabs = new _tab2.default('#js_wk_settings_main', { autoMenu: false });
            tabs.start();
            this.tabs = tabs;
            tabs.addTab(_profile2.default, {
                id: 'js_settings_profile_tab',
                label: 'profile',
                user: _user2.default.getCurrent()
            });
            tabs.addTab(_keys2.default, {
                id: 'js_settings_keys_tab',
                label: 'keys'
            });
            var plugins = _config2.default.read('server.passbolt.plugins');
            if (plugins) {
                if (plugins.accountSettings) {
                    tabs.addTab(_theme2.default, {
                        id: 'js_settings_theme_tab',
                        label: 'theme'
                    });
                }
                if (plugins.multiFactorAuthentication) {
                    tabs.addTab(_mfa2.default, {
                        id: 'js_settings_mfa_tab',
                        label: 'mfa'
                    });
                }
            }
        },
        _goToSection: function _goToSection(section) {
            var controller = 'Settings';
            var action = section;
            _canRoute2.default.data.update({
                controller: controller,
                action: action
            });
        },
        _enableSection: function _enableSection(section) {
            var tabId = 'js_settings_' + section + '_tab';
            var menu = this.options.primarySidebarMenu;
            var menuItem = menu.options.items.filter({ name: section }).pop();
            this.tabs.enableTab(tabId);
            $('.tab-content', this.element).show();
            $('#container').removeClass(this.options.sections.join(' ')).addClass(section);
            menu.selectItem(menuItem);
        },
        openEditUserDialog: function openEditUserDialog() {
            var self = this;
            var user = _user2.default.getCurrent();
            var dialog = _dialog2.default.instantiate({
                label: __('Edit profile'),
                cssClasses: [
                    'edit-profile-dialog',
                    'dialog-wrapper'
                ]
            }).start();
            var form = dialog.add(_create2.default, {
                data: user,
                action: 'edit',
                callbacks: {
                    submit: function submit(data) {
                        user.assignDeep(data['User']);
                        self._saveUser(user, form, dialog);
                    }
                }
            });
            form.load(user);
        },
        _saveUser: function _saveUser(user, form, dialog) {
            user['__FILTER_CASE__'] = 'edit_profile';
            user.save().then(function () {
                dialog.remove();
            }, function (v) {
                form.showErrors(JSON.parse(v.responseText)['body']);
            });
        },
        openEditAvatarDialog: function openEditAvatarDialog() {
            var _this3 = this;
            var user = _user2.default.getCurrent();
            var dialog = _dialog2.default.instantiate({ label: __('Edit Avatar') }).start();
            var form = dialog.add(_edit_avatar2.default, {
                data: user,
                callbacks: {
                    submit: function submit() {
                        return _this3._saveAvatar(user, dialog);
                    }
                }
            });
            form.load(user);
        },
        _saveAvatar: function _saveAvatar(user, dialog) {
            var $fileField = $('#js_field_avatar');
            user.saveAvatar($fileField[0].files[0]);
            dialog.remove();
        },
        '{mad.bus.element} request_profile_edition': function madBusElementRequest_profile_edition() {
            this.openEditUserDialog();
        },
        '{mad.bus.element} request_profile_avatar_edition': function madBusElementRequest_profile_avatar_edition() {
            this.openEditAvatarDialog();
        }
    });
    exports.default = SettingsWorkspaceComponent;
});
/*app/component/user/workspace_breadcrumb*/
define('app/component/user/workspace_breadcrumb', [
    'exports',
    'passbolt-mad/model/map/action',
    'passbolt-mad/component/component',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/control/bus',
    'passbolt-mad/component/menu',
    'uuid/v4',
    'app/view/template/component/breadcrumb/breadcrumb.stache!',
    'app/view/template/component/breadcrumb/breadcrumb_item.stache!'
], function (exports, _action, _component, _i18n, _bus, _menu, _v, _breadcrumb, _breadcrumb_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _component2 = _interopRequireDefault(_component);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _bus2 = _interopRequireDefault(_bus);
    var _menu2 = _interopRequireDefault(_menu);
    var _v2 = _interopRequireDefault(_v);
    var _breadcrumb2 = _interopRequireDefault(_breadcrumb);
    var _breadcrumb_item2 = _interopRequireDefault(_breadcrumb_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var WorkspaceBreadcrumb = _component2.default.extend('passbolt.component.user.WorkspaceBreadcrumb', {
        defaults: {
            template: _breadcrumb2.default,
            status: 'hidden',
            rootFilter: null
        }
    }, {
        afterStart: function afterStart() {
            var menuSelector = '#' + this.getId() + ' ul';
            this.options.menu = new _menu2.default(menuSelector, { itemTemplate: _breadcrumb_item2.default });
            this.options.menu.start();
        },
        parseFilter: function parseFilter(filter) {
            var menuItems = [];
            var keywords = filter.getRule('keywords');
            var allUsersMenuItem = new _action2.default({
                id: (0, _v2.default)(),
                label: __('All users'),
                filter: this.options.rootFilter
            });
            menuItems.push(allUsersMenuItem);
            if (keywords && keywords != '') {
                var searchMenuItem = new _action2.default({
                    id: (0, _v2.default)(),
                    label: __('Search : %s', keywords)
                });
                menuItems.push(searchMenuItem);
            } else if (filter.id != 'default') {
                var thirdFilterMenuItem = new _action2.default({
                    id: (0, _v2.default)(),
                    label: filter.label
                });
                menuItems.push(thirdFilterMenuItem);
            }
            return menuItems;
        },
        load: function load(filter) {
            var menuItems = this.parseFilter(filter);
            this.options.menu.reset();
            this.options.menu.load(menuItems);
        },
        '{element} item_selected': function elementItem_selected(el, ev) {
            var item = ev.data.item;
            if (item.filter) {
                _bus2.default.trigger('filter_workspace', { filter: item.filter });
            }
        },
        '{mad.bus.element} filter_workspace': function madBusElementFilter_workspace(el, ev) {
            var filter = ev.data.filter;
            this.options.menu.reset();
            var menuItems = this.parseFilter(filter);
            this.options.menu.load(menuItems);
        }
    });
    exports.default = WorkspaceBreadcrumb;
});
/*passbolt-mad@2.10.0#model/state/buttonDropdownState*/
define('passbolt-mad@2.10.0#model/state/buttonDropdownState', [
    'exports',
    'passbolt-mad/model/state/componentState'
], function (exports, _componentState) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _componentState2 = _interopRequireDefault(_componentState);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ButtonDropdownState = _componentState2.default.extend({
        open: {
            type: 'boolean',
            default: false
        }
    });
    exports.default = ButtonDropdownState;
});
/*passbolt-mad@2.10.0#view/component/button_dropdown*/
define('passbolt-mad@2.10.0#view/component/button_dropdown', [
    'exports',
    'passbolt-mad/view/view',
    'jquery'
], function (exports, _view, _jquery) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _view2 = _interopRequireDefault(_view);
    var _jquery2 = _interopRequireDefault(_jquery);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ButtonDropdown = _view2.default.extend('mad.view.component.ButtonDropdown', {}, {
        getDropdownContentElement: function getDropdownContentElement() {
            var contentElement = this.getController().options.contentElement;
            if (contentElement != null) {
                return (0, _jquery2.default)(contentElement);
            } else {
                return (0, _jquery2.default)(this.element).next();
            }
        },
        open: function open() {
            (0, _jquery2.default)(this.element).addClass('pressed');
            var $contentElement = this.getDropdownContentElement();
            $contentElement.addClass('visible');
            this.getController().state.open = true;
        },
        close: function close() {
            (0, _jquery2.default)(this.element).removeClass('pressed');
            var $contentElement = this.getDropdownContentElement();
            $contentElement.removeClass('visible');
            this.getController().state.open = false;
        },
        '{element} click': function elementClick() {
            var controller = this.getController();
            if (controller.state.disabled) {
                return false;
            }
            if (!controller.state.open) {
                this.open();
            } else {
                this.close();
            }
            return false;
        },
        '{document} click': function documentClick(el, ev) {
            var componentSelector = '#' + this.getController().getId();
            var dropdownIsSrc = this.element.id == ev.target.id;
            var dropdownIsParent = (0, _jquery2.default)(ev.target).parents(componentSelector).length;
            if (!dropdownIsSrc && !dropdownIsParent) {
                this.close();
            }
        }
    });
    exports.default = ButtonDropdown;
});
/*passbolt-mad@2.10.0#view/template/component/button_dropdown/button_dropdown.stache!steal-stache@4.1.2#steal-stache*/
define('passbolt-mad@2.10.0#view/template/component/button_dropdown/button_dropdown.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('view/template/component/button_dropdown/button_dropdown.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'more',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-caret-down',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                6
            ]
        },
        {
            'tokenType': 'done',
            'args': [6]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*passbolt-mad@2.10.0#component/button_dropdown*/
define('passbolt-mad@2.10.0#component/button_dropdown', [
    'exports',
    'passbolt-mad/component/button',
    'passbolt-mad/model/state/buttonDropdownState',
    'passbolt-mad/view/component/button_dropdown',
    'passbolt-mad/component/menu',
    'passbolt-mad/view/template/component/button_dropdown/button_dropdown.stache!'
], function (exports, _button, _buttonDropdownState, _button_dropdown, _menu, _button_dropdown3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _button2 = _interopRequireDefault(_button);
    var _buttonDropdownState2 = _interopRequireDefault(_buttonDropdownState);
    var _button_dropdown2 = _interopRequireDefault(_button_dropdown);
    var _menu2 = _interopRequireDefault(_menu);
    var _button_dropdown4 = _interopRequireDefault(_button_dropdown3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ButtonDropdown = _button2.default.extend('mad.component.ButtonDropdown', {
        defaults: {
            label: 'Button Dropdown Component',
            viewClass: _button_dropdown2.default,
            stateClass: _buttonDropdownState2.default,
            items: null,
            contentElement: null,
            closeOnItemClick: true,
            template: _button_dropdown4.default
        }
    }, {
        afterStart: function afterStart() {
            var $dropdownElement = null;
            if (this.options.contentElement == null) {
                $dropdownElement = $('<ul class="dropdown-content"></div>').insertAfter(this.element);
            } else {
                $dropdownElement = $(this.options.contentElement);
            }
            var menu = new _menu2.default($dropdownElement[0]);
            menu.start();
            menu.load(this.options.items);
            this.options.menu = menu;
            this.on();
        },
        enableItem: function enableItem(id) {
            this.options.menu.enableItem(id);
        },
        disableItem: function disableItem(id) {
            this.options.menu.disableItem(id);
        },
        '{menu.element} item_selected': function menuElementItem_selected(el, ev) {
            var item = ev.data.item;
            if (this.options.closeOnItemClick === true && item.enabled) {
                this.view.close();
            }
        }
    });
    exports.default = ButtonDropdown;
});
/*app/model/filter*/
define('app/model/filter', ['exports'], function (exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
        }
    }
    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ('value' in descriptor)
                    descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function (Constructor, protoProps, staticProps) {
            if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
                defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();
    var Filter = function () {
        function Filter(options) {
            _classCallCheck(this, Filter);
            Object.assign(this, {
                id: '',
                type: '',
                forceReload: false,
                label: '',
                rules: {},
                order: {}
            }, options);
        }
        _createClass(Filter, [
            {
                key: 'getOrders',
                value: function getOrders() {
                    if (this.order) {
                        return this.order;
                    }
                    return [];
                }
            },
            {
                key: 'getRule',
                value: function getRule(name) {
                    return this.rules[name];
                }
            },
            {
                key: 'setRule',
                value: function setRule(name, value) {
                    this.rules[name] = value;
                }
            },
            {
                key: 'getRules',
                value: function getRules(excludedRules) {
                    var returnValue = {};
                    excludedRules = excludedRules || [];
                    for (var ruleName in this.rules) {
                        if (excludedRules.indexOf(ruleName) == -1) {
                            returnValue[ruleName] = this.rules[ruleName];
                        }
                    }
                    return returnValue;
                }
            }
        ]);
        return Filter;
    }();
    exports.default = Filter;
});
/*passbolt-mad@2.10.0#view/form/element/checkbox*/
define('passbolt-mad@2.10.0#view/form/element/checkbox', [
    'exports',
    'can-dom-events',
    'passbolt-mad/view/form/element'
], function (exports, _canDomEvents, _element) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canDomEvents2 = _interopRequireDefault(_canDomEvents);
    var _element2 = _interopRequireDefault(_element);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Checkbox = _element2.default.extend('mad.view.form.Checkbox', {}, {
        getValue: function getValue() {
            var returnValue = [];
            $(this.element).find('input:checked').each(function () {
                returnValue.push($(this).val());
            });
            return returnValue;
        },
        setValue: function setValue(value) {
            value = typeof value != 'undefined' && value != null ? value : [];
            $(this.element).find('input').each(function () {
                if (value.indexOf($(this).val()) != -1) {
                    $(this).attr('checked', true);
                    $(this)[0].checked = true;
                } else {
                    $(this)[0].checked = false;
                    $(this).removeAttr('checked');
                }
            });
        },
        '{element} input click': function elementInputClick(el, ev) {
            ev.stopPropagation();
            if ($(el).is(':checked')) {
                _canDomEvents2.default.dispatch(this.element, {
                    type: 'checked',
                    data: $(el).val()
                });
            } else {
                _canDomEvents2.default.dispatch(this.element, {
                    type: 'unchecked',
                    data: $(el).val()
                });
            }
        },
        '{element} input change': function elementInputChange(el, ev) {
            ev.stopPropagation();
            _canDomEvents2.default.dispatch(this.element, {
                type: 'changed',
                data: { value: this.getValue() }
            });
        }
    });
    exports.default = Checkbox;
});
/*passbolt-mad@2.10.0#view/template/form/checkbox.stache!steal-stache@4.1.2#steal-stache*/
define('passbolt-mad@2.10.0#view/template/form/checkbox.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('view/template/form/checkbox.stache', [
        {
            'tokenType': 'special',
            'args': [
                '#each(availableValues)',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input checkbox',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'checkbox',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'scope.key',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'checkbox_',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '../id',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '_',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'hash(scope.key)',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(../controller.state.disabled)',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'disabled',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'disabled',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'for',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'checkbox_',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '../id',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '_',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'hash(scope.key)',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'for',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'this',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                6
            ]
        },
        {
            'tokenType': 'done',
            'args': [6]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*passbolt-mad@2.10.0#form/element/checkbox*/
define('passbolt-mad@2.10.0#form/element/checkbox', [
    'exports',
    'passbolt-mad/form/choice_element',
    'passbolt-mad/view/form/element/checkbox',
    'passbolt-mad/view/template/form/checkbox.stache!'
], function (exports, _choice_element, _checkbox, _checkbox3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _choice_element2 = _interopRequireDefault(_choice_element);
    var _checkbox2 = _interopRequireDefault(_checkbox);
    var _checkbox4 = _interopRequireDefault(_checkbox3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Checkbox = _choice_element2.default.extend('mad.form.Checkbox', {
        defaults: {
            label: 'Checkbox Form Element',
            tag: 'div',
            template: _checkbox4.default,
            viewClass: _checkbox2.default
        }
    }, {
        onDisabledChange: function onDisabledChange(disabled) {
            if (disabled) {
                $(this.element).addClass('disabled');
                $('input', this.element).attr('disabled', 'disabled').addClass('disabled');
            } else {
                $(this.element).removeClass('disabled');
                $('input', this.element).removeAttr('disabled').removeClass('disabled');
            }
        }
    });
    exports.default = Checkbox;
});
/*passbolt-mad@2.10.0#model/map/grid_column*/
define('passbolt-mad@2.10.0#model/map/grid_column', [
    'exports',
    'passbolt-mad/model/map/map'
], function (exports, _map) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _map2 = _interopRequireDefault(_map);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var GridColumn = _map2.default.extend('mad.model.GridColumn', {
        name: { type: 'string' },
        index: { type: 'string' },
        label: { type: '*' },
        template: {
            type: '*',
            default: function _default() {
                return null;
            }
        },
        css: {
            type: '*',
            default: function _default() {
                return [];
            }
        },
        sortable: {
            type: 'boolean',
            default: true
        }
    });
    exports.default = GridColumn;
});
/*passbolt-mad@2.10.0#model/state/gridState*/
define('passbolt-mad@2.10.0#model/state/gridState', [
    'exports',
    'passbolt-mad/model/state/componentState'
], function (exports, _componentState) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _componentState2 = _interopRequireDefault(_componentState);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var GridState = _componentState2.default.extend({
        filtered: {
            type: 'boolean',
            default: false
        },
        filtering: {
            type: 'boolean',
            default: false
        },
        selectType: {
            type: 'string',
            default: 'single'
        }
    });
    exports.default = GridState;
});
/*passbolt-mad@2.10.0#view/component/grid*/
define('passbolt-mad@2.10.0#view/component/grid', [
    'exports',
    'can-dom-data',
    'can-dom-events',
    'passbolt-mad/view/view',
    'passbolt-mad/helper/html'
], function (exports, _canDomData, _canDomEvents, _view, _html) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canDomData2 = _interopRequireDefault(_canDomData);
    var _canDomEvents2 = _interopRequireDefault(_canDomEvents);
    var _view2 = _interopRequireDefault(_view);
    var _html2 = _interopRequireDefault(_html);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Grid = _view2.default.extend('mad.view.component.Grid', {}, {
        reset: function reset() {
            var tableElement = $('.tableview-content', this.element);
            var tableTbody = tableElement.find('tbody');
            tableElement.scrollTop(0);
            tableTbody.empty();
            this.markAsUnsorted();
        },
        hideColumn: function hideColumn(columnName) {
            $('.js_grid_column_' + columnName, this.element).hide();
        },
        showColumn: function showColumn(columnName) {
            $('.js_grid_column_' + columnName, this.element).show();
        },
        selectItem: function selectItem(item) {
            var $item = this.getItemElement(item);
            $item.addClass('selected');
        },
        unselectItem: function unselectItem(item) {
            var $item = this.getItemElement(item);
            $item.removeClass('selected');
        },
        unselectAll: function unselectAll() {
            $('tr.selected', this.element).removeClass('selected');
        },
        rightSelectItem: function rightSelectItem(item) {
        },
        hoverItem: function hoverItem(item, el, ev) {
        },
        removeItem: function removeItem(item) {
            var $item = this.getItemElement(item);
            $item.remove();
        },
        hideItem: function hideItem(item) {
            var $item = this.getItemElement(item);
            $item.hide();
        },
        showItem: function showItem(item) {
            var $item = this.getItemElement(item);
            $item.show();
        },
        _renderRow: function _renderRow(item, options) {
            var control = this.getController();
            var columnModels = control.getColumnModel();
            var mappedItem = control.mappedItems[item.id];
            return _view2.default.render(control.options.itemTemplate, {
                item: item,
                id: control.options.prefixItemId + mappedItem.id,
                columnModels: columnModels,
                mappedItem: mappedItem,
                cellTemplate: control.options.cellTemplate,
                options: options
            });
        },
        getItemElement: function getItemElement(item) {
            return $('#' + this.getController().options.prefixItemId + item.id, this.element);
        },
        insertItem: function insertItem(item, refItem, position, options) {
            position = position || 'last';
            var $item = null;
            var $refElement = null;
            var row = '';
            var control = this.getController();
            switch (position) {
            case 'before':
            case 'after':
                $refElement = this.getItemElement(refItem);
                if (!$refElement.length) {
                    throw new mad.Exception('No HTMLElement found for the given item.');
                }
                break;
            default:
            case 'first':
            case 'last':
                $refElement = $('tbody', this.element);
                break;
            }
            row = this._renderRow(item, options);
            $item = _html2.default.create($refElement, position, row);
            _canDomData2.default.set($item[0], control.getItemClass().shortName, item);
            return $item;
        },
        refreshItem: function refreshItem(item, options) {
            var $current = this.getItemElement(item);
            var row = this._renderRow(item, options);
            var $item = _html2.default.create($current, 'replace_with', row);
            _canDomData2.default.set($item[0], this.getController().getItemClass().shortName, item);
        },
        moveItem: function moveItem(item, position) {
            var $el = this.getItemElement(item);
            var $detachedEl = $el.detach();
            var $refEl = $('tbody tr', this.element).eq(position);
            if ($refEl.length) {
                $refEl.before($detachedEl);
            } else {
                $('tbody', this.element).append($detachedEl);
            }
        },
        markColumnAsSorted: function markColumnAsSorted(columnModel, sortAsc) {
            var cssClasses = 'sorted ';
            cssClasses += sortAsc ? 'sort-asc' : 'sort-desc';
            this.markAsUnsorted();
            $('.js_grid_column_' + columnModel.name, this.element).addClass(cssClasses);
        },
        markAsUnsorted: function markAsUnsorted() {
            $('.sortable.sorted', this.element).removeClass('sorted sort-asc sort-desc');
        },
        '{element} thead th.sortable click': function elementTheadThSortableClick(el, ev) {
            var control = this.getController();
            var sortAsc = true;
            var columnModel = _canDomData2.default.get(el, control.getColumnModelClass().shortName);
            if ($(el).hasClass('sorted')) {
                if ($(el).hasClass('sort-desc')) {
                    sortAsc = true;
                } else {
                    sortAsc = false;
                }
            }
            _canDomEvents2.default.dispatch(this.element, {
                type: 'column_sort',
                data: {
                    columnModel: columnModel,
                    sortAsc: sortAsc,
                    srcEv: ev
                }
            });
        },
        '{element} tbody tr click': function elementTbodyTrClick(el, ev) {
            var data = void 0;
            var control = this.getController();
            var itemClass = control.getItemClass();
            if (itemClass) {
                data = _canDomData2.default.get(el, itemClass.shortName);
            } else {
                data = el.id.replace(control.options.prefixItemId, '');
            }
            _canDomEvents2.default.dispatch(this.element, {
                type: 'item_selected',
                data: {
                    item: data,
                    srcEv: ev
                }
            });
        },
        '{element} tbody tr hover': function elementTbodyTrHover(el, ev) {
            var data = void 0;
            var control = this.getController();
            var itemClass = control.getItemClass();
            if (itemClass) {
                data = _canDomData2.default.get(el, itemClass.shortName);
            } else {
                data = el.id.replace(control.options.prefixItemId, '');
            }
            _canDomEvents2.default.dispatch(this.element, {
                type: 'item_hovered',
                data: {
                    item: data,
                    srcEv: ev
                }
            });
        }
    });
    exports.default = Grid;
});
/*passbolt-mad@2.10.0#view/template/component/grid/gridColumnHeader.stache!steal-stache@4.1.2#steal-stache*/
define('passbolt-mad@2.10.0#view/template/component/grid/gridColumnHeader.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('view/template/component/grid/gridColumnHeader.stache', [
        {
            'tokenType': 'start',
            'args': [
                'th',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_grid_column js_grid_column_',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'name',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' cell_',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'name',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'css.join(\' \')',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(sortable)',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'sortable',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'th',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(sortable)',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(label.name)',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>label',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#else',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'label',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                7
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                9
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#else',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(label.name)',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                11
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>label',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                12
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#else',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'label',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                14
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                15
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'th',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                17
            ]
        },
        {
            'tokenType': 'done',
            'args': [18]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*passbolt-mad@2.10.0#view/template/component/grid/grid.stache!steal-stache@4.1.2#steal-stache*/
define('passbolt-mad@2.10.0#view/template/component/grid/grid.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('view/template/component/grid/grid.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'tableview-header',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'table',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'table',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'thead',
                false,
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'thead',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'tr',
                false,
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tr',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' ',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#columnModel',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>../columnHeaderTemplate columnModel=this',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/columnModel',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n            ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tr',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'thead',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'table',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'tableview-content scroll',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'table',
                false,
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'table',
                false,
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'tbody',
                false,
                14
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tbody',
                false,
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tbody',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'table',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                17
            ]
        },
        {
            'tokenType': 'done',
            'args': [18]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*passbolt-mad@2.10.0#view/template/component/grid/gridItem.stache!steal-stache@4.1.2#steal-stache*/
define('passbolt-mad@2.10.0#view/template/component/grid/gridItem.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('view/template/component/grid/gridItem.stache', [
        {
            'tokenType': 'start',
            'args': [
                'tr',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(options.hidden',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'hidden',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(options.css',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'options.css.join(\' \')',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tr',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#each(columnModels, columnModel=value num=index)',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_grid_column_',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'name',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' cell_',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'name',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'css.join(\' \')',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(columnModel.template)',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>columnModel.template',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#else',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                7
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>../cellTemplate',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tr',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                13
            ]
        },
        {
            'tokenType': 'done',
            'args': [14]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*passbolt-mad@2.10.0#view/template/component/grid/gridCell.stache!steal-stache@4.1.2#steal-stache*/
define('passbolt-mad@2.10.0#view/template/component/grid/gridCell.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('view/template/component/grid/gridCell.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'title',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '../mappedItem[name]',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'title',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '../mappedItem[name]',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                3
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*passbolt-mad@2.10.0#view/helper/stache/grid/grid_cell*/
define('passbolt-mad@2.10.0#view/helper/stache/grid/grid_cell', [
    'can-stache',
    'passbolt-mad/view/view',
    'passbolt-mad/view/template/component/grid/gridCell.stache!'
], function (_canStache, _view, _gridCell) {
    'use strict';
    var _canStache2 = _interopRequireDefault(_canStache);
    var _view2 = _interopRequireDefault(_view);
    var _gridCell2 = _interopRequireDefault(_gridCell);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    _canStache2.default.registerHelper('gridCell', function (gridColumn, options) {
        var template = gridColumn.template;
        if (!template) {
            template = _gridCell2.default;
        }
        return _view2.default.render(template, options);
    });
});
/*passbolt-mad@2.10.0#component/grid*/
define('passbolt-mad@2.10.0#component/grid', [
    'exports',
    'passbolt-mad/component/component',
    'can-dom-data',
    'can-util/js/get/get',
    'passbolt-mad/model/map/grid_column',
    'passbolt-mad/model/state/gridState',
    'passbolt-mad/view/component/grid',
    'passbolt-mad/view/template/component/grid/gridColumnHeader.stache!',
    'passbolt-mad/view/template/component/grid/grid.stache!',
    'passbolt-mad/view/template/component/grid/gridItem.stache!',
    'passbolt-mad/view/template/component/grid/gridCell.stache!',
    'passbolt-mad/view/helper/stache/grid/grid_cell.js'
], function (exports, _component, _canDomData, _get, _grid_column, _gridState, _grid, _gridColumnHeader, _grid3, _gridItem, _gridCell) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _canDomData2 = _interopRequireDefault(_canDomData);
    var _get2 = _interopRequireDefault(_get);
    var _grid_column2 = _interopRequireDefault(_grid_column);
    var _gridState2 = _interopRequireDefault(_gridState);
    var _grid2 = _interopRequireDefault(_grid);
    var _gridColumnHeader2 = _interopRequireDefault(_gridColumnHeader);
    var _grid4 = _interopRequireDefault(_grid3);
    var _gridItem2 = _interopRequireDefault(_gridItem);
    var _gridCell2 = _interopRequireDefault(_gridCell);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Grid = _component2.default.extend('mad.component.Grid', {
        defaults: {
            label: 'Grid Component',
            cssClasses: ['tableview'],
            tag: 'div',
            template: _grid4.default,
            columnHeaderTemplate: _gridColumnHeader2.default,
            itemTemplate: _gridItem2.default,
            cellTemplate: _gridCell2.default,
            viewClass: _grid2.default,
            stateClass: _gridState2.default,
            prefixItemId: '',
            itemClass: null,
            columnModelClass: _grid_column2.default,
            columnModel: [],
            map: null,
            callbacks: {
                item_selected: null,
                item_hovered: null
            },
            items: null,
            isSorted: false,
            paginate: false,
            itemsByPage: 50,
            displayedPages: {
                first: 0,
                last: 0
            },
            fadeInTimeout: 250
        }
    }, {
        init: function init(el, options) {
            options.items = new options.itemClass.List();
            options.sourceItems = new options.itemClass.List();
            this._super(el, options);
            this.mappedItems = {};
            this.on();
        },
        _initState: function _initState(options) {
            var _this = this;
            this._super(options);
            this.state.on('filtered', function (ev, filtered) {
                return _this.onFilteredChange(filtered);
            });
            this.state.on('filtering', function (ev, filtering) {
                return _this.onFilteringChange(filtering);
            });
        },
        onFilteredChange: function onFilteredChange(filtered) {
            if (filtered) {
                $(this.element).addClass('filtered');
            } else {
                $(this.element).removeClass('filtered');
            }
        },
        onFilteringChange: function onFilteringChange(filtering) {
            if (filtering) {
                $(this.element).addClass('filtering');
            } else {
                $(this.element).removeClass('filtering');
            }
        },
        start: function start() {
            if (!this.options.map) {
                throw new Error('A map is required.');
            }
            this._super();
        },
        afterStart: function afterStart() {
            this._afterColumnRender();
            this._initEventListener();
            this._super();
        },
        _afterColumnRender: function _afterColumnRender() {
            var columnModel = this.getColumnModel();
            for (var i in columnModel) {
                var $el = $('th.js_grid_column_' + columnModel[i].name, this.element);
                _canDomData2.default.set($el[0], this.getColumnModelClass().constructor.shortName, columnModel[i]);
            }
        },
        _initEventListener: function _initEventListener() {
            var _this2 = this;
            $('.tableview-content', this.element).scroll(function (ev) {
                return _this2._handleTableContentScroll(ev);
            });
        },
        onLoadedChange: function onLoadedChange(loaded) {
            this._super(loaded);
            var table = $('.tableview-content table', this.element);
            if (!loaded) {
                table.hide();
            } else {
                table.show();
            }
        },
        beforeRender: function beforeRender() {
            this.setViewData('columnModel', this.options.columnModel);
            this.setViewData('columnHeaderTemplate', this.options.columnHeaderTemplate);
            this.setViewData('items', []);
            this._super();
        },
        getColumnModel: function getColumnModel(name) {
            var returnValue = null;
            if (name != undefined) {
                for (var i in this.options.columnModel) {
                    if (this.options.columnModel[i].name == name) {
                        return this.options.columnModel[i];
                    }
                }
            } else {
                returnValue = this.options.columnModel;
            }
            return returnValue;
        },
        getItemClass: function getItemClass() {
            return this.options.itemClass;
        },
        getColumnModelClass: function getColumnModelClass() {
            return this.options.columnModelClass;
        },
        getMap: function getMap() {
            return this.options.map;
        },
        selectItem: function selectItem(item) {
            this.view.selectItem(item);
        },
        rightSelectItem: function rightSelectItem(item) {
            this.view.rightSelectItem(item);
        },
        unselectItem: function unselectItem(item) {
            this.view.unselectAll();
        },
        hoverItem: function hoverItem(item) {
            this.view.hoverItem(item);
        },
        unselectAll: function unselectAll() {
            this.view.unselectAll();
        },
        removeItem: function removeItem(item) {
            var items = this.options.items;
            var index = -1;
            items.forEach(function (_item, i) {
                if (_item.id == item.id) {
                    index = i;
                }
            });
            if (index != -1) {
                items.splice(index, 1);
                delete this.mappedItems[item.id];
                if (this.isItemDisplayed(item)) {
                    this.view.removeItem(item);
                }
                this.state.empty = items.length == 0;
            }
        },
        _assertItemClass: function _assertItemClass(item) {
            var itemClass = this.getItemClass();
            if (itemClass && !(item instanceof itemClass)) {
                throw new Error('Expect the item to be an instance of the ItemClass defined in optoin');
            }
        },
        insertItem: function insertItem(item, refItem, position, render, options) {
            render = render != undefined ? render : true;
            this._assertItemClass(item);
            this.state.loaded = false;
            this.options.items.push(item);
            this._mapItem(item);
            if (render) {
                this._renderItem(item, refItem, position, options);
            }
            this.state.loaded = true;
            this.state.empty = false;
        },
        isItemDisplayed: function isItemDisplayed(item) {
            return this.view.getItemElement(item).length;
        },
        refreshItem: function refreshItem(item) {
            this._assertItemClass(item);
            var options = {};
            var mappedItem = this.getMap().mapObject(item);
            this.mappedItems[item.id] = mappedItem;
            if (this.isItemDisplayed(item)) {
                var hidden = this.view.getItemElement(item).hasClass('hidden');
                options.hidden = hidden;
                this.view.refreshItem(item, options);
                this._afterRenderItem(item, mappedItem);
            }
        },
        load: function load(data, options) {
            var _this3 = this;
            options = options || {};
            var sourceItems = this.options.sourceItems;
            var items = this.options.items;
            this.reset();
            data.forEach(function (item) {
                return items.push(item);
            });
            data.forEach(function (item) {
                return sourceItems.push(item);
            });
            this._mapItems(items);
            this.state.empty = items.length == 0;
            if (options.filter) {
                return this.filterByKeywords(options.filter.keywords, options.filter.fields);
            } else {
                this.state.loaded = false;
                return this._renderItems(options).then(function () {
                    _this3.state.loaded = true;
                });
            }
        },
        _renderItems: function _renderItems(options) {
            var _this4 = this;
            options = options || {};
            var items = this.options.items;
            var paginate = this.options.paginate;
            var itemsByPage = this.options.itemsByPage;
            var table = $('.tableview-content table', this.element);
            var itemsToRender = void 0, page = void 0;
            table.hide();
            if (!paginate) {
                itemsToRender = items;
            } else {
                page = 1;
                var visibleItemId = options.visibleItemId;
                if (visibleItemId) {
                    var visibleItemIndex = items.indexOf({ id: visibleItemId });
                    if (visibleItemIndex > 0) {
                        page = Math.ceil((visibleItemIndex + 1) / itemsByPage);
                    }
                }
                this.options.displayedPages.first = page;
                this.options.displayedPages.last = page;
                itemsToRender = items.slice((page - 1) * itemsByPage, page * itemsByPage);
            }
            return new Promise(function (resolve) {
                setTimeout(function () {
                    itemsToRender.forEach(function (item) {
                        _this4._renderItem(item);
                    });
                    table.fadeIn(_this4.options.fadeInTimeout, function () {
                        _this4.bufferPreviousPage();
                        _this4.bufferNextPage();
                        var pageCount = Math.ceil(items.length / itemsByPage);
                        if (page != 1 && pageCount == page) {
                            _this4._handleTableContentScrollTop();
                            _this4.scrollToItem(itemsToRender[0]);
                        } else {
                            $('.tableview-content').scrollTop(1);
                        }
                        resolve();
                    });
                });
            });
        },
        scrollToItem: function scrollToItem(item) {
            var itemElement = this.view.getItemElement(item);
            $('.tableview-content', this.element).scrollTop($(itemElement).position().top);
        },
        bufferPreviousPage: function bufferPreviousPage() {
            var _this5 = this;
            var items = this.options.items;
            var paginate = this.options.paginate;
            var pageToBuffer = this.options.displayedPages.first - 1;
            var itemsByPage = this.options.itemsByPage;
            if (!paginate || pageToBuffer < 0) {
                return;
            }
            var itemsToBuffer = items.slice((pageToBuffer - 1) * itemsByPage, pageToBuffer * itemsByPage);
            var previousItem = _canDomData2.default.get($('.tableview-content tr:first', this.element)[0], this.options.itemClass.shortName);
            itemsToBuffer.reverse().forEach(function (item) {
                _this5._renderItem(item, previousItem, 'before', {
                    hidden: true,
                    css: ['buffer-before']
                });
                previousItem = item;
            });
        },
        bufferNextPage: function bufferNextPage() {
            var _this6 = this;
            var items = this.options.items;
            var paginate = this.options.paginate;
            var itemsByPage = this.options.itemsByPage;
            var pageToBuffer = this.options.displayedPages.last + 1;
            var totalPage = Math.ceil(items.length / itemsByPage);
            if (!paginate || pageToBuffer > totalPage) {
                return;
            }
            var itemsToBuffer = items.slice((pageToBuffer - 1) * itemsByPage, pageToBuffer * itemsByPage);
            itemsToBuffer.forEach(function (item) {
                _this6._renderItem(item, null, null, {
                    hidden: true,
                    css: ['buffer-after']
                });
            });
        },
        _renderItem: function _renderItem(item, refItem, position, options) {
            options = options || {};
            var mappedItem = this.mappedItems[item.id];
            this.view.insertItem(item, refItem, position, options);
            this._afterRenderItem(item, mappedItem);
        },
        _afterRenderItem: function _afterRenderItem(item, mappedItem) {
            var columnModels = this.getColumnModel();
            for (var j in columnModels) {
                var columnModel = columnModels[j];
                if (columnModel.afterRender) {
                    var itemId = this.options.prefixItemId + mappedItem.id;
                    var $cell = $('#' + itemId + ' .js_grid_column_' + columnModel.name + ' div');
                    var cellValue = mappedItem[columnModel.name];
                    columnModel.afterRender($cell, cellValue, mappedItem, item, columnModel);
                }
            }
        },
        _handleTableContentScroll: function _handleTableContentScroll() {
            if (!this.options.paginate) {
                return;
            }
            var tableElement = $('.tableview-content', this.element);
            var tableContentElement = $('.tableview-content table', this.element);
            var scrollPercent = tableElement.scrollTop() / (tableContentElement.height() - tableElement.height()) * 100;
            if (scrollPercent == 0) {
                this._handleTableContentScrollTop();
            } else if (scrollPercent >= 100) {
                this._handleTableContentScrollBottom();
            }
        },
        _handleTableContentScrollTop: function _handleTableContentScrollTop() {
            var _this7 = this;
            if (this.options.displayedPages.first == 1) {
                return;
            }
            var $topElement = $('.tableview-content tr:not(".hidden"):first', this.element);
            this._displayBufferedPage('before');
            $('.tableview-content', this.element).scrollTop($topElement.position().top);
            this.options.displayedPages.first--;
            setTimeout(function () {
                _this7.bufferPreviousPage();
            }, 200);
        },
        _handleTableContentScrollBottom: function _handleTableContentScrollBottom() {
            var _this8 = this;
            var items = this.options.items;
            var itemsByPage = this.options.itemsByPage;
            var totalPage = Math.ceil(items.length / itemsByPage);
            var pageToDisplay = this.options.displayedPages.last + 1;
            if (pageToDisplay > totalPage) {
                return;
            }
            this._displayBufferedPage('after');
            this.options.displayedPages.last++;
            setTimeout(function () {
                _this8.bufferNextPage();
            }, 200);
        },
        reset: function reset() {
            this.options.items.splice(0, this.options.items.length);
            this.options.sourceItems.splice(0, this.options.sourceItems.length);
            this.mappedItems = {};
            this.state.filtered = false;
            this.options.isSorted = false;
            this.state.empty = false;
            this.view.reset();
        },
        _mapItems: function _mapItems(items) {
            var _this9 = this;
            items.forEach(function (item) {
                _this9._mapItem(item);
            });
        },
        _mapItem: function _mapItem(item) {
            var mappedItem = this.getMap().mapObject(item);
            this.mappedItems[item.id] = mappedItem;
            return mappedItem;
        },
        _displayBufferedPage: function _displayBufferedPage(position) {
            $('.tableview-content table tbody tr.hidden.buffer-' + position, this.element).removeClass('hidden buffer-' + position);
        },
        itemExists: function itemExists(item) {
            return this.view.getItemElement(item).length > 0 ? true : false;
        },
        resetFilter: function resetFilter() {
            var _this10 = this;
            this.state.loaded = false;
            this.options.items = this.options.sourceItems;
            this.state.empty = this.options.items == 0;
            this.state.filtered = false;
            this.view.reset();
            return this._renderItems().then(function () {
                _this10.state.loaded = true;
            });
        },
        filterByKeywords: function filterByKeywords(needle, fields) {
            var _this11 = this;
            this.state.filtering = true;
            this.state.loaded = false;
            this.view.reset();
            this.options.items = this.options.sourceItems.filterContain(needle, fields);
            this.state.empty = this.options.items.length == 0;
            return this._renderItems().then(function () {
                _this11.state.filtering = false;
                _this11.state.filtered = true;
                _this11.state.loaded = true;
            });
        },
        sort: function sort(columnModel, sortAsc) {
            var _this12 = this;
            var columnId = columnModel.sortOn ? columnModel.sortOn : columnModel.name;
            var items = this.options.items;
            this.state.loaded = false;
            this.view.reset();
            items.sort(function (itemA, itemB) {
                var valueA = ((0, _get2.default)(itemA, columnId) || '').toUpperCase();
                var valueB = ((0, _get2.default)(itemB, columnId) || '').toUpperCase();
                if (valueA < valueB) {
                    return sortAsc ? -1 : 1;
                } else if (valueA > valueB) {
                    return sortAsc ? 1 : -1;
                }
                return 0;
            });
            return this._renderItems().then(function () {
                _this12.options.isSorted = true;
                _this12.view.markColumnAsSorted(columnModel, sortAsc);
                _this12.state.loaded = true;
            });
        },
        moveItem: function moveItem(item, position) {
            this.view.moveItem(item, position);
        },
        '{itemClass} destroyed': function itemClassDestroyed(model, event, destroyedItem) {
            this.removeItem(destroyedItem);
        },
        '{element} column_sort': function elementColumn_sort(el, ev) {
            var columnModel = ev.data.columnModel;
            var sortAsc = ev.data.sortAsc;
            this.sort(columnModel, sortAsc);
        },
        '{element} item_selected': function elementItem_selected(el, ev) {
            var item = ev.data.item;
            var srcEv = ev.data.srcEv;
            if (this.options.callbacks.itemSelected) {
                this.options.callbacks.itemSelected(el, ev, item, srcEv);
            }
        },
        '{element} item_hovered': function elementItem_hovered(el, ev) {
            var item = ev.data.item;
            var srcEv = ev.data.srcEv;
            if (this.options.callbacks.itemHovered) {
                this.options.callbacks.itemHovered(el, ev, item, srcEv);
            }
        }
    });
    exports.default = Grid;
});
/*app/util/plugin*/
define('app/util/plugin', ['exports'], function (exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
        }
    }
    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ('value' in descriptor)
                    descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function (Constructor, protoProps, staticProps) {
            if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
                defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();
    var Plugin = function () {
        function Plugin() {
            _classCallCheck(this, Plugin);
        }
        _createClass(Plugin, null, [
            {
                key: 'decryptSecretAndCopyToClipboard',
                value: function decryptSecretAndCopyToClipboard(resourceId) {
                    this.send('passbolt.plugin.decrypt_secret_and_copy_to_clipboard', resourceId);
                }
            },
            {
                key: 'insertResourceEditframe',
                value: function insertResourceEditframe(resourceId) {
                    this.send('passbolt.plugin.resource_edit', resourceId);
                }
            },
            {
                key: 'insertGroupEditframe',
                value: function insertGroupEditframe(groupId, canAddGroupUsers) {
                    this.send('passbolt.plugin.group_edit', {
                        groupId: groupId,
                        canAddGroupUsers: canAddGroupUsers
                    });
                }
            },
            {
                key: 'groupEditIframeEditGroupUser',
                value: function groupEditIframeEditGroupUser(groupUser) {
                    var data = {
                        groupUser: {
                            id: groupUser.id,
                            user_id: groupUser.user_id,
                            group_id: groupUser.group_id,
                            is_admin: groupUser.is_admin,
                            is_new: groupUser.is_new
                        }
                    };
                    this.send('passbolt.group.edit.edit_group_user', data);
                }
            },
            {
                key: 'groupEditIframeRemoveGroupUser',
                value: function groupEditIframeRemoveGroupUser(groupUser) {
                    var data = {
                        groupUser: {
                            id: groupUser.id,
                            user_id: groupUser.user_id,
                            group_id: groupUser.group_id,
                            is_admin: groupUser.is_admin,
                            is_new: groupUser.is_new || false
                        }
                    };
                    this.send('passbolt.group.edit.remove_group_user', data);
                }
            },
            {
                key: 'groupEditIframeSave',
                value: function groupEditIframeSave(group) {
                    this.send('passbolt.group.edit.save', { group: group });
                }
            },
            {
                key: 'insertShareIframe',
                value: function insertShareIframe(resourcesIds) {
                    this.send('passbolt.plugin.resources_share', { resourcesIds: resourcesIds });
                }
            },
            {
                key: 'send',
                value: function send(type, data) {
                    data = data || {};
                    var event = document.createEvent('CustomEvent');
                    event.initCustomEvent(type, true, true, data);
                    document.documentElement.dispatchEvent(event);
                }
            }
        ]);
        return Plugin;
    }();
    exports.default = Plugin;
});
/*app/util/clipboard*/
define('app/util/clipboard', [
    'exports',
    'app/util/plugin'
], function (exports, _plugin) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _plugin2 = _interopRequireDefault(_plugin);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
        }
    }
    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ('value' in descriptor)
                    descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function (Constructor, protoProps, staticProps) {
            if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
                defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();
    var Clipboard = function () {
        function Clipboard() {
            _classCallCheck(this, Clipboard);
        }
        _createClass(Clipboard, null, [{
                key: 'copy',
                value: function copy(value, name) {
                    name = name || null;
                    var eventData = {
                        name: name,
                        data: value
                    };
                    _plugin2.default.send('passbolt.clipboard', eventData);
                }
            }]);
        return Clipboard;
    }();
    exports.default = Clipboard;
});
/*app/component/user/grid_contextual_menu*/
define('app/component/user/grid_contextual_menu', [
    'exports',
    'passbolt-mad/model/map/action',
    'app/util/clipboard',
    'passbolt-mad/component/contextual_menu',
    'passbolt-mad/control/bus',
    'app/model/map/user'
], function (exports, _action, _clipboard, _contextual_menu, _bus, _user) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _clipboard2 = _interopRequireDefault(_clipboard);
    var _contextual_menu2 = _interopRequireDefault(_contextual_menu);
    var _bus2 = _interopRequireDefault(_bus);
    var _user2 = _interopRequireDefault(_user);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var GridContextualMenuComponent = _contextual_menu2.default.extend('passbolt.component.user.GridContextualMenu', { defaults: { user: null } }, {
        afterStart: function afterStart() {
            var _this = this;
            var user = this.options.user;
            var isAdmin = _user2.default.getCurrent().isAdmin();
            var isSelf = _user2.default.getCurrent().id == user.id;
            var copyPublicKeyItem = new _action2.default({
                id: 'js_user_browser_menu_copy_key',
                label: 'Copy public key',
                action: function action() {
                    return _this._copyPublicKey();
                }
            });
            this.insertItem(copyPublicKeyItem);
            var copyEmailItem = new _action2.default({
                id: 'js_user_browser_menu_copy_email',
                label: 'Copy email address',
                cssClasses: isAdmin ? ['separator-after'] : [],
                action: function action() {
                    return _this._copyEmail();
                }
            });
            this.insertItem(copyEmailItem);
            if (isAdmin) {
                var editItem = new _action2.default({
                    id: 'js_user_browser_menu_edit',
                    label: 'Edit',
                    action: function action() {
                        return _this._edit();
                    }
                });
                this.insertItem(editItem);
            }
            if (isAdmin && !isSelf) {
                var deleteItem = new _action2.default({
                    id: 'js_user_browser_menu_delete',
                    label: 'Delete',
                    action: function action() {
                        return _this._delete();
                    }
                });
                this.insertItem(deleteItem);
            }
            this._super();
        },
        _copyPublicKey: function _copyPublicKey() {
            var gpgkey = this.options.user.gpgkey;
            _clipboard2.default.copy(gpgkey.armored_key, 'public key');
            this.remove();
        },
        _copyEmail: function _copyEmail() {
            var user = this.options.user;
            _clipboard2.default.copy(user.username, 'email');
            this.remove();
        },
        _edit: function _edit() {
            var user = this.options.user;
            _bus2.default.trigger('request_user_edition', { user: user });
            this.remove();
        },
        _delete: function _delete() {
            var user = this.options.user;
            _bus2.default.trigger('request_user_deletion', { user: user });
            this.remove();
        }
    });
    exports.default = GridContextualMenuComponent;
});
/*app/model/map/group_user*/
define('app/model/map/group_user', [
    'exports',
    'passbolt-mad/model/list/list',
    'passbolt-mad/model/map/map',
    'app/model/map/group',
    'app/model/map/user'
], function (exports, _list, _map, _group, _user) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _list2 = _interopRequireDefault(_list);
    var _map2 = _interopRequireDefault(_map);
    var _group2 = _interopRequireDefault(_group);
    var _user2 = _interopRequireDefault(_user);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var GroupUser = _map2.default.extend('passbolt.model.GroupUser', {
        id: 'string',
        group_id: 'string',
        user_id: 'string',
        is_admin: 'boolean',
        user: _user2.default,
        group: _group2.default
    });
    _map2.default.setReference('GroupUser', GroupUser);
    GroupUser.List = _list2.default.extend({ '#': { Type: GroupUser } });
    GroupUser.List.prototype.sortAlphabetically = function () {
        this.sort(function (a, b) {
            var aValue = a.user ? a.user.profile.first_name : a.group.name;
            var bValue = b.user ? b.user.profile.first_name : b.group.name;
            if (aValue < bValue) {
                return -1;
            } else if (aValue > bValue) {
                return 1;
            }
            return 0;
        });
    };
    exports.default = GroupUser;
});
/*app/model/map/group*/
define('app/model/map/group', [
    'exports',
    'app/net/ajax',
    'passbolt-mad/config/config',
    'can-connect',
    'can-connect/data/url/url',
    'can-connect/data/parse/parse',
    'can-connect/constructor/constructor',
    'can-connect/can/map/map',
    'passbolt-mad/model/list/list',
    'passbolt-mad/model/map/map',
    'app/model/map/group_user',
    'passbolt-mad/util/lang/i18n',
    'app/model/map/user',
    'uuid/v4'
], function (exports, _ajax, _config, _canConnect, _url, _parse, _constructor, _map, _list, _map3, _group_user, _i18n, _user, _v) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _config2 = _interopRequireDefault(_config);
    var _canConnect2 = _interopRequireDefault(_canConnect);
    var _url2 = _interopRequireDefault(_url);
    var _parse2 = _interopRequireDefault(_parse);
    var _constructor2 = _interopRequireDefault(_constructor);
    var _map2 = _interopRequireDefault(_map);
    var _list2 = _interopRequireDefault(_list);
    var _map4 = _interopRequireDefault(_map3);
    var _group_user2 = _interopRequireDefault(_group_user);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _user2 = _interopRequireDefault(_user);
    var _v2 = _interopRequireDefault(_v);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Group = _map4.default.extend('passbolt.model.Group', {
        id: 'string',
        name: 'string',
        created: 'string',
        modified: 'string',
        modifier: _user2.default,
        groups_users: _group_user2.default.List,
        isGroupManager: function isGroupManager(user) {
            var isGroupManager = false;
            if (this.groups_users) {
                this.groups_users.forEach(function (groupUser) {
                    if (groupUser.user_id == user.id && groupUser.is_admin == true) {
                        isGroupManager = true;
                    }
                });
            }
            if (this.my_group_user) {
                isGroupManager = this.my_group_user.is_admin;
            }
            return isGroupManager;
        },
        isAllowedToEdit: function isAllowedToEdit(user) {
            var isGroupManager = this.isGroupManager(user);
            var isAdmin = user.role.name == 'admin';
            return isGroupManager || isAdmin;
        },
        deleteDryRun: function deleteDryRun() {
            return _ajax2.default.request({
                url: 'groups/' + this.id + '/dry-run.json?api-version=2',
                type: 'DELETE',
                silentNotify: true
            });
        }
    });
    _map4.default.setReference('Group', Group);
    Group.List = _list2.default.extend({ '#': { Type: Group } });
    Group.validationRules = {
        id: [{ rule: 'uuid' }],
        name: [
            {
                rule: 'required',
                message: __('A name is required.')
            },
            {
                rule: [
                    'lengthBetween',
                    0,
                    255
                ],
                message: __('The name length should be maximum %s characters.', 255)
            },
            {
                rule: 'utf8Extended',
                message: __('The name should be a valid utf8 string.')
            }
        ]
    };
    Group.findView = function (id) {
        var options = {
            id: id,
            contain: {
                'modifier': 1,
                'modifier.profile': 1,
                'group_user': 1,
                'group_user.user': 1,
                'group_user.user.profile': 1,
                'group_user.user.gpgkey': 1
            }
        };
        return Group.findOne(options);
    };
    Group.avatarPath = function () {
        return 'img/avatar/group_default.png';
    };
    Group.prototype.delete = function (transfer) {
        var _this = this;
        var request = {
            _xhr: null,
            id: (0, _v2.default)(),
            url: 'groups/' + this.id + '.json?api-version=v2',
            method: 'DELETE',
            headers: { 'X-CSRF-Token': _config2.default.read('app.csrfToken') },
            beforeSend: function beforeSend(xhr) {
                request._xhr = xhr;
            },
            data: { transfer: transfer }
        };
        _ajax2.default._registerRequest(request);
        return $.ajax(request).then(function (data) {
            return _ajax2.default.handleSuccess(request, data);
        }).then(function () {
            _this.destroy();
        }).then(null, function (jqXHR) {
            var jsonData = {};
            if (jqXHR.responseText) {
                try {
                    jsonData = $.parseJSON(jqXHR.responseText);
                } catch (e) {
                }
            }
            return _ajax2.default.handleError(request, jsonData);
        });
    };
    Group.connection = (0, _canConnect2.default)([
        _parse2.default,
        _url2.default,
        _constructor2.default,
        _map2.default
    ], {
        Map: Group,
        List: Group.List,
        url: {
            resource: '/',
            destroyData: function destroyData() {
                return Promise.resolve({});
            },
            getData: function getData(params) {
                params = params || {};
                params['api-version'] = 'v2';
                return _ajax2.default.request({
                    url: 'groups/{id}.json',
                    type: 'GET',
                    params: params
                });
            },
            getListData: function getListData(params) {
                params = params || {};
                params['api-version'] = 'v2';
                return _ajax2.default.request({
                    url: 'groups.json',
                    type: 'GET',
                    params: params
                });
            }
        }
    });
    exports.default = Group;
});
/*app/view/component/user/grid*/
define('app/view/component/user/grid', [
    'exports',
    'can-dom-data',
    'can-dom-events',
    'passbolt-mad/view/component/grid'
], function (exports, _canDomData, _canDomEvents, _grid) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canDomData2 = _interopRequireDefault(_canDomData);
    var _canDomEvents2 = _interopRequireDefault(_canDomEvents);
    var _grid2 = _interopRequireDefault(_grid);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var UserGridView = _grid2.default.extend('passbolt.view.component.user.Grid', {}, {
        '{element} tbody tr contextmenu': function elementTbodyTrContextmenu(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            return false;
        },
        '{element} tbody tr mousedown': function elementTbodyTrMousedown(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            if (ev.which == 3) {
                var itemClass = this.getController().getItemClass();
                var item = _canDomData2.default.get(el, itemClass.shortName);
                _canDomEvents2.default.dispatch(this.element, {
                    type: 'item_right_selected',
                    data: {
                        item: item,
                        srcEv: ev
                    }
                });
            }
            return false;
        }
    });
    exports.default = UserGridView;
});
/*app/view/template/component/user/grid/cell_avatar.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/user/grid/cell_avatar.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/user/grid/cell_avatar.stache', [
        {
            'tokenType': 'start',
            'args': [
                'img',
                true,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'src',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' ../item.profile.avatarPath(\'small\') ',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'src',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'alt',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Picture of: %s\', ../item.profile.fullName())',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'alt',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'width',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '30',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'width',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'height',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '30',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'height',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'img',
                true,
                1
            ]
        },
        {
            'tokenType': 'done',
            'args': [1]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/user/grid/column_header_select.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/user/grid/column_header_select.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/user/grid/column_header_select.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input checkbox',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'checkbox',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'select all',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'checkbox-select-all',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'checkbox-select-all-people',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'disabled',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'disabled',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'disabled',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'for',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'checkbox-select-all-people',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'for',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'select all\') ',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                4
            ]
        },
        {
            'tokenType': 'done',
            'args': [5]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/user/grid/grid_filtered_empty.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/user/grid/grid_filtered_empty.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/user/grid/grid_filtered_empty.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'empty-content',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h2',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h2',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'None of the users matched this search.\')',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h2',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Try another search or use the left panel to navigate into your organization.\')',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                4
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/user/grid/grid_item.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/user/grid/grid_item.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/user/grid/grid_item.stache', [
        {
            'tokenType': 'start',
            'args': [
                'tr',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#unless(mappedItem.active)',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'inactive',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/unless',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(options.hidden',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'hidden',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(options.css',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'options.css.join(\' \')',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'tr',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#each(columnModels, columnModel=value num=index)',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'td',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_grid_column_',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'name',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' cell_',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'name',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'css.join(\' \')',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'td',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(columnModel.template)',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>columnModel.template',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#else',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                7
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>../cellTemplate',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'td',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'tr',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                13
            ]
        },
        {
            'tokenType': 'done',
            'args': [14]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/user/grid*/
define('app/component/user/grid', [
    'exports',
    'passbolt-mad/form/element/checkbox',
    'passbolt-mad/helper/component',
    'passbolt-mad/util/time/get_time_ago',
    'passbolt-mad/model/map/grid_column',
    'passbolt-mad/component/grid',
    'app/component/user/grid_contextual_menu',
    'app/model/map/group',
    'app/model/map/group_user',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/util/map/map',
    'app/model/map/user',
    'app/view/component/user/grid',
    'passbolt-mad/view/view',
    'app/view/template/component/user/grid/cell_avatar.stache!',
    'app/view/template/component/user/grid/column_header_select.stache!',
    'app/view/template/component/user/grid/grid_filtered_empty.stache!',
    'app/view/template/component/user/grid/grid_item.stache!'
], function (exports, _checkbox, _component, _get_time_ago, _grid_column, _grid, _grid_contextual_menu, _group, _group_user, _i18n, _map, _user, _grid3, _view, _cell_avatar, _column_header_select, _grid_filtered_empty, _grid_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _checkbox2 = _interopRequireDefault(_checkbox);
    var _component2 = _interopRequireDefault(_component);
    var _get_time_ago2 = _interopRequireDefault(_get_time_ago);
    var _grid_column2 = _interopRequireDefault(_grid_column);
    var _grid2 = _interopRequireDefault(_grid);
    var _grid_contextual_menu2 = _interopRequireDefault(_grid_contextual_menu);
    var _group2 = _interopRequireDefault(_group);
    var _group_user2 = _interopRequireDefault(_group_user);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _map2 = _interopRequireDefault(_map);
    var _user2 = _interopRequireDefault(_user);
    var _grid4 = _interopRequireDefault(_grid3);
    var _view2 = _interopRequireDefault(_view);
    var _cell_avatar2 = _interopRequireDefault(_cell_avatar);
    var _column_header_select2 = _interopRequireDefault(_column_header_select);
    var _grid_filtered_empty2 = _interopRequireDefault(_grid_filtered_empty);
    var _grid_item2 = _interopRequireDefault(_grid_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var UserGridComponent = _grid2.default.extend('passbolt.component.user.Grid', {
        defaults: {
            itemClass: _user2.default,
            viewClass: _grid4.default,
            groups: [],
            selectedUsers: new _user2.default.List(),
            prefixItemId: 'user_',
            silentLoading: false,
            loadedOnStart: false,
            itemTemplate: _grid_item2.default,
            Group: _group2.default,
            GroupUser: _group_user2.default,
            User: _user2.default,
            paginate: true
        }
    }, {
        filterSettings: null,
        _selectCheckboxComponents: {},
        init: function init(el, options) {
            options.map = this._getGridMap();
            options.columnModel = this._getGridColumns();
            this._super(el, options);
        },
        _getGridMap: function _getGridMap() {
            return new _map2.default({
                id: 'id',
                name: {
                    key: 'profile',
                    func: function func(profile) {
                        return profile.fullName();
                    }
                },
                username: 'username',
                modified: {
                    key: 'modified',
                    func: function func(value) {
                        return (0, _get_time_ago2.default)(value);
                    }
                },
                last_logged_in: {
                    key: 'last_logged_in',
                    func: function func(value) {
                        if (value) {
                            return (0, _get_time_ago2.default)(value);
                        }
                        return __('never');
                    }
                },
                active: 'active',
                group: 'group',
                profile: 'profile'
            });
        },
        _getGridColumns: function _getGridColumns() {
            var _this = this;
            var columns = [];
            var selectColumn = new _grid_column2.default({
                name: 'multipleSelect',
                index: 'multipleSelect',
                css: ['selections s-cell'],
                label: _column_header_select2.default,
                afterRender: function afterRender(cellElement, cellValue, mappedItem, item, columnModel) {
                    return _this._initSelectColumnComponent(cellElement, cellValue, mappedItem, item, columnModel);
                }
            });
            columns.push(selectColumn);
            var avatarColumn = new _grid_column2.default({
                name: 'avatar',
                index: 'Avatar',
                css: ['s-cell'],
                label: '',
                template: _cell_avatar2.default
            });
            columns.push(avatarColumn);
            var nameColumn = new _grid_column2.default({
                name: 'name',
                index: 'Profile',
                css: ['m-cell'],
                label: __('User'),
                sortable: true,
                sortOn: 'profile.first_name'
            });
            columns.push(nameColumn);
            var usernameColumn = new _grid_column2.default({
                name: 'username',
                index: 'username',
                css: ['m-cell'],
                label: __('Username'),
                sortable: true
            });
            columns.push(usernameColumn);
            var modifiedColumn = new _grid_column2.default({
                name: 'modified',
                index: 'modified',
                css: ['m-cell'],
                label: __('Modified'),
                sortable: true
            });
            columns.push(modifiedColumn);
            var loggedInColumn = new _grid_column2.default({
                name: 'last_logged_in',
                index: 'last_logged_in',
                css: ['m-cell'],
                label: __('Last logged in'),
                sortable: true
            });
            columns.push(loggedInColumn);
            return columns;
        },
        _initSelectColumnComponent: function _initSelectColumnComponent(cellElement, cellValue, mappedItem, item) {
            var availableValues = {};
            availableValues[item.id] = '';
            var checkbox = _component2.default.create(cellElement, 'inside_replace', _checkbox2.default, {
                id: 'multiple_select_checkbox_' + item.id,
                cssClasses: ['js_checkbox_multiple_select'],
                availableValues: availableValues
            });
            checkbox.start();
            this._selectCheckboxComponents[item.id] = checkbox;
        },
        showContextualMenu: function showContextualMenu(user, x, y) {
            var contextualMenu = _grid_contextual_menu2.default.instantiate({
                state: 'hidden',
                user: user,
                coordinates: {
                    x: x,
                    y: y
                }
            });
            contextualMenu.start();
        },
        refreshItem: function refreshItem(item) {
            if (!this.itemExists(item)) {
                return;
            }
            this._super(item);
            if (this.options.selectedUsers.length > 0) {
                this.select(this.options.selectedUsers[0]);
            }
        },
        reset: function reset() {
            var sortedColumnModel = this.getColumnModel('name');
            this.view.markColumnAsSorted(sortedColumnModel, true);
            this._super();
        },
        isSelected: function isSelected(item) {
            return this.options.selectedUsers.length > 0 && this.options.selectedUsers[0].id == item.id;
        },
        select: function select(item) {
            if (!this.itemExists(item)) {
                return;
            }
            var checkbox = this._selectCheckboxComponents[item.id];
            checkbox.setValue([item.id]);
            this.view.selectItem(item);
        },
        unselect: function unselect(item) {
            if (!this.itemExists(item)) {
                return;
            }
            var checkbox = this._selectCheckboxComponents[item.id];
            checkbox.reset();
            this.view.unselectItem(item);
        },
        sort: function sort(columnModel, sortAsc) {
            this.options.selectedUsers.splice(0);
            return this._super(columnModel, sortAsc);
        },
        filterBySettings: function filterBySettings(filter) {
            var _this2 = this;
            this.state.loaded = false;
            return this._findUsers(filter).then(function (users) {
                return _this2._handleApiUsers(users, filter);
            }).then(function () {
                return _this2._markSortedBySettings(filter);
            }).then(function () {
                return _this2._filterByKeywordsBySettings(filter);
            });
        },
        _findUsers: function _findUsers(filter) {
            var requestApi = filter.forceReload || !this.filterSettings || !(filter.id == 'search' && this.filterSettings.id === filter.id);
            if (!requestApi) {
                return Promise.resolve();
            }
            var findOptions = {
                silentLoading: false,
                filter: filter.getRules(['keywords']),
                order: filter.getOrders(),
                contain: { LastLoggedIn: 1 }
            };
            return _user2.default.findAll(findOptions);
        },
        _handleApiUsers: function _handleApiUsers(users, filter) {
            this.filterSettings = filter;
            if (!users) {
                return Promise.resolve();
            }
            if (this.state.destroyed) {
                return Promise.resolve();
            }
            this.view.reset();
            var loadOptions = {};
            var keywords = filter.getRule('keywords');
            if (keywords && keywords != '') {
                filter.filterByKeywordsApplied = true;
                loadOptions.filter = {
                    keywords: keywords,
                    fields: this._getFilterFields()
                };
            }
            return this.load(users, loadOptions);
        },
        _getFilterFields: function _getFilterFields() {
            var filterFields = [
                'username',
                'role.name',
                'profile.first_name',
                'profile.last_name'
            ];
            return filterFields;
        },
        onEmptyChange: function onEmptyChange(empty) {
            this._super(empty);
            if (this.state.filtering && !empty) {
                $(this.element).removeClass('empty');
                $('.empty-content', this.element).remove();
            }
        },
        onLoadedChange: function onLoadedChange(loaded) {
            this._super(loaded);
            if (this.state.destroyed) {
                return;
            }
            var empty = this.state.empty;
            if (!loaded || !empty) {
                if (this.state.filtering && $(this.element).hasClass('filtered')) {
                    return;
                }
                $('.empty-content', this.element).remove();
                return;
            }
            if (this.state.filtered) {
                if ($('.empty-content', this.element).length) {
                    return;
                }
                var empty_html = _view2.default.render(_grid_filtered_empty2.default);
                $('.tableview-content', this.element).prepend(empty_html);
            }
        },
        _markSortedBySettings: function _markSortedBySettings(filter) {
            if (this.state.destroyed) {
                return Promise.resolve();
            }
            var orders = filter.getOrders();
            if (orders && orders[0]) {
                var matches = /((\w*)\.)?(\w*)\s*(asc|desc|ASC|DESC)?/i.exec(orders[0]);
                var fieldName = matches[3];
                var sortWay = matches[4] ? matches[4].toLowerCase() : 'asc';
                if (fieldName) {
                    if (fieldName === 'last_name' || fieldName === 'first_name') {
                        fieldName = 'name';
                    }
                    var sortedColumnModel = this.getColumnModel(fieldName);
                    if (sortedColumnModel) {
                        this.view.markColumnAsSorted(sortedColumnModel, sortWay === 'asc');
                    }
                }
            }
        },
        _filterByKeywordsBySettings: function _filterByKeywordsBySettings(filter) {
            if (this.state.destroyed) {
                return Promise.resolve();
            }
            if (filter.filterByKeywordsApplied) {
                return;
            }
            var keywords = filter.getRule('keywords');
            if (keywords && keywords != '') {
                var filterFields = this._getFilterFields();
                return this.filterByKeywords(keywords, filterFields);
            } else if (this.state.filtered) {
                this.resetFilter();
            }
        },
        '{User} updated': function UserUpdated(model, ev, user) {
            if (this.options.items.indexOf(user) != -1) {
                this.refreshItem(user);
            }
        },
        '{element} item_selected': function elementItem_selected(el, ev) {
            var item = ev.data.item;
            if (this.isSelected(item)) {
                this.options.selectedUsers.splice(0);
            } else {
                this.options.selectedUsers.splice(0, this.options.selectedUsers.length, item);
            }
        },
        '{element} item_right_selected': function elementItem_right_selected(el, ev) {
            var item = ev.data.item;
            var srcEv = ev.data.srcEv;
            this.options.selectedUsers.splice(0, this.options.selectedUsers.length, item);
            var $item = $('#' + this.options.prefixItemId + item.id);
            var itemOffset = $item.offset();
            this.showContextualMenu(item, srcEv.pageX - 3, itemOffset.top);
        },
        '{element} .js_checkbox_multiple_select checked': function elementJs_checkbox_multiple_selectChecked(el, ev) {
            var id = ev.data;
            var user = this.options.items.filter({ id: id }).pop();
            this.options.selectedUsers.splice(0, this.options.selectedUsers.length, user);
        },
        '{element} .js_checkbox_multiple_select unchecked': function elementJs_checkbox_multiple_selectUnchecked() {
            this.options.selectedUsers.splice(0, this.options.selectedUsers.length);
        },
        '{mad.bus.element} filter_workspace': function madBusElementFilter_workspace(el, ev) {
            var filter = ev.data.filter;
            this.filterBySettings(filter);
        },
        '{selectedUsers} remove': function selectedUsersRemove(el, ev, items) {
            var _this3 = this;
            items.forEach(function (item) {
                _this3.unselect(item);
            });
        },
        '{selectedUsers} add': function selectedUsersAdd(el, ev, items) {
            var _this4 = this;
            items.forEach(function (item) {
                _this4.select(item);
            });
        }
    });
    exports.default = UserGridComponent;
});
/*passbolt-mad@2.10.0#util/array/chunk*/
define('passbolt-mad@2.10.0#util/array/chunk', ['exports'], function (exports) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    function chunk(arr, size) {
        return arr.reduce(function (chunks, el, i) {
            if (i % size === 0) {
                chunks.push([el]);
            } else {
                chunks[chunks.length - 1].push(el);
            }
            return chunks;
        }, []);
    }
    exports.default = chunk;
});
/*app/model/map/favorite*/
define('app/model/map/favorite', [
    'exports',
    'app/net/ajax',
    'can-connect',
    'can-connect/data/url/url',
    'can-connect/data/parse/parse',
    'can-connect/constructor/constructor',
    'can-connect/can/map/map',
    'passbolt-mad/model/map/map'
], function (exports, _ajax, _canConnect, _url, _parse, _constructor, _map, _map3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _canConnect2 = _interopRequireDefault(_canConnect);
    var _url2 = _interopRequireDefault(_url);
    var _parse2 = _interopRequireDefault(_parse);
    var _constructor2 = _interopRequireDefault(_constructor);
    var _map2 = _interopRequireDefault(_map);
    var _map4 = _interopRequireDefault(_map3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Favorite = _map4.default.extend('passbolt.model.Favorite', {
        id: 'string',
        user_id: 'string',
        foreign_model: 'string',
        foreign_key: 'string'
    });
    _map4.default.setReference('Favorite', Favorite);
    Favorite.connection = (0, _canConnect2.default)([
        _parse2.default,
        _url2.default,
        _constructor2.default,
        _map2.default
    ], {
        Map: Favorite,
        List: Favorite.List,
        url: {
            resource: '/',
            destroyData: function destroyData(params) {
                return _ajax2.default.request({
                    url: 'favorites/' + params.id + '.json?api-version=v2',
                    type: 'DELETE'
                });
            },
            createData: function createData(params) {
                return _ajax2.default.request({
                    url: 'favorites/resource/' + params.foreign_key + '.json?api-version=v2',
                    type: 'POST'
                });
            }
        }
    });
    exports.default = Favorite;
});
/*app/model/map/permission_type*/
define('app/model/map/permission_type', [
    'exports',
    'passbolt-mad/model/map/map',
    'passbolt-mad/util/lang/i18n'
], function (exports, _map, _i18n) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _map2 = _interopRequireDefault(_map);
    var _i18n2 = _interopRequireDefault(_i18n);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PermissionType = _map2.default.extend('passbolt.model.PermissionType', {
        serial: 'string',
        name: 'string',
        description: 'string'
    });
    PermissionType.READ = 1;
    PermissionType.UPDATE = 7;
    PermissionType.ADMIN = 15;
    PermissionType.PERMISSION_TYPES = {
        1: __('read'),
        7: __('update'),
        15: __('owner')
    };
    PermissionType.validationRules = {
        serial: [{
                rule: 'choice',
                options: {
                    callback: function callback() {
                        return $.map(PermissionType.PERMISSION_TYPES, function (element, index) {
                            return index;
                        });
                    }
                }
            }]
    };
    PermissionType.formatToString = function (permId) {
        switch (permId.toString()) {
        case PermissionType.ADMIN.toString():
            return __('is %s', PermissionType.PERMISSION_TYPES[permId]);
        default:
            return __('can %s', PermissionType.PERMISSION_TYPES[permId]);
        }
    };
    exports.default = PermissionType;
});
/*app/model/map/permission*/
define('app/model/map/permission', [
    'exports',
    'app/net/ajax',
    'can-connect',
    'can-connect/data/url/url',
    'can-connect/data/parse/parse',
    'can-connect/constructor/constructor',
    'can-connect/can/map/map',
    'passbolt-mad/model/list/list',
    'app/model/map/group',
    'passbolt-mad/model/map/map',
    'app/model/map/permission_type',
    'app/model/map/user'
], function (exports, _ajax, _canConnect, _url, _parse, _constructor, _map, _list, _group, _map3, _permission_type, _user) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _canConnect2 = _interopRequireDefault(_canConnect);
    var _url2 = _interopRequireDefault(_url);
    var _parse2 = _interopRequireDefault(_parse);
    var _constructor2 = _interopRequireDefault(_constructor);
    var _map2 = _interopRequireDefault(_map);
    var _list2 = _interopRequireDefault(_list);
    var _group2 = _interopRequireDefault(_group);
    var _map4 = _interopRequireDefault(_map3);
    var _permission_type2 = _interopRequireDefault(_permission_type);
    var _user2 = _interopRequireDefault(_user);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Permission = _map4.default.extend('passbolt.model.Permission', {
        id: 'string',
        type: 'number',
        aco: 'string',
        aco_foreign_key: 'string',
        aro: 'string',
        aro_foreign_key: 'string',
        aro_foreign_label: 'string',
        group: _group2.default,
        user: _user2.default
    });
    _map4.default.setReference('Permission', Permission);
    Permission.validationRules = {
        aro_foreign_key: [
            'required',
            'uid'
        ],
        aro_foreign_label: ['required'],
        type: [
            'required',
            {
                rule: 'foreignRule',
                options: {
                    model: _permission_type2.default,
                    attribute: 'serial'
                }
            }
        ]
    };
    Permission.prototype.isAllowedTo = function (permissionType) {
        return this.type >= permissionType;
    };
    Permission.List = _list2.default.extend({ '#': { Type: Permission } });
    Permission.List.prototype.sortAlphabetically = function () {
        this.sort(function (a, b) {
            var aValue = a.user ? a.user.profile.first_name : a.group.name;
            var bValue = b.user ? b.user.profile.first_name : b.group.name;
            if (aValue < bValue) {
                return -1;
            } else if (aValue > bValue) {
                return 1;
            }
            return 0;
        });
    };
    Permission.connection = (0, _canConnect2.default)([
        _parse2.default,
        _url2.default,
        _constructor2.default,
        _map2.default
    ], {
        Map: Permission,
        List: Permission.List,
        url: {
            resource: '/',
            getListData: function getListData(params) {
                var url = 'permissions.json';
                if (params.aco_foreign_key) {
                    url = 'permissions/{aco}/{aco_foreign_key}.json';
                }
                params['api-version'] = 'v2';
                return _ajax2.default.request({
                    url: url,
                    type: 'GET',
                    params: params
                });
            },
            createData: function createData(params) {
                return _ajax2.default.request({
                    url: 'permissions.json?api-version=v2',
                    type: 'POST',
                    params: params
                });
            }
        }
    });
    exports.default = Permission;
});
/*urijs@1.19.1#src/URI*/
(function (root, factory) {
    'use strict';
    if (typeof module === 'object' && module.exports) {
        module.exports = factory(require('./punycode'), require('./IPv6'), require('./SecondLevelDomains'));
    } else if (typeof define === 'function' && define.amd) {
        define('urijs@1.19.1#src/URI', [
            './punycode',
            './IPv6',
            './SecondLevelDomains'
        ], factory);
    } else {
        root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains, root);
    }
}(this, function (punycode, IPv6, SLD, root) {
    'use strict';
    var _URI = root && root.URI;
    function URI(url, base) {
        var _urlSupplied = arguments.length >= 1;
        var _baseSupplied = arguments.length >= 2;
        if (!(this instanceof URI)) {
            if (_urlSupplied) {
                if (_baseSupplied) {
                    return new URI(url, base);
                }
                return new URI(url);
            }
            return new URI();
        }
        if (url === undefined) {
            if (_urlSupplied) {
                throw new TypeError('undefined is not a valid argument for URI');
            }
            if (typeof location !== 'undefined') {
                url = location.href + '';
            } else {
                url = '';
            }
        }
        if (url === null) {
            if (_urlSupplied) {
                throw new TypeError('null is not a valid argument for URI');
            }
        }
        this.href(url);
        if (base !== undefined) {
            return this.absoluteTo(base);
        }
        return this;
    }
    function isInteger(value) {
        return /^[0-9]+$/.test(value);
    }
    URI.version = '1.19.1';
    var p = URI.prototype;
    var hasOwn = Object.prototype.hasOwnProperty;
    function escapeRegEx(string) {
        return string.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
    }
    function getType(value) {
        if (value === undefined) {
            return 'Undefined';
        }
        return String(Object.prototype.toString.call(value)).slice(8, -1);
    }
    function isArray(obj) {
        return getType(obj) === 'Array';
    }
    function filterArrayValues(data, value) {
        var lookup = {};
        var i, length;
        if (getType(value) === 'RegExp') {
            lookup = null;
        } else if (isArray(value)) {
            for (i = 0, length = value.length; i < length; i++) {
                lookup[value[i]] = true;
            }
        } else {
            lookup[value] = true;
        }
        for (i = 0, length = data.length; i < length; i++) {
            var _match = lookup && lookup[data[i]] !== undefined || !lookup && value.test(data[i]);
            if (_match) {
                data.splice(i, 1);
                length--;
                i--;
            }
        }
        return data;
    }
    function arrayContains(list, value) {
        var i, length;
        if (isArray(value)) {
            for (i = 0, length = value.length; i < length; i++) {
                if (!arrayContains(list, value[i])) {
                    return false;
                }
            }
            return true;
        }
        var _type = getType(value);
        for (i = 0, length = list.length; i < length; i++) {
            if (_type === 'RegExp') {
                if (typeof list[i] === 'string' && list[i].match(value)) {
                    return true;
                }
            } else if (list[i] === value) {
                return true;
            }
        }
        return false;
    }
    function arraysEqual(one, two) {
        if (!isArray(one) || !isArray(two)) {
            return false;
        }
        if (one.length !== two.length) {
            return false;
        }
        one.sort();
        two.sort();
        for (var i = 0, l = one.length; i < l; i++) {
            if (one[i] !== two[i]) {
                return false;
            }
        }
        return true;
    }
    function trimSlashes(text) {
        var trim_expression = /^\/+|\/+$/g;
        return text.replace(trim_expression, '');
    }
    URI._parts = function () {
        return {
            protocol: null,
            username: null,
            password: null,
            hostname: null,
            urn: null,
            port: null,
            path: null,
            query: null,
            fragment: null,
            preventInvalidHostname: URI.preventInvalidHostname,
            duplicateQueryParameters: URI.duplicateQueryParameters,
            escapeQuerySpace: URI.escapeQuerySpace
        };
    };
    URI.preventInvalidHostname = false;
    URI.duplicateQueryParameters = false;
    URI.escapeQuerySpace = true;
    URI.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;
    URI.idn_expression = /[^a-z0-9\._-]/i;
    URI.punycode_expression = /(xn--)/i;
    URI.ip4_expression = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
    URI.ip6_expression = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/;
    URI.find_uri_expression = /\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/gi;
    URI.findUri = {
        start: /\b(?:([a-z][a-z0-9.+-]*:\/\/)|www\.)/gi,
        end: /[\s\r\n]|$/,
        trim: /[`!()\[\]{};:'".,<>?«»“”„‘’]+$/,
        parens: /(\([^\)]*\)|\[[^\]]*\]|\{[^}]*\}|<[^>]*>)/g
    };
    URI.defaultPorts = {
        http: '80',
        https: '443',
        ftp: '21',
        gopher: '70',
        ws: '80',
        wss: '443'
    };
    URI.hostProtocols = [
        'http',
        'https'
    ];
    URI.invalid_hostname_characters = /[^a-zA-Z0-9\.\-:_]/;
    URI.domAttributes = {
        'a': 'href',
        'blockquote': 'cite',
        'link': 'href',
        'base': 'href',
        'script': 'src',
        'form': 'action',
        'img': 'src',
        'area': 'href',
        'iframe': 'src',
        'embed': 'src',
        'source': 'src',
        'track': 'src',
        'input': 'src',
        'audio': 'src',
        'video': 'src'
    };
    URI.getDomAttribute = function (node) {
        if (!node || !node.nodeName) {
            return undefined;
        }
        var nodeName = node.nodeName.toLowerCase();
        if (nodeName === 'input' && node.type !== 'image') {
            return undefined;
        }
        return URI.domAttributes[nodeName];
    };
    function escapeForDumbFirefox36(value) {
        return escape(value);
    }
    function strictEncodeURIComponent(string) {
        return encodeURIComponent(string).replace(/[!'()*]/g, escapeForDumbFirefox36).replace(/\*/g, '%2A');
    }
    URI.encode = strictEncodeURIComponent;
    URI.decode = decodeURIComponent;
    URI.iso8859 = function () {
        URI.encode = escape;
        URI.decode = unescape;
    };
    URI.unicode = function () {
        URI.encode = strictEncodeURIComponent;
        URI.decode = decodeURIComponent;
    };
    URI.characters = {
        pathname: {
            encode: {
                expression: /%(24|26|2B|2C|3B|3D|3A|40)/gi,
                map: {
                    '%24': '$',
                    '%26': '&',
                    '%2B': '+',
                    '%2C': ',',
                    '%3B': ';',
                    '%3D': '=',
                    '%3A': ':',
                    '%40': '@'
                }
            },
            decode: {
                expression: /[\/\?#]/g,
                map: {
                    '/': '%2F',
                    '?': '%3F',
                    '#': '%23'
                }
            }
        },
        reserved: {
            encode: {
                expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/gi,
                map: {
                    '%3A': ':',
                    '%2F': '/',
                    '%3F': '?',
                    '%23': '#',
                    '%5B': '[',
                    '%5D': ']',
                    '%40': '@',
                    '%21': '!',
                    '%24': '$',
                    '%26': '&',
                    '%27': '\'',
                    '%28': '(',
                    '%29': ')',
                    '%2A': '*',
                    '%2B': '+',
                    '%2C': ',',
                    '%3B': ';',
                    '%3D': '='
                }
            }
        },
        urnpath: {
            encode: {
                expression: /%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/gi,
                map: {
                    '%21': '!',
                    '%24': '$',
                    '%27': '\'',
                    '%28': '(',
                    '%29': ')',
                    '%2A': '*',
                    '%2B': '+',
                    '%2C': ',',
                    '%3B': ';',
                    '%3D': '=',
                    '%40': '@'
                }
            },
            decode: {
                expression: /[\/\?#:]/g,
                map: {
                    '/': '%2F',
                    '?': '%3F',
                    '#': '%23',
                    ':': '%3A'
                }
            }
        }
    };
    URI.encodeQuery = function (string, escapeQuerySpace) {
        var escaped = URI.encode(string + '');
        if (escapeQuerySpace === undefined) {
            escapeQuerySpace = URI.escapeQuerySpace;
        }
        return escapeQuerySpace ? escaped.replace(/%20/g, '+') : escaped;
    };
    URI.decodeQuery = function (string, escapeQuerySpace) {
        string += '';
        if (escapeQuerySpace === undefined) {
            escapeQuerySpace = URI.escapeQuerySpace;
        }
        try {
            return URI.decode(escapeQuerySpace ? string.replace(/\+/g, '%20') : string);
        } catch (e) {
            return string;
        }
    };
    var _parts = {
        'encode': 'encode',
        'decode': 'decode'
    };
    var _part;
    var generateAccessor = function (_group, _part) {
        return function (string) {
            try {
                return URI[_part](string + '').replace(URI.characters[_group][_part].expression, function (c) {
                    return URI.characters[_group][_part].map[c];
                });
            } catch (e) {
                return string;
            }
        };
    };
    for (_part in _parts) {
        URI[_part + 'PathSegment'] = generateAccessor('pathname', _parts[_part]);
        URI[_part + 'UrnPathSegment'] = generateAccessor('urnpath', _parts[_part]);
    }
    var generateSegmentedPathFunction = function (_sep, _codingFuncName, _innerCodingFuncName) {
        return function (string) {
            var actualCodingFunc;
            if (!_innerCodingFuncName) {
                actualCodingFunc = URI[_codingFuncName];
            } else {
                actualCodingFunc = function (string) {
                    return URI[_codingFuncName](URI[_innerCodingFuncName](string));
                };
            }
            var segments = (string + '').split(_sep);
            for (var i = 0, length = segments.length; i < length; i++) {
                segments[i] = actualCodingFunc(segments[i]);
            }
            return segments.join(_sep);
        };
    };
    URI.decodePath = generateSegmentedPathFunction('/', 'decodePathSegment');
    URI.decodeUrnPath = generateSegmentedPathFunction(':', 'decodeUrnPathSegment');
    URI.recodePath = generateSegmentedPathFunction('/', 'encodePathSegment', 'decode');
    URI.recodeUrnPath = generateSegmentedPathFunction(':', 'encodeUrnPathSegment', 'decode');
    URI.encodeReserved = generateAccessor('reserved', 'encode');
    URI.parse = function (string, parts) {
        var pos;
        if (!parts) {
            parts = { preventInvalidHostname: URI.preventInvalidHostname };
        }
        pos = string.indexOf('#');
        if (pos > -1) {
            parts.fragment = string.substring(pos + 1) || null;
            string = string.substring(0, pos);
        }
        pos = string.indexOf('?');
        if (pos > -1) {
            parts.query = string.substring(pos + 1) || null;
            string = string.substring(0, pos);
        }
        if (string.substring(0, 2) === '//') {
            parts.protocol = null;
            string = string.substring(2);
            string = URI.parseAuthority(string, parts);
        } else {
            pos = string.indexOf(':');
            if (pos > -1) {
                parts.protocol = string.substring(0, pos) || null;
                if (parts.protocol && !parts.protocol.match(URI.protocol_expression)) {
                    parts.protocol = undefined;
                } else if (string.substring(pos + 1, pos + 3) === '//') {
                    string = string.substring(pos + 3);
                    string = URI.parseAuthority(string, parts);
                } else {
                    string = string.substring(pos + 1);
                    parts.urn = true;
                }
            }
        }
        parts.path = string;
        return parts;
    };
    URI.parseHost = function (string, parts) {
        if (!string) {
            string = '';
        }
        string = string.replace(/\\/g, '/');
        var pos = string.indexOf('/');
        var bracketPos;
        var t;
        if (pos === -1) {
            pos = string.length;
        }
        if (string.charAt(0) === '[') {
            bracketPos = string.indexOf(']');
            parts.hostname = string.substring(1, bracketPos) || null;
            parts.port = string.substring(bracketPos + 2, pos) || null;
            if (parts.port === '/') {
                parts.port = null;
            }
        } else {
            var firstColon = string.indexOf(':');
            var firstSlash = string.indexOf('/');
            var nextColon = string.indexOf(':', firstColon + 1);
            if (nextColon !== -1 && (firstSlash === -1 || nextColon < firstSlash)) {
                parts.hostname = string.substring(0, pos) || null;
                parts.port = null;
            } else {
                t = string.substring(0, pos).split(':');
                parts.hostname = t[0] || null;
                parts.port = t[1] || null;
            }
        }
        if (parts.hostname && string.substring(pos).charAt(0) !== '/') {
            pos++;
            string = '/' + string;
        }
        if (parts.preventInvalidHostname) {
            URI.ensureValidHostname(parts.hostname, parts.protocol);
        }
        if (parts.port) {
            URI.ensureValidPort(parts.port);
        }
        return string.substring(pos) || '/';
    };
    URI.parseAuthority = function (string, parts) {
        string = URI.parseUserinfo(string, parts);
        return URI.parseHost(string, parts);
    };
    URI.parseUserinfo = function (string, parts) {
        var firstSlash = string.indexOf('/');
        var pos = string.lastIndexOf('@', firstSlash > -1 ? firstSlash : string.length - 1);
        var t;
        if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {
            t = string.substring(0, pos).split(':');
            parts.username = t[0] ? URI.decode(t[0]) : null;
            t.shift();
            parts.password = t[0] ? URI.decode(t.join(':')) : null;
            string = string.substring(pos + 1);
        } else {
            parts.username = null;
            parts.password = null;
        }
        return string;
    };
    URI.parseQuery = function (string, escapeQuerySpace) {
        if (!string) {
            return {};
        }
        string = string.replace(/&+/g, '&').replace(/^\?*&*|&+$/g, '');
        if (!string) {
            return {};
        }
        var items = {};
        var splits = string.split('&');
        var length = splits.length;
        var v, name, value;
        for (var i = 0; i < length; i++) {
            v = splits[i].split('=');
            name = URI.decodeQuery(v.shift(), escapeQuerySpace);
            value = v.length ? URI.decodeQuery(v.join('='), escapeQuerySpace) : null;
            if (hasOwn.call(items, name)) {
                if (typeof items[name] === 'string' || items[name] === null) {
                    items[name] = [items[name]];
                }
                items[name].push(value);
            } else {
                items[name] = value;
            }
        }
        return items;
    };
    URI.build = function (parts) {
        var t = '';
        if (parts.protocol) {
            t += parts.protocol + ':';
        }
        if (!parts.urn && (t || parts.hostname)) {
            t += '//';
        }
        t += URI.buildAuthority(parts) || '';
        if (typeof parts.path === 'string') {
            if (parts.path.charAt(0) !== '/' && typeof parts.hostname === 'string') {
                t += '/';
            }
            t += parts.path;
        }
        if (typeof parts.query === 'string' && parts.query) {
            t += '?' + parts.query;
        }
        if (typeof parts.fragment === 'string' && parts.fragment) {
            t += '#' + parts.fragment;
        }
        return t;
    };
    URI.buildHost = function (parts) {
        var t = '';
        if (!parts.hostname) {
            return '';
        } else if (URI.ip6_expression.test(parts.hostname)) {
            t += '[' + parts.hostname + ']';
        } else {
            t += parts.hostname;
        }
        if (parts.port) {
            t += ':' + parts.port;
        }
        return t;
    };
    URI.buildAuthority = function (parts) {
        return URI.buildUserinfo(parts) + URI.buildHost(parts);
    };
    URI.buildUserinfo = function (parts) {
        var t = '';
        if (parts.username) {
            t += URI.encode(parts.username);
        }
        if (parts.password) {
            t += ':' + URI.encode(parts.password);
        }
        if (t) {
            t += '@';
        }
        return t;
    };
    URI.buildQuery = function (data, duplicateQueryParameters, escapeQuerySpace) {
        var t = '';
        var unique, key, i, length;
        for (key in data) {
            if (hasOwn.call(data, key) && key) {
                if (isArray(data[key])) {
                    unique = {};
                    for (i = 0, length = data[key].length; i < length; i++) {
                        if (data[key][i] !== undefined && unique[data[key][i] + ''] === undefined) {
                            t += '&' + URI.buildQueryParameter(key, data[key][i], escapeQuerySpace);
                            if (duplicateQueryParameters !== true) {
                                unique[data[key][i] + ''] = true;
                            }
                        }
                    }
                } else if (data[key] !== undefined) {
                    t += '&' + URI.buildQueryParameter(key, data[key], escapeQuerySpace);
                }
            }
        }
        return t.substring(1);
    };
    URI.buildQueryParameter = function (name, value, escapeQuerySpace) {
        return URI.encodeQuery(name, escapeQuerySpace) + (value !== null ? '=' + URI.encodeQuery(value, escapeQuerySpace) : '');
    };
    URI.addQuery = function (data, name, value) {
        if (typeof name === 'object') {
            for (var key in name) {
                if (hasOwn.call(name, key)) {
                    URI.addQuery(data, key, name[key]);
                }
            }
        } else if (typeof name === 'string') {
            if (data[name] === undefined) {
                data[name] = value;
                return;
            } else if (typeof data[name] === 'string') {
                data[name] = [data[name]];
            }
            if (!isArray(value)) {
                value = [value];
            }
            data[name] = (data[name] || []).concat(value);
        } else {
            throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
        }
    };
    URI.setQuery = function (data, name, value) {
        if (typeof name === 'object') {
            for (var key in name) {
                if (hasOwn.call(name, key)) {
                    URI.setQuery(data, key, name[key]);
                }
            }
        } else if (typeof name === 'string') {
            data[name] = value === undefined ? null : value;
        } else {
            throw new TypeError('URI.setQuery() accepts an object, string as the name parameter');
        }
    };
    URI.removeQuery = function (data, name, value) {
        var i, length, key;
        if (isArray(name)) {
            for (i = 0, length = name.length; i < length; i++) {
                data[name[i]] = undefined;
            }
        } else if (getType(name) === 'RegExp') {
            for (key in data) {
                if (name.test(key)) {
                    data[key] = undefined;
                }
            }
        } else if (typeof name === 'object') {
            for (key in name) {
                if (hasOwn.call(name, key)) {
                    URI.removeQuery(data, key, name[key]);
                }
            }
        } else if (typeof name === 'string') {
            if (value !== undefined) {
                if (getType(value) === 'RegExp') {
                    if (!isArray(data[name]) && value.test(data[name])) {
                        data[name] = undefined;
                    } else {
                        data[name] = filterArrayValues(data[name], value);
                    }
                } else if (data[name] === String(value) && (!isArray(value) || value.length === 1)) {
                    data[name] = undefined;
                } else if (isArray(data[name])) {
                    data[name] = filterArrayValues(data[name], value);
                }
            } else {
                data[name] = undefined;
            }
        } else {
            throw new TypeError('URI.removeQuery() accepts an object, string, RegExp as the first parameter');
        }
    };
    URI.hasQuery = function (data, name, value, withinArray) {
        switch (getType(name)) {
        case 'String':
            break;
        case 'RegExp':
            for (var key in data) {
                if (hasOwn.call(data, key)) {
                    if (name.test(key) && (value === undefined || URI.hasQuery(data, key, value))) {
                        return true;
                    }
                }
            }
            return false;
        case 'Object':
            for (var _key in name) {
                if (hasOwn.call(name, _key)) {
                    if (!URI.hasQuery(data, _key, name[_key])) {
                        return false;
                    }
                }
            }
            return true;
        default:
            throw new TypeError('URI.hasQuery() accepts a string, regular expression or object as the name parameter');
        }
        switch (getType(value)) {
        case 'Undefined':
            return name in data;
        case 'Boolean':
            var _booly = Boolean(isArray(data[name]) ? data[name].length : data[name]);
            return value === _booly;
        case 'Function':
            return !!value(data[name], name, data);
        case 'Array':
            if (!isArray(data[name])) {
                return false;
            }
            var op = withinArray ? arrayContains : arraysEqual;
            return op(data[name], value);
        case 'RegExp':
            if (!isArray(data[name])) {
                return Boolean(data[name] && data[name].match(value));
            }
            if (!withinArray) {
                return false;
            }
            return arrayContains(data[name], value);
        case 'Number':
            value = String(value);
        case 'String':
            if (!isArray(data[name])) {
                return data[name] === value;
            }
            if (!withinArray) {
                return false;
            }
            return arrayContains(data[name], value);
        default:
            throw new TypeError('URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter');
        }
    };
    URI.joinPaths = function () {
        var input = [];
        var segments = [];
        var nonEmptySegments = 0;
        for (var i = 0; i < arguments.length; i++) {
            var url = new URI(arguments[i]);
            input.push(url);
            var _segments = url.segment();
            for (var s = 0; s < _segments.length; s++) {
                if (typeof _segments[s] === 'string') {
                    segments.push(_segments[s]);
                }
                if (_segments[s]) {
                    nonEmptySegments++;
                }
            }
        }
        if (!segments.length || !nonEmptySegments) {
            return new URI('');
        }
        var uri = new URI('').segment(segments);
        if (input[0].path() === '' || input[0].path().slice(0, 1) === '/') {
            uri.path('/' + uri.path());
        }
        return uri.normalize();
    };
    URI.commonPath = function (one, two) {
        var length = Math.min(one.length, two.length);
        var pos;
        for (pos = 0; pos < length; pos++) {
            if (one.charAt(pos) !== two.charAt(pos)) {
                pos--;
                break;
            }
        }
        if (pos < 1) {
            return one.charAt(0) === two.charAt(0) && one.charAt(0) === '/' ? '/' : '';
        }
        if (one.charAt(pos) !== '/' || two.charAt(pos) !== '/') {
            pos = one.substring(0, pos).lastIndexOf('/');
        }
        return one.substring(0, pos + 1);
    };
    URI.withinString = function (string, callback, options) {
        options || (options = {});
        var _start = options.start || URI.findUri.start;
        var _end = options.end || URI.findUri.end;
        var _trim = options.trim || URI.findUri.trim;
        var _parens = options.parens || URI.findUri.parens;
        var _attributeOpen = /[a-z0-9-]=["']?$/i;
        _start.lastIndex = 0;
        while (true) {
            var match = _start.exec(string);
            if (!match) {
                break;
            }
            var start = match.index;
            if (options.ignoreHtml) {
                var attributeOpen = string.slice(Math.max(start - 3, 0), start);
                if (attributeOpen && _attributeOpen.test(attributeOpen)) {
                    continue;
                }
            }
            var end = start + string.slice(start).search(_end);
            var slice = string.slice(start, end);
            var parensEnd = -1;
            while (true) {
                var parensMatch = _parens.exec(slice);
                if (!parensMatch) {
                    break;
                }
                var parensMatchEnd = parensMatch.index + parensMatch[0].length;
                parensEnd = Math.max(parensEnd, parensMatchEnd);
            }
            if (parensEnd > -1) {
                slice = slice.slice(0, parensEnd) + slice.slice(parensEnd).replace(_trim, '');
            } else {
                slice = slice.replace(_trim, '');
            }
            if (slice.length <= match[0].length) {
                continue;
            }
            if (options.ignore && options.ignore.test(slice)) {
                continue;
            }
            end = start + slice.length;
            var result = callback(slice, start, end, string);
            if (result === undefined) {
                _start.lastIndex = end;
                continue;
            }
            result = String(result);
            string = string.slice(0, start) + result + string.slice(end);
            _start.lastIndex = start + result.length;
        }
        _start.lastIndex = 0;
        return string;
    };
    URI.ensureValidHostname = function (v, protocol) {
        var hasHostname = !!v;
        var hasProtocol = !!protocol;
        var rejectEmptyHostname = false;
        if (hasProtocol) {
            rejectEmptyHostname = arrayContains(URI.hostProtocols, protocol);
        }
        if (rejectEmptyHostname && !hasHostname) {
            throw new TypeError('Hostname cannot be empty, if protocol is ' + protocol);
        } else if (v && v.match(URI.invalid_hostname_characters)) {
            if (!punycode) {
                throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-:_] and Punycode.js is not available');
            }
            if (punycode.toASCII(v).match(URI.invalid_hostname_characters)) {
                throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-:_]');
            }
        }
    };
    URI.ensureValidPort = function (v) {
        if (!v) {
            return;
        }
        var port = Number(v);
        if (isInteger(port) && port > 0 && port < 65536) {
            return;
        }
        throw new TypeError('Port "' + v + '" is not a valid port');
    };
    URI.noConflict = function (removeAll) {
        if (removeAll) {
            var unconflicted = { URI: this.noConflict() };
            if (root.URITemplate && typeof root.URITemplate.noConflict === 'function') {
                unconflicted.URITemplate = root.URITemplate.noConflict();
            }
            if (root.IPv6 && typeof root.IPv6.noConflict === 'function') {
                unconflicted.IPv6 = root.IPv6.noConflict();
            }
            if (root.SecondLevelDomains && typeof root.SecondLevelDomains.noConflict === 'function') {
                unconflicted.SecondLevelDomains = root.SecondLevelDomains.noConflict();
            }
            return unconflicted;
        } else if (root.URI === this) {
            root.URI = _URI;
        }
        return this;
    };
    p.build = function (deferBuild) {
        if (deferBuild === true) {
            this._deferred_build = true;
        } else if (deferBuild === undefined || this._deferred_build) {
            this._string = URI.build(this._parts);
            this._deferred_build = false;
        }
        return this;
    };
    p.clone = function () {
        return new URI(this);
    };
    p.valueOf = p.toString = function () {
        return this.build(false)._string;
    };
    function generateSimpleAccessor(_part) {
        return function (v, build) {
            if (v === undefined) {
                return this._parts[_part] || '';
            } else {
                this._parts[_part] = v || null;
                this.build(!build);
                return this;
            }
        };
    }
    function generatePrefixAccessor(_part, _key) {
        return function (v, build) {
            if (v === undefined) {
                return this._parts[_part] || '';
            } else {
                if (v !== null) {
                    v = v + '';
                    if (v.charAt(0) === _key) {
                        v = v.substring(1);
                    }
                }
                this._parts[_part] = v;
                this.build(!build);
                return this;
            }
        };
    }
    p.protocol = generateSimpleAccessor('protocol');
    p.username = generateSimpleAccessor('username');
    p.password = generateSimpleAccessor('password');
    p.hostname = generateSimpleAccessor('hostname');
    p.port = generateSimpleAccessor('port');
    p.query = generatePrefixAccessor('query', '?');
    p.fragment = generatePrefixAccessor('fragment', '#');
    p.search = function (v, build) {
        var t = this.query(v, build);
        return typeof t === 'string' && t.length ? '?' + t : t;
    };
    p.hash = function (v, build) {
        var t = this.fragment(v, build);
        return typeof t === 'string' && t.length ? '#' + t : t;
    };
    p.pathname = function (v, build) {
        if (v === undefined || v === true) {
            var res = this._parts.path || (this._parts.hostname ? '/' : '');
            return v ? (this._parts.urn ? URI.decodeUrnPath : URI.decodePath)(res) : res;
        } else {
            if (this._parts.urn) {
                this._parts.path = v ? URI.recodeUrnPath(v) : '';
            } else {
                this._parts.path = v ? URI.recodePath(v) : '/';
            }
            this.build(!build);
            return this;
        }
    };
    p.path = p.pathname;
    p.href = function (href, build) {
        var key;
        if (href === undefined) {
            return this.toString();
        }
        this._string = '';
        this._parts = URI._parts();
        var _URI = href instanceof URI;
        var _object = typeof href === 'object' && (href.hostname || href.path || href.pathname);
        if (href.nodeName) {
            var attribute = URI.getDomAttribute(href);
            href = href[attribute] || '';
            _object = false;
        }
        if (!_URI && _object && href.pathname !== undefined) {
            href = href.toString();
        }
        if (typeof href === 'string' || href instanceof String) {
            this._parts = URI.parse(String(href), this._parts);
        } else if (_URI || _object) {
            var src = _URI ? href._parts : href;
            for (key in src) {
                if (key === 'query') {
                    continue;
                }
                if (hasOwn.call(this._parts, key)) {
                    this._parts[key] = src[key];
                }
            }
            if (src.query) {
                this.query(src.query, false);
            }
        } else {
            throw new TypeError('invalid input');
        }
        this.build(!build);
        return this;
    };
    p.is = function (what) {
        var ip = false;
        var ip4 = false;
        var ip6 = false;
        var name = false;
        var sld = false;
        var idn = false;
        var punycode = false;
        var relative = !this._parts.urn;
        if (this._parts.hostname) {
            relative = false;
            ip4 = URI.ip4_expression.test(this._parts.hostname);
            ip6 = URI.ip6_expression.test(this._parts.hostname);
            ip = ip4 || ip6;
            name = !ip;
            sld = name && SLD && SLD.has(this._parts.hostname);
            idn = name && URI.idn_expression.test(this._parts.hostname);
            punycode = name && URI.punycode_expression.test(this._parts.hostname);
        }
        switch (what.toLowerCase()) {
        case 'relative':
            return relative;
        case 'absolute':
            return !relative;
        case 'domain':
        case 'name':
            return name;
        case 'sld':
            return sld;
        case 'ip':
            return ip;
        case 'ip4':
        case 'ipv4':
        case 'inet4':
            return ip4;
        case 'ip6':
        case 'ipv6':
        case 'inet6':
            return ip6;
        case 'idn':
            return idn;
        case 'url':
            return !this._parts.urn;
        case 'urn':
            return !!this._parts.urn;
        case 'punycode':
            return punycode;
        }
        return null;
    };
    var _protocol = p.protocol;
    var _port = p.port;
    var _hostname = p.hostname;
    p.protocol = function (v, build) {
        if (v) {
            v = v.replace(/:(\/\/)?$/, '');
            if (!v.match(URI.protocol_expression)) {
                throw new TypeError('Protocol "' + v + '" contains characters other than [A-Z0-9.+-] or doesn\'t start with [A-Z]');
            }
        }
        return _protocol.call(this, v, build);
    };
    p.scheme = p.protocol;
    p.port = function (v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
        if (v !== undefined) {
            if (v === 0) {
                v = null;
            }
            if (v) {
                v += '';
                if (v.charAt(0) === ':') {
                    v = v.substring(1);
                }
                URI.ensureValidPort(v);
            }
        }
        return _port.call(this, v, build);
    };
    p.hostname = function (v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
        if (v !== undefined) {
            var x = { preventInvalidHostname: this._parts.preventInvalidHostname };
            var res = URI.parseHost(v, x);
            if (res !== '/') {
                throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
            }
            v = x.hostname;
            if (this._parts.preventInvalidHostname) {
                URI.ensureValidHostname(v, this._parts.protocol);
            }
        }
        return _hostname.call(this, v, build);
    };
    p.origin = function (v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
        if (v === undefined) {
            var protocol = this.protocol();
            var authority = this.authority();
            if (!authority) {
                return '';
            }
            return (protocol ? protocol + '://' : '') + this.authority();
        } else {
            var origin = URI(v);
            this.protocol(origin.protocol()).authority(origin.authority()).build(!build);
            return this;
        }
    };
    p.host = function (v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
        if (v === undefined) {
            return this._parts.hostname ? URI.buildHost(this._parts) : '';
        } else {
            var res = URI.parseHost(v, this._parts);
            if (res !== '/') {
                throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
            }
            this.build(!build);
            return this;
        }
    };
    p.authority = function (v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
        if (v === undefined) {
            return this._parts.hostname ? URI.buildAuthority(this._parts) : '';
        } else {
            var res = URI.parseAuthority(v, this._parts);
            if (res !== '/') {
                throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
            }
            this.build(!build);
            return this;
        }
    };
    p.userinfo = function (v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
        if (v === undefined) {
            var t = URI.buildUserinfo(this._parts);
            return t ? t.substring(0, t.length - 1) : t;
        } else {
            if (v[v.length - 1] !== '@') {
                v += '@';
            }
            URI.parseUserinfo(v, this._parts);
            this.build(!build);
            return this;
        }
    };
    p.resource = function (v, build) {
        var parts;
        if (v === undefined) {
            return this.path() + this.search() + this.hash();
        }
        parts = URI.parse(v);
        this._parts.path = parts.path;
        this._parts.query = parts.query;
        this._parts.fragment = parts.fragment;
        this.build(!build);
        return this;
    };
    p.subdomain = function (v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
        if (v === undefined) {
            if (!this._parts.hostname || this.is('IP')) {
                return '';
            }
            var end = this._parts.hostname.length - this.domain().length - 1;
            return this._parts.hostname.substring(0, end) || '';
        } else {
            var e = this._parts.hostname.length - this.domain().length;
            var sub = this._parts.hostname.substring(0, e);
            var replace = new RegExp('^' + escapeRegEx(sub));
            if (v && v.charAt(v.length - 1) !== '.') {
                v += '.';
            }
            if (v.indexOf(':') !== -1) {
                throw new TypeError('Domains cannot contain colons');
            }
            if (v) {
                URI.ensureValidHostname(v, this._parts.protocol);
            }
            this._parts.hostname = this._parts.hostname.replace(replace, v);
            this.build(!build);
            return this;
        }
    };
    p.domain = function (v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
        if (typeof v === 'boolean') {
            build = v;
            v = undefined;
        }
        if (v === undefined) {
            if (!this._parts.hostname || this.is('IP')) {
                return '';
            }
            var t = this._parts.hostname.match(/\./g);
            if (t && t.length < 2) {
                return this._parts.hostname;
            }
            var end = this._parts.hostname.length - this.tld(build).length - 1;
            end = this._parts.hostname.lastIndexOf('.', end - 1) + 1;
            return this._parts.hostname.substring(end) || '';
        } else {
            if (!v) {
                throw new TypeError('cannot set domain empty');
            }
            if (v.indexOf(':') !== -1) {
                throw new TypeError('Domains cannot contain colons');
            }
            URI.ensureValidHostname(v, this._parts.protocol);
            if (!this._parts.hostname || this.is('IP')) {
                this._parts.hostname = v;
            } else {
                var replace = new RegExp(escapeRegEx(this.domain()) + '$');
                this._parts.hostname = this._parts.hostname.replace(replace, v);
            }
            this.build(!build);
            return this;
        }
    };
    p.tld = function (v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
        if (typeof v === 'boolean') {
            build = v;
            v = undefined;
        }
        if (v === undefined) {
            if (!this._parts.hostname || this.is('IP')) {
                return '';
            }
            var pos = this._parts.hostname.lastIndexOf('.');
            var tld = this._parts.hostname.substring(pos + 1);
            if (build !== true && SLD && SLD.list[tld.toLowerCase()]) {
                return SLD.get(this._parts.hostname) || tld;
            }
            return tld;
        } else {
            var replace;
            if (!v) {
                throw new TypeError('cannot set TLD empty');
            } else if (v.match(/[^a-zA-Z0-9-]/)) {
                if (SLD && SLD.is(v)) {
                    replace = new RegExp(escapeRegEx(this.tld()) + '$');
                    this._parts.hostname = this._parts.hostname.replace(replace, v);
                } else {
                    throw new TypeError('TLD "' + v + '" contains characters other than [A-Z0-9]');
                }
            } else if (!this._parts.hostname || this.is('IP')) {
                throw new ReferenceError('cannot set TLD on non-domain host');
            } else {
                replace = new RegExp(escapeRegEx(this.tld()) + '$');
                this._parts.hostname = this._parts.hostname.replace(replace, v);
            }
            this.build(!build);
            return this;
        }
    };
    p.directory = function (v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
        if (v === undefined || v === true) {
            if (!this._parts.path && !this._parts.hostname) {
                return '';
            }
            if (this._parts.path === '/') {
                return '/';
            }
            var end = this._parts.path.length - this.filename().length - 1;
            var res = this._parts.path.substring(0, end) || (this._parts.hostname ? '/' : '');
            return v ? URI.decodePath(res) : res;
        } else {
            var e = this._parts.path.length - this.filename().length;
            var directory = this._parts.path.substring(0, e);
            var replace = new RegExp('^' + escapeRegEx(directory));
            if (!this.is('relative')) {
                if (!v) {
                    v = '/';
                }
                if (v.charAt(0) !== '/') {
                    v = '/' + v;
                }
            }
            if (v && v.charAt(v.length - 1) !== '/') {
                v += '/';
            }
            v = URI.recodePath(v);
            this._parts.path = this._parts.path.replace(replace, v);
            this.build(!build);
            return this;
        }
    };
    p.filename = function (v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
        if (typeof v !== 'string') {
            if (!this._parts.path || this._parts.path === '/') {
                return '';
            }
            var pos = this._parts.path.lastIndexOf('/');
            var res = this._parts.path.substring(pos + 1);
            return v ? URI.decodePathSegment(res) : res;
        } else {
            var mutatedDirectory = false;
            if (v.charAt(0) === '/') {
                v = v.substring(1);
            }
            if (v.match(/\.?\//)) {
                mutatedDirectory = true;
            }
            var replace = new RegExp(escapeRegEx(this.filename()) + '$');
            v = URI.recodePath(v);
            this._parts.path = this._parts.path.replace(replace, v);
            if (mutatedDirectory) {
                this.normalizePath(build);
            } else {
                this.build(!build);
            }
            return this;
        }
    };
    p.suffix = function (v, build) {
        if (this._parts.urn) {
            return v === undefined ? '' : this;
        }
        if (v === undefined || v === true) {
            if (!this._parts.path || this._parts.path === '/') {
                return '';
            }
            var filename = this.filename();
            var pos = filename.lastIndexOf('.');
            var s, res;
            if (pos === -1) {
                return '';
            }
            s = filename.substring(pos + 1);
            res = /^[a-z0-9%]+$/i.test(s) ? s : '';
            return v ? URI.decodePathSegment(res) : res;
        } else {
            if (v.charAt(0) === '.') {
                v = v.substring(1);
            }
            var suffix = this.suffix();
            var replace;
            if (!suffix) {
                if (!v) {
                    return this;
                }
                this._parts.path += '.' + URI.recodePath(v);
            } else if (!v) {
                replace = new RegExp(escapeRegEx('.' + suffix) + '$');
            } else {
                replace = new RegExp(escapeRegEx(suffix) + '$');
            }
            if (replace) {
                v = URI.recodePath(v);
                this._parts.path = this._parts.path.replace(replace, v);
            }
            this.build(!build);
            return this;
        }
    };
    p.segment = function (segment, v, build) {
        var separator = this._parts.urn ? ':' : '/';
        var path = this.path();
        var absolute = path.substring(0, 1) === '/';
        var segments = path.split(separator);
        if (segment !== undefined && typeof segment !== 'number') {
            build = v;
            v = segment;
            segment = undefined;
        }
        if (segment !== undefined && typeof segment !== 'number') {
            throw new Error('Bad segment "' + segment + '", must be 0-based integer');
        }
        if (absolute) {
            segments.shift();
        }
        if (segment < 0) {
            segment = Math.max(segments.length + segment, 0);
        }
        if (v === undefined) {
            return segment === undefined ? segments : segments[segment];
        } else if (segment === null || segments[segment] === undefined) {
            if (isArray(v)) {
                segments = [];
                for (var i = 0, l = v.length; i < l; i++) {
                    if (!v[i].length && (!segments.length || !segments[segments.length - 1].length)) {
                        continue;
                    }
                    if (segments.length && !segments[segments.length - 1].length) {
                        segments.pop();
                    }
                    segments.push(trimSlashes(v[i]));
                }
            } else if (v || typeof v === 'string') {
                v = trimSlashes(v);
                if (segments[segments.length - 1] === '') {
                    segments[segments.length - 1] = v;
                } else {
                    segments.push(v);
                }
            }
        } else {
            if (v) {
                segments[segment] = trimSlashes(v);
            } else {
                segments.splice(segment, 1);
            }
        }
        if (absolute) {
            segments.unshift('');
        }
        return this.path(segments.join(separator), build);
    };
    p.segmentCoded = function (segment, v, build) {
        var segments, i, l;
        if (typeof segment !== 'number') {
            build = v;
            v = segment;
            segment = undefined;
        }
        if (v === undefined) {
            segments = this.segment(segment, v, build);
            if (!isArray(segments)) {
                segments = segments !== undefined ? URI.decode(segments) : undefined;
            } else {
                for (i = 0, l = segments.length; i < l; i++) {
                    segments[i] = URI.decode(segments[i]);
                }
            }
            return segments;
        }
        if (!isArray(v)) {
            v = typeof v === 'string' || v instanceof String ? URI.encode(v) : v;
        } else {
            for (i = 0, l = v.length; i < l; i++) {
                v[i] = URI.encode(v[i]);
            }
        }
        return this.segment(segment, v, build);
    };
    var q = p.query;
    p.query = function (v, build) {
        if (v === true) {
            return URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        } else if (typeof v === 'function') {
            var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
            var result = v.call(this, data);
            this._parts.query = URI.buildQuery(result || data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
            this.build(!build);
            return this;
        } else if (v !== undefined && typeof v !== 'string') {
            this._parts.query = URI.buildQuery(v, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
            this.build(!build);
            return this;
        } else {
            return q.call(this, v, build);
        }
    };
    p.setQuery = function (name, value, build) {
        var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        if (typeof name === 'string' || name instanceof String) {
            data[name] = value !== undefined ? value : null;
        } else if (typeof name === 'object') {
            for (var key in name) {
                if (hasOwn.call(name, key)) {
                    data[key] = name[key];
                }
            }
        } else {
            throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
        }
        this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
        if (typeof name !== 'string') {
            build = value;
        }
        this.build(!build);
        return this;
    };
    p.addQuery = function (name, value, build) {
        var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        URI.addQuery(data, name, value === undefined ? null : value);
        this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
        if (typeof name !== 'string') {
            build = value;
        }
        this.build(!build);
        return this;
    };
    p.removeQuery = function (name, value, build) {
        var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        URI.removeQuery(data, name, value);
        this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
        if (typeof name !== 'string') {
            build = value;
        }
        this.build(!build);
        return this;
    };
    p.hasQuery = function (name, value, withinArray) {
        var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        return URI.hasQuery(data, name, value, withinArray);
    };
    p.setSearch = p.setQuery;
    p.addSearch = p.addQuery;
    p.removeSearch = p.removeQuery;
    p.hasSearch = p.hasQuery;
    p.normalize = function () {
        if (this._parts.urn) {
            return this.normalizeProtocol(false).normalizePath(false).normalizeQuery(false).normalizeFragment(false).build();
        }
        return this.normalizeProtocol(false).normalizeHostname(false).normalizePort(false).normalizePath(false).normalizeQuery(false).normalizeFragment(false).build();
    };
    p.normalizeProtocol = function (build) {
        if (typeof this._parts.protocol === 'string') {
            this._parts.protocol = this._parts.protocol.toLowerCase();
            this.build(!build);
        }
        return this;
    };
    p.normalizeHostname = function (build) {
        if (this._parts.hostname) {
            if (this.is('IDN') && punycode) {
                this._parts.hostname = punycode.toASCII(this._parts.hostname);
            } else if (this.is('IPv6') && IPv6) {
                this._parts.hostname = IPv6.best(this._parts.hostname);
            }
            this._parts.hostname = this._parts.hostname.toLowerCase();
            this.build(!build);
        }
        return this;
    };
    p.normalizePort = function (build) {
        if (typeof this._parts.protocol === 'string' && this._parts.port === URI.defaultPorts[this._parts.protocol]) {
            this._parts.port = null;
            this.build(!build);
        }
        return this;
    };
    p.normalizePath = function (build) {
        var _path = this._parts.path;
        if (!_path) {
            return this;
        }
        if (this._parts.urn) {
            this._parts.path = URI.recodeUrnPath(this._parts.path);
            this.build(!build);
            return this;
        }
        if (this._parts.path === '/') {
            return this;
        }
        _path = URI.recodePath(_path);
        var _was_relative;
        var _leadingParents = '';
        var _parent, _pos;
        if (_path.charAt(0) !== '/') {
            _was_relative = true;
            _path = '/' + _path;
        }
        if (_path.slice(-3) === '/..' || _path.slice(-2) === '/.') {
            _path += '/';
        }
        _path = _path.replace(/(\/(\.\/)+)|(\/\.$)/g, '/').replace(/\/{2,}/g, '/');
        if (_was_relative) {
            _leadingParents = _path.substring(1).match(/^(\.\.\/)+/) || '';
            if (_leadingParents) {
                _leadingParents = _leadingParents[0];
            }
        }
        while (true) {
            _parent = _path.search(/\/\.\.(\/|$)/);
            if (_parent === -1) {
                break;
            } else if (_parent === 0) {
                _path = _path.substring(3);
                continue;
            }
            _pos = _path.substring(0, _parent).lastIndexOf('/');
            if (_pos === -1) {
                _pos = _parent;
            }
            _path = _path.substring(0, _pos) + _path.substring(_parent + 3);
        }
        if (_was_relative && this.is('relative')) {
            _path = _leadingParents + _path.substring(1);
        }
        this._parts.path = _path;
        this.build(!build);
        return this;
    };
    p.normalizePathname = p.normalizePath;
    p.normalizeQuery = function (build) {
        if (typeof this._parts.query === 'string') {
            if (!this._parts.query.length) {
                this._parts.query = null;
            } else {
                this.query(URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace));
            }
            this.build(!build);
        }
        return this;
    };
    p.normalizeFragment = function (build) {
        if (!this._parts.fragment) {
            this._parts.fragment = null;
            this.build(!build);
        }
        return this;
    };
    p.normalizeSearch = p.normalizeQuery;
    p.normalizeHash = p.normalizeFragment;
    p.iso8859 = function () {
        var e = URI.encode;
        var d = URI.decode;
        URI.encode = escape;
        URI.decode = decodeURIComponent;
        try {
            this.normalize();
        } finally {
            URI.encode = e;
            URI.decode = d;
        }
        return this;
    };
    p.unicode = function () {
        var e = URI.encode;
        var d = URI.decode;
        URI.encode = strictEncodeURIComponent;
        URI.decode = unescape;
        try {
            this.normalize();
        } finally {
            URI.encode = e;
            URI.decode = d;
        }
        return this;
    };
    p.readable = function () {
        var uri = this.clone();
        uri.username('').password('').normalize();
        var t = '';
        if (uri._parts.protocol) {
            t += uri._parts.protocol + '://';
        }
        if (uri._parts.hostname) {
            if (uri.is('punycode') && punycode) {
                t += punycode.toUnicode(uri._parts.hostname);
                if (uri._parts.port) {
                    t += ':' + uri._parts.port;
                }
            } else {
                t += uri.host();
            }
        }
        if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== '/') {
            t += '/';
        }
        t += uri.path(true);
        if (uri._parts.query) {
            var q = '';
            for (var i = 0, qp = uri._parts.query.split('&'), l = qp.length; i < l; i++) {
                var kv = (qp[i] || '').split('=');
                q += '&' + URI.decodeQuery(kv[0], this._parts.escapeQuerySpace).replace(/&/g, '%26');
                if (kv[1] !== undefined) {
                    q += '=' + URI.decodeQuery(kv[1], this._parts.escapeQuerySpace).replace(/&/g, '%26');
                }
            }
            t += '?' + q.substring(1);
        }
        t += URI.decodeQuery(uri.hash(), true);
        return t;
    };
    p.absoluteTo = function (base) {
        var resolved = this.clone();
        var properties = [
            'protocol',
            'username',
            'password',
            'hostname',
            'port'
        ];
        var basedir, i, p;
        if (this._parts.urn) {
            throw new Error('URNs do not have any generally defined hierarchical components');
        }
        if (!(base instanceof URI)) {
            base = new URI(base);
        }
        if (resolved._parts.protocol) {
            return resolved;
        } else {
            resolved._parts.protocol = base._parts.protocol;
        }
        if (this._parts.hostname) {
            return resolved;
        }
        for (i = 0; p = properties[i]; i++) {
            resolved._parts[p] = base._parts[p];
        }
        if (!resolved._parts.path) {
            resolved._parts.path = base._parts.path;
            if (!resolved._parts.query) {
                resolved._parts.query = base._parts.query;
            }
        } else {
            if (resolved._parts.path.substring(-2) === '..') {
                resolved._parts.path += '/';
            }
            if (resolved.path().charAt(0) !== '/') {
                basedir = base.directory();
                basedir = basedir ? basedir : base.path().indexOf('/') === 0 ? '/' : '';
                resolved._parts.path = (basedir ? basedir + '/' : '') + resolved._parts.path;
                resolved.normalizePath();
            }
        }
        resolved.build();
        return resolved;
    };
    p.relativeTo = function (base) {
        var relative = this.clone().normalize();
        var relativeParts, baseParts, common, relativePath, basePath;
        if (relative._parts.urn) {
            throw new Error('URNs do not have any generally defined hierarchical components');
        }
        base = new URI(base).normalize();
        relativeParts = relative._parts;
        baseParts = base._parts;
        relativePath = relative.path();
        basePath = base.path();
        if (relativePath.charAt(0) !== '/') {
            throw new Error('URI is already relative');
        }
        if (basePath.charAt(0) !== '/') {
            throw new Error('Cannot calculate a URI relative to another relative URI');
        }
        if (relativeParts.protocol === baseParts.protocol) {
            relativeParts.protocol = null;
        }
        if (relativeParts.username !== baseParts.username || relativeParts.password !== baseParts.password) {
            return relative.build();
        }
        if (relativeParts.protocol !== null || relativeParts.username !== null || relativeParts.password !== null) {
            return relative.build();
        }
        if (relativeParts.hostname === baseParts.hostname && relativeParts.port === baseParts.port) {
            relativeParts.hostname = null;
            relativeParts.port = null;
        } else {
            return relative.build();
        }
        if (relativePath === basePath) {
            relativeParts.path = '';
            return relative.build();
        }
        common = URI.commonPath(relativePath, basePath);
        if (!common) {
            return relative.build();
        }
        var parents = baseParts.path.substring(common.length).replace(/[^\/]*$/, '').replace(/.*?\//g, '../');
        relativeParts.path = parents + relativeParts.path.substring(common.length) || './';
        return relative.build();
    };
    p.equals = function (uri) {
        var one = this.clone();
        var two = new URI(uri);
        var one_map = {};
        var two_map = {};
        var checked = {};
        var one_query, two_query, key;
        one.normalize();
        two.normalize();
        if (one.toString() === two.toString()) {
            return true;
        }
        one_query = one.query();
        two_query = two.query();
        one.query('');
        two.query('');
        if (one.toString() !== two.toString()) {
            return false;
        }
        if (one_query.length !== two_query.length) {
            return false;
        }
        one_map = URI.parseQuery(one_query, this._parts.escapeQuerySpace);
        two_map = URI.parseQuery(two_query, this._parts.escapeQuerySpace);
        for (key in one_map) {
            if (hasOwn.call(one_map, key)) {
                if (!isArray(one_map[key])) {
                    if (one_map[key] !== two_map[key]) {
                        return false;
                    }
                } else if (!arraysEqual(one_map[key], two_map[key])) {
                    return false;
                }
                checked[key] = true;
            }
        }
        for (key in two_map) {
            if (hasOwn.call(two_map, key)) {
                if (!checked[key]) {
                    return false;
                }
            }
        }
        return true;
    };
    p.preventInvalidHostname = function (v) {
        this._parts.preventInvalidHostname = !!v;
        return this;
    };
    p.duplicateQueryParameters = function (v) {
        this._parts.duplicateQueryParameters = !!v;
        return this;
    };
    p.escapeQuerySpace = function (v) {
        this._parts.escapeQuerySpace = !!v;
        return this;
    };
    return URI;
}));
/*app/model/map/resource*/
define('app/model/map/resource', [
    'exports',
    'app/net/ajax',
    'passbolt-mad/util/array/chunk',
    'can-connect',
    'can-connect/data/url/url',
    'can-connect/data/parse/parse',
    'can-connect/constructor/constructor',
    'can-connect/can/map/map',
    'passbolt-mad/model/list/list',
    'passbolt-mad/model/map/map',
    'app/model/map/favorite',
    'passbolt-mad/util/lang/i18n',
    'app/model/map/permission',
    'urijs/src/URI',
    'app/model/map/user',
    'urijs/src/punycode',
    'urijs/src/SecondLevelDomains',
    'urijs/src/IPv6'
], function (exports, _ajax, _chunk, _canConnect, _url, _parse, _constructor, _map, _list, _map3, _favorite, _i18n, _permission, _URI, _user) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _chunk2 = _interopRequireDefault(_chunk);
    var _canConnect2 = _interopRequireDefault(_canConnect);
    var _url2 = _interopRequireDefault(_url);
    var _parse2 = _interopRequireDefault(_parse);
    var _constructor2 = _interopRequireDefault(_constructor);
    var _map2 = _interopRequireDefault(_map);
    var _list2 = _interopRequireDefault(_list);
    var _map4 = _interopRequireDefault(_map3);
    var _favorite2 = _interopRequireDefault(_favorite);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _permission2 = _interopRequireDefault(_permission);
    var _URI2 = _interopRequireDefault(_URI);
    var _user2 = _interopRequireDefault(_user);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Resource = _map4.default.extend('passbolt.model.Resource', {
        id: 'string',
        name: 'string',
        username: 'string',
        uri: 'string',
        created: 'string',
        modified: 'string',
        description: 'string',
        creator: _user2.default,
        favorite: _favorite2.default,
        permission: _permission2.default,
        isFavorite: function isFavorite() {
            return this.favorite && this.favorite.id;
        }
    });
    _map4.default.setReference('Resource', Resource);
    Resource.List = _list2.default.extend({ '#': { Type: Resource } });
    Resource.prototype.safeUrl = function () {
        if (typeof this.uri != 'string' || this.uri == '') {
            return '';
        }
        var safeUrl = void 0, protocol = void 0;
        try {
            safeUrl = (0, _URI2.default)(this.uri);
            protocol = safeUrl.protocol().trim().toLowerCase();
        } catch (e) {
            return '';
        }
        if (safeUrl.is('url')) {
            if (protocol === 'javascript') {
                return '';
            }
            if (!safeUrl.is('absolute') || protocol == '') {
                safeUrl.protocol('http');
            }
            return safeUrl.toString().replace(/\/$/, '');
        }
        return '';
    };
    Resource.getPermalink = function (resource) {
        return APP_URL + 'app/passwords/view/' + resource.id;
    };
    Resource.prototype.getPermalink = function () {
        return Resource.getPermalink(this);
    };
    Resource.List.prototype.sortAlphabetically = function () {
        this.sort(function (a, b) {
            if (a.name < b.name) {
                return -1;
            } else if (a.name > b.name) {
                return 1;
            }
            return 0;
        });
    };
    Resource.validationRules = {
        id: [{ rule: 'uuid' }],
        name: [
            {
                rule: 'required',
                message: __('A name is required.')
            },
            {
                rule: [
                    'maxLength',
                    64
                ],
                message: __('The name length should be maximum %s characters.', 64)
            },
            {
                rule: 'utf8Extended',
                message: __('The name should be a valid utf8 string.')
            }
        ],
        username: [
            {
                rule: [
                    'maxLength',
                    64
                ],
                message: __('The username length should be maximum %s characters.', 64)
            },
            {
                rule: 'utf8Extended',
                message: __('The username should be a valid utf8 string.')
            }
        ],
        uri: [
            {
                rule: [
                    'maxLength',
                    255
                ],
                message: __('The uri length should be maximum %s characters.', 255)
            },
            {
                rule: 'utf8',
                message: __('The uri should be a valid utf8 string (emoticons excluded).')
            }
        ],
        description: [
            {
                rule: [
                    'maxLength',
                    10000
                ],
                message: __('The description length should be maximum %s characters.', 10000)
            },
            {
                rule: 'utf8Extended',
                message: __('The description should be a valid utf8 string.')
            }
        ]
    };
    Resource.getFilteredFields = function (filteredCase) {
        var filteredFields = false;
        switch (filteredCase) {
        case 'edit':
            filteredFields = [
                'id',
                'name',
                'username',
                'expiry_date',
                'uri',
                'description'
            ];
            break;
        case 'edit_with_secrets':
            filteredFields = [
                'id',
                'name',
                'username',
                'expiry_date',
                'uri',
                'description',
                'secrets'
            ];
            break;
        case 'edit_description':
            filteredFields = [
                'id',
                'description'
            ];
            break;
        }
        return filteredFields;
    };
    Resource.deleteAll = function (resources) {
        var promises = resources.reduce(function (promise, resource) {
            resource.__SILENT_NOTIFY__ = true;
            return promise.then(function () {
                return resource.destroy();
            });
        }, Promise.resolve([]));
        return promises;
    };
    Resource.findAllByIds = function (resourcesIds) {
        var batchSize = 100;
        if (resourcesIds.length > batchSize) {
            var resourcesIdsParts = (0, _chunk2.default)(resourcesIds, batchSize);
            return resourcesIdsParts.reduce(function (promise, resourcesIdsPart) {
                return promise.then(function (carry) {
                    return Resource.findAllByIds(resourcesIdsPart).then(function (resources) {
                        return carry.concat(resources);
                    });
                });
            }, Promise.resolve(new Resource.List()));
        }
        var findOptions = {
            contain: {
                favorite: 1,
                permission: 1,
                tag: 1
            },
            filter: { 'has-id': resourcesIds }
        };
        return Resource.findAll(findOptions);
    };
    Resource.connection = (0, _canConnect2.default)([
        _parse2.default,
        _url2.default,
        _constructor2.default,
        _map2.default
    ], {
        Map: Resource,
        List: Resource.List,
        url: {
            resource: '/',
            getData: function getData(params) {
                params = params || {};
                params['api-version'] = 'v2';
                return _ajax2.default.request({
                    url: 'resources/{id}.json',
                    type: 'GET',
                    params: params
                });
            },
            getListData: function getListData(params) {
                params = params || {};
                params['api-version'] = 'v2';
                return _ajax2.default.request({
                    url: 'resources.json',
                    type: 'GET',
                    params: params
                });
            },
            destroyData: function destroyData(params) {
                return _ajax2.default.request({
                    url: 'resources/' + params.id + '.json?api-version=v2',
                    type: 'DELETE',
                    silentNotify: params.__SILENT_NOTIFY__ ? params.__SILENT_NOTIFY__ : false
                });
            },
            createData: function createData(params) {
                return _ajax2.default.request({
                    url: 'resources.json?api-version=v2',
                    type: 'POST',
                    params: params
                });
            },
            updateData: function updateData(params) {
                var _params = Resource.filterAttributes(params);
                return _ajax2.default.request({
                    url: 'resources/{id}.json?api-version=v2',
                    type: 'PUT',
                    params: _params
                });
            }
        }
    });
    exports.default = Resource;
});
/*app/model/map/group_delete*/
define('app/model/map/group_delete', [
    'exports',
    'passbolt-mad/model/map/map',
    'can-util/js/get/get',
    'app/model/map/group',
    'app/model/map/resource'
], function (exports, _map, _get, _group, _resource) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _map2 = _interopRequireDefault(_map);
    var _get2 = _interopRequireDefault(_get);
    var _group2 = _interopRequireDefault(_group);
    var _resource2 = _interopRequireDefault(_resource);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var GroupDelete = _map2.default.extend('passbolt.model.GroupDelete', {
        group_id: 'string',
        groups_to_delete: _group2.default.List,
        errors: {
            type: {
                resources: {
                    type: {
                        sole_owner: {
                            Type: _resource2.default.List,
                            Value: _resource2.default.List
                        }
                    }
                }
            }
        },
        getResourcesToTransferOwner: function getResourcesToTransferOwner() {
            var _this = this;
            var resourcesSoleOwner = (0, _get2.default)(this, 'errors.resources.sole_owner') || [];
            var resources = new _resource2.default.List(resourcesSoleOwner);
            resources = resources.sort(function (a, b) {
                return a.name > b.name;
            });
            resources.forEach(function (resource) {
                resource.permissions = resource.permissions.filter(function (permission) {
                    return permission.aro_foreign_key != _this.group_id;
                });
            });
            return resources;
        }
    });
    exports.default = GroupDelete;
});
/*app/view/template/form/group/delete_transfer_permissions.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/form/group/delete_transfer_permissions.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/form/group/delete_transfer_permissions.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form-content intro',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'strong',
                false,
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'strong',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'You are about to delete ',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'group.name',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '.',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'strong',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        This group is the owner of passwords.\n        You need to transfer the ownership to other users or groups to continue.\n    ',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'ownership-transfer scroll',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(resources.length)',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Passwords',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'ownership-transfer-items',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#each(resources)',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                15
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                16
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input select required',
                16
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                16
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                17
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'for',
                17
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'transfer_resource_owner_',
                17
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'id',
                17
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'for',
                17
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                17
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'name',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' (',
                17
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Password\'',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ') ',
                17
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'new owner\')',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ':',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                17
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'select',
                false,
                18
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                18
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'data[Resource][',
                18
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'id',
                18
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ']',
                18
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                18
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                18
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'transfer_resource_owner_',
                18
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'id',
                18
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                18
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                18
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fluid',
                18
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                18
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'select',
                false,
                18
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'select',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                18
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                19
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                20
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                21
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                22
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                23
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                24
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                26
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                26
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'submit-wrapper clearfix',
                26
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                26
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                26
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                27
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                27
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'submit',
                27
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                27
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                27
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button primary warning',
                27
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                27
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value',
                27
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'delete group\')',
                27
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value',
                27
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                27
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                27
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                28
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                28
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-dialog-cancel cancel',
                28
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                28
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                28
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'cancel\')',
                28
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                28
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                28
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                29
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                29
            ]
        },
        {
            'tokenType': 'done',
            'args': [30]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/form/group/delete_transfer_permission*/
define('app/form/group/delete_transfer_permission', [
    'exports',
    'passbolt-mad/form/element/dropdown',
    'passbolt-mad/form/form',
    'can-util/js/get/get',
    'app/model/map/permission',
    'app/view/template/form/group/delete_transfer_permissions.stache!'
], function (exports, _dropdown, _form, _get, _permission, _delete_transfer_permissions) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _dropdown2 = _interopRequireDefault(_dropdown);
    var _form2 = _interopRequireDefault(_form);
    var _get2 = _interopRequireDefault(_get);
    var _permission2 = _interopRequireDefault(_permission);
    var _delete_transfer_permissions2 = _interopRequireDefault(_delete_transfer_permissions);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var DeleteTransferPermissionForm = _form2.default.extend('passbolt.form.group.DeleteTransferPermissionForm', {
        defaults: {
            template: _delete_transfer_permissions2.default,
            group: null,
            groupDelete: {}
        }
    }, {
        init: function init(el, options) {
            this._super(el, options);
            this.group = this.options.group;
            var groupDelete = this.options.groupDelete;
            this.resources = groupDelete.getResourcesToTransferOwner();
        },
        beforeRender: function beforeRender() {
            this.setViewData('resources', this.resources);
            this.setViewData('group', this.group);
        },
        afterStart: function afterStart() {
            this._initResourcesTransferSection();
        },
        _initResourcesTransferSection: function _initResourcesTransferSection() {
            var _this = this;
            this.resources.forEach(function (resource) {
                var permissions = new _permission2.default.List(resource.permissions);
                permissions.sortAlphabetically();
                var aros = _this._prepareResourcesTransferArosViewData(permissions);
                var dropdownSelector = 'transfer_resource_owner_' + resource.id;
                var dropdown = new _dropdown2.default('#' + dropdownSelector, {
                    emptyValue: false,
                    validate: false,
                    modelReference: 'transfer.owners.' + resource.id,
                    availableValues: aros,
                    value: Object.keys(aros)[0]
                });
                dropdown.start();
                _this.addElement(dropdown);
            });
        },
        _prepareResourcesTransferArosViewData: function _prepareResourcesTransferArosViewData(permissions) {
            return permissions.reduce(function (carry, permission) {
                var value = permission.id;
                var label = permission.user ? permission.user.profile.first_name + ' ' + permission.user.profile.last_name + ' (' + permission.user.username + ')' : permission.group.name + ' (Group)';
                carry[value] = label;
                return carry;
            }, {});
        },
        getData: function getData() {
            var data = this._super();
            var owners = (0, _get2.default)(data, 'transfer.owners') || {};
            var transfer = { owners: [] };
            for (var aco in owners) {
                transfer.owners.push({
                    aco_foreign_key: aco,
                    id: owners[aco]
                });
            }
            return transfer;
        }
    });
    exports.default = DeleteTransferPermissionForm;
});
/*app/view/component/group/edit*/
define('app/view/component/group/edit', [
    'exports',
    'can-dom-data',
    'can-dom-events',
    'passbolt-mad/view/view'
], function (exports, _canDomData, _canDomEvents, _view) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canDomData2 = _interopRequireDefault(_canDomData);
    var _canDomEvents2 = _interopRequireDefault(_canDomEvents);
    var _view2 = _interopRequireDefault(_view);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var EditView = _view2.default.extend('passbolt.view.component.group.Edit', {}, {
        '{element} .js_group_user_delete click': function elementJs_group_user_deleteClick(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            var $li = $(el).parents('li');
            var groupUser = _canDomData2.default.get($li[0], 'passbolt.model.GroupUser');
            _canDomEvents2.default.dispatch(this.element, {
                type: 'request_group_user_delete',
                data: { groupUser: groupUser }
            });
        },
        '{element} .js_group_user_is_admin changed': function elementJs_group_user_is_adminChanged(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            var data = ev.data;
            var $li = $(el).parents('li');
            var groupUser = _canDomData2.default.get($li[0], 'passbolt.model.GroupUser');
            var isAdmin = data.value;
            _canDomEvents2.default.dispatch(this.element, {
                type: 'request_group_user_edit',
                data: {
                    groupUser: groupUser,
                    isAdmin: isAdmin
                }
            });
        }
    });
    exports.default = EditView;
});
/*app/view/template/form/group/create.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/form/group/create.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/form/group/create.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form-content',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text required clearfix js_form_element_wrapper',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'for',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_name',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'for',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Group name\') ',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'Group.name',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'maxlength',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '50',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'maxlength',
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_name',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'group name',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_name_feedback',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                8
            ]
        },
        {
            'tokenType': 'done',
            'args': [9]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/form/group/create*/
define('app/form/group/create', [
    'exports',
    'passbolt-mad/form/feedback',
    'passbolt-mad/form/form',
    'passbolt-mad/form/element/textbox',
    'app/view/template/form/group/create.stache!'
], function (exports, _feedback, _form, _textbox, _create) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _feedback2 = _interopRequireDefault(_feedback);
    var _form2 = _interopRequireDefault(_form);
    var _textbox2 = _interopRequireDefault(_textbox);
    var _create2 = _interopRequireDefault(_create);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var CreateForm = _form2.default.extend('passbolt.form.group.Create', {
        defaults: {
            action: 'create',
            template: _create2.default,
            cssClasses: ['group_edit_form'],
            canUpdateName: true
        }
    }, {
        afterStart: function afterStart() {
            this.addElement(new _textbox2.default('#js_field_name', {
                modelReference: 'Group.name',
                state: { disabled: !this.options.canUpdateName }
            }).start(), new _feedback2.default('#js_field_name_feedback', {}).start());
            this.on();
        }
    });
    exports.default = CreateForm;
});
/*app/view/template/component/group/edit.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/group/edit.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/group/edit.stache', [
        {
            'tokenType': 'start',
            'args': [
                'form',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_group_edit_form',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'form',
                false,
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'form',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_group_members',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'group_members',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form-content',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input required',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'for',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_group_permission',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'for',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Group members',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form-content permission-edit',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_permissions_list',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'permissions scroll',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n        ',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message warning feedback hidden',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_group_members_add',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_plugin_group_edit_wrapper permission-add',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                15
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                16
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                16
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'passbolt-group-edit-autocomplete-wrapper',
                16
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                16
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                17
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                18
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                18
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'submit-wrapper clearfix',
                18
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                18
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                18
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button primary',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_group_save',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                19
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                19
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'save\') ',
                19
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                19
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-dialog-cancel cancel',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                20
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'cancel\') ',
                20
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                20
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                21
            ]
        },
        {
            'tokenType': 'done',
            'args': [22]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/group/group_user_list_item.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/group/group_user_list_item.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/group/group_user_list_item.stache', [
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.id ',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'row ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(mappedItem.isNew)',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'permission-updated',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' cssClasses.join(\' \') ',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'avatar',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'img',
                true,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'src',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.userAvatarPath ',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'src',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'img',
                true,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'user',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'details',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'name',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                9
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.userLabel ',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'more_details tooltip-alt',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-info-circle',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'tooltip-text right',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'email',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.userEmail ',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fingerprint',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                14
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.userFingerprint ',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                17
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                18
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                18
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'permission_changes',
                18
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                18
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                18
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                19
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                19
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(mappedItem.isNew){{ __(\'Will be added\') ',
                19
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#else',
                19
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Unchanged\') ',
                19
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                19
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                19
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                20
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                21
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                23
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'select rights',
                23
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                23
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'form',
                false,
                24
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                24
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_group_user_is_admin_select_',
                24
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.id ',
                24
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                24
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                24
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_group_user_is_admin_form',
                24
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                24
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'form',
                false,
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                24
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'select',
                false,
                25
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                25
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_group_user_is_admin permission',
                25
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                25
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'select',
                false,
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                25
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'select',
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                26
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'form',
                27
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                27
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                28
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                28
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                30
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                30
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'actions',
                30
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                30
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                30
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                31
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                31
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_group_user_delete close',
                31
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                31
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'title',
                31
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'remove\') ',
                31
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'title',
                31
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                31
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                31
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                32
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                32
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-times-circle',
                32
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                32
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                32
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                32
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                32
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                33
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                33
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visuallyhidden',
                33
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                33
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                33
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'remove\') ',
                33
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                33
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                33
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                34
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                34
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                35
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                35
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                37
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                37
            ]
        },
        {
            'tokenType': 'done',
            'args': [38]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/group/edit*/
define('app/component/group/edit', [
    'exports',
    'passbolt-mad/component/button',
    'passbolt-mad/component/component',
    'passbolt-mad/form/element/dropdown',
    'app/view/component/group/edit',
    'app/model/map/group',
    'app/form/group/create',
    'app/model/map/group_user',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/control/bus',
    'passbolt-mad/util/map/map',
    'app/util/plugin',
    'passbolt-mad/component/tree',
    'passbolt-mad/view/component/tree',
    'app/model/map/user',
    'uuid/v4',
    'app/view/template/component/group/edit.stache!',
    'app/view/template/component/group/group_user_list_item.stache!'
], function (exports, _button, _component, _dropdown, _edit, _group, _create, _group_user, _i18n, _bus, _map, _plugin, _tree, _tree3, _user, _v, _edit3, _group_user_list_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _button2 = _interopRequireDefault(_button);
    var _component2 = _interopRequireDefault(_component);
    var _dropdown2 = _interopRequireDefault(_dropdown);
    var _edit2 = _interopRequireDefault(_edit);
    var _group2 = _interopRequireDefault(_group);
    var _create2 = _interopRequireDefault(_create);
    var _group_user2 = _interopRequireDefault(_group_user);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _bus2 = _interopRequireDefault(_bus);
    var _map2 = _interopRequireDefault(_map);
    var _plugin2 = _interopRequireDefault(_plugin);
    var _tree2 = _interopRequireDefault(_tree);
    var _tree4 = _interopRequireDefault(_tree3);
    var _user2 = _interopRequireDefault(_user);
    var _v2 = _interopRequireDefault(_v);
    var _edit4 = _interopRequireDefault(_edit3);
    var _group_user_list_item2 = _interopRequireDefault(_group_user_list_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var EditComponent = _component2.default.extend('passbolt.component.group.Edit', {
        defaults: {
            label: null,
            cssClasses: ['share-tab'],
            viewClass: _edit2.default,
            template: _edit4.default,
            loadedOnStart: false,
            GroupUserChanges: [],
            data: { Group: {} },
            callbacks: { saved: null }
        }
    }, {
        _permissionChangeTypeDropDowns: {},
        _permissionDeleteButtons: {},
        afterStart: function afterStart() {
            var _this = this;
            this.changeList = [];
            this._findGroup(this.options.data.Group).then(function () {
                return _this._initForm();
            }).then(function () {
                return _this._initGroupUsersList();
            }).then(function () {
                return _this._notifyPlugin();
            }).then(function () {
                return _this._initSaveButton();
            }).then(function () {
                if (_this.formState == 'create') {
                    _this.state.loaded = true;
                }
                _this.showFeedback();
                _this.on();
            }, function (error) {
                console.error('something happened', error);
            });
        },
        _findGroup: function _findGroup(group) {
            var self = this;
            this.isAdmin = _user2.default.getCurrent().isAdmin();
            if (group.id == undefined) {
                this.formState = 'create';
                this.isGroupManager = false;
                $('.group_members').addClass('empty');
                return Promise.resolve(group);
            } else {
                this.formState = 'edit';
                return _group2.default.findView(group.id).then(function (group) {
                    self.options.data.Group = group;
                    self.isGroupManager = group.isGroupManager(_user2.default.getCurrent());
                    return group;
                });
            }
        },
        _initForm: function _initForm() {
            var group = this.options.data.Group;
            var form = new _create2.default('#js_group_edit_form', {
                data: group,
                canUpdateName: this.isGroupManager && !this.isAdmin ? false : true,
                callbacks: {}
            });
            form.start();
            form.load(group);
            this.formGroup = form;
        },
        _initGroupUsersList: function _initGroupUsersList() {
            var map = this._getGroupUsersListMap();
            var treeComponent = new _tree2.default('#js_permissions_list', {
                cssClasses: ['group_user'],
                viewClass: _tree4.default,
                itemClass: _group_user2.default,
                itemTemplate: _group_user_list_item2.default,
                map: map
            });
            treeComponent.start();
            this.groupUserList = treeComponent;
        },
        _getGroupUsersListMap: function _getGroupUsersListMap() {
            return new _map2.default({
                id: 'id',
                userAvatarPath: {
                    key: 'user',
                    func: function func(user) {
                        return user.profile.avatarPath('small');
                    }
                },
                userLabel: {
                    key: 'user',
                    func: function func(user) {
                        return user.profile.fullName();
                    }
                },
                userEmail: 'user.username',
                userFingerprint: {
                    key: 'user.gpgkey.fingerprint',
                    func: function func(fingerprint) {
                        return fingerprint.match(/(.{1,4})/g).join(' ');
                    }
                },
                isAdmin: 'is_admin',
                isNew: 'is_new'
            });
        },
        _initSaveButton: function _initSaveButton() {
            this.options.saveChangesButton = new _button2.default('#js_group_save', { state: { disabled: true } }).start();
        },
        _notifyPlugin: function _notifyPlugin() {
            var group = this.options.data.Group;
            var canAddGroupUsers = this.formState == 'create' || this.isGroupManager;
            var groupId = group.id || '';
            _plugin2.default.insertGroupEditframe(groupId, canAddGroupUsers);
        },
        showFeedback: function showFeedback() {
            var feedback = [];
            if (this.formState == 'create' && this.groupUserList.options.items.length == 0) {
                feedback.push(__('The group is empty, please add a group manager.'));
            }
            if (this.formState == 'edit' && !this.isGroupManager) {
                feedback.push(__('Only the group manager can add new people to a group.'));
            }
            if (this.changeList.length) {
                feedback.push(__('You need to click save for the changes to take place.'));
            }
            $('.message.feedback').empty();
            if (feedback.length) {
                feedback.forEach(function (fb) {
                    $('.message.feedback').append('<span>' + fb + '</span>');
                });
                $('.message.feedback').removeClass('hidden');
            } else {
                $('.message.feedback').addClass('hidden');
            }
        },
        loadGroup: function loadGroup(group) {
            var _this2 = this;
            this.formGroup.load({ Group: group });
            group.groups_users.forEach(function (groupUser) {
                _this2.addGroupUser(groupUser);
            });
            this.state.loaded = true;
        },
        loadGroupUser: function loadGroupUser(groupUser) {
            var groupUserId = groupUser.id;
            var groupUserTypeSelector = '#js_group_user_is_admin_select_' + groupUserId;
            var groupUserSelector = '#' + groupUserId;
            this.groupUserList.insertItem(groupUser);
            var dropdownComponent = new _dropdown2.default($('.js_group_user_is_admin', groupUserTypeSelector)[0], {
                id: 'js_group_user_is_admin_' + groupUserId,
                emptyValue: false,
                modelReference: 'passbolt.model.GroupUser.is_admin',
                availableValues: {
                    false: __('Member'),
                    true: __('Group manager')
                }
            });
            dropdownComponent.start();
            dropdownComponent.setValue(groupUser.is_admin);
            this._permissionChangeTypeDropDowns[groupUserId] = dropdownComponent;
            var buttonComponent = new _button2.default($('.js_group_user_delete', $('.actions', groupUserSelector))[0], {
                id: 'js_group_user_delete_' + groupUserId,
                state: 'ready'
            }).start();
            this._permissionDeleteButtons[groupUserId] = buttonComponent;
        },
        addGroupUser: function addGroupUser(groupUser) {
            if (groupUser.id == undefined) {
                groupUser.id = (0, _v2.default)();
                groupUser.is_new = true;
            } else {
                groupUser.is_new = false;
            }
            this.loadGroupUser(groupUser);
            $('.group_members').removeClass('empty');
            this.checkManager();
        },
        deleteGroupUser: function deleteGroupUser(groupUser) {
            this.groupUserList.removeItem(groupUser);
            if (this.groupUserList.options.items.length == 0) {
                $('.group_members').addClass('empty');
            }
            _plugin2.default.groupEditIframeRemoveGroupUser(groupUser);
            this.checkManager();
        },
        editGroupUser: function editGroupUser(groupUser, value) {
            groupUser.is_admin = value;
            _plugin2.default.groupEditIframeEditGroupUser(groupUser);
            this.checkManager();
        },
        checkManager: function checkManager() {
            var _this3 = this;
            var admins = this.groupUserList.options.items.filter(function (item) {
                return item.is_admin === true;
            });
            if (admins.length > 1) {
                admins.forEach(function (admin) {
                    var permTypeDropdown = _this3._permissionChangeTypeDropDowns[admin.id];
                    var permDeleteButton = _this3._permissionDeleteButtons[admin.id];
                    permTypeDropdown.state.disabled = false;
                    permDeleteButton.state.disabled = false;
                });
            } else if (admins.length == 1) {
                var permTypeDropdown = this._permissionChangeTypeDropDowns[admins[0].id];
                var permDeleteButton = this._permissionDeleteButtons[admins[0].id];
                permTypeDropdown.state.disabled = true;
                permDeleteButton.state.disabled = true;
            }
            if (admins.length) {
                this.options.saveChangesButton.state.disabled = false;
            } else {
                this.options.saveChangesButton.state.disabled = true;
            }
            return admins.length >= 1;
        },
        setGroupUserItemState: function setGroupUserItemState(groupUserId, state) {
            var $li = this.groupUserList.view.getItemElement({ id: groupUserId });
            if (state == null) {
                $li.removeClass('permission-updated');
                $('.permission_changes span', $li).text(__('Unchanged'));
            } else {
                $li.addClass('permission-updated');
                var text = state == 'created' ? __('Will be added') : __('Will be updated');
                $('.permission_changes span', $li).text(text);
            }
        },
        '{saveChangesButton.element} click': function saveChangesButtonElementClick() {
            if (this.options.saveChangesButton.state.loaded) {
                var validate = this.formGroup.validate();
                var hasAdmins = this.checkManager();
                if (validate == true && hasAdmins == true) {
                    var formData = this.formGroup.getData();
                    var groupJson = { name: formData['Group']['name'] };
                    _bus2.default.trigger('passbolt_loading');
                    _plugin2.default.groupEditIframeSave(groupJson);
                    this.state.loaded = false;
                }
            }
        },
        '{mad.bus.element} passbolt.plugin.group.edit.group_loaded': function madBusElementPassboltPluginGroupEditGroup_loaded() {
            this.loadGroup(this.options.data.Group);
        },
        '{mad.bus.element} passbolt.group.edit.add_user': function madBusElementPassboltGroupEditAdd_user(el, ev) {
            var data = ev.data;
            data.user = data.User;
            delete data.User;
            data.user.gpgkey = data.user.Gpgkey;
            delete data.user.Gpgkey;
            delete data.GroupUser;
            data.user.profile = data.user.Profile;
            delete data.user.Profile;
            data.user.profile.avatar = data.user.profile.Avatar;
            delete data.user.profile.Avatar;
            data.user.role = data.user.Role;
            delete data.user.Role;
            $.extend(data.user, data.user.User);
            delete data.user.User;
            delete data.user.GroupUser;
            var groupUser = new _group_user2.default(data);
            this.addGroupUser(groupUser);
        },
        '{mad.bus.element} passbolt.plugin.group.edit.group_users_updated': function madBusElementPassboltPluginGroupEditGroup_users_updated(el, ev) {
            var _this4 = this;
            var data = ev.data;
            this.changeList = data.changeList;
            setTimeout(function () {
                _this4.groupUserList.options.items.forEach(function (item) {
                    var userId = item.user_id;
                    var groupUserId = item.id;
                    var correspondingChange = data.changeList.find(function (item) {
                        return item.user_id == userId;
                    });
                    if (correspondingChange != undefined) {
                        if (correspondingChange.status == 'created' || correspondingChange.status == 'updated') {
                            _this4.setGroupUserItemState(groupUserId, correspondingChange.status);
                        }
                    } else {
                        _this4.setGroupUserItemState(groupUserId, null);
                    }
                });
                _this4.showFeedback();
            }, 0);
        },
        '{mad.bus.element} group_edit_save_success': function madBusElementGroup_edit_save_success(el, ev) {
            var _this5 = this;
            var data = ev.data;
            var findOptions = {
                id: data.Group.id,
                contain: { group_user: 1 }
            };
            _group2.default.findOne(findOptions).then(function (group) {
                if (_this5.formState == 'create') {
                    _group2.default.dispatch('created', [group]);
                } else {
                    _group2.default.dispatch('updated', [group]);
                }
                _this5.state.loaded = true;
                _bus2.default.trigger('passbolt_loading_complete');
                _bus2.default.trigger('passbolt_notify', {
                    status: 'success',
                    title: 'app_groups_' + (_this5.formState == 'create' ? 'add' : 'edit') + '_success',
                    data: group
                });
                if (_this5.options.callbacks.saved) {
                    _this5.options.callbacks.saved(group);
                }
            });
        },
        '{mad.bus.element} group_edit_save_error': function madBusElementGroup_edit_save_error(el, ev) {
            var errorResponse = ev.data;
            if (errorResponse.header.code == 400) {
                if (errorResponse.body.Group != undefined && errorResponse.body.Group['name'] != undefined) {
                    var errorGroup = errorResponse.body;
                    this.formGroup.showErrors(errorGroup);
                } else {
                    console.error('Validation error while saving group', errorResponse);
                }
            } else {
                console.error('Unknown error while saving group', errorResponse);
            }
            _bus2.default.trigger('passbolt_loading_complete');
            _bus2.default.trigger('passbolt_notify', {
                status: 'error',
                title: 'app_groups_add_error',
                message: errorResponse.header.message,
                data: errorResponse
            });
            this.state.loaded = true;
        },
        '{element} request_group_user_delete': function elementRequest_group_user_delete(el, ev) {
            var groupUser = ev.data.groupUser;
            this.deleteGroupUser(groupUser);
        },
        '{element} request_group_user_edit': function elementRequest_group_user_edit(el, ev) {
            var groupUser = ev.data.groupUser;
            var isAdmin = ev.data.isAdmin;
            this.editGroupUser(groupUser, isAdmin);
        }
    });
    exports.default = EditComponent;
});
/*app/model/state/secondary_sidebar_state*/
define('app/model/state/secondary_sidebar_state', [
    'exports',
    'passbolt-mad/model/state/componentState'
], function (exports, _componentState) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _componentState2 = _interopRequireDefault(_componentState);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var SecondarySidebarState = _componentState2.default.extend({
        opened: {
            type: 'boolean',
            default: false
        }
    });
    exports.default = SecondarySidebarState;
});
/*app/component/workspace/secondary_sidebar_section*/
define('app/component/workspace/secondary_sidebar_section', [
    'exports',
    'passbolt-mad/component/component',
    'app/model/state/secondary_sidebar_state'
], function (exports, _component, _secondary_sidebar_state) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _secondary_sidebar_state2 = _interopRequireDefault(_secondary_sidebar_state);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var SecondarySidebarSection = _component2.default.extend('passbolt.component.workspace.SecondarySidebarSection', {
        defaults: {
            label: 'SecondarySidebar Component',
            stateClass: _secondary_sidebar_state2.default
        }
    }, {
        open: function open() {
            $('.accordion-content', this.element).slideDown(50);
            $(this.element).removeClass('closed');
            this.state.opened = true;
        },
        close: function close() {
            $('.accordion-content', this.element).slideUp(50);
            $(this.element).addClass('closed');
            this.state.opened = false;
        },
        '{element} a.accordion-trigger click': function elementAAccordionTriggerClick() {
            if (!this.state.opened) {
                this.open();
            } else {
                this.close();
            }
        }
    });
    exports.default = SecondarySidebarSection;
});
/*app/view/template/component/group_user/group_users_sidebar_section.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/group_user/group_users_sidebar_section.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/group_user/group_users_sidebar_section.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-header',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h4',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h4',
                false,
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-trigger',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Group Members\') ',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h4',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-content',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(editable)',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_edit_members_button',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'section-action',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-edit',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visuallyhidden',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                9
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'modify\') ',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_group_details_group_members_list',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'shared-with',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                14
            ]
        },
        {
            'tokenType': 'done',
            'args': [15]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/group/group_members_list_item.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/group/group_members_list_item.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/group/group_members_list_item.stache', [
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.id ',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'usercard-col-2 ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' cssClasses.join(\' \') ',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'content-wrapper',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'content',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'name',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.userFullName ',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'subinfo',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(mappedItem.isAdmin)',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Group manager\') ',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'else',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Member\') ',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'avatar',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'img',
                true,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'src',
                9
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.userAvatarPath ',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'src',
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'alt',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'picture of ',
                9
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.userFullName ',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'alt',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'img',
                true,
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                11
            ]
        },
        {
            'tokenType': 'done',
            'args': [12]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/group_user/group_users_sidebar_section*/
define('app/component/group_user/group_users_sidebar_section', [
    'exports',
    'can-dom-events',
    'app/model/map/group',
    'app/model/map/group_user',
    'passbolt-mad/control/bus',
    'passbolt-mad/util/map/map',
    'can-route',
    'app/component/workspace/secondary_sidebar_section',
    'passbolt-mad/component/tree',
    'app/model/map/user',
    'app/view/template/component/group_user/group_users_sidebar_section.stache!',
    'app/view/template/component/group/group_members_list_item.stache!'
], function (exports, _canDomEvents, _group, _group_user, _bus, _map, _canRoute, _secondary_sidebar_section, _tree, _user, _group_users_sidebar_section, _group_members_list_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canDomEvents2 = _interopRequireDefault(_canDomEvents);
    var _group2 = _interopRequireDefault(_group);
    var _group_user2 = _interopRequireDefault(_group_user);
    var _bus2 = _interopRequireDefault(_bus);
    var _map2 = _interopRequireDefault(_map);
    var _canRoute2 = _interopRequireDefault(_canRoute);
    var _secondary_sidebar_section2 = _interopRequireDefault(_secondary_sidebar_section);
    var _tree2 = _interopRequireDefault(_tree);
    var _user2 = _interopRequireDefault(_user);
    var _group_users_sidebar_section2 = _interopRequireDefault(_group_users_sidebar_section);
    var _group_members_list_item2 = _interopRequireDefault(_group_members_list_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var GroupUsersSidebarSectionComponent = _secondary_sidebar_section2.default.extend('passbolt.component.group_user.GroupUsersSidebarSection', {
        defaults: {
            label: 'Sidebar Section Group Users Component',
            template: _group_users_sidebar_section2.default,
            group: null,
            tree: null
        },
        _routeConsumed: false
    }, {
        afterStart: function afterStart() {
            this._super();
            this._dispatchRoute();
        },
        _dispatchRoute: function _dispatchRoute() {
            if (_canRoute2.default.data.controller == 'User' && _canRoute2.default.data.action == 'groupViewMembership') {
                if (!GroupUsersSidebarSectionComponent._routeConsumed) {
                    var accordionHeaderElement = $('.accordion-trigger', this.element)[0];
                    _canDomEvents2.default.dispatch(accordionHeaderElement, { type: 'click' });
                    GroupUsersSidebarSectionComponent._routeConsumed = true;
                }
            }
        },
        beforeRender: function beforeRender() {
            this._super();
            this.setViewData('editable', this.options.group.isAllowedToEdit(_user2.default.getCurrent()));
            this.setViewData('group', this.options.group);
        },
        _initTree: function _initTree(group) {
            var map = this._getTreeMap();
            var tree = new _tree2.default('#js_group_details_group_members_list', {
                label: 'Group Members List Controller',
                itemClass: _group_user2.default,
                itemTemplate: _group_members_list_item2.default,
                map: map
            });
            tree.start();
            tree.load(group.groups_users);
            this.options.tree = tree;
            return tree;
        },
        _getTreeMap: function _getTreeMap() {
            return new _map2.default({
                id: 'id',
                userFullName: {
                    key: 'user.profile',
                    func: function func(profile) {
                        return profile.fullName();
                    }
                },
                isAdmin: 'is_admin',
                userAvatarPath: {
                    key: 'user.profile',
                    func: function func(profile) {
                        return profile.avatarPath('small');
                    }
                }
            });
        },
        '{group} updated': function groupUpdated() {
            this.refresh();
        },
        '{element} a#js_edit_members_button click': function elementAJs_edit_members_buttonClick(el, ev) {
            ev.preventDefault();
            var group = this.options.group;
            _bus2.default.trigger('request_group_edition', { group: group });
        },
        '{element} .accordion-header click': function elementAccordionHeaderClick() {
            var _this = this;
            if (this.options.tree == null) {
                _group2.default.findView(this.options.group.id).then(function (group) {
                    return _this._initTree(group);
                });
            }
        }
    });
    exports.default = GroupUsersSidebarSectionComponent;
});
/*app/view/template/component/group/information_sidebar_section.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/group/information_sidebar_section.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/group/information_sidebar_section.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-header',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h4',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h4',
                false,
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-trigger',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Information\') ',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h4',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-content',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'created',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Created',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' getTimeAgo(group._data.created) ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modified',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Modified',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                12
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' getTimeAgo(group.modified) ',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modified_by',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Modified By',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                15
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                16
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                16
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                16
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(group.modifier)',
                16
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' group.modifier.profile.fullName() ',
                16
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                17
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                18
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                18
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'members',
                18
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                18
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                18
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Members',
                19
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                19
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                20
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(group.groups_users)',
                20
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' group.groups_users.length ',
                20
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                20
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                20
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                21
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                22
            ]
        },
        {
            'tokenType': 'done',
            'args': [22]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/group/information_sidebar_section*/
define('app/component/group/information_sidebar_section', [
    'exports',
    'app/component/workspace/secondary_sidebar_section',
    'app/view/template/component/group/information_sidebar_section.stache!'
], function (exports, _secondary_sidebar_section, _information_sidebar_section) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _secondary_sidebar_section2 = _interopRequireDefault(_secondary_sidebar_section);
    var _information_sidebar_section2 = _interopRequireDefault(_information_sidebar_section);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var InformationSidebarSectionComponent = _secondary_sidebar_section2.default.extend('passbolt.component.group.InformationSidebarSection', {
        defaults: {
            label: 'Sidebar Section Information Controller',
            template: _information_sidebar_section2.default,
            group: null
        }
    }, {
        beforeRender: function beforeRender() {
            this._super();
            this.setViewData('group', this.options.group);
        },
        '{group} updated': function groupUpdated() {
            this.refresh();
        }
    });
    exports.default = InformationSidebarSectionComponent;
});
/*app/view/template/component/workspace/secondary_sidebar.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/workspace/secondary_sidebar.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/workspace/secondary_sidebar.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'sidebar',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'sidebar',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                1
            ]
        },
        {
            'tokenType': 'done',
            'args': [1]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/workspace/secondary_sidebar*/
define('app/component/workspace/secondary_sidebar', [
    'exports',
    'passbolt-mad/component/component',
    'passbolt-mad/control/bus',
    'passbolt-mad/config/config',
    'app/view/template/component/workspace/secondary_sidebar.stache!'
], function (exports, _component, _bus, _config, _secondary_sidebar) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _bus2 = _interopRequireDefault(_bus);
    var _config2 = _interopRequireDefault(_config);
    var _secondary_sidebar2 = _interopRequireDefault(_secondary_sidebar);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var SecondarySidebarComponent = _component2.default.extend('passbolt.component.workspace.SecondarySidebar', {
        defaults: {
            label: 'Sidebar Component',
            template: _secondary_sidebar2.default
        }
    }, {
        setTitle: function setTitle(title) {
            $('.sidebar .sidebar-header .sidebar-header-title', this.element).text(title);
        },
        setSubtitle: function setSubtitle(subtitle) {
            $('.sidebar .sidebar-header .sidebar-header-subtitle', this.element).text(subtitle);
        },
        '{mad.bus.element} workspace_sidebar_state_change': function madBusElementWorkspace_sidebar_state_change() {
            if (!_config2.default.read('ui.workspace.showSidebar')) {
                this.destroyAndRemove();
            }
        },
        '{element} .js_sidebar_close click': function elementJs_sidebar_closeClick() {
            _config2.default.write('ui.workspace.showSidebar', false);
            _bus2.default.trigger('workspace_sidebar_state_change');
        }
    });
    exports.default = SecondarySidebarComponent;
});
/*app/view/template/component/group/group_secondary_sidebar.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/group/group_secondary_sidebar.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/group/group_secondary_sidebar.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'sidebar group',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'sidebar-header',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'img',
                true,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'src',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'img/avatar/group_default.png',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'src',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'img',
                true,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'name sidebar-header-title',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' name ',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'type',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'group\') ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_sidebar_close dialog-close',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-close',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visuallyhidden',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'close\') ',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                12
            ]
        },
        {
            'tokenType': 'comment',
            'args': [
                ' Group detailed information ',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'detailed-information accordion sidebar-section',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_group_details_information',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                15
            ]
        },
        {
            'tokenType': 'comment',
            'args': [
                ' Group members information ',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                17
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                18
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                18
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'members accordion sidebar-section',
                18
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                18
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                18
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_group_details_members',
                18
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                18
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                18
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                18
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                19
            ]
        },
        {
            'tokenType': 'done',
            'args': [20]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/group/group_secondary_sidebar*/
define('app/component/group/group_secondary_sidebar', [
    'exports',
    'app/model/map/group',
    'app/component/group_user/group_users_sidebar_section',
    'app/component/group/information_sidebar_section',
    'app/component/workspace/secondary_sidebar',
    'app/view/template/component/group/group_secondary_sidebar.stache!'
], function (exports, _group, _group_users_sidebar_section, _information_sidebar_section, _secondary_sidebar, _group_secondary_sidebar) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _group2 = _interopRequireDefault(_group);
    var _group_users_sidebar_section2 = _interopRequireDefault(_group_users_sidebar_section);
    var _information_sidebar_section2 = _interopRequireDefault(_information_sidebar_section);
    var _secondary_sidebar2 = _interopRequireDefault(_secondary_sidebar);
    var _group_secondary_sidebar2 = _interopRequireDefault(_group_secondary_sidebar);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var GroupSecondarySidebarComponent = _secondary_sidebar2.default.extend('passbolt.component.group.GroupSecondarySidebar', {
        defaults: {
            label: 'Group Details Controller',
            template: _group_secondary_sidebar2.default,
            group: null,
            Group: _group2.default
        }
    }, {
        init: function init(el, options) {
            this._super(el, options);
            this._latestGroupModified = options.group.modified;
        },
        beforeRender: function beforeRender() {
            this.setViewData('name', this.options.group.name);
            this._super();
        },
        afterStart: function afterStart() {
            var _this = this;
            this._findGroup(this.options.group.id).then(function () {
                return _this._initInformationSection();
            }).then(function () {
                return _this._initGroupUsersSection();
            });
            this._super();
        },
        _findGroup: function _findGroup(groupId) {
            var _this2 = this;
            var options = {
                id: groupId,
                contain: {
                    'modifier': 1,
                    'modifier.profile': 1,
                    'my_group_user': 1
                }
            };
            return _group2.default.findOne(options).then(function (group) {
                _this2.options.group = group;
            });
        },
        _initInformationSection: function _initInformationSection() {
            var group = this.options.group;
            var component = new _information_sidebar_section2.default('#js_group_details_information', { group: group });
            component.start();
        },
        _initGroupUsersSection: function _initGroupUsersSection() {
            var group = this.options.group;
            var cssClasses = ['closed'];
            var component = new _group_users_sidebar_section2.default('#js_group_details_members', {
                group: group,
                cssClasses: cssClasses
            });
            component.start();
        },
        '{Group} updated': function GroupUpdated(Constructor, ev, group) {
            if (this.options.group.id == group.id) {
                this.options.group = group;
                this.refresh();
            }
        }
    });
    exports.default = GroupSecondarySidebarComponent;
});
/*app/view/template/component/user/workspace_primary_menu.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/user/workspace_primary_menu.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/user/workspace_primary_menu.stache', [
        {
            'tokenType': 'special',
            'args': [
                '#if(isAdmin)',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_user_wk_menu_edition_button',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-edit',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'edit\') ',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_user_wk_menu_deletion_button',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-trash',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                11
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'delete\') ',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                15
            ]
        },
        {
            'tokenType': 'done',
            'args': [15]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/user/workspace_primary_menu*/
define('app/component/user/workspace_primary_menu', [
    'exports',
    'passbolt-mad/component/button',
    'passbolt-mad/component/component',
    'passbolt-mad/control/bus',
    'app/model/map/user',
    'app/view/template/component/user/workspace_primary_menu.stache!'
], function (exports, _button, _component, _bus, _user, _workspace_primary_menu) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _button2 = _interopRequireDefault(_button);
    var _component2 = _interopRequireDefault(_component);
    var _bus2 = _interopRequireDefault(_bus);
    var _user2 = _interopRequireDefault(_user);
    var _workspace_primary_menu2 = _interopRequireDefault(_workspace_primary_menu);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var WorkspacePrimaryMenu = _component2.default.extend('passbolt.component.user.WorkspacePrimaryMenu', {
        defaults: {
            label: 'User Workspace Menu Controller',
            tag: 'ul',
            template: _workspace_primary_menu2.default,
            selectedUsers: new _user2.default.List()
        }
    }, {
        beforeRender: function beforeRender() {
            this._super();
            this.setViewData('isAdmin', _user2.default.getCurrent().role.name == 'admin');
        },
        afterStart: function afterStart() {
            var _this = this;
            var isAdmin = _user2.default.getCurrent().isAdmin();
            if (isAdmin) {
                var editButton = new _button2.default('#js_user_wk_menu_edition_button', {
                    state: { disabled: true },
                    events: {
                        click: function click() {
                            return _this._edit();
                        }
                    }
                });
                editButton.start();
                this.editButton = editButton;
                var deleteButton = new _button2.default('#js_user_wk_menu_deletion_button', {
                    state: { disabled: true },
                    events: {
                        click: function click() {
                            return _this._delete();
                        }
                    }
                });
                deleteButton.start();
                this.deleteButton = deleteButton;
            }
            this.on();
        },
        _delete: function _delete() {
            var user = this.options.selectedUsers[0];
            _bus2.default.trigger('request_user_deletion', { user: user });
        },
        _edit: function _edit() {
            var user = this.options.selectedUsers[0];
            _bus2.default.trigger('request_user_edition', { user: user });
        },
        '{selectedUsers} add': function selectedUsersAdd() {
            var resourceSelected = this.options.selectedUsers.length == 1;
            if (resourceSelected) {
                this.userSelected();
            } else {
                this.reset();
            }
        },
        '{selectedUsers} remove': function selectedUsersRemove() {
            this.reset();
        },
        userSelected: function userSelected() {
            var currentUser = _user2.default.getCurrent();
            var isAdmin = currentUser.role.name == 'admin';
            if (isAdmin) {
                var user = this.options.selectedUsers[0];
                var isSelf = currentUser.id == user.id;
                if (!isSelf) {
                    this.deleteButton.state.disabled = false;
                }
                this.editButton.state.disabled = false;
            }
        },
        reset: function reset() {
            var isAdmin = _user2.default.getCurrent().isAdmin();
            if (isAdmin) {
                this.deleteButton.state.disabled = true;
                this.editButton.state.disabled = true;
            }
        }
    });
    exports.default = WorkspacePrimaryMenu;
});
/*app/view/component/group/groups_list*/
define('app/view/component/group/groups_list', [
    'exports',
    'can-dom-data',
    'can-dom-events',
    'passbolt-mad/view/component/tree'
], function (exports, _canDomData, _canDomEvents, _tree) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canDomData2 = _interopRequireDefault(_canDomData);
    var _canDomEvents2 = _interopRequireDefault(_canDomEvents);
    var _tree2 = _interopRequireDefault(_tree);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var GroupsListView = _tree2.default.extend('passbolt.view.component.GroupsList', {}, {
        '{element} .more-ctrl a mousedown': function elementMoreCtrlAMousedown(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            var $li = $(el).closest('li');
            var itemClass = this.getController().getItemClass();
            var group = _canDomData2.default.get($li[0], itemClass.shortName);
            _canDomEvents2.default.dispatch(this.element, {
                type: 'item_menu_clicked',
                data: {
                    group: group,
                    srcEv: ev
                }
            });
            return false;
        }
    });
    exports.default = GroupsListView;
});
/*app/view/template/component/group/group_item.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/group/group_item.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/group/group_item.stache', [
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'open node root group-item',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.id ',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'row ',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'main-cell-wrapper',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'main-cell',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'title',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.label ',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '\'',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'title',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.label ',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                7
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(withMenu)',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(mappedItem.canEdit)',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'right-cell more-ctrl',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'more',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                12
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                16
            ]
        },
        {
            'tokenType': 'done',
            'args': [16]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/group/groups_list*/
define('app/component/group/groups_list', [
    'exports',
    'app/model/filter',
    'can-util/js/get/get',
    'app/model/map/group',
    'app/view/component/group/groups_list',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/control/bus',
    'passbolt-mad/util/map/map',
    'passbolt-mad/component/tree',
    'app/model/map/user',
    'uuid/v4',
    'app/view/template/component/group/group_item.stache!'
], function (exports, _filter, _get, _group, _groups_list, _i18n, _bus, _map, _tree, _user, _v, _group_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _filter2 = _interopRequireDefault(_filter);
    var _get2 = _interopRequireDefault(_get);
    var _group2 = _interopRequireDefault(_group);
    var _groups_list2 = _interopRequireDefault(_groups_list);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _bus2 = _interopRequireDefault(_bus);
    var _map2 = _interopRequireDefault(_map);
    var _tree2 = _interopRequireDefault(_tree);
    var _user2 = _interopRequireDefault(_user);
    var _v2 = _interopRequireDefault(_v);
    var _group_item2 = _interopRequireDefault(_group_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var GroupsList = _tree2.default.extend('passbolt.component.group.GroupsList', {
        defaults: {
            itemClass: _group2.default,
            itemTemplate: _group_item2.default,
            prefixItemId: 'group_',
            selectedGroups: new _group2.default.List(),
            selectedFilter: null,
            viewClass: _groups_list2.default,
            map: null,
            loadedOnStart: false,
            silentLoading: false,
            defaultGroupFilter: {},
            withMenu: false,
            Group: _group2.default,
            User: _user2.default
        }
    }, {
        afterStart: function afterStart() {
            var _this = this;
            this.state.loaded = false;
            this.setViewData('withMenu', this.options.withMenu);
            this._findGroups(this.options.defaultGroupFilter).then(function (groups) {
                return _this.load(groups);
            }).then(function () {
                _this.state.loaded = true;
            });
            this._super();
        },
        init: function init(el, options) {
            options = options || {};
            options.map = this._getTreeMap();
            this._super(el, options);
            this._latestGroupModified = null;
        },
        _getTreeMap: function _getTreeMap() {
            return new _map2.default({
                id: 'id',
                label: 'name',
                canEdit: {
                    key: 'id',
                    func: function func(id, map, item) {
                        var isAdmin = (0, _get2.default)(item, 'my_group_user.is_admin') || _user2.default.getCurrent().isAdmin();
                        return isAdmin === true;
                    }
                }
            });
        },
        _findGroups: function _findGroups(filter) {
            var findOptions = {
                contain: { 'my_group_user': 1 },
                order: ['Group.name ASC'],
                filter: filter
            };
            return _group2.default.findAll(findOptions);
        },
        insertAlphabetically: function insertAlphabetically(group) {
            var _this2 = this;
            var inserted = false;
            this.options.items.forEach(function (elt) {
                if (group.name.localeCompare(elt.name) == -1) {
                    _this2.insertItem(group, elt, 'before');
                    inserted = true;
                    return false;
                }
            });
            if (inserted == false) {
                this.insertItem(group, null, 'last');
            }
        },
        selectItem: function selectItem(item) {
            this._latestGroupModified = item.modified;
            this._filterWorkspaceByGroup(item);
            this._super(item);
        },
        _filterWorkspaceByGroup: function _filterWorkspaceByGroup(group) {
            this.selectedFilter = new _filter2.default({
                id: 'workspace_filter_group_' + group.id + '_' + (0, _v2.default)(),
                type: 'group',
                label: group.name + __(' (group)'),
                rules: { 'has-groups': group.id }
            });
            _bus2.default.trigger('filter_workspace', { filter: this.selectedFilter });
        },
        _update: function _update() {
            var _this3 = this;
            this._findGroups(this.options.defaultGroupFilter).then(function (groups) {
                var oldGroup = _this3.options.items;
                var groupsToDelete = oldGroup.filter(function (group) {
                    return groups.indexOf(group) == -1;
                });
                groupsToDelete.forEach(function (group) {
                    return _group2.default.dispatch('destroyed', [group]);
                });
                _this3.options.items = groups;
            });
        },
        '{Group} created': function GroupCreated(Constructor, ev, group) {
            this.insertAlphabetically(group);
        },
        '{Group} updated': function GroupUpdated(Constructor, ev, group) {
            this.refreshItem(group);
            var selectedGroups = this.options.selectedGroups;
            var id = group.id;
            if (selectedGroups.indexOf({ id: id }) != -1) {
                this.view.selectItem(group);
                var isGroupUpdated = this._latestGroupModified != group.modified;
                if (isGroupUpdated) {
                    this.selectItem(group);
                }
            }
        },
        '{Group} destroyed': function GroupDestroyed(el, ev, group) {
            this.removeItem(group);
        },
        '{selectedGroups} remove': function selectedGroupsRemove(el, ev, items) {
            var _this4 = this;
            items.forEach(function (item) {
                _this4.unselectItem(item);
            });
        },
        '{selectedGroups} add': function selectedGroupsAdd(el, ev, items) {
            var _this5 = this;
            items.forEach(function (item) {
                _this5.selectItem(item);
            });
        },
        '{element} item_selected': function elementItem_selected(el, ev) {
            var item = ev.data.item;
            var groups = this.options.selectedGroups;
            groups.splice(0, groups.length, item);
        },
        '{User} destroyed': function UserDestroyed() {
            this._update();
        }
    });
    exports.default = GroupsList;
});
/*app/component/group/people_groups_list*/
define('app/component/group/people_groups_list', [
    'exports',
    'passbolt-mad/model/map/action',
    'passbolt-mad/component/contextual_menu',
    'app/component/group/groups_list',
    'passbolt-mad/control/bus',
    'app/model/map/user',
    'app/view/template/component/group/group_item.stache!'
], function (exports, _action, _contextual_menu, _groups_list, _bus, _user) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _contextual_menu2 = _interopRequireDefault(_contextual_menu);
    var _groups_list2 = _interopRequireDefault(_groups_list);
    var _bus2 = _interopRequireDefault(_bus);
    var _user2 = _interopRequireDefault(_user);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PeopleGroupsListComponent = _groups_list2.default.extend('passbolt.component.group.PeopleGroupsList', { defaults: { withMenu: true } }, {
        showContextualMenu: function showContextualMenu(group, x, y, eventTarget) {
            var currentUser = _user2.default.getCurrent();
            var isAdmin = currentUser.isAdmin();
            var $item = $('#' + this.options.prefixItemId + group.id);
            var item_offset = $('.more-ctrl a', $item).offset();
            var contextualMenu = _contextual_menu2.default.instantiate({
                state: 'hidden',
                source: eventTarget,
                coordinates: {
                    x: x,
                    y: item_offset.top
                }
            });
            contextualMenu.start();
            var editItem = new _action2.default({
                id: 'js_group_browser_menu_edit',
                label: 'Edit group',
                initial_state: 'ready',
                action: function action(menu) {
                    _bus2.default.trigger('request_group_edition', { group: group });
                    menu.remove();
                }
            });
            contextualMenu.insertItem(editItem);
            if (isAdmin) {
                var deleteItem = new _action2.default({
                    id: 'js_group_browser_menu_remove',
                    label: 'Delete group',
                    initial_state: 'ready',
                    action: function action(menu) {
                        _bus2.default.trigger('request_group_deletion', { group: group });
                        menu.remove();
                    }
                });
                contextualMenu.insertItem(deleteItem);
            }
        },
        '{element} item_menu_clicked': function elementItem_menu_clicked(el, ev) {
            var group = ev.data.group;
            var srcEv = ev.data.srcEv;
            this.showContextualMenu(group, srcEv.pageX - 3, srcEv.pageY, srcEv.target);
        }
    });
    exports.default = PeopleGroupsListComponent;
});
/*app/view/template/component/user/groups_filter_sidebar_section.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/user/groups_filter_sidebar_section.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/user/groups_filter_sidebar_section.stache', [
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wsp_users_groups_menu',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-header',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'open node root group-header',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'row title',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'main-cell-wrapper',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'main-cell',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-trigger',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'All groups\') ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-content',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'em',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'hidden empty-content',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'em',
                false,
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'empty\') ',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'em',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wsp_users_groups_list',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                14
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                15
            ]
        },
        {
            'tokenType': 'done',
            'args': [16]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/user/groups_filter_sidebar_section*/
define('app/component/user/groups_filter_sidebar_section', [
    'exports',
    'passbolt-mad/component/component',
    'app/model/map/group',
    'app/component/group/people_groups_list',
    'app/view/template/component/user/groups_filter_sidebar_section.stache!'
], function (exports, _component, _group, _people_groups_list, _groups_filter_sidebar_section) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _group2 = _interopRequireDefault(_group);
    var _people_groups_list2 = _interopRequireDefault(_people_groups_list);
    var _groups_filter_sidebar_section2 = _interopRequireDefault(_groups_filter_sidebar_section);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var GroupsFilterSidebarSectionComponent = _component2.default.extend('passbolt.component.user.GroupsFilterSidebarSection', {
        defaults: {
            template: _groups_filter_sidebar_section2.default,
            selectedGroups: new _group2.default.List()
        }
    }, {
        afterStart: function afterStart() {
            var _this = this;
            var peopleGroupsList = new _people_groups_list2.default('#js_wsp_users_groups_list', { selectedGroups: this.options.selectedGroups });
            peopleGroupsList.state.on('empty', function (ev, empty) {
                return _this._onGroupListEmptyChange(empty);
            });
            peopleGroupsList.start();
        },
        _onGroupListEmptyChange: function _onGroupListEmptyChange(empty) {
            this.state.empty = empty;
        }
    });
    exports.default = GroupsFilterSidebarSectionComponent;
});
/*app/view/template/component/workspace/primary_sidebar.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/workspace/primary_sidebar.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/workspace/primary_sidebar.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'primary_sidebar',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'primary-sidebar',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                1
            ]
        },
        {
            'tokenType': 'done',
            'args': [1]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/workspace/primary_sidebar*/
define('app/component/workspace/primary_sidebar', [
    'exports',
    'passbolt-mad/component/component',
    'app/view/template/component/workspace/primary_sidebar.stache!'
], function (exports, _component, _primary_sidebar) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _primary_sidebar2 = _interopRequireDefault(_primary_sidebar);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PrimarySidebarComponent = _component2.default.extend('passbolt.component.workspace.PrimarySidebar', {
        defaults: {
            label: 'Sidebar Component',
            template: _primary_sidebar2.default
        }
    }, {});
    exports.default = PrimarySidebarComponent;
});
/*app/view/component/workspace/primary_sidebar_section*/
define('app/view/component/workspace/primary_sidebar_section', [
    'exports',
    'passbolt-mad/view/view'
], function (exports, _view) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _view2 = _interopRequireDefault(_view);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PrimarySidebarSectionView = _view2.default.extend('passbolt.view.component.PrimarySidebarSection', {}, {
        open: function open() {
            $('.accordion-content', this.element).slideDown(50);
            $(this.element).removeClass('closed');
        },
        close: function close() {
            $('.accordion-content', this.element).slideUp(50);
            $(this.element).addClass('closed');
        },
        '{element} a.accordion-trigger click': function elementAAccordionTriggerClick() {
            if ($(this.element).hasClass('closed')) {
                this.open();
            } else {
                this.close();
            }
        }
    });
    exports.default = PrimarySidebarSectionView;
});
/*app/component/workspace/primary_sidebar_section*/
define('app/component/workspace/primary_sidebar_section', [
    'exports',
    'passbolt-mad/component/component',
    'app/view/component/workspace/primary_sidebar_section'
], function (exports, _component, _primary_sidebar_section) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _primary_sidebar_section2 = _interopRequireDefault(_primary_sidebar_section);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PrimarySidebarSectionComponent = _component2.default.extend('passbolt.component.workspace.SecondarySidebarSection', {
        defaults: {
            label: 'Primary Sidebar Section Component',
            viewClass: _primary_sidebar_section2.default
        }
    }, {});
    exports.default = PrimarySidebarSectionComponent;
});
/*app/view/template/component/user/shortcuts_filter_sidebar_section.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/user/shortcuts_filter_sidebar_section.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/user/shortcuts_filter_sidebar_section.stache', [
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'clearfix',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                1
            ]
        },
        {
            'tokenType': 'done',
            'args': [2]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/user/shortcuts_filter_sidebar_section*/
define('app/component/user/shortcuts_filter_sidebar_section', [
    'exports',
    'passbolt-mad/model/map/action',
    'app/model/filter',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/control/bus',
    'passbolt-mad/component/menu',
    'app/component/workspace/primary_sidebar_section',
    'app/view/template/component/user/shortcuts_filter_sidebar_section.stache!'
], function (exports, _action, _filter, _i18n, _bus, _menu, _primary_sidebar_section, _shortcuts_filter_sidebar_section) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _filter2 = _interopRequireDefault(_filter);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _bus2 = _interopRequireDefault(_bus);
    var _menu2 = _interopRequireDefault(_menu);
    var _primary_sidebar_section2 = _interopRequireDefault(_primary_sidebar_section);
    var _shortcuts_filter_sidebar_section2 = _interopRequireDefault(_shortcuts_filter_sidebar_section);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ShortcutsFilterSidebarSectionComponent = _primary_sidebar_section2.default.extend('passbolt.component.user.ShortcutsFilterSidebarSection', {
        defaults: {
            allFilter: null,
            template: _shortcuts_filter_sidebar_section2.default
        }
    }, {
        afterStart: function afterStart() {
            this.options.menu = this._initShortcutsList();
            this._super();
        },
        _initShortcutsList: function _initShortcutsList() {
            var menu = new _menu2.default($('ul', this.element)[0]);
            menu.start();
            var allItem = new _action2.default({
                id: 'js_users_wsp_filter_all',
                label: __('All users'),
                filter: this.options.allFilter
            });
            menu.insertItem(allItem);
            menu.selectItem(allItem);
            var modifiedItem = new _action2.default({
                id: 'js_users_wsp_filter_recently_modified',
                label: __('Recently modified'),
                filter: new _filter2.default({
                    id: 'workspace_filter_modified',
                    type: 'modified',
                    label: __('Recently modified'),
                    order: ['User.modified DESC']
                })
            });
            menu.insertItem(modifiedItem);
            return menu;
        },
        '{element} item_selected': function elementItem_selected(el, ev) {
            var item = ev.data.item;
            if (item.enabled) {
                _bus2.default.trigger('filter_workspace', { filter: item.filter });
            }
        },
        '{mad.bus.element} filter_workspace': function madBusElementFilter_workspace(el, ev) {
            var filter = ev.data.filter;
            var menu = this.options.menu;
            menu.unselectAll();
            menu.options.items.forEach(function (item) {
                if (item.filter.id == filter.id) {
                    menu.selectItem(item);
                } else if (filter.id == 'search' && item.filter.id == 'default') {
                    menu.selectItem(item);
                }
            });
        }
    });
    exports.default = ShortcutsFilterSidebarSectionComponent;
});
/*app/view/template/component/user/primary_sidebar.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/user/primary_sidebar.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/user/primary_sidebar.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'navigation first shortcuts',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wsp_users_filter_shortcuts',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'navigation groups accordion',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wsp_users_groups',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                3
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/user/primary_sidebar*/
define('app/component/user/primary_sidebar', [
    'exports',
    'app/component/user/groups_filter_sidebar_section',
    'app/component/workspace/primary_sidebar',
    'app/component/user/shortcuts_filter_sidebar_section',
    'app/view/template/component/user/primary_sidebar.stache!'
], function (exports, _groups_filter_sidebar_section, _primary_sidebar, _shortcuts_filter_sidebar_section, _primary_sidebar3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _groups_filter_sidebar_section2 = _interopRequireDefault(_groups_filter_sidebar_section);
    var _primary_sidebar2 = _interopRequireDefault(_primary_sidebar);
    var _shortcuts_filter_sidebar_section2 = _interopRequireDefault(_shortcuts_filter_sidebar_section);
    var _primary_sidebar4 = _interopRequireDefault(_primary_sidebar3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PrimarySidebarComponent = _primary_sidebar2.default.extend('passbolt.component.user.PrimarySidebar', {
        defaults: {
            label: 'User Workspace Primary Sidebar',
            template: _primary_sidebar4.default,
            defaultFilter: null,
            selectedGroups: null
        }
    }, {
        afterStart: function afterStart() {
            this._initShortcutsFilterSection();
            this._initGroupsFilterSection();
            this._super();
        },
        _initShortcutsFilterSection: function _initShortcutsFilterSection() {
            var component = new _shortcuts_filter_sidebar_section2.default('#js_wsp_users_filter_shortcuts', { allFilter: this.options.defaultFilter });
            component.start();
        },
        _initGroupsFilterSection: function _initGroupsFilterSection() {
            var component = new _groups_filter_sidebar_section2.default('#js_wsp_users_groups', { selectedGroups: this.options.selectedGroups });
            component.start();
        }
    });
    exports.default = PrimarySidebarComponent;
});
/*passbolt-mad@2.10.0#model/state/toggleButtonState*/
define('passbolt-mad@2.10.0#model/state/toggleButtonState', [
    'exports',
    'passbolt-mad/model/state/componentState'
], function (exports, _componentState) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _componentState2 = _interopRequireDefault(_componentState);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ToggleButtonState = _componentState2.default.extend({
        selected: {
            type: 'boolean',
            default: false
        }
    });
    exports.default = ToggleButtonState;
});
/*passbolt-mad@2.10.0#component/toggle_button*/
define('passbolt-mad@2.10.0#component/toggle_button', [
    'exports',
    'passbolt-mad/component/button',
    'passbolt-mad/model/state/toggleButtonState'
], function (exports, _button, _toggleButtonState) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _button2 = _interopRequireDefault(_button);
    var _toggleButtonState2 = _interopRequireDefault(_toggleButtonState);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ToggleButton = _button2.default.extend('mad.component.ToggleButton', {
        defaults: {
            stateClass: _toggleButtonState2.default,
            selected: false
        }
    }, {
        init: function init(el, options) {
            var _this = this;
            this._super(el, options);
            this.state.on('selected', function (ev, selected) {
                return _this.onSelectedChange(selected);
            });
        },
        onSelectedChange: function onSelectedChange(selected) {
            if (selected) {
                $(this.element).addClass('selected');
            } else {
                $(this.element).removeClass('selected');
            }
        },
        updateWrapperElement: function updateWrapperElement() {
            this._super();
            if (this.state.selected) {
                this.view.addClass('selected');
            } else {
                this.view.removeClass('selected');
            }
        },
        '{element} click': function elementClick(el, ev) {
            this._super(el, ev);
            if (this.state.disabled) {
                return;
            }
            this.state.selected = !this.state.selected;
        }
    });
    exports.default = ToggleButton;
});
/*app/view/template/component/workspace/secondary_menu.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/workspace/secondary_menu.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/workspace/secondary_menu.stache', [
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wk_secondary_menu_view_sidebar_button',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button toggle',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-lg fa-info-circle',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visuallyhidden',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '<%= __(\'view sidebar\') %>',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                6
            ]
        },
        {
            'tokenType': 'done',
            'args': [7]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/workspace/secondary_menu*/
define('app/component/workspace/secondary_menu', [
    'exports',
    'passbolt-mad/component/component',
    'passbolt-mad/config/config',
    'passbolt-mad/control/bus',
    'passbolt-mad/component/toggle_button',
    'app/view/template/component/workspace/secondary_menu.stache!'
], function (exports, _component, _config, _bus, _toggle_button, _secondary_menu) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _config2 = _interopRequireDefault(_config);
    var _bus2 = _interopRequireDefault(_bus);
    var _toggle_button2 = _interopRequireDefault(_toggle_button);
    var _secondary_menu2 = _interopRequireDefault(_secondary_menu);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var WorkspaceSecondaryMenu = _component2.default.extend('passbolt.component.WorkspaceSecondaryMenu', {
        defaults: {
            label: 'Workspace Secondary Menu',
            template: _secondary_menu2.default,
            tag: 'ul'
        }
    }, {
        afterStart: function afterStart() {
            var _this = this;
            var showSidebar = _config2.default.read('ui.workspace.showSidebar');
            var viewSidebarButton = new _toggle_button2.default('#js_wk_secondary_menu_view_sidebar_button', { state: { selected: showSidebar } });
            viewSidebarButton.start();
            this.viewSidebarButton = viewSidebarButton;
            this.viewSidebarButton.state.on('selected', function (ev, selected) {
                return _this._onViewSidebarSelectedChange(selected);
            });
        },
        _onViewSidebarSelectedChange: function _onViewSidebarSelectedChange(showSidebar) {
            _config2.default.write('ui.workspace.showSidebar', showSidebar);
            _bus2.default.trigger('workspace_sidebar_state_change');
        },
        '{mad.bus.element} workspace_sidebar_state_change': function madBusElementWorkspace_sidebar_state_change() {
            this.viewSidebarButton.state.selected = _config2.default.read('ui.workspace.showSidebar');
        },
        '{viewSidebarButton.element} click': function viewSidebarButtonElementClick() {
            var showSidebar = !_config2.default.read('ui.workspace.showSidebar');
            _config2.default.write('ui.workspace.showSidebar', showSidebar);
            _bus2.default.trigger('workspace_sidebar_state_change');
        }
    });
    exports.default = WorkspaceSecondaryMenu;
});
/*app/model/map/user_delete*/
define('app/model/map/user_delete', [
    'exports',
    'passbolt-mad/model/map/map',
    'can-util/js/get/get',
    'app/model/map/group',
    'app/model/map/resource'
], function (exports, _map, _get, _group, _resource) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _map2 = _interopRequireDefault(_map);
    var _get2 = _interopRequireDefault(_get);
    var _group2 = _interopRequireDefault(_group);
    var _resource2 = _interopRequireDefault(_resource);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var UserDelete = _map2.default.extend('passbolt.model.UserDelete', {
        user_id: 'string',
        groups_to_delete: _group2.default.List,
        errors: {
            type: {
                groups: {
                    type: {
                        sole_manager: {
                            Type: _group2.default.List,
                            Value: _group2.default.List
                        }
                    }
                },
                resources: {
                    type: {
                        sole_owner: {
                            Type: _resource2.default.List,
                            Value: _resource2.default.List
                        },
                        sole_manager_of_group_sole_owner: {
                            Type: _resource2.default.List,
                            Value: _resource2.default.List
                        }
                    }
                }
            }
        },
        getGroupsToTransferManager: function getGroupsToTransferManager() {
            var _this = this;
            var groups = (0, _get2.default)(this, 'errors.groups.sole_manager') || [];
            groups.forEach(function (group) {
                group.groups_users = group.groups_users.filter(function (group_user) {
                    return group_user.user.id != _this.user_id;
                });
                group.groups_users = group.groups_users.sort(function (a, b) {
                    return a.user.profile.first_name < b.user.profile.first_name;
                });
            });
            return groups;
        },
        getResourcesToTransferOwner: function getResourcesToTransferOwner() {
            var resources = new _resource2.default.List();
            var resourcesSoleOwner = (0, _get2.default)(this, 'errors.resources.sole_owner') || [];
            var resourcesSoleManagerOfGroupSoleOwner = (0, _get2.default)(this, 'errors.resources.sole_manager_of_group_sole_owner') || [];
            var groupsToDelete = (0, _get2.default)(this, 'groups_to_delete') || [];
            var excludedOwners = [this.user_id];
            excludedOwners = excludedOwners.concat(groupsToDelete.reduce(function (carry, group) {
                return carry.concat(group.id);
            }, []));
            resources = resources.concat(resourcesSoleOwner);
            resources = resources.concat(resourcesSoleManagerOfGroupSoleOwner);
            resources = resources.sort(function (a, b) {
                return a.name > b.name;
            });
            resources.forEach(function (resource) {
                resource.permissions = resource.permissions.filter(function (permission) {
                    return excludedOwners.indexOf(permission.aro_foreign_key) == -1;
                });
            });
            return resources;
        }
    });
    exports.default = UserDelete;
});
/*app/view/template/form/user/delete_transfer_permissions.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/form/user/delete_transfer_permissions.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/form/user/delete_transfer_permissions.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form-content intro',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'strong',
                false,
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'strong',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'You are about to delete ',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'user.profile.fullName()',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '.',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'strong',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        This user is the owner of passwords or groups.\n        You need to transfer the ownership to other users to continue.\n    ',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'ownership-transfer scroll',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(groups.length)',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Groups',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'ownership-transfer-items',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#each(groups)',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                15
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                16
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input select required',
                16
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                16
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                17
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'for',
                17
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'transfer_group_manager_',
                17
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'id',
                17
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'for',
                17
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                17
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'name',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' (',
                17
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Group\')',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ') ',
                17
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'new manager\')',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ':',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                17
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'select',
                false,
                18
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                18
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'data[Group][',
                18
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'id',
                18
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ']',
                18
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                18
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                18
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'transfer_group_manager_',
                18
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'id',
                18
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                18
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                18
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fluid',
                18
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                18
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'select',
                false,
                18
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'select',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                18
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                19
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                20
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                21
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                22
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                23
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(resources.length)',
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                24
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                25
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Passwords',
                25
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                25
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                26
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                26
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'ownership-transfer-items',
                26
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                26
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                26
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#each(resources)',
                27
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                27
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                28
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                28
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                28
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                29
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                29
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input select required',
                29
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                29
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                29
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                29
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                30
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'for',
                30
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'transfer_resource_owner_',
                30
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'id',
                30
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'for',
                30
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                30
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'name',
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' (',
                30
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Password\'',
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ') ',
                30
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'new owner\')',
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ':',
                30
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                30
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'select',
                false,
                31
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                31
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'data[Resource][',
                31
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'id',
                31
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ']',
                31
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                31
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                31
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'transfer_resource_owner_',
                31
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'id',
                31
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                31
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                31
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fluid',
                31
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                31
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'select',
                false,
                31
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'select',
                31
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                31
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                32
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                32
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                33
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                33
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                34
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                34
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                35
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                35
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                36
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                36
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                37
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                37
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                39
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                39
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'submit-wrapper clearfix',
                39
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                39
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                39
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                39
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                40
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                40
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'submit',
                40
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                40
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                40
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button primary warning',
                40
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                40
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value',
                40
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'delete user\')',
                40
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value',
                40
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                40
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                40
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                41
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                41
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-dialog-cancel cancel',
                41
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                41
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                41
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'cancel\')',
                41
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                41
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                41
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                42
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                42
            ]
        },
        {
            'tokenType': 'done',
            'args': [43]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/form/user/delete_transfer_permission*/
define('app/form/user/delete_transfer_permission', [
    'exports',
    'passbolt-mad/form/element/dropdown',
    'passbolt-mad/form/form',
    'app/model/map/group_user',
    'can-util/js/get/get',
    'app/model/map/permission',
    'app/view/template/form/user/delete_transfer_permissions.stache!'
], function (exports, _dropdown, _form, _group_user, _get, _permission, _delete_transfer_permissions) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _dropdown2 = _interopRequireDefault(_dropdown);
    var _form2 = _interopRequireDefault(_form);
    var _group_user2 = _interopRequireDefault(_group_user);
    var _get2 = _interopRequireDefault(_get);
    var _permission2 = _interopRequireDefault(_permission);
    var _delete_transfer_permissions2 = _interopRequireDefault(_delete_transfer_permissions);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var DeleteTransferPermissionForm = _form2.default.extend('passbolt.form.user.DeleteTransferPermissionForm', {
        defaults: {
            template: _delete_transfer_permissions2.default,
            user: null,
            userDelete: {}
        }
    }, {
        init: function init(el, options) {
            this._super(el, options);
            this.user = this.options.user;
            var userDelete = this.options.userDelete;
            this.groups = userDelete.getGroupsToTransferManager();
            this.resources = userDelete.getResourcesToTransferOwner();
        },
        beforeRender: function beforeRender() {
            this.setViewData('resources', this.resources);
            this.setViewData('groups', this.groups);
            this.setViewData('user', this.user);
        },
        afterStart: function afterStart() {
            this._initGroupsTransferSection();
            this._initResourcesTransferSection();
        },
        _initGroupsTransferSection: function _initGroupsTransferSection() {
            var _this = this;
            this.groups.forEach(function (group) {
                var groupsUsers = new _group_user2.default.List(group.groups_users);
                groupsUsers.sortAlphabetically();
                var users = _this._prepareGroupsTransferUsersViewData(groupsUsers);
                var dropdownSelector = 'transfer_group_manager_' + group.id;
                var dropdown = new _dropdown2.default('#' + dropdownSelector, {
                    emptyValue: false,
                    validate: false,
                    modelReference: 'transfer.managers.' + group.id,
                    availableValues: users,
                    value: Object.keys(users)[0]
                });
                dropdown.start();
                _this.addElement(dropdown);
            });
        },
        _prepareGroupsTransferUsersViewData: function _prepareGroupsTransferUsersViewData(groupsUsers) {
            return groupsUsers.reduce(function (carry, groupUser) {
                carry[groupUser.id] = groupUser.user.profile.first_name + ' ' + groupUser.user.profile.last_name + ' (' + groupUser.user.username + ')';
                return carry;
            }, {});
        },
        _initResourcesTransferSection: function _initResourcesTransferSection() {
            var _this2 = this;
            this.resources.forEach(function (resource) {
                var permissions = new _permission2.default.List(resource.permissions);
                permissions.sortAlphabetically();
                var aros = _this2._prepareResourcesTransferArosViewData(permissions);
                var dropdownSelector = 'transfer_resource_owner_' + resource.id;
                var dropdown = new _dropdown2.default('#' + dropdownSelector, {
                    emptyValue: false,
                    validate: false,
                    modelReference: 'transfer.owners.' + resource.id,
                    availableValues: aros,
                    value: Object.keys(aros)[0]
                });
                dropdown.start();
                _this2.addElement(dropdown);
            });
        },
        _prepareResourcesTransferArosViewData: function _prepareResourcesTransferArosViewData(permissions) {
            return permissions.reduce(function (carry, permission) {
                var value = permission.id;
                var label = permission.user ? permission.user.profile.first_name + ' ' + permission.user.profile.last_name + ' (' + permission.user.username + ')' : permission.group.name + ' (Group)';
                carry[value] = label;
                return carry;
            }, {});
        },
        getData: function getData() {
            var data = this._super();
            var owners = (0, _get2.default)(data, 'transfer.owners') || {};
            var managers = (0, _get2.default)(data, 'transfer.managers') || {};
            var transfer = {
                owners: [],
                managers: []
            };
            for (var aco in owners) {
                transfer.owners.push({
                    aco_foreign_key: aco,
                    id: owners[aco]
                });
            }
            for (var groupId in managers) {
                transfer.managers.push({
                    group_id: groupId,
                    id: managers[groupId]
                });
            }
            return transfer;
        }
    });
    exports.default = DeleteTransferPermissionForm;
});
/*app/view/template/component/gpgkey/gpgkey_sidebar_section.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/gpgkey/gpgkey_sidebar_section.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/gpgkey/gpgkey_sidebar_section.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-header',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h4',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h4',
                false,
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-trigger',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Public Key\') ',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h4',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-content',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'keyid',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                7
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Key id\') ',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' gpgkey.key_id ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'type',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                11
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Type\') ',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                12
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' gpgkey.type ',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'created',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                15
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Created\') ',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                15
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                16
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                16
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                16
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' gpgkey.key_created ',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                17
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                18
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                18
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'expires',
                18
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                18
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                18
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                19
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Expires\') ',
                19
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                19
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                20
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' gpgkey.expires ',
                20
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                20
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                21
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                22
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                22
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'key',
                22
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                22
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                22
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                23
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                23
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                23
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Public key\') ',
                23
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                23
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                24
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                24
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                24
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                24
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                24
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                25
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                25
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button copy-public-key',
                25
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                25
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                25
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                26
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'copy',
                26
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                26
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                27
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                27
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                28
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                28
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                29
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                29
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                30
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                30
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'gpgkey',
                30
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                30
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                30
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'textarea',
                false,
                31
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                31
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'code',
                31
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                31
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'textarea',
                false,
                31
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' gpgkey.armored_key ',
                31
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'textarea',
                31
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                31
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                32
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                32
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                33
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                33
            ]
        },
        {
            'tokenType': 'done',
            'args': [34]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/gpgkey/gpgkey_sidebar_section*/
define('app/component/gpgkey/gpgkey_sidebar_section', [
    'exports',
    'app/component/workspace/secondary_sidebar_section',
    'app/view/template/component/gpgkey/gpgkey_sidebar_section.stache!'
], function (exports, _secondary_sidebar_section, _gpgkey_sidebar_section) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _secondary_sidebar_section2 = _interopRequireDefault(_secondary_sidebar_section);
    var _gpgkey_sidebar_section2 = _interopRequireDefault(_gpgkey_sidebar_section);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var GpgKeySidebarSectionComponent = _secondary_sidebar_section2.default.extend('passbolt.component.gpgkey.GpgKeySidebarSection', {
        defaults: {
            label: 'Sidebar Section Gpgkey Controller',
            template: _gpgkey_sidebar_section2.default,
            gpgkey: null
        }
    }, {
        beforeRender: function beforeRender() {
            this._super();
            var gpgkey = this.options.gpgkey;
            this.setViewData('gpgkey', gpgkey);
        }
    });
    exports.default = GpgKeySidebarSectionComponent;
});
/*app/view/template/component/user/information_sidebar_section.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/user/information_sidebar_section.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/user/information_sidebar_section.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-header',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h4',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h4',
                false,
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-trigger',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Information\') ',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h4',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-content',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'role',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                7
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Role\') ',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value capitalize',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' capitalize(user.role.name) ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modified',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                11
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Modified\') ',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                12
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' getTimeAgo(user.modified) ',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'status',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                15
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Status\') ',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                15
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                16
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                16
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                16
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(user.active)',
                16
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Activated\') ',
                16
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#else',
                16
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Activation pending\') ',
                16
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                18
            ]
        },
        {
            'tokenType': 'done',
            'args': [19]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/user/information_sidebar_section*/
define('app/component/user/information_sidebar_section', [
    'exports',
    'app/component/workspace/secondary_sidebar_section',
    'app/view/template/component/user/information_sidebar_section.stache!'
], function (exports, _secondary_sidebar_section, _information_sidebar_section) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _secondary_sidebar_section2 = _interopRequireDefault(_secondary_sidebar_section);
    var _information_sidebar_section2 = _interopRequireDefault(_information_sidebar_section);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var InformationSidebarSectionComponent = _secondary_sidebar_section2.default.extend('passbolt.component.user.InformationSidebarSection', {
        defaults: {
            label: 'Sidebar Section Information Controller',
            template: _information_sidebar_section2.default,
            user: null
        }
    }, {
        beforeRender: function beforeRender() {
            this._super();
            this.setViewData('user', this.options.user);
        }
    });
    exports.default = InformationSidebarSectionComponent;
});
/*app/view/template/component/group_user/user_groups_sidebar_section.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/group_user/user_groups_sidebar_section.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/group_user/user_groups_sidebar_section.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-header',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h4',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h4',
                false,
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-trigger',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Groups\') ',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h4',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-content',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'em',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'hidden empty-feedback',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'em',
                false,
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'The user is not a member of any group yet\') ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'em',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'shared-with',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_user_groups_list',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                8
            ]
        },
        {
            'tokenType': 'done',
            'args': [9]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/group_user/user_groups_list_item.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/group_user/user_groups_list_item.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/group_user/user_groups_list_item.stache', [
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.id ',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'permission usercard-col-2 ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' cssClasses.join(\' \') ',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'content-wrapper',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'content',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'name',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.name ',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'subinfo',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.role ',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'avatar',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'img',
                true,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'src',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'img/avatar/group_default.png',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'src',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'img',
                true,
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                11
            ]
        },
        {
            'tokenType': 'done',
            'args': [11]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/group_user/user_groups_sidebar_section*/
define('app/component/group_user/user_groups_sidebar_section', [
    'exports',
    'app/model/map/group',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/util/map/map',
    'app/component/workspace/secondary_sidebar_section',
    'passbolt-mad/component/tree',
    'passbolt-mad/view/component/tree',
    'app/view/template/component/group_user/user_groups_sidebar_section.stache!',
    'app/view/template/component/group_user/user_groups_list_item.stache!'
], function (exports, _group, _i18n, _map, _secondary_sidebar_section, _tree, _tree3, _user_groups_sidebar_section, _user_groups_list_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _group2 = _interopRequireDefault(_group);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _map2 = _interopRequireDefault(_map);
    var _secondary_sidebar_section2 = _interopRequireDefault(_secondary_sidebar_section);
    var _tree2 = _interopRequireDefault(_tree);
    var _tree4 = _interopRequireDefault(_tree3);
    var _user_groups_sidebar_section2 = _interopRequireDefault(_user_groups_sidebar_section);
    var _user_groups_list_item2 = _interopRequireDefault(_user_groups_list_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var UserGroupsSidebarSectionComponent = _secondary_sidebar_section2.default.extend('passbolt.component.group_user.UserGroupsSidebarSection', {
        defaults: {
            label: 'Sidebar Section User Groups Component',
            template: _user_groups_sidebar_section2.default,
            user: null,
            Group: _group2.default
        }
    }, {
        afterStart: function afterStart() {
            var _this = this;
            var tree = this._initTree();
            this._findUserGroups().then(function (groups) {
                if (!groups.length) {
                    _this.state.empty = true;
                }
                tree.load(groups);
                _this.state.loaded = true;
                tree.state.loaded = true;
            });
        },
        _initTree: function _initTree() {
            var map = this._getTreeMap();
            var tree = new _tree2.default('#js_user_groups_list', {
                loadedOnStart: false,
                cssClasses: [
                    'groups',
                    'shared-with'
                ],
                viewClass: _tree4.default,
                itemClass: _group2.default,
                itemTemplate: _user_groups_list_item2.default,
                prefixItemId: 'js_user_groups_list_',
                map: map
            });
            tree.start();
            return tree;
        },
        _getTreeMap: function _getTreeMap() {
            var _this2 = this;
            return new _map2.default({
                id: 'id',
                name: 'name',
                role: {
                    key: 'groups_users',
                    func: function func(value, map, item, mappedValues) {
                        return _this2._mapRoleField(value, map, item, mappedValues);
                    }
                }
            });
        },
        _mapRoleField: function _mapRoleField(value) {
            var _this3 = this;
            return value.reduce(function (carry, item) {
                if (item.user_id == _this3.options.user.id) {
                    carry = item.is_admin ? __('Group manager') : __('Member');
                }
                return carry;
            }, null);
        },
        _findUserGroups: function _findUserGroups() {
            var findOptions = {
                contain: { group_user: 1 },
                order: ['Group.name ASC'],
                filter: { 'has-users': this.options.user.id }
            };
            return _group2.default.findAll(findOptions);
        },
        '{Group} created': function GroupCreated() {
            this.refresh();
        },
        '{Group} updated': function GroupUpdated() {
            this.refresh();
        },
        '{Group} deleted': function GroupDeleted() {
            this.refresh();
        }
    });
    exports.default = UserGroupsSidebarSectionComponent;
});
/*app/view/template/component/user/user_secondary_sidebar.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/user/user_secondary_sidebar.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/user/user_secondary_sidebar.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'sidebar user',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'sidebar-header',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'img',
                true,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'src',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' user.profile.avatarPath(\'small\')',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'src',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'alt',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' user.profile.first_name ',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' user.profile.last_name ',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' picture',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'alt',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'img',
                true,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'name sidebar-header-title',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' user.profile.first_name ',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' ',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' user.profile.last_name ',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'username sidebar-header-subtitle',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' user.username ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_sidebar_close dialog-close',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-close',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visuallyhidden',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'close',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                12
            ]
        },
        {
            'tokenType': 'comment',
            'args': [
                ' User detailed information ',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'detailed-information accordion sidebar-section',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_user_details_information',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                15
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(user.active)',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                17
            ]
        },
        {
            'tokenType': 'comment',
            'args': [
                ' User groups list ',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                18
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'groups accordion sidebar-section',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_user_groups',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                19
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                19
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                19
            ]
        },
        {
            'tokenType': 'comment',
            'args': [
                ' User key information ',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                21
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                22
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                22
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'key-information accordion sidebar-section',
                22
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                22
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                22
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_user_gpgkey',
                22
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                22
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                22
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                22
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                23
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                25
            ]
        },
        {
            'tokenType': 'done',
            'args': [26]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/user/user_secondary_sidebar*/
define('app/component/user/user_secondary_sidebar', [
    'exports',
    'app/util/clipboard',
    'app/component/gpgkey/gpgkey_sidebar_section',
    'app/component/user/information_sidebar_section',
    'app/component/workspace/secondary_sidebar',
    'app/model/map/user',
    'app/component/group_user/user_groups_sidebar_section',
    'app/view/template/component/user/user_secondary_sidebar.stache!'
], function (exports, _clipboard, _gpgkey_sidebar_section, _information_sidebar_section, _secondary_sidebar, _user, _user_groups_sidebar_section, _user_secondary_sidebar) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _clipboard2 = _interopRequireDefault(_clipboard);
    var _gpgkey_sidebar_section2 = _interopRequireDefault(_gpgkey_sidebar_section);
    var _information_sidebar_section2 = _interopRequireDefault(_information_sidebar_section);
    var _secondary_sidebar2 = _interopRequireDefault(_secondary_sidebar);
    var _user2 = _interopRequireDefault(_user);
    var _user_groups_sidebar_section2 = _interopRequireDefault(_user_groups_sidebar_section);
    var _user_secondary_sidebar2 = _interopRequireDefault(_user_secondary_sidebar);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var UserSecondarySidebarComponent = _secondary_sidebar2.default.extend('passbolt.component.user.UserSecondarySidebar', {
        defaults: {
            label: 'User Details Controller',
            template: _user_secondary_sidebar2.default,
            user: null,
            User: _user2.default
        }
    }, {
        beforeRender: function beforeRender() {
            this._super();
            this.setViewData('user', this.options.user);
        },
        afterStart: function afterStart() {
            this._super();
            this._initInformationSection();
            this._initUserGroupsSection();
            this._initGpgkeySection();
        },
        _initInformationSection: function _initInformationSection() {
            var informationComponent = new _information_sidebar_section2.default('#js_user_details_information', { user: this.options.user });
            informationComponent.start();
        },
        _initUserGroupsSection: function _initUserGroupsSection() {
            if (this.options.user.active === undefined || this.options.user.active == '1') {
                var userGroups = new _user_groups_sidebar_section2.default('#js_user_groups', { user: this.options.user });
                userGroups.start();
            }
        },
        _initGpgkeySection: function _initGpgkeySection() {
            if (!this.options.user.gpgkey) {
                return;
            }
            var gpgkeyComponent = new _gpgkey_sidebar_section2.default('#js_user_gpgkey', {
                gpgkey: this.options.user.gpgkey,
                cssClasses: ['closed']
            });
            gpgkeyComponent.start();
        },
        '{User} updated': function UserUpdated(model, ev, user) {
            if (user.id == this.options.user.id) {
                this.options.user = user;
                this.refresh();
            }
        },
        '{element} a.copy-public-key click': function elementACopyPublicKeyClick() {
            var gpgkey = this.options.user.gpgkey;
            _clipboard2.default.copy(gpgkey.armored_key, 'public key');
        }
    });
    exports.default = UserSecondarySidebarComponent;
});
/*app/view/template/component/workspace/create_button.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/workspace/create_button.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/workspace/create_button.stache', [
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-plus-circle',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'create',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                2
            ]
        },
        {
            'tokenType': 'done',
            'args': [3]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/group/delete_confirm.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/group/delete_confirm.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/group/delete_confirm.stache', [
        {
            'tokenType': 'special',
            'args': [
                '#if(resources.length > 0)',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'This group is associated with %s passwords. All users in this group will lose access to these passwords.\', resources.length) ',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#else',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'This group is not associated with any password. You are good to go!\') ',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                5
            ]
        },
        {
            'tokenType': 'done',
            'args': [5]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/user/workspace.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/user/workspace.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/user/workspace.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_users_workspace',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_user_workspace_primary_sidebar',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'panel left',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'panel middle',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wsp_users_breadcrumb',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'breadcrumbs',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wsp_users_browser',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'tableview',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                13
            ]
        },
        {
            'tokenType': 'done',
            'args': [13]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/user/delete_confirm.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/user/delete_confirm.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/user/delete_confirm.stache', [
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Please confirm you really want to delete the user. After clicking ok, the user will be\') ',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'strong',
                false,
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'strong',
                false,
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'deleted permanently\') ',
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'strong',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '.\n',
                1
            ]
        },
        {
            'tokenType': 'done',
            'args': [2]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/user/workspace*/
define('app/component/user/workspace', [
    'exports',
    'passbolt-mad/model/map/action',
    'app/component/user/workspace_breadcrumb',
    'passbolt-mad/component/button_dropdown',
    'passbolt-mad/component/component',
    'passbolt-mad/helper/component',
    'passbolt-mad/config/config',
    'passbolt-mad/component/confirm',
    'passbolt-mad/component/dialog',
    'app/model/filter',
    'app/component/user/grid',
    'app/model/map/group',
    'app/model/map/group_delete',
    'app/form/group/delete_transfer_permission',
    'app/component/group/edit',
    'app/component/group/group_secondary_sidebar',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/control/bus',
    'app/component/user/workspace_primary_menu',
    'app/component/user/primary_sidebar',
    'can-route',
    'app/component/workspace/secondary_menu',
    'passbolt-mad/util/set/set',
    'app/model/map/user',
    'app/form/user/create',
    'app/model/map/user_delete',
    'app/form/user/delete_transfer_permission',
    'app/component/user/user_secondary_sidebar',
    'uuid/v4',
    'app/view/template/component/workspace/create_button.stache!',
    'app/view/template/component/group/delete_confirm.stache!',
    'app/view/template/component/user/workspace.stache!',
    'app/view/template/component/user/delete_confirm.stache!'
], function (exports, _action, _workspace_breadcrumb, _button_dropdown, _component, _component3, _config, _confirm, _dialog, _filter, _grid, _group, _group_delete, _delete_transfer_permission, _edit, _group_secondary_sidebar, _i18n, _bus, _workspace_primary_menu, _primary_sidebar, _canRoute, _secondary_menu, _set, _user4, _create, _user_delete, _delete_transfer_permission3, _user_secondary_sidebar, _v, _create_button, _delete_confirm, _workspace, _delete_confirm3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _workspace_breadcrumb2 = _interopRequireDefault(_workspace_breadcrumb);
    var _button_dropdown2 = _interopRequireDefault(_button_dropdown);
    var _component2 = _interopRequireDefault(_component);
    var _component4 = _interopRequireDefault(_component3);
    var _config2 = _interopRequireDefault(_config);
    var _confirm2 = _interopRequireDefault(_confirm);
    var _dialog2 = _interopRequireDefault(_dialog);
    var _filter2 = _interopRequireDefault(_filter);
    var _grid2 = _interopRequireDefault(_grid);
    var _group2 = _interopRequireDefault(_group);
    var _group_delete2 = _interopRequireDefault(_group_delete);
    var _delete_transfer_permission2 = _interopRequireDefault(_delete_transfer_permission);
    var _edit2 = _interopRequireDefault(_edit);
    var _group_secondary_sidebar2 = _interopRequireDefault(_group_secondary_sidebar);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _bus2 = _interopRequireDefault(_bus);
    var _workspace_primary_menu2 = _interopRequireDefault(_workspace_primary_menu);
    var _primary_sidebar2 = _interopRequireDefault(_primary_sidebar);
    var _canRoute2 = _interopRequireDefault(_canRoute);
    var _secondary_menu2 = _interopRequireDefault(_secondary_menu);
    var _set2 = _interopRequireDefault(_set);
    var _user5 = _interopRequireDefault(_user4);
    var _create2 = _interopRequireDefault(_create);
    var _user_delete2 = _interopRequireDefault(_user_delete);
    var _delete_transfer_permission4 = _interopRequireDefault(_delete_transfer_permission3);
    var _user_secondary_sidebar2 = _interopRequireDefault(_user_secondary_sidebar);
    var _v2 = _interopRequireDefault(_v);
    var _create_button2 = _interopRequireDefault(_create_button);
    var _delete_confirm2 = _interopRequireDefault(_delete_confirm);
    var _workspace2 = _interopRequireDefault(_workspace);
    var _delete_confirm4 = _interopRequireDefault(_delete_confirm3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var UserWorkspaceComponent = _component2.default.extend('passbolt.component.user.Workspace', {
        defaults: {
            name: 'user_workspace',
            template: _workspace2.default,
            selectedUsers: new _user5.default.List(),
            selectedGroups: new _group2.default.List(),
            filter: null,
            silentLoading: false,
            loadedOnStart: false,
            state: 'ready',
            filterSettings: null,
            User: _user5.default,
            Group: _group2.default
        },
        getDefaultFilterSettings: function getDefaultFilterSettings() {
            return new _filter2.default({
                id: 'default',
                type: 'default',
                label: __('All users'),
                order: ['Profile.first_name ASC']
            });
        }
    }, {
        init: function init(el, options) {
            this._super(el, options);
            this._firstLoad = true;
        },
        _dispatchRoute: function _dispatchRoute() {
            var _this = this;
            var action = _canRoute2.default.data.action;
            switch (action) {
            case 'view': {
                    var id = _canRoute2.default.data.id;
                    var user = this.options.grid.options.items.filter({ id: id }).pop();
                    if (user) {
                        this.options.selectedUsers.push(user);
                    } else {
                        _bus2.default.trigger('passbolt_notify', {
                            status: 'error',
                            title: 'app_users_view_error_not_found'
                        });
                    }
                    break;
                }
            case 'delete': {
                    var _id = _canRoute2.default.data.id;
                    var _user = this.options.grid.options.items.filter({ id: _id }).pop();
                    if (_user) {
                        this.deleteUser(_user);
                    } else {
                        _bus2.default.trigger('passbolt_notify', {
                            status: 'error',
                            title: 'app_users_delete_error_not_found'
                        });
                    }
                    break;
                }
            case 'groupDelete': {
                    var _id2 = _canRoute2.default.data.id;
                    _group2.default.findOne({ id: _id2 }).then(function (group) {
                        _this.deleteGroup(group);
                    });
                    break;
                }
            case 'groupEdit': {
                    var _id3 = _canRoute2.default.data.id;
                    _group2.default.findOne({ id: _id3 }).then(function (group) {
                        _this.openEditGroupDialog(group);
                    });
                    break;
                }
            case 'groupViewMembership':
            case 'groupView': {
                    var _id4 = _canRoute2.default.data.id;
                    _group2.default.findOne({ id: _id4 }).then(function (group) {
                        _this.options.selectedGroups.splice(0, _this.options.selectedGroups.length, group);
                    });
                    break;
                }
            case 'add': {
                    var username = _canRoute2.default.data.username;
                    var firstName = _canRoute2.default.data.first_name;
                    var lastName = _canRoute2.default.data.last_name;
                    var data = {
                        username: username,
                        profile: {
                            first_name: firstName,
                            last_name: lastName
                        }
                    };
                    var _user2 = new _user5.default(data);
                    this.openCreateUserDialog(_user2);
                    break;
                }
            case 'edit': {
                    var _id5 = _canRoute2.default.data.id;
                    var _user3 = this.options.grid.options.items.filter({ id: _id5 }).pop();
                    if (_user3) {
                        var _data = {};
                        var _firstName = _canRoute2.default.data.first_name;
                        var _lastName = _canRoute2.default.data.last_name;
                        if (_firstName) {
                            (0, _set2.default)(_data, 'profile.first_name', _firstName);
                        }
                        if (_lastName) {
                            (0, _set2.default)(_data, 'profile.last_name', _lastName);
                        }
                        _user3.assignDeep(_data);
                        this.openEditUserDialog(_user3);
                    } else {
                        _bus2.default.trigger('passbolt_notify', {
                            status: 'error',
                            title: 'app_users_edit_error_not_found'
                        });
                    }
                    break;
                }
            }
        },
        afterStart: function afterStart() {
            var primaryMenu = this._initPrimaryMenu();
            var secondaryMenu = this._initSecondaryMenu();
            var mainActionButton = this._initMainActionButton();
            var breadcrumb = this._initBreadcrumb();
            var primarySidebar = this._initPrimarySidebar();
            var grid = this._initGrid();
            primaryMenu.start();
            secondaryMenu.start();
            if (mainActionButton) {
                mainActionButton.start();
            }
            breadcrumb.start();
            primarySidebar.start();
            grid.start();
            var filter = null;
            if (this.options.filterSettings == undefined) {
                filter = this.constructor.getDefaultFilterSettings();
            } else {
                filter = this.options.filterSettings;
            }
            _bus2.default.trigger('filter_workspace', { filter: filter });
            this.on();
            this._super();
        },
        onLoadedChange: function onLoadedChange(loaded) {
            if (loaded) {
                if (this._firstLoad) {
                    this._firstLoad = false;
                    this._dispatchRoute();
                }
            }
            this._super(loaded);
        },
        _initPrimaryMenu: function _initPrimaryMenu() {
            var component = _component4.default.create($('#js_wsp_primary_menu_wrapper'), 'last', _workspace_primary_menu2.default, {
                selectedUsers: this.options.selectedUsers,
                selectedGroups: this.options.selectedGroups
            });
            this.addLoadedDependency(component);
            return component;
        },
        _initSecondaryMenu: function _initSecondaryMenu() {
            var component = _component4.default.create($('#js_wsp_secondary_menu_wrapper'), 'last', _secondary_menu2.default, { selectedItems: this.options.selectedUsers });
            this.addLoadedDependency(component);
            return component;
        },
        _initMainActionButton: function _initMainActionButton() {
            var role = _user5.default.getCurrent().role.name;
            if (role == 'admin') {
                var items = [
                    new _action2.default({
                        id: (0, _v2.default)(),
                        label: __('New user'),
                        cssClasses: ['create-user'],
                        action: function action() {
                            button.view.close();
                            _bus2.default.trigger('request_user_creation');
                        }
                    }),
                    new _action2.default({
                        id: (0, _v2.default)(),
                        label: __('New group'),
                        cssClasses: ['create-group'],
                        action: function action() {
                            button.view.close();
                            _bus2.default.trigger('request_group_creation');
                        }
                    })
                ];
                var button = _component4.default.create($('.main-action-wrapper'), 'last', _button_dropdown2.default, {
                    id: 'js_wsp_create_button',
                    template: _create_button2.default,
                    tag: 'a',
                    cssClasses: [
                        'button',
                        'primary'
                    ],
                    silentLoading: false,
                    items: items
                });
                this.options.mainButton = button;
                this.addLoadedDependency(button);
                return button;
            }
        },
        _initBreadcrumb: function _initBreadcrumb() {
            var component = new _workspace_breadcrumb2.default('#js_wsp_users_breadcrumb', {
                rootFilter: UserWorkspaceComponent.getDefaultFilterSettings(),
                silentLoading: false
            });
            this.breadcrumCtl = component;
            this.addLoadedDependency(component);
            return component;
        },
        _initPrimarySidebar: function _initPrimarySidebar() {
            var component = new _primary_sidebar2.default('#js_user_workspace_primary_sidebar', {
                defaultFilter: UserWorkspaceComponent.getDefaultFilterSettings(),
                selectedUsers: this.options.selectedUsers,
                selectedGroups: this.options.selectedGroups,
                silentLoading: false
            });
            this.options.primarySidebar = component;
            this.addLoadedDependency(component);
            return component;
        },
        _initGrid: function _initGrid() {
            var component = new _grid2.default('#js_wsp_users_browser', {
                selectedUsers: this.options.selectedUsers,
                silentLoading: false
            });
            this.options.grid = component;
            this.addLoadedDependency(component);
            return component;
        },
        openEditGroupDialog: function openEditGroupDialog(group) {
            var dialog = _dialog2.default.instantiate({
                label: group.isNew() ? __('Create group') : __('Edit group'),
                cssClasses: [
                    'edit-group-dialog',
                    'dialog-wrapper'
                ]
            }).start();
            dialog.add(_edit2.default, {
                id: 'js_edit_group',
                data: { Group: group },
                callbacks: {
                    saved: function saved() {
                        dialog.remove();
                    }
                }
            });
        },
        openCreateUserDialog: function openCreateUserDialog(user) {
            var _this2 = this;
            var self = this;
            var dialog = _dialog2.default.instantiate({
                label: __('Add User'),
                cssClasses: [
                    'create-user-dialog',
                    'dialog-wrapper'
                ]
            }).start();
            var form = dialog.add(_create2.default, {
                data: user,
                action: 'create',
                callbacks: {
                    submit: function submit(formData) {
                        var userToCreate = new _user5.default(formData['User']);
                        _this2.state.loaded = false;
                        self._saveUser(userToCreate, form, dialog).then(function () {
                            _this2._resetFilter();
                        });
                    }
                }
            });
            form.load(user);
        },
        openEditUserDialog: function openEditUserDialog(user) {
            var self = this;
            var dialog = _dialog2.default.instantiate({
                label: __('Edit User'),
                cssClasses: [
                    'edit-user-dialog',
                    'dialog-wrapper'
                ]
            }).start();
            var form = dialog.add(_create2.default, {
                data: user,
                action: 'edit',
                callbacks: {
                    submit: function submit(formData) {
                        var userToUpdate = new _user5.default(formData['User']);
                        self._saveUser(userToUpdate, form, dialog);
                    }
                }
            });
            form.load(user);
        },
        _saveUser: function _saveUser(user, form, dialog) {
            return user.save().then(function (savedUser) {
                user.assign(savedUser);
                dialog.remove();
            }, function (response) {
                form.showErrors({ User: response.body });
                return Promise.reject();
            });
        },
        deleteGroup: function deleteGroup(group) {
            var _this3 = this;
            group.deleteDryRun().then(function (resources) {
                _this3._deleteGroupConfirm(group, resources);
            }, function (response) {
                response.body.group_id = group.id;
                var groupDelete = new _group_delete2.default(response.body);
                _this3._openDeleteGroupTransferPermissionsDialog(group, groupDelete);
            });
        },
        _deleteGroupConfirm: function _deleteGroupConfirm(group, resources) {
            var dialog = _confirm2.default.instantiate({
                label: __('Are you sure ?'),
                subtitle: __('You are about to delete the group "%s"!', group.name),
                submitButton: {
                    label: __('delete group'),
                    cssClasses: ['warning']
                },
                content: _delete_confirm2.default,
                viewData: {
                    group: group,
                    resources: resources
                },
                action: function action() {
                    group.delete();
                }
            });
            dialog.start();
        },
        _openDeleteGroupTransferPermissionsDialog: function _openDeleteGroupTransferPermissionsDialog(group, groupDelete) {
            var dialog = _dialog2.default.instantiate({
                label: __('You cannot delete this group!'),
                cssClasses: [
                    'delete-group-dialog',
                    'dialog-wrapper'
                ]
            }).start();
            dialog.add(_delete_transfer_permission2.default, {
                id: 'js_delete_group',
                group: group,
                groupDelete: groupDelete,
                callbacks: {
                    submit: function submit(formData) {
                        group.delete(formData);
                        dialog.remove();
                    }
                }
            });
        },
        deleteUser: function deleteUser(user) {
            var _this4 = this;
            user.deleteDryRun().then(function () {
                _this4._deleteUserConfirm(user);
            }).then(null, function (response) {
                if (response.body) {
                    response.body.user_id = user.id;
                    var userDelete = new _user_delete2.default(response.body);
                    _this4._openDeleteUserTransferPermissionsDialog(user, userDelete);
                }
            });
        },
        _deleteUserConfirm: function _deleteUserConfirm(user) {
            _confirm2.default.instantiate({
                label: __('Do you really want to delete?'),
                content: _delete_confirm4.default,
                submitButton: {
                    label: __('delete user'),
                    cssClasses: ['warning']
                },
                action: function action() {
                    return user.delete();
                }
            }).start();
        },
        _openDeleteUserTransferPermissionsDialog: function _openDeleteUserTransferPermissionsDialog(user, userDelete) {
            var dialog = _dialog2.default.instantiate({
                label: __('You cannot delete this user!'),
                cssClasses: [
                    'delete-user-dialog',
                    'dialog-wrapper'
                ]
            }).start();
            dialog.add(_delete_transfer_permission4.default, {
                id: 'js_delete_user',
                user: user,
                userDelete: userDelete,
                callbacks: {
                    submit: function submit(formData) {
                        user.delete(formData);
                        dialog.remove();
                    }
                }
            });
        },
        _resetFilter: function _resetFilter() {
            var filter = UserWorkspaceComponent.getDefaultFilterSettings();
            filter.forceReload = true;
            _bus2.default.trigger('filter_workspace', { filter: filter });
        },
        _initUserSecondarySidebar: function _initUserSecondarySidebar() {
            var showSidebar = _config2.default.read('ui.workspace.showSidebar');
            if (!showSidebar) {
                return;
            }
            this._destroyUserSecondarySidebar();
            this._destroyGroupSecondarySidebar();
            var user = this.options.selectedUsers[0];
            var state = _config2.default.read('ui.workspace.showSidebar') ? 'ready' : 'hidden';
            var options = {
                id: 'js_user_details',
                user: user,
                silentLoading: false,
                cssClasses: [
                    'panel',
                    'aside',
                    'js_wsp_users_sidebar_second'
                ],
                state: state
            };
            var component = _component4.default.create(this.element, 'last', _user_secondary_sidebar2.default, options);
            component.start();
            this.options.userSecondarySidebar = component;
        },
        _initGroupSecondarySidebar: function _initGroupSecondarySidebar() {
            var showSidebar = _config2.default.read('ui.workspace.showSidebar');
            if (!showSidebar) {
                return;
            }
            this._destroyUserSecondarySidebar();
            this._destroyGroupSecondarySidebar();
            var group = this.options.selectedGroups[0];
            var state = _config2.default.read('ui.workspace.showSidebar') ? 'ready' : 'hidden';
            var options = {
                id: 'js_group_details',
                group: group,
                silentLoading: false,
                cssClasses: [
                    'panel',
                    'aside',
                    'js_wsp_groups_sidebar_second'
                ],
                state: state
            };
            var component = _component4.default.create(this.element, 'last', _group_secondary_sidebar2.default, options);
            component.start();
            this.options.groupSecondarySidebar = component;
        },
        _destroyUserSecondarySidebar: function _destroyUserSecondarySidebar() {
            if (this.options.userSecondarySidebar) {
                this.options.userSecondarySidebar.destroyAndRemove();
                this.options.userSecondarySidebar = null;
            }
        },
        _destroyGroupSecondarySidebar: function _destroyGroupSecondarySidebar() {
            if (this.options.groupSecondarySidebar) {
                this.options.groupSecondarySidebar.destroyAndRemove();
                this.options.groupSecondarySidebar = null;
            }
        },
        '{selectedUsers} add': function selectedUsersAdd() {
            this._initUserSecondarySidebar();
        },
        '{selectedUsers} remove': function selectedUsersRemove() {
            this._destroyUserSecondarySidebar();
        },
        '{selectedGroups} add': function selectedGroupsAdd() {
            this._initGroupSecondarySidebar();
        },
        '{selectedGroups} remove': function selectedGroupsRemove() {
            this._destroyGroupSecondarySidebar();
        },
        '{User} updated': function UserUpdated(model, ev, user) {
            var userSelectedIndex = this.options.selectedUsers.indexOf(user);
            if (userSelectedIndex != -1) {
                this.options.selectedUsers[userSelectedIndex].assign(user);
            }
        },
        '{User} destroyed': function UserDestroyed(model, event, user) {
            var selectedUsers = this.options.selectedUsers;
            selectedUsers.remove(user);
        },
        '{Group} destroyed': function GroupDestroyed(el, ev, group) {
            var selectedGroups = this.options.selectedGroups;
            if (selectedGroups.indexOf({ id: group.id }) != -1) {
                selectedGroups.remove(group);
                this._resetFilter();
            }
        },
        '{mad.bus.element} filter_workspace': function madBusElementFilter_workspace(el, ev) {
            var filter = ev.data.filter;
            if (!filter.rules['has-groups']) {
                this.options.selectedGroups.splice(0, this.options.selectedGroups.length);
            }
            this.options.selectedUsers.splice(0, this.options.selectedUsers.length);
            this.breadcrumCtl.load(filter);
        },
        '{mad.bus.element} request_group_creation': function madBusElementRequest_group_creation() {
            var group = new _group2.default({});
            this.openEditGroupDialog(group);
        },
        '{mad.bus.element} request_group_edition': function madBusElementRequest_group_edition(el, ev) {
            var group = ev.data.group;
            this.openEditGroupDialog(group);
        },
        '{mad.bus.element} request_group_deletion': function madBusElementRequest_group_deletion(el, ev) {
            var group = ev.data.group;
            this.deleteGroup(group);
        },
        '{mad.bus.element} request_user_creation': function madBusElementRequest_user_creation() {
            var user = new _user5.default({});
            this.openCreateUserDialog(user);
        },
        '{mad.bus.element} request_user_edition': function madBusElementRequest_user_edition(el, ev) {
            var user = ev.data.user;
            this.openEditUserDialog(user);
        },
        '{mad.bus.element} request_user_deletion': function madBusElementRequest_user_deletion(el, ev) {
            var user = ev.data.user;
            this.deleteUser(user);
        },
        '{mad.bus.element} workspace_sidebar_state_change': function madBusElementWorkspace_sidebar_state_change() {
            var user = this.options.selectedUsers[0];
            var group = this.options.selectedGroups[0];
            if (user) {
                this._initUserSecondarySidebar();
            } else if (group) {
                this._initGroupSecondarySidebar();
            }
        }
    });
    exports.default = UserWorkspaceComponent;
});
/*app/view/template/component/navigation/filter.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/navigation/filter.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/navigation/filter.stache', [
        {
            'tokenType': 'start',
            'args': [
                'form',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_app_filter_form',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'search',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'form',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input search required',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'for',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_app_filter_keywords',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'for',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' Search',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_app_filter_keywords',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'maxlength',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '50',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'maxlength',
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'search',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'search',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'button',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_app_filter_button',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'search',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'button',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-search',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text visuallyhidden',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'search',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'button',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'form',
                10
            ]
        },
        {
            'tokenType': 'done',
            'args': [10]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/navigation/filter*/
define('app/component/navigation/filter', [
    'exports',
    'passbolt-mad/component/button',
    'passbolt-mad/component/component',
    'app/view/component/navigation/filter',
    'passbolt-mad/form/form',
    'can-util/js/get/get',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/control/bus',
    'app/component/settings/workspace',
    'passbolt-mad/form/element/textbox',
    'app/component/user/workspace',
    'app/view/template/component/navigation/filter.stache!'
], function (exports, _button, _component, _filter, _form, _get, _i18n, _bus, _workspace, _textbox, _workspace3, _filter3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _button2 = _interopRequireDefault(_button);
    var _component2 = _interopRequireDefault(_component);
    var _filter2 = _interopRequireDefault(_filter);
    var _form2 = _interopRequireDefault(_form);
    var _get2 = _interopRequireDefault(_get);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _bus2 = _interopRequireDefault(_bus);
    var _workspace2 = _interopRequireDefault(_workspace);
    var _textbox2 = _interopRequireDefault(_textbox);
    var _workspace4 = _interopRequireDefault(_workspace3);
    var _filter4 = _interopRequireDefault(_filter3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var FilterComponent = _component2.default.extend('passbolt.component.navigation.Filter', {
        defaults: {
            template: _filter4.default,
            viewClass: _filter2.default
        }
    }, {
        workspace: null,
        afterStart: function afterStart() {
            this._initForm();
            this.on();
        },
        reset: function reset() {
            this.options.keywordsTextbox.setValue('');
        },
        _initForm: function _initForm() {
            var form = new _form2.default('#js_app_filter_form', {});
            form.start();
            this.options.filterForm = form;
            var keywordsTextbox = form.addElement(new _textbox2.default('#js_app_filter_keywords', {
                onChangeTimeout: 200,
                modelReference: 'passbolt.model.Filter.keywords'
            }));
            keywordsTextbox.start();
            this.options.keywordsTextbox = keywordsTextbox;
            var searchButton = new _button2.default('#js_app_filter_button');
            searchButton.start();
            this.options.searchButton = searchButton;
        },
        _updateFilter: function _updateFilter(keywords) {
            if (this.options.workspace instanceof _workspace2.default) {
                var settingsWorkspaceFilter = _workspace4.default.getDefaultFilterSettings();
                settingsWorkspaceFilter.id = 'search';
                settingsWorkspaceFilter.type = 'search';
                settingsWorkspaceFilter.setRule('keywords', keywords);
                var workspace = 'user';
                var options = { filterSettings: settingsWorkspaceFilter };
                _bus2.default.trigger('request_workspace', {
                    workspace: workspace,
                    options: options
                });
            } else {
                var workspaceFilter = this.options.workspace.constructor.getDefaultFilterSettings();
                if (keywords != '') {
                    workspaceFilter.id = 'search';
                    workspaceFilter.type = 'search';
                    workspaceFilter.setRule('keywords', keywords);
                }
                _bus2.default.trigger('filter_workspace', { filter: workspaceFilter });
            }
        },
        enable: function enable() {
            this.options.keywordsTextbox.state.disabled = false;
            this.options.searchButton.state.disabled = false;
        },
        disable: function disable() {
            this.options.keywordsTextbox.state.disabled = true;
            this.options.searchButton.state.disabled = true;
        },
        _passwordsWorkspaceEnabled: function _passwordsWorkspaceEnabled() {
            var placeholder = __('search passwords');
            $(this.options.keywordsTextbox.element).attr('placeholder', placeholder);
            this.enable();
        },
        _usersWorkspaceEnabled: function _usersWorkspaceEnabled() {
            var placeholder = __('search users');
            $(this.options.keywordsTextbox.element).attr('placeholder', placeholder);
            this.enable();
        },
        _settingsWorkspaceEnabled: function _settingsWorkspaceEnabled() {
            this.reset();
            var placeholder = __('search users');
            $(this.options.keywordsTextbox.element).attr('placeholder', placeholder);
            this.enable();
        },
        _administrationWorkspaceEnabled: function _administrationWorkspaceEnabled() {
            this.reset();
            var placeholder = '';
            $(this.options.keywordsTextbox.element).attr('placeholder', placeholder);
        },
        _workspaceEnabledHandler: function _workspaceEnabledHandler(workspace) {
            this.disable();
            switch (workspace.options.name) {
            case 'password_workspace':
                this._passwordsWorkspaceEnabled();
                break;
            case 'settings_workspace':
                this._settingsWorkspaceEnabled();
                break;
            case 'user_workspace':
                this._usersWorkspaceEnabled();
                break;
            case 'administration_workspace':
                this._administrationWorkspaceEnabled();
                break;
            }
        },
        '{keywordsTextbox.element} changed': function keywordsTextboxElementChanged() {
            var formData = this.options.filterForm.getData();
            var keywords = (0, _get2.default)(formData, 'passbolt.model.Filter.keywords');
            this._updateFilter(keywords);
        },
        '{mad.bus.element} workspace_enabled': function madBusElementWorkspace_enabled(el, ev) {
            var workspace = ev.data.workspace;
            this.options.workspace = workspace;
            this._workspaceEnabledHandler(workspace);
        },
        '{mad.bus.element} filter_workspace': function madBusElementFilter_workspace(el, ev) {
            var filter = ev.data.filter;
            var keywords = filter.getRule('keywords');
            var formData = this.options.filterForm.getData();
            var previousKeywords = (0, _get2.default)(formData, 'passbolt.model.Filter.keywords');
            if (keywords != previousKeywords) {
                this.options.keywordsTextbox.setValue(keywords);
            }
        }
    });
    exports.default = FilterComponent;
});
/*app/model/state/loadingState*/
define('app/model/state/loadingState', [
    'exports',
    'passbolt-mad/model/state/componentState'
], function (exports, _componentState) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _componentState2 = _interopRequireDefault(_componentState);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var LoadingState = _componentState2.default.extend({
        loadingProcesses: {
            type: 'integer',
            default: 0
        }
    });
    exports.default = LoadingState;
});
/*app/component/footer/loading_bar*/
define('app/component/footer/loading_bar', [
    'exports',
    'passbolt-mad/net/ajax',
    'passbolt-mad/component/component',
    'app/model/state/loadingState'
], function (exports, _ajax, _component, _loadingState) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _component2 = _interopRequireDefault(_component);
    var _loadingState2 = _interopRequireDefault(_loadingState);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var LoadingBarComponent = _component2.default.extend('passbolt.component.footer.LoadingBar', {
        defaults: {
            label: 'Loading Bar Component',
            stateClass: _loadingState2.default,
            components: _component2.default._components,
            requests: _ajax2.default._requests
        }
    }, {
        init: function init(el, options) {
            this._super(el, options);
            this._maxProcesses = 0;
            this._initialized = false;
            this._progressing = false;
            this._completing = false;
            this._progressedSpace = 100;
            this._scheduledProgress = null;
            this._initListeners();
        },
        _initListeners: function _initListeners() {
            var _this = this;
            _component2.default._components.on('add', function (ev, components) {
                return _this._listenComponentInitialized(components);
            });
            _ajax2.default._requests.on('add', function (ev, requests) {
                return _this._listenRequestExecuted(requests);
            });
            _ajax2.default._requests.on('remove', function (ev, requests) {
                return _this._listenRequestCompleted(requests);
            });
            this.state.on('loadingProcesses', function () {
                return _this._update();
            });
        },
        _listenComponentInitialized: function _listenComponentInitialized(components) {
            var _this2 = this;
            components.forEach(function (component) {
                if (!component.options.silentLoading) {
                    if (!component.state.loaded && !component.state.destroyed) {
                        _this2.state.loadingProcesses++;
                    }
                    _this2._initComponentListeners(component);
                }
            });
        },
        _listenRequestExecuted: function _listenRequestExecuted(requests) {
            var _this3 = this;
            requests.forEach(function (request) {
                if (!request.silentLoading) {
                    _this3.state.loadingProcesses++;
                }
            });
        },
        _listenRequestCompleted: function _listenRequestCompleted(requests) {
            var _this4 = this;
            requests.forEach(function (request) {
                if (!request.silentLoading) {
                    _this4.state.loadingProcesses--;
                }
            });
        },
        _initComponentListeners: function _initComponentListeners(component) {
            var _this5 = this;
            component.state.on('loaded', function (ev, loaded) {
                return _this5._listenComponentLoadedChanges(component, loaded);
            });
            component.state.on('destroyed', function (ev, loaded) {
                return _this5._listenComponentDestroyedChanges(component, loaded);
            });
        },
        _listenComponentLoadedChanges: function _listenComponentLoadedChanges(component, loaded) {
            if (loaded) {
                this.state.loadingProcesses--;
            } else {
                this.state.loadingProcesses++;
            }
        },
        _listenComponentDestroyedChanges: function _listenComponentDestroyedChanges(component, destroyed) {
            if (destroyed) {
                this.state.loadingProcesses--;
            }
        },
        _animateBar: function _animateBar(size, duration) {
            var _this6 = this;
            duration = duration || 400;
            var width = size + '%';
            var animateOptions = {
                width: width,
                duration: duration
            };
            return new Promise(function (resolve) {
                $('.progress-bar span', _this6.element).animate(animateOptions, resolve);
            });
        },
        _update: function _update() {
            var _this7 = this;
            if (this._progressing) {
                if (this._scheduledProgress != null) {
                    clearTimeout(this._scheduledProgress);
                }
                this._scheduledProgress = setTimeout(function () {
                    return _this7._update();
                }, 100);
                return;
            }
            this._progressing = true;
            if (!this._initialized) {
                if (this.state.loadingProcesses <= 0) {
                    this.state.loadingProcesses = 0;
                    this._progressing = false;
                    return;
                }
                this._initProgress();
            } else if (this.state.loadingProcesses <= 0) {
                this._completeProgress();
            } else {
                this._updateProgress();
            }
        },
        _initProgress: function _initProgress() {
            var _this8 = this;
            this._animateBar(15, 0).then(function () {
                _this8._initialized = true;
                _this8._progressing = false;
            });
        },
        _completeProgress: function _completeProgress() {
            var _this9 = this;
            if (this._completing) {
                return;
            }
            this._completing = true;
            this._animateBar(100, 100).then(function () {
                $('.progress-bar span', _this9.element).width(0);
                _this9._progressedSpace = 100;
                _this9._maxProcesses = 0;
                _this9.state.loadingProcesses = 0;
                _this9._completing = false;
                _this9._progressing = false;
                _this9._initialized = false;
            });
        },
        _updateProgress: function _updateProgress() {
            var _this10 = this;
            this._maxProcesses = Math.max(this._maxProcesses, this.state.loadingProcesses);
            var procSpace = 100 / this._maxProcesses * 1 / 2;
            var spaceLeft = (this._maxProcesses - (this._maxProcesses - this.state.loadingProcesses)) * procSpace;
            if (spaceLeft <= this._progressedSpace) {
                this._progressedSpace = spaceLeft;
            }
            this._animateBar(100 - this._progressedSpace, 100).then(function () {
                return _this10._progressing = false;
            });
        }
    });
    exports.default = LoadingBarComponent;
});
/*app/component/navigation/left*/
define('app/component/navigation/left', [
    'exports',
    'passbolt-mad/model/map/action',
    'passbolt-mad/config/config',
    'can-dom-data',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/component/menu',
    'can-route',
    'can-string',
    'app/model/map/user'
], function (exports, _action, _config, _canDomData, _i18n, _menu, _canRoute, _canString, _user) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _config2 = _interopRequireDefault(_config);
    var _canDomData2 = _interopRequireDefault(_canDomData);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _menu2 = _interopRequireDefault(_menu);
    var _canRoute2 = _interopRequireDefault(_canRoute);
    var _canString2 = _interopRequireDefault(_canString);
    var _user2 = _interopRequireDefault(_user);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var NavigationLeft = _menu2.default.extend('passbolt.component.AppNavigationLeft', { defaults: { selected: null } }, {
        init: function init(el, options) {
            this._initRouteListener();
            return this._super(el, options);
        },
        _initRouteListener: function _initRouteListener() {
            var _this = this;
            _canRoute2.default.data.on('controller', function () {
                _this._dispatchRoute();
            });
        },
        afterStart: function afterStart() {
            this._initMenu();
            this._dispatchRoute();
            this._super();
        },
        _initMenu: function _initMenu() {
            var _this2 = this;
            var passwordsItem = new _action2.default({
                id: 'js_app_nav_left_password_wsp_link',
                label: __('passwords'),
                cssClasses: ['password'],
                action: function action() {
                    return _this2._goToPasswordWorkspace();
                }
            });
            this.insertItem(passwordsItem);
            var usersItem = new _action2.default({
                id: 'js_app_nav_left_user_wsp_link',
                label: __('users'),
                cssClasses: ['user'],
                action: function action() {
                    return _this2._goToUserWorkspace();
                }
            });
            this.insertItem(usersItem);
            if (_user2.default.getCurrent().isAdmin()) {
                var plugins = _config2.default.read('server.passbolt.plugins');
                if (plugins.directorySync || plugins.multiFactorAuthentication) {
                    var _helpItem = new _action2.default({
                        id: 'js_app_nav_left_administration_link',
                        label: __('administration'),
                        cssClasses: ['administration'],
                        action: function action() {
                            return _this2._goToAdministrationWorkspace();
                        }
                    });
                    this.insertItem(_helpItem);
                }
            }
            var helpItem = new _action2.default({
                id: 'js_app_nav_left_help_link',
                label: __('help'),
                cssClasses: ['help'],
                action: function action() {
                    return _this2._goHelp();
                }
            });
            this.insertItem(helpItem);
        },
        _goToPasswordWorkspace: function _goToPasswordWorkspace() {
            var controller = 'Password';
            var action = 'index';
            _canRoute2.default.data.update({
                controller: controller,
                action: action
            });
        },
        _goToUserWorkspace: function _goToUserWorkspace() {
            var controller = 'User';
            var action = 'index';
            _canRoute2.default.data.update({
                controller: controller,
                action: action
            });
        },
        _goToAdministrationWorkspace: function _goToAdministrationWorkspace() {
            var controller = 'Administration';
            var action = 'mfa';
            _canRoute2.default.data.update({
                controller: controller,
                action: action
            });
        },
        _dispatchRoute: function _dispatchRoute() {
            var controller = _canRoute2.default.data.controller;
            var workspace = _canString2.default.underscore(controller);
            if (workspace == 'settings') {
                workspace = 'user';
            }
            if (this.options.selected != workspace) {
                var li = $('li.' + workspace);
                var itemClass = this.getItemClass();
                if (itemClass) {
                    var data = _canDomData2.default.get(li[0], itemClass.shortName);
                    if (typeof data != 'undefined') {
                        this.selectItem(data);
                    }
                }
            }
        },
        _goHelp: function _goHelp() {
            var helpWindow = window.open();
            helpWindow.opener = null;
            helpWindow.location = 'https://help.passbolt.com';
        }
    });
    exports.default = NavigationLeft;
});
/*app/model/map/notification*/
define('app/model/map/notification', [
    'exports',
    'passbolt-mad/model/map/map'
], function (exports, _map) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _map2 = _interopRequireDefault(_map);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Notification = _map2.default.extend('passbolt.model.Notification', {
        status: 'string',
        title: 'string'
    });
    _map2.default.setReference('Notification', Notification);
    exports.default = Notification;
});
/*app/view/component/footer/notification*/
define('app/view/component/footer/notification', [
    'exports',
    'passbolt-mad/config/config',
    'passbolt-mad/view/view'
], function (exports, _config, _view) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _config2 = _interopRequireDefault(_config);
    var _view2 = _interopRequireDefault(_view);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var NotificationView = _view2.default.extend('passbolt.view.component.Notification', {
        defaults: {
            timeout: 2500,
            notifications: [],
            timeoutProcess: null,
            pause: false
        }
    }, {
        init: function init(elt, opts) {
            var timeoutConf = _config2.default.read('notification.timeout');
            if (typeof timeoutConf != 'undefined') {
                this.options.timeout = timeoutConf;
            }
            this._super(elt, opts);
        },
        load: function load(notification) {
            this.notifications.push(notification);
        },
        displayNext: function displayNext() {
            var _this = this;
            var notifications = this.getController().options.notifications;
            if (notifications.length) {
                this.getController().refresh();
            } else {
                $('.message', this.element).removeClass('fadeInUp').addClass('fadeOutUp');
                this.getController().state.hiddening = true;
                setTimeout(function () {
                    if (_this.getController().state.hiddening) {
                        _this.getController().state.hidden = true;
                    }
                }, 500);
            }
        },
        prepareNextDisplay: function prepareNextDisplay() {
            var _this2 = this;
            this.options.timeoutProcess = setTimeout(function () {
                _this2.displayNext();
            }, this.options.timeout);
        },
        render: function render() {
            this.options.pause = false;
            var notifications = this.getController().options.notifications;
            var notification = notifications.shift();
            this.getController().setViewData(notification);
            this.prepareNextDisplay();
            $('.message', this.element).removeClass('fadeOutUp').addClass('fadeInUp');
            return this._super();
        },
        '{element} mousedown': function elementMousedown() {
            this.options.pause = true;
            clearTimeout(this.options.timeoutProcess);
        },
        '{element} mouseup': function elementMouseup() {
            var selection = window.getSelection().toString();
            if (selection === '') {
                this.displayNext();
            }
        },
        '{window} click': function windowClick(el, ev) {
            if (this.options.pause && !$(ev.target).parents('#js_app_notificator').length) {
                this.prepareNextDisplay();
            }
        }
    });
    exports.default = NotificationView;
});
/*app/view/template/component/footer/notification.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/footer/notification.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/footer/notification.stache', [
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message animated fadeInUp ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' title ',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' status ',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'notification_',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' id ',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'strong',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'strong',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' status ',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'strong',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' message ',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                4
            ]
        },
        {
            'tokenType': 'done',
            'args': [5]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/footer/notification*/
define('app/component/footer/notification', [
    'exports',
    'passbolt-mad/component/component',
    'passbolt-mad/config/config',
    'can-util/js/get/get',
    'app/model/map/notification',
    'app/view/component/footer/notification',
    'uuid/v4',
    'app/view/template/component/footer/notification.stache!'
], function (exports, _component, _config, _get, _notification2, _notification4, _v, _notification6) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _config2 = _interopRequireDefault(_config);
    var _get2 = _interopRequireDefault(_get);
    var _notification3 = _interopRequireDefault(_notification2);
    var _notification5 = _interopRequireDefault(_notification4);
    var _v2 = _interopRequireDefault(_v);
    var _notification7 = _interopRequireDefault(_notification6);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var NotificationComponent = _component2.default.extend('passbolt.component.footer.Notification', {
        defaults: {
            label: 'Notification Component',
            viewClass: _notification5.default,
            state: { hidden: true },
            notifications: [],
            template: _notification7.default
        }
    }, {
        _readSettings: function _readSettings(notification) {
            var notifSettings = _config2.default.read('notification.messages.' + notification.title);
            if (notifSettings == undefined) {
                if (notification.status == 'error') {
                    return {
                        msg: notification.data.header.message,
                        severity: 'error'
                    };
                }
                return null;
            }
            return notifSettings;
        },
        _getNotificationSettings: function _getNotificationSettings(notification) {
            var notifSettings = this._readSettings(notification);
            if (notifSettings == null) {
                return null;
            }
            if ((0, _get2.default)(notifSettings, 'severity') == undefined) {
                notifSettings.severity = notification.status != undefined ? notification.status : 'notice';
            }
            if ((0, _get2.default)(notifSettings, 'group') == undefined) {
                notifSettings.group = 'main';
            }
            if ((0, _get2.default)(notifSettings, 'msg') == undefined) {
                return null;
            }
            return notifSettings;
        },
        _buildMessage: function _buildMessage(notification, settings) {
            var msg = (0, _get2.default)(settings, 'msg');
            var variables = msg.match(/%([^%]*)%/g);
            var data = notification.data;
            for (var i in variables) {
                var dataKey = variables[i].replace(/%/g, '');
                var value = (0, _get2.default)(data, dataKey);
                if (value == undefined) {
                    value = 'undefined';
                }
                msg = msg.replace(variables[i], value);
            }
            return msg;
        },
        _populateNotification: function _populateNotification(notification, settings) {
            notification.message = this._buildMessage(notification, settings);
            notification.status = notification.status != undefined ? notification.status : settings.severity;
            notification.severity = settings.severity;
            notification.id = (0, _v2.default)();
            return notification;
        },
        _checkShouldBeDisplayed: function _checkShouldBeDisplayed(notification) {
            var displaySeverity = _config2.default.read('notification.displaySeverity');
            if (displaySeverity == undefined) {
                return false;
            }
            if (displaySeverity.indexOf(notification.severity) != -1) {
                return true;
            }
            return false;
        },
        load: function load(notification) {
            if (notification.title == undefined) {
                return;
            }
            var notifSettings = this._getNotificationSettings(notification);
            if (notifSettings === null) {
                return;
            }
            var _notification = this._populateNotification(notification, notifSettings);
            var display = this._checkShouldBeDisplayed(notification, notifSettings);
            if (_notification === null) {
                return;
            }
            if (display === false) {
                return;
            }
            this.options.notifications.push(_notification);
            if (!this.state.started) {
                this.start();
                this.state.hidden = false;
            } else if (this.state.hidden || this.state.hiddening) {
                this.refresh();
                this.state.hidden = false;
                this.state.hiddening = false;
            }
        },
        '{mad.bus.element} passbolt_notify': function madBusElementPassbolt_notify(el, ev) {
            var notif = ev.data;
            this.load(new _notification3.default(notif));
        }
    });
    exports.default = NotificationComponent;
});
/*app/component/password/workspace_breadcrumb*/
define('app/component/password/workspace_breadcrumb', [
    'exports',
    'passbolt-mad/model/map/action',
    'passbolt-mad/component/component',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/control/bus',
    'passbolt-mad/component/menu',
    'uuid/v4',
    'app/view/template/component/breadcrumb/breadcrumb.stache!',
    'app/view/template/component/breadcrumb/breadcrumb_item.stache!'
], function (exports, _action, _component, _i18n, _bus, _menu, _v, _breadcrumb, _breadcrumb_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _component2 = _interopRequireDefault(_component);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _bus2 = _interopRequireDefault(_bus);
    var _menu2 = _interopRequireDefault(_menu);
    var _v2 = _interopRequireDefault(_v);
    var _breadcrumb2 = _interopRequireDefault(_breadcrumb);
    var _breadcrumb_item2 = _interopRequireDefault(_breadcrumb_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var WorkspaceBreadcrumb = _component2.default.extend('passbolt.component.WorkspaceBreadcrumb', {
        defaults: {
            template: _breadcrumb2.default,
            rootFilter: null
        }
    }, {
        afterStart: function afterStart() {
            var menuSelector = '#' + this.getId() + ' ul';
            var menu = new _menu2.default(menuSelector, { itemTemplate: _breadcrumb_item2.default });
            menu.start();
            this.options.menu = menu;
        },
        parseFilter: function parseFilter(filter) {
            var menuItems = [];
            var keywords = filter.getRule('keywords');
            var allItemsItem = new _action2.default({
                id: (0, _v2.default)(),
                label: __('All items'),
                filter: this.options.rootFilter
            });
            menuItems.push(allItemsItem);
            if (keywords && keywords != '') {
                var searchItem = new _action2.default({
                    id: (0, _v2.default)(),
                    label: __('Search : %s', keywords)
                });
                menuItems.push(searchItem);
            } else if (filter.id != 'default') {
                var thirdItem = new _action2.default({
                    id: (0, _v2.default)(),
                    label: filter.label
                });
                menuItems.push(thirdItem);
            }
            return menuItems;
        },
        '{element} item_selected': function elementItem_selected(el, ev) {
            var item = ev.data.item;
            if (item.filter) {
                _bus2.default.trigger('filter_workspace', { filter: item.filter });
            }
        },
        '{mad.bus.element} filter_workspace': function madBusElementFilter_workspace(el, ev) {
            var filter = ev.data.filter;
            this.options.menu.reset();
            var menuItems = this.parseFilter(filter);
            this.options.menu.load(menuItems);
        }
    });
    exports.default = WorkspaceBreadcrumb;
});
/*app/view/component/favorite/favorite*/
define('app/view/component/favorite/favorite', [
    'exports',
    'passbolt-mad/view/view'
], function (exports, _view) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _view2 = _interopRequireDefault(_view);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var FavoriteView = _view2.default.extend('passbolt.view.component.favorite.Favorite', {}, {
        favorite: function favorite() {
            $('i', this.element).removeClass('fav').addClass('unfav');
        },
        unfavorite: function unfavorite() {
            $('i', this.element).removeClass('unfav').addClass('fav');
        }
    });
    exports.default = FavoriteView;
});
/*app/view/template/component/favorite/favorite.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/favorite/favorite.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/favorite/favorite.stache', [
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'no-text',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'icon ',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(instance.isFavorite())',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' unfav ',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#else',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' fav ',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visuallyhidden',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'fav',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                4
            ]
        },
        {
            'tokenType': 'done',
            'args': [5]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/favorite/favorite*/
define('app/component/favorite/favorite', [
    'exports',
    'passbolt-mad/component/component',
    'app/view/component/favorite/favorite',
    'passbolt-mad/control/bus',
    'app/view/template/component/favorite/favorite.stache!'
], function (exports, _component, _favorite, _bus, _favorite3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _favorite2 = _interopRequireDefault(_favorite);
    var _bus2 = _interopRequireDefault(_bus);
    var _favorite4 = _interopRequireDefault(_favorite3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var FavoriteComponent = _component2.default.extend('passbolt.component.Favorite', {
        defaults: {
            label: 'Favorite',
            viewClass: _favorite2.default,
            instance: null,
            template: _favorite4.default
        }
    }, {
        init: function init(el, options) {
            this._super(el, options);
            this.setViewData('instance', this.options.instance);
        },
        favorite: function favorite() {
            this.state.loaded = false;
            this.view.favorite();
            _bus2.default.trigger('request_resource_favorite', { resource: this.options.instance });
        },
        unfavorite: function unfavorite() {
            this.state.loaded = false;
            this.view.unfavorite();
            _bus2.default.trigger('request_resource_unfavorite', { resource: this.options.instance });
        },
        '{element} click': function elementClick(el, ev) {
            ev.preventDefault();
            ev.stopPropagation();
            if (!this.state.loaded) {
                return;
            }
            if (!this.options.instance.isFavorite()) {
                this.favorite();
            } else {
                this.unfavorite();
            }
        },
        '{instance} updated': function instanceUpdated() {
            if (!this.state.loaded) {
                this.state.loaded = true;
            }
        }
    });
    exports.default = FavoriteComponent;
});
/*app/component/password/grid_contextual_menu*/
define('app/component/password/grid_contextual_menu', [
    'exports',
    'passbolt-mad/model/map/action',
    'app/util/clipboard',
    'passbolt-mad/component/contextual_menu',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/control/bus',
    'app/model/map/permission_type',
    'app/util/plugin'
], function (exports, _action, _clipboard, _contextual_menu, _i18n, _bus, _permission_type, _plugin) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _clipboard2 = _interopRequireDefault(_clipboard);
    var _contextual_menu2 = _interopRequireDefault(_contextual_menu);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _bus2 = _interopRequireDefault(_bus);
    var _permission_type2 = _interopRequireDefault(_permission_type);
    var _plugin2 = _interopRequireDefault(_plugin);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var GridContextualMenuComponent = _contextual_menu2.default.extend('passbolt.component.password.GridContextualMenu', { defaults: { resource: null } }, {
        afterStart: function afterStart() {
            var _this = this;
            var items = [];
            var resource = this.options.resource;
            var canUpdate = resource.permission.isAllowedTo(_permission_type2.default.UPDATE);
            var canAdmin = resource.permission.isAllowedTo(_permission_type2.default.ADMIN);
            var isSafeUrl = resource.safeUrl() != '';
            var copyUsernameItem = new _action2.default({
                id: 'js_password_browser_menu_copy_username',
                label: __('Copy username'),
                enabled: resource.username != null,
                action: function action() {
                    return _this._copyLogin();
                }
            });
            items.push(copyUsernameItem);
            var copyPasswordItem = new _action2.default({
                id: 'js_password_browser_menu_copy_password',
                label: __('Copy password'),
                action: function action() {
                    return _this._copySecret();
                }
            });
            items.push(copyPasswordItem);
            var copyUriItem = new _action2.default({
                id: 'js_password_browser_menu_copy_uri',
                label: __('Copy URI'),
                enabled: resource.uri != null,
                action: function action() {
                    return _this._copyUri();
                }
            });
            items.push(copyUriItem);
            var copyPermalinkItem = new _action2.default({
                id: 'js_password_browser_menu_copy_permalink',
                label: __('Copy permalink'),
                action: function action() {
                    return _this._copyPermalink();
                }
            });
            items.push(copyPermalinkItem);
            var openUriItem = new _action2.default({
                id: 'js_password_browser_menu_open_uri',
                label: __('Open URI in a new tab'),
                enabled: resource.uri != null && isSafeUrl,
                cssClasses: ['separator-after'],
                action: function action() {
                    return _this._openUri();
                }
            });
            items.push(openUriItem);
            var editItem = new _action2.default({
                id: 'js_password_browser_menu_edit',
                label: __('Edit'),
                enabled: canUpdate,
                action: function action() {
                    return _this._edit();
                }
            });
            items.push(editItem);
            var shareItem = new _action2.default({
                id: 'js_password_browser_menu_share',
                label: __('Share'),
                enabled: canAdmin,
                action: function action() {
                    return _this._share();
                }
            });
            items.push(shareItem);
            var deleteItem = new _action2.default({
                id: 'js_password_browser_menu_delete',
                label: __('Delete'),
                enabled: canUpdate,
                action: function action() {
                    return _this._delete();
                }
            });
            items.push(deleteItem);
            this.load(items);
            this._super();
        },
        _copyLogin: function _copyLogin() {
            _clipboard2.default.copy(this.options.resource.username, 'username');
            this.remove();
        },
        _copySecret: function _copySecret() {
            var resourceId = this.options.resource.id;
            _plugin2.default.decryptSecretAndCopyToClipboard(resourceId);
            this.remove();
        },
        _copyUri: function _copyUri() {
            _clipboard2.default.copy(this.options.resource.uri, 'URL');
            this.remove();
        },
        _copyPermalink: function _copyPermalink() {
            _clipboard2.default.copy(this.options.resource.getPermalink(), 'permalink');
            this.remove();
        },
        _openUri: function _openUri() {
            var uri = this.options.resource.safeUrl();
            window.open(uri, '_blank');
            this.remove();
        },
        _edit: function _edit() {
            var resource = this.options.resource;
            _bus2.default.trigger('request_resource_edit', { resource: resource });
            this.remove();
        },
        _share: function _share() {
            var resource = this.options.resource;
            _bus2.default.trigger('request_resource_share', { resource: resource });
            this.remove();
        },
        _delete: function _delete() {
            var resource = this.options.resource;
            _bus2.default.trigger('request_resource_delete', { resource: resource });
            this.remove();
        }
    });
    exports.default = GridContextualMenuComponent;
});
/*app/view/component/password/grid*/
define('app/view/component/password/grid', [
    'exports',
    'can-dom-data',
    'can-dom-events',
    'passbolt-mad/view/component/grid'
], function (exports, _canDomData, _canDomEvents, _grid) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canDomData2 = _interopRequireDefault(_canDomData);
    var _canDomEvents2 = _interopRequireDefault(_canDomEvents);
    var _grid2 = _interopRequireDefault(_grid);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PasswordGridView = _grid2.default.extend('passbolt.view.component.password.Grid', {}, {
        '{element} tbody tr td.password a click': function elementTbodyTrTdPasswordAClick(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            var $tr = $(el).parents('tr');
            var itemClass = this.getController().getItemClass();
            var item = _canDomData2.default.get($tr[0], itemClass.shortName);
            _canDomEvents2.default.dispatch(this.element, {
                type: 'password_clicked',
                data: {
                    item: item,
                    srcEv: ev
                }
            });
        },
        '{element} tbody tr td.username a click': function elementTbodyTrTdUsernameAClick(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            var $tr = $(el).parents('tr');
            var itemClass = this.getController().getItemClass();
            var item = _canDomData2.default.get($tr[0], itemClass.shortName);
            _canDomEvents2.default.dispatch(this.element, {
                type: 'username_clicked',
                data: {
                    item: item,
                    srcEv: ev
                }
            });
            return false;
        },
        '{element} tbody tr contextmenu': function elementTbodyTrContextmenu(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            return false;
        },
        '{element} tbody tr mousedown': function elementTbodyTrMousedown(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            if (ev.which == 3) {
                var itemClass = this.getController().getItemClass();
                var item = _canDomData2.default.get(el, itemClass.shortName);
                _canDomEvents2.default.dispatch(this.element, {
                    type: 'item_right_selected',
                    data: {
                        item: item,
                        srcEv: ev
                    }
                });
            }
            return false;
        }
    });
    exports.default = PasswordGridView;
});
/*app/view/template/component/password/grid/column_header_select.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/password/grid/column_header_select.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/password/grid/column_header_select.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input checkbox',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'checkbox',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'select all',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-passwords-select-all',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'for',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-passwords-select-all',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'for',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'select all\') ',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                4
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/password/grid/column_header_favorite.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/password/grid/column_header_favorite.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/password/grid/column_header_favorite.stache', [
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'icon fav',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visuallyhidden',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'fav',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                4
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/password/grid/cell_secret_template.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/password/grid/cell_secret_template.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/password/grid/cell_secret_template.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'title',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'secret',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'title',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'secret-copy',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'grid_secret_copy_',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' ../mappedItem.id ',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'copy password to clipboard\') ',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                5
            ]
        },
        {
            'tokenType': 'done',
            'args': [6]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/password/grid/cell_username_template.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/password/grid/cell_username_template.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/password/grid/cell_username_template.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'title',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '../mappedItem[name]',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'title',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '../mappedItem[name]',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                3
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/password/grid/cell_uri_template.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/password/grid/cell_uri_template.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/password/grid/cell_uri_template.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'title',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '../mappedItem[name]',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'title',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(../mappedItem.safeUrl)',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'href',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' ../mappedItem.safeUrl ',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'href',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'target',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '_blank',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'target',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'rel',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'noopener',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'rel',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' ../mappedItem[name] ',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#else',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' ../mappedItem[name] ',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                7
            ]
        },
        {
            'tokenType': 'done',
            'args': [8]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/password/grid/grid_welcome.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/password/grid/grid_welcome.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/password/grid/grid_welcome.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'empty-content',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h1',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h1',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Welcome to passbolt!\') ',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h1',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'It does feel a bit empty here. Create your first password or\') ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'br',
                true,
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'br',
                true,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'wait for a team member to share one with you.\') ',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                5
            ]
        },
        {
            'tokenType': 'done',
            'args': [5]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/password/grid/grid_filtered_empty.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/password/grid/grid_filtered_empty.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/password/grid/grid_filtered_empty.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'empty-content',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h2',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h2',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'None of your passwords matched this search.\')',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h2',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Try another search or use the left panel to navigate into your passwords.\')',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                4
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/password/grid/grid_favorite_empty.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/password/grid/grid_favorite_empty.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/password/grid/grid_favorite_empty.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'empty-content',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h2',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h2',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'None of your passwords are yet marked as favorite.\')',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h2',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'Add stars to passwords your want to easily find later.\')',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                4
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/password/grid/grid_group_empty.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/password/grid/grid_group_empty.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/password/grid/grid_group_empty.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'empty-content',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h2',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h2',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'No passwords are shared with this group yet.',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h2',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Share a password with this group or wait for a team member to share one with this group.',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                4
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/password/grid/grid_owner_empty.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/password/grid/grid_owner_empty.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/password/grid/grid_owner_empty.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'empty-content',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h2',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h2',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'You do not own any passwords yet.\')',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h2',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'It does feel a bit empty here. Create your first password.\') ',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                4
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/password/grid/grid_shared_empty.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/password/grid/grid_shared_empty.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/password/grid/grid_shared_empty.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'empty-content',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h2',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h2',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'No passwords are shared with you yet.\')',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h2',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'It does feel a bit empty here. Wait for a team member to share a password with you.\')',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                4
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/password/grid*/
define('app/component/password/grid', [
    'exports',
    'passbolt-mad/form/element/checkbox',
    'app/util/clipboard',
    'passbolt-mad/helper/component',
    'passbolt-mad/config/config',
    'app/component/favorite/favorite',
    'can-util/js/get/get',
    'passbolt-mad/util/time/get_time_ago',
    'passbolt-mad/model/map/grid_column',
    'passbolt-mad/component/grid',
    'app/component/password/grid_contextual_menu',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/control/bus',
    'passbolt-mad/util/map/map',
    'app/view/component/password/grid',
    'app/util/plugin',
    'app/model/map/resource',
    'passbolt-mad/view/view',
    'app/view/template/component/password/grid/column_header_select.stache!',
    'app/view/template/component/password/grid/column_header_favorite.stache!',
    'app/view/template/component/password/grid/cell_secret_template.stache!',
    'app/view/template/component/password/grid/cell_username_template.stache!',
    'app/view/template/component/password/grid/cell_uri_template.stache!',
    'app/view/template/component/password/grid/grid_welcome.stache!',
    'app/view/template/component/password/grid/grid_filtered_empty.stache!',
    'app/view/template/component/password/grid/grid_favorite_empty.stache!',
    'app/view/template/component/password/grid/grid_group_empty.stache!',
    'app/view/template/component/password/grid/grid_owner_empty.stache!',
    'app/view/template/component/password/grid/grid_shared_empty.stache!'
], function (exports, _checkbox, _clipboard, _component, _config, _favorite, _get, _get_time_ago, _grid_column, _grid, _grid_contextual_menu, _i18n, _bus, _map, _grid3, _plugin, _resource, _view, _column_header_select, _column_header_favorite, _cell_secret_template, _cell_username_template, _cell_uri_template, _grid_welcome, _grid_filtered_empty, _grid_favorite_empty, _grid_group_empty, _grid_owner_empty, _grid_shared_empty) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _checkbox2 = _interopRequireDefault(_checkbox);
    var _clipboard2 = _interopRequireDefault(_clipboard);
    var _component2 = _interopRequireDefault(_component);
    var _config2 = _interopRequireDefault(_config);
    var _favorite2 = _interopRequireDefault(_favorite);
    var _get2 = _interopRequireDefault(_get);
    var _get_time_ago2 = _interopRequireDefault(_get_time_ago);
    var _grid_column2 = _interopRequireDefault(_grid_column);
    var _grid2 = _interopRequireDefault(_grid);
    var _grid_contextual_menu2 = _interopRequireDefault(_grid_contextual_menu);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _bus2 = _interopRequireDefault(_bus);
    var _map2 = _interopRequireDefault(_map);
    var _grid4 = _interopRequireDefault(_grid3);
    var _plugin2 = _interopRequireDefault(_plugin);
    var _resource2 = _interopRequireDefault(_resource);
    var _view2 = _interopRequireDefault(_view);
    var _column_header_select2 = _interopRequireDefault(_column_header_select);
    var _column_header_favorite2 = _interopRequireDefault(_column_header_favorite);
    var _cell_secret_template2 = _interopRequireDefault(_cell_secret_template);
    var _cell_username_template2 = _interopRequireDefault(_cell_username_template);
    var _cell_uri_template2 = _interopRequireDefault(_cell_uri_template);
    var _grid_welcome2 = _interopRequireDefault(_grid_welcome);
    var _grid_filtered_empty2 = _interopRequireDefault(_grid_filtered_empty);
    var _grid_favorite_empty2 = _interopRequireDefault(_grid_favorite_empty);
    var _grid_group_empty2 = _interopRequireDefault(_grid_group_empty);
    var _grid_owner_empty2 = _interopRequireDefault(_grid_owner_empty);
    var _grid_shared_empty2 = _interopRequireDefault(_grid_shared_empty);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PasswordGridComponent = _grid2.default.extend('passbolt.component.password.Grid', {
        defaults: {
            itemClass: _resource2.default,
            viewClass: _grid4.default,
            selectedResources: new _resource2.default.List(),
            prefixItemId: 'resource_',
            silentLoading: false,
            loadedOnStart: false,
            Resource: _resource2.default,
            paginate: true,
            selectAllCheckboxSelector: '#js-passwords-select-all'
        }
    }, {
        filterSettings: null,
        _selectCheckboxComponents: {},
        _multiShiftSelectFirstElement: null,
        _pendingFilterTimeout: null,
        _applyingFilter: false,
        init: function init(el, options) {
            options.map = this._getGridMap();
            options.columnModel = this._getGridColumns();
            this._super(el, options);
        },
        _getGridMap: function _getGridMap() {
            var map = new _map2.default({
                id: 'id',
                name: 'name',
                username: 'username',
                secret: 'Secret',
                uri: 'uri',
                safeUrl: {
                    key: 'uri',
                    func: function func(value, map, item) {
                        return item.safeUrl();
                    }
                },
                modified: {
                    key: 'modified',
                    func: function func(value) {
                        return (0, _get_time_ago2.default)(value);
                    }
                },
                owner: 'Creator.username'
            });
            return map;
        },
        _getGridColumns: function _getGridColumns() {
            var _this = this;
            var columns = [];
            var selectColumn = new _grid_column2.default({
                name: 'multipleSelect',
                index: 'multipleSelect',
                css: ['selections s-cell'],
                label: _column_header_select2.default,
                sortable: false,
                afterRender: function afterRender(cellElement, cellValue, mappedItem, item, columnModel) {
                    return _this._initSelectColumnComponent(cellElement, cellValue, mappedItem, item, columnModel);
                }
            });
            columns.push(selectColumn);
            var favoriteColumn = new _grid_column2.default({
                name: 'favorite',
                index: 'favorite',
                css: ['selections s-cell'],
                label: _column_header_favorite2.default,
                afterRender: this._initFavoriteCellComponent
            });
            columns.push(favoriteColumn);
            var nameColumn = new _grid_column2.default({
                name: 'name',
                index: 'name',
                css: ['m-cell'],
                label: __('Resource'),
                sortable: true
            });
            columns.push(nameColumn);
            var usernameColumn = new _grid_column2.default({
                name: 'username',
                index: 'username',
                css: [
                    'm-cell',
                    'username'
                ],
                label: __('Username'),
                sortable: true,
                template: _cell_username_template2.default
            });
            columns.push(usernameColumn);
            var secretColumn = new _grid_column2.default({
                name: 'secret',
                index: 'secret',
                css: [
                    'm-cell',
                    'password'
                ],
                label: __('Password'),
                template: _cell_secret_template2.default
            });
            columns.push(secretColumn);
            var uriColumn = new _grid_column2.default({
                name: 'uri',
                index: 'uri',
                css: ['l-cell'],
                label: __('URI'),
                sortable: true,
                template: _cell_uri_template2.default
            });
            columns.push(uriColumn);
            var modifiedColumn = new _grid_column2.default({
                name: 'modified',
                index: 'modified',
                css: ['m-cell'],
                sortable: true,
                label: __('Modified')
            });
            columns.push(modifiedColumn);
            var ownerColumn = new _grid_column2.default({
                name: 'owner',
                index: 'owner',
                css: ['m-cell'],
                label: __('Owner'),
                sortable: true
            });
            columns.push(ownerColumn);
            return columns;
        },
        _initSelectColumnComponent: function _initSelectColumnComponent(cellElement, cellValue, mappedItem, item) {
            var availableValues = {};
            availableValues[item.id] = '';
            var checkbox = _component2.default.create(cellElement, 'inside_replace', _checkbox2.default, {
                id: 'multiple_select_checkbox_' + item.id,
                cssClasses: ['js_checkbox_multiple_select'],
                availableValues: availableValues
            });
            checkbox.start();
            this._selectCheckboxComponents[item.id] = checkbox;
        },
        _afterRenderItem: function _afterRenderItem(item, mappedItem) {
            this._super(item, mappedItem);
            if (this.isSelected(item)) {
                this.selectItem(item);
                this._selectCheckboxComponents[item.id].setValue([item.id]);
            }
        },
        _initFavoriteCellComponent: function _initFavoriteCellComponent(cellElement, cellValue, mappedItem, item) {
            var availableValues = {};
            availableValues[item.id] = '';
            var favorite = _component2.default.create(cellElement, 'inside_replace', _favorite2.default, {
                id: 'favorite_' + item.id,
                instance: item
            });
            favorite.start();
        },
        showContextualMenu: function showContextualMenu(resource, x, y) {
            var coordinates = {
                x: x,
                y: y
            };
            var contextualMenu = _grid_contextual_menu2.default.instantiate({
                resource: resource,
                coordinates: coordinates
            });
            contextualMenu.start();
        },
        refreshItem: function refreshItem(resource) {
            if (!this.itemExists(resource)) {
                return;
            }
            this._super(resource);
            if (this.isSelected(resource)) {
                var checkbox = this._selectCheckboxComponents[resource.id];
                checkbox.setValue([resource.id]);
                this.view.selectItem(resource);
            }
        },
        isSelected: function isSelected(item) {
            var resources = this.options.selectedResources;
            return resources.indexOf(item) != -1;
        },
        select: function select(item) {
            if (!this.itemExists(item)) {
                return;
            }
            var checkbox = this._selectCheckboxComponents[item.id];
            checkbox.setValue([item.id]);
            this.selectItem(item);
        },
        unselect: function unselect(item) {
            if (!this.itemExists(item)) {
                return;
            }
            var checkbox = this._selectCheckboxComponents[item.id];
            checkbox.reset();
            this.unselectItem(item);
        },
        filterBySettings: function filterBySettings(filter) {
            var _this2 = this;
            if (this._applyingFilter) {
                clearTimeout(this._pendingFilterTimeout);
                this._pendingFilterTimeout = setTimeout(function () {
                    return _this2.filterBySettings(filter);
                }, 200);
                return;
            }
            this.state.loaded = false;
            this._applyingFilter = true;
            return this._findResources(filter).then(function (resources) {
                return _this2._handleApiResources(resources, filter);
            }).then(function () {
                return _this2._markSortedBySettings(filter);
            }).then(function () {
                return _this2._filterByKeywordsBySettings(filter);
            }).then(function () {
                return _this2._selectResourceBySettings(filter);
            }).then(function () {
                _this2._applyingFilter = false;
            });
        },
        sort: function sort(columnModel, sortAsc) {
            this.options.selectedResources.splice(0);
            return this._super(columnModel, sortAsc);
        },
        _findResources: function _findResources(filter) {
            var forceReload = filter.forceReload;
            var oldFilterId = (0, _get2.default)(this, 'filterSettings.id');
            var searching = filter.id == 'search' && (oldFilterId == 'search' || oldFilterId == 'default') || filter.id == 'default' && oldFilterId == 'search';
            if (searching && !forceReload) {
                return Promise.resolve();
            }
            var findOptions = {
                contain: {
                    favorite: 1,
                    permission: 1,
                    tag: 1
                },
                filter: filter.getRules(['keywords']),
                order: filter.getOrders(),
                silentLoading: false
            };
            return _resource2.default.findAll(findOptions);
        },
        _handleApiResources: function _handleApiResources(resources, filter) {
            this.filterSettings = filter;
            if (!resources) {
                return Promise.resolve();
            }
            if (this.state.destroyed) {
                return Promise.resolve();
            }
            this.state.selectType = null;
            this.view.reset();
            this._uncheckSelectAllCheckbox();
            var loadOptions = {};
            var keywords = filter.getRule('keywords');
            if (keywords && keywords != '') {
                filter.filterByKeywordsApplied = true;
                loadOptions.filter = {
                    keywords: keywords,
                    fields: this._getFilterFields()
                };
            }
            if (filter.viewResourceId) {
                loadOptions.visibleItemId = filter.viewResourceId;
            }
            return this.load(resources, loadOptions);
        },
        _markSortedBySettings: function _markSortedBySettings(filter) {
            if (this.state.destroyed) {
                return Promise.resolve();
            }
            var orders = filter.getOrders();
            if (orders && orders[0]) {
                var matches = /((\w*)\.)?(\w*)\s*(asc|desc|ASC|DESC)?/i.exec(orders[0]);
                var fieldName = matches[3];
                var sortWay = matches[4] ? matches[4].toLowerCase() : 'asc';
                if (fieldName) {
                    var sortedColumnModel = this.getColumnModel(fieldName);
                    if (sortedColumnModel) {
                        this.view.markColumnAsSorted(sortedColumnModel, sortWay === 'asc');
                    }
                }
            }
        },
        _filterByKeywordsBySettings: function _filterByKeywordsBySettings(filter) {
            if (this.state.destroyed) {
                return Promise.resolve();
            }
            if (filter.filterByKeywordsApplied) {
                return;
            }
            var keywords = filter.getRule('keywords');
            if (keywords && keywords != '') {
                var filterFields = this._getFilterFields();
                return this.filterByKeywords(keywords, filterFields);
            } else if (this.state.filtered) {
                return this.resetFilter();
            }
        },
        _selectResourceBySettings: function _selectResourceBySettings(filter) {
            if (this.state.destroyed) {
                return Promise.resolve();
            }
            if (filter.resource) {
                this.select(filter.resource);
            }
            if (filter.viewResourceId) {
                var resource = this.options.items.filter(function (resource) {
                    return resource.id == filter.viewResourceId;
                }).get(0);
                if (resource) {
                    this.options.selectedResources.push(resource);
                    this.scrollToItem(resource);
                } else {
                    _bus2.default.trigger('passbolt_notify', {
                        status: 'error',
                        title: 'app_passwords_view_error_not_found'
                    });
                }
            }
        },
        _getFilterFields: function _getFilterFields() {
            var filterFields = [
                'username',
                'name',
                'uri',
                'description'
            ];
            var plugins = _config2.default.read('server.passbolt.plugins');
            if (plugins && plugins.tags) {
                filterFields.push('tags[].slug');
            }
            return filterFields;
        },
        onEmptyChange: function onEmptyChange(empty) {
            if (this.state.destroyed) {
                return;
            }
            this._super(empty);
            if (this.state.filtering && !empty) {
                $(this.element).removeClass('all_items');
                $('.empty-content', this.element).remove();
            }
        },
        onLoadedChange: function onLoadedChange(loaded) {
            this._super(loaded);
            if (this.state.destroyed) {
                return;
            }
            var empty = this.state.empty;
            if (!loaded || !empty) {
                if (this.state.filtering && $(this.element).hasClass('filtered')) {
                    return;
                }
                $(this.element).removeClass('all_items');
                $('.empty-content', this.element).remove();
                return;
            }
            var emptyTemplate = void 0;
            var emptyCssClasses = [];
            switch (this.filterSettings.type) {
            case 'default': {
                    emptyCssClasses.push('all_items');
                    emptyTemplate = _grid_welcome2.default;
                    break;
                }
            case 'search': {
                    if ($('.empty-content', this.element).length) {
                        return;
                    }
                    emptyTemplate = _grid_filtered_empty2.default;
                    break;
                }
            case 'group': {
                    emptyTemplate = _grid_group_empty2.default;
                    break;
                }
            case 'owner': {
                    emptyTemplate = _grid_owner_empty2.default;
                    break;
                }
            case 'modified': {
                    emptyCssClasses.push('all_items');
                    emptyTemplate = _grid_welcome2.default;
                    break;
                }
            case 'favorite': {
                    emptyTemplate = _grid_favorite_empty2.default;
                    break;
                }
            case 'shared_with_me': {
                    emptyTemplate = _grid_shared_empty2.default;
                    break;
                }
            default: {
                    return;
                }
            }
            $(this.element).addClass(emptyCssClasses);
            var empty_html = _view2.default.render(emptyTemplate);
            $('.tableview-content', this.element).prepend(empty_html);
        },
        '{Resource} updated': function ResourceUpdated(model, ev, resource) {
            if (this.options.items.indexOf(resource) != -1) {
                this.refreshItem(resource);
            }
        },
        '{element} item_selected': function elementItem_selected(el, ev) {
            var item = ev.data.item;
            var srcEv = ev.data.srcEv;
            var resources = this.options.selectedResources;
            if (this.state.selectType == 'all') {
                this._uncheckSelectAllCheckbox();
            }
            if (srcEv.metaKey) {
                this.state.selectType = 'multiple';
                if (this.isSelected(item)) {
                    var position = resources.indexOf(item);
                    resources.splice(position, 1);
                } else {
                    resources.push(item);
                }
            } else if (srcEv.shiftKey) {
                if (!resources.length) {
                    this._multiShiftSelectFirstElement = item;
                    this.state.selectType = 'multiple-range';
                    resources.push(item);
                    return;
                } else if (resources.length && this.state.selectType != 'multiple-range') {
                    this._multiShiftSelectFirstElement = resources.get(resources.length - 1);
                    this.state.selectType = 'multiple-range';
                }
                if (this._multiShiftSelectFirstElement.id == item.id) {
                    resources.splice(0, resources.length, item);
                } else {
                    resources.splice(0, resources.length);
                    var rangeResources = this.options.items.filterRange(this._multiShiftSelectFirstElement, item);
                    resources.push.apply(resources, rangeResources);
                }
            } else {
                this.state.selectType = 'single';
                if (resources.length == 1 && this.isSelected(item)) {
                    resources.splice(0);
                } else {
                    resources.splice(0, resources.length, item);
                }
            }
        },
        '{element} item_right_selected': function elementItem_right_selected(el, ev) {
            var item = ev.data.item;
            var srcEv = ev.data.srcEv;
            this.options.selectedResources.splice(0, this.options.selectedResources.length, item);
            var $item = $('#' + this.options.prefixItemId + item.id);
            var itemOffset = $item.offset();
            this.showContextualMenu(item, srcEv.pageX - 3, itemOffset.top, srcEv.target);
        },
        '{element} password_clicked': function elementPassword_clicked(el, ev) {
            var resource = ev.data.item;
            _plugin2.default.decryptSecretAndCopyToClipboard(resource.id);
        },
        '{element} username_clicked': function elementUsername_clicked(el, ev) {
            var item = ev.data.item;
            _clipboard2.default.copy(item.username, 'username');
        },
        '{element} .js_checkbox_multiple_select checked': function elementJs_checkbox_multiple_selectChecked(el, ev) {
            ev.stopPropagation();
            var id = ev.data;
            var resource = this.options.items.filter({ id: id }).pop();
            this.options.selectedResources.push(resource);
        },
        '{element} .js_checkbox_multiple_select unchecked': function elementJs_checkbox_multiple_selectUnchecked(el, ev) {
            ev.stopPropagation();
            var id = ev.data;
            var resources = this.options.selectedResources;
            var unselectedResources = resources.filter(function (resource) {
                return resource.id == id;
            });
            if (unselectedResources.length) {
                var position = resources.indexOf(unselectedResources[0]);
                resources.splice(position, 1);
            }
        },
        '{mad.bus.element} filter_grid': function madBusElementFilter_grid(el, ev) {
            if (this.state.destroyed) {
                return;
            }
            var filter = ev.data.filter;
            this.filterBySettings(filter);
        },
        '{selectedResources} remove': function selectedResourcesRemove(el, ev, items) {
            var _this3 = this;
            items.forEach(function (item) {
                _this3.unselect(item);
            });
        },
        '{selectedResources} add': function selectedResourcesAdd(el, ev, items) {
            var _this4 = this;
            items.forEach(function (item) {
                _this4.select(item);
            });
        },
        _uncheckSelectAllCheckbox: function _uncheckSelectAllCheckbox() {
            $(this.options.selectAllCheckboxSelector).prop('checked', false);
        },
        '{element} {selectAllCheckboxSelector} click': function elementSelectAllCheckboxSelectorClick() {
            var resources = this.options.selectedResources;
            resources.splice(0, resources.length);
            if (this.state.selectType == 'all') {
                this.state.selectType = null;
                return;
            }
            this.state.selectType = 'all';
            resources.replace(this.options.items);
        }
    });
    exports.default = PasswordGridComponent;
});
/*app/model/map/action_log*/
define('app/model/map/action_log', [
    'exports',
    'app/net/ajax',
    'can-connect',
    'can-connect/data/url/url',
    'can-connect/data/parse/parse',
    'can-connect/constructor/constructor',
    'can-connect/can/map/map',
    'passbolt-mad/model/list/list',
    'passbolt-mad/model/map/map',
    'app/model/map/user'
], function (exports, _ajax, _canConnect, _url, _parse, _constructor, _map, _list, _map3, _user) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _canConnect2 = _interopRequireDefault(_canConnect);
    var _url2 = _interopRequireDefault(_url);
    var _parse2 = _interopRequireDefault(_parse);
    var _constructor2 = _interopRequireDefault(_constructor);
    var _map2 = _interopRequireDefault(_map);
    var _list2 = _interopRequireDefault(_list);
    var _map4 = _interopRequireDefault(_map3);
    var _user2 = _interopRequireDefault(_user);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ActionLog = _map4.default.extend('passbolt.model.ActionLog', {
        id: 'string',
        type: 'string',
        data: 'any',
        creator: _user2.default,
        created: 'string'
    });
    _map4.default.setReference('ActionLog', ActionLog);
    ActionLog.List = _list2.default.extend({ '#': { Type: ActionLog } });
    ActionLog.connection = (0, _canConnect2.default)([
        _parse2.default,
        _url2.default,
        _constructor2.default,
        _map2.default
    ], {
        Map: ActionLog,
        List: ActionLog.List,
        url: {
            resource: '/',
            getListData: function getListData(params) {
                params['api-version'] = 'v2';
                return _ajax2.default.request({
                    url: 'actionlog/resource/{foreignKey}.json',
                    type: 'GET',
                    params: params
                });
            }
        }
    });
    exports.default = ActionLog;
});
/*app/view/template/component/activity/resource_activity_item.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/activity/resource_activity_item.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/activity/resource_activity_item.stache', [
        {
            'tokenType': 'special',
            'args': [
                '<displayUserAction',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'name',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'creator',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.creatorName ',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' ',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'mappedItem.label',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'href',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'mappedItem.resource.permalink',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'href',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'mappedItem.resource.name',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'subinfo',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' getTimeAgo(mappedItem.created) ',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/displayUserAction',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '<displayDetails',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#switch(mappedItem.type)',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                7
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#case(\'Permissions.updated\')',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>displayPermissionsDetails',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                9
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/case',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/switch',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                11
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/displayDetails',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                12
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '<displayPermissionsDetails',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'permissions-list',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                15
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#each(mappedItem.data.added)',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                16
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                17
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'clearfix',
                17
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                17
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>displayPermission',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                17
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                18
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#each(mappedItem.data.updated)',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                19
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'clearfix',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                20
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>displayPermission',
                20
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                20
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                21
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#each(mappedItem.data.removed)',
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                22
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                23
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'clearfix',
                23
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                23
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>displayPermission',
                23
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                23
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/each',
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                24
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                25
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/displayPermissionsDetails',
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                26
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '<displayPermission',
                28
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                28
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                29
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                29
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'avatar',
                29
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                29
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                29
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                29
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'img',
                true,
                30
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'src',
                30
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'aro_avatar_path',
                30
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'src',
                30
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'img',
                true,
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                30
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                31
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                31
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                32
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                32
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'name',
                32
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '# eq(action_type, \'removed\') ',
                32
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' crossed ',
                32
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/eq',
                32
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                32
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                32
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                32
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                33
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                33
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'creator',
                33
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                33
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                33
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'full_name',
                33
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                33
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                33
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                34
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                34
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'permission-type',
                34
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                34
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                34
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' - ',
                34
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'type_human_readable',
                34
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                34
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                34
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                35
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                35
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                36
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                36
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'type',
                36
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                36
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                36
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                36
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                36
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'action_type',
                36
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                36
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                36
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                36
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#switch(action_type)',
                37
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                37
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#case(\'created\')',
                38
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            new\n        ',
                38
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/case',
                40
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                40
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#case(\'updated\')',
                41
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            updated\n        ',
                41
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/case',
                43
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                43
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#case(\'removed\')',
                44
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            deleted\n        ',
                44
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/case',
                46
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                46
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/switch',
                47
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                47
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                48
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                48
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                48
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/displayPermission',
                49
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                49
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                51
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                51
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'action-log-wrapper usercard-detailed-col-2',
                51
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                51
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                51
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.id ',
                51
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                51
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                51
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                51
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                52
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                52
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'content-wrapper action-log',
                52
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                52
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                52
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                52
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                53
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                53
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'content',
                53
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                53
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                53
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                53
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>displayUserAction',
                54
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                54
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>displayDetails',
                55
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '        ',
                55
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                55
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                55
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                56
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                56
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                57
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                57
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'avatar',
                57
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                57
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                57
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                57
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'img',
                true,
                58
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'src',
                58
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.creatorAvatarPath ',
                58
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'src',
                58
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'alt',
                58
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'activity author picture',
                58
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'alt',
                58
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'img',
                true,
                58
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                58
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                59
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                59
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                60
            ]
        },
        {
            'tokenType': 'done',
            'args': [60]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/model/action_log_detail/action_log_detail*/
define('app/model/action_log_detail/action_log_detail', [
    'exports',
    '../map/resource'
], function (exports, _resource) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _resource2 = _interopRequireDefault(_resource);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
        }
    }
    var ActionLogDetail = function ActionLogDetail(user, resource) {
        _classCallCheck(this, ActionLogDetail);
        this.user = user;
        this.resource = resource;
        this.resource.permalink = _resource2.default.getPermalink(resource);
    };
    exports.default = ActionLogDetail;
});
/*app/model/action_log_detail/permission_updated_detail*/
define('app/model/action_log_detail/permission_updated_detail', [
    'exports',
    'app/model/action_log_detail/action_log_detail',
    '../map/group',
    'passbolt-mad/util/lang/i18n',
    '../map/profile',
    '../map/permission_type'
], function (exports, _action_log_detail, _group, _i18n, _profile, _permission_type) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action_log_detail2 = _interopRequireDefault(_action_log_detail);
    var _group2 = _interopRequireDefault(_group);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _profile2 = _interopRequireDefault(_profile);
    var _permission_type2 = _interopRequireDefault(_permission_type);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function');
        }
    }
    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ('value' in descriptor)
                    descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function (Constructor, protoProps, staticProps) {
            if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
                defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();
    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
        }
        return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
    }
    function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var PermissionUpdatedDetail = function (_ActionLogDetail) {
        _inherits(PermissionUpdatedDetail, _ActionLogDetail);
        function PermissionUpdatedDetail(user, resource, permissions) {
            _classCallCheck(this, PermissionUpdatedDetail);
            var _this = _possibleConstructorReturn(this, (PermissionUpdatedDetail.__proto__ || Object.getPrototypeOf(PermissionUpdatedDetail)).call(this, user, resource));
            _this.added = [];
            _this.updated = [];
            _this.removed = [];
            _this.mapPermissions(permissions);
            return _this;
        }
        _createClass(PermissionUpdatedDetail, [
            {
                key: 'getPermissionAroAvatarPath',
                value: function getPermissionAroAvatarPath(permission) {
                    try {
                        if (permission.user) {
                            return _profile2.default.avatarPath(permission.user.profile, 'small');
                        } else if (permission.group) {
                            return _group2.default.avatarPath(permission.group);
                        }
                    } catch (e) {
                        console.error(e);
                    }
                }
            },
            {
                key: 'getPermissionFullName',
                value: function getPermissionFullName(permission) {
                    if (permission.user) {
                        return _profile2.default.fullName(permission.user.profile);
                    } else if (permission.group) {
                        return permission.group.name;
                    } else {
                        return '';
                    }
                }
            },
            {
                key: 'mapPermission',
                value: function mapPermission(permission) {
                    var res = {};
                    if (permission.user) {
                        res['user'] = permission.user;
                        res['user'].profile = new _profile2.default(res['user'].profile);
                    }
                    if (permission.group) {
                        res['group'] = permission.group;
                    }
                    if (permission.resource) {
                        res['resource'] = permission.resource;
                    }
                    res['aro_avatar_path'] = this.getPermissionAroAvatarPath(res);
                    res['full_name'] = this.getPermissionFullName(res);
                    if (permission.type === _permission_type2.default.READ || permission.type === _permission_type2.default.UPDATE) {
                        res['type_human_readable'] = __('can') + ' ' + _permission_type2.default.PERMISSION_TYPES[permission.type];
                    } else if (permission.type === _permission_type2.default.ADMIN) {
                        res['type_human_readable'] = __('is admin');
                    } else {
                        res['type_human_readable'] = __('unknown');
                    }
                    return res;
                }
            },
            {
                key: 'mapPermissions',
                value: function mapPermissions(permissions) {
                    try {
                        var self = this;
                        permissions.added.forEach(function (added) {
                            var perm = self.mapPermission(added);
                            perm['action_type'] = 'created';
                            self.added.push(perm);
                        });
                        permissions.updated.forEach(function (updated) {
                            var perm = self.mapPermission(updated);
                            perm['action_type'] = 'updated';
                            self.updated.push(perm);
                        });
                        permissions.removed.forEach(function (removed) {
                            var perm = self.mapPermission(removed);
                            perm['action_type'] = 'removed';
                            self.removed.push(perm);
                        });
                    } catch (e) {
                        console.error(e.message);
                    }
                }
            }
        ]);
        return PermissionUpdatedDetail;
    }(_action_log_detail2.default);
    exports.default = PermissionUpdatedDetail;
});
/*app/component/activity/resource_activity_list*/
define('app/component/activity/resource_activity_list', [
    'exports',
    'app/model/map/action_log',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/util/map/map',
    'passbolt-mad/component/tree',
    'app/model/map/resource',
    'app/view/template/component/activity/resource_activity_item.stache!',
    '../../model/action_log_detail/permission_updated_detail',
    '../../model/action_log_detail/action_log_detail'
], function (exports, _action_log, _i18n, _map, _tree, _resource, _resource_activity_item, _permission_updated_detail, _action_log_detail) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action_log2 = _interopRequireDefault(_action_log);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _map2 = _interopRequireDefault(_map);
    var _tree2 = _interopRequireDefault(_tree);
    var _resource2 = _interopRequireDefault(_resource);
    var _resource_activity_item2 = _interopRequireDefault(_resource_activity_item);
    var _permission_updated_detail2 = _interopRequireDefault(_permission_updated_detail);
    var _action_log_detail2 = _interopRequireDefault(_action_log_detail);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ResourceActivityListComponent = _tree2.default.extend('passbolt.component.activity.ResourceActivityList', {
        defaults: {
            label: 'Resource Activity List Controller',
            itemClass: _action_log2.default,
            itemTemplate: _resource_activity_item2.default
        }
    }, {
        init: function init(el, options) {
            options.map = this._getMap();
            this._super(el, options);
        },
        mapData: function mapData(data, map, el) {
            if (el.type === 'Permissions.updated' && data.permissions) {
                var res = new _permission_updated_detail2.default(null, data.resource, data.permissions);
                return res;
            } else {
                var _res = new _action_log_detail2.default(null, data.resource);
                return _res;
            }
        },
        mapLabel: function mapLabel(type) {
            var defaultLabel = __('did something on item');
            var labels = {
                'Resources.created': __('created item'),
                'Resources.updated': __('updated item'),
                'Resource.Secrets.read': __('accessed secret of item'),
                'Resource.Secrets.updated': __('updated secret of item'),
                'Permissions.updated': __('changed permissions of item')
            };
            if (labels[type]) {
                return labels[type];
            }
            return defaultLabel;
        },
        _getMap: function _getMap() {
            return new _map2.default({
                id: 'id',
                type: 'type',
                label: {
                    key: 'type',
                    func: this.mapLabel
                },
                data: {
                    key: 'data',
                    func: this.mapData
                },
                resource: {
                    key: 'data.resource',
                    func: function func(resource) {
                        if (resource) {
                            resource.permalink = _resource2.default.getPermalink(resource);
                        }
                        return resource;
                    }
                },
                created: 'created',
                creatorAvatarPath: {
                    key: 'creator',
                    func: function func(creator) {
                        return creator.profile.avatarPath('small');
                    }
                },
                creatorName: {
                    key: 'creator',
                    func: function func(creator) {
                        return creator.profile.fullName();
                    }
                }
            });
        }
    });
    exports.default = ResourceActivityListComponent;
});
/*app/view/template/component/activity/resource_activity_sidebar_section.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/activity/resource_activity_sidebar_section.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/activity/resource_activity_sidebar_section.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-header',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h4',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h4',
                false,
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-trigger',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Activity\') ',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h4',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-content',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'em',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'empty-content hidden',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'em',
                false,
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'There is no activity yet.\') ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'em',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'activity-details-content',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_rs_details_activity_list',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_rs_details_activity_actions',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'activity-list-actions actions',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_action_logs_more',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button load-more processing',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'more\') ',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                13
            ]
        },
        {
            'tokenType': 'done',
            'args': [13]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/activity/resource_activity_sidebar_section*/
define('app/component/activity/resource_activity_sidebar_section', [
    'exports',
    'app/model/map/action_log',
    'app/component/activity/resource_activity_list',
    'app/component/workspace/secondary_sidebar_section',
    'app/view/template/component/activity/resource_activity_sidebar_section.stache!'
], function (exports, _action_log, _resource_activity_list, _secondary_sidebar_section, _resource_activity_sidebar_section) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action_log2 = _interopRequireDefault(_action_log);
    var _resource_activity_list2 = _interopRequireDefault(_resource_activity_list);
    var _secondary_sidebar_section2 = _interopRequireDefault(_secondary_sidebar_section);
    var _resource_activity_sidebar_section2 = _interopRequireDefault(_resource_activity_sidebar_section);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ResourceActivitySidebarSectionComponent = _secondary_sidebar_section2.default.extend('passbolt.component.activity.ResourceActivitySidebarSection', {
        defaults: {
            label: 'Resource Activity Sidebar Controller',
            loadedOnStart: false,
            resource: null,
            foreignModel: null,
            foreignKey: null,
            template: _resource_activity_sidebar_section2.default,
            pagination: {
                limit: 5,
                page: 1
            }
        }
    }, {
        init: function init(el, options) {
            this._super(el, options);
        },
        afterStart: function afterStart() {
            this._initResourceActivityList();
            if (this.state.opened) {
                this.open();
            }
            this._super();
        },
        open: function open() {
            this._loadContent();
            this._super();
        },
        _initResourceActivityList: function _initResourceActivityList() {
            var component = new _resource_activity_list2.default('#js_rs_details_activity_list', {
                resource: this.options.resource,
                foreignModel: this.options.foreignModel,
                foreignKey: this.options.foreignKey,
                state: 'loading'
            });
            component.start();
            this.resourceActivityList = component;
            this.options.pagination.page = 1;
        },
        _loadContent: function _loadContent() {
            var _this = this;
            if (this.resourceActivityList.options.items.length === 0) {
                this._findActionLog().then(function (actionLogs) {
                    return _this._loadActionLogs(actionLogs);
                });
            }
        },
        _findActionLog: function _findActionLog() {
            var findOptions = {
                foreignModel: this.options.foreignModel,
                foreignKey: this.options.foreignKey,
                page: this.options.pagination.page,
                limit: this.options.pagination.limit,
                contain: { creator: 1 }
            };
            return _action_log2.default.findAll(findOptions);
        },
        _loadActionLogs: function _loadActionLogs(actionLogs) {
            if (this.state.destroyed) {
                return;
            }
            if (actionLogs.length) {
                this._setNotEmpty();
                this.resourceActivityList.load(actionLogs);
                this._manageCallToAction(actionLogs);
            } else {
                this._setEmpty();
            }
            this._initCallToAction();
            this.resourceActivityList.state.loaded = true;
            this.state.loaded = true;
        },
        _setEmpty: function _setEmpty() {
            $('.activity-details-content', this.element).addClass('hidden');
            $('.empty-content', this.element).removeClass('hidden');
        },
        _setNotEmpty: function _setNotEmpty() {
            $('.activity-details-content', this.element).removeClass('hidden');
            $('.empty-content', this.element).addClass('hidden');
        },
        _loadNextPage: function _loadNextPage() {
            var self = this;
            this.options.pagination.page += 1;
            this._findActionLog().then(function (actionLogs) {
                return self._appendActionLogs(actionLogs);
            });
        },
        _initCallToAction: function _initCallToAction() {
            var self = this;
            $('.load-more', $('.activity-list-actions')).click(function () {
                $(this).addClass('processing');
                self._loadNextPage();
                return false;
            });
        },
        _appendActionLogs: function _appendActionLogs(actionLogs) {
            var self = this;
            actionLogs.forEach(function (obj) {
                self.resourceActivityList.insertItem(obj, null, 'last');
            });
            self._manageCallToAction(actionLogs);
        },
        _manageCallToAction: function _manageCallToAction(actionLogs) {
            $('.load-more', $('.activity-list-actions')).removeClass('processing');
            if (actionLogs.length < this.options.pagination.limit) {
                $('.activity-list-actions').addClass('hidden');
            }
        }
    });
    exports.default = ResourceActivitySidebarSectionComponent;
});
/*app/model/map/comment*/
define('app/model/map/comment', [
    'exports',
    'app/net/ajax',
    'can-connect',
    'can-connect/data/url/url',
    'can-connect/data/parse/parse',
    'can-connect/constructor/constructor',
    'can-connect/can/map/map',
    'passbolt-mad/model/list/list',
    'passbolt-mad/model/map/map',
    'passbolt-mad/util/lang/i18n',
    'app/model/map/user'
], function (exports, _ajax, _canConnect, _url, _parse, _constructor, _map, _list, _map3, _i18n, _user) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _canConnect2 = _interopRequireDefault(_canConnect);
    var _url2 = _interopRequireDefault(_url);
    var _parse2 = _interopRequireDefault(_parse);
    var _constructor2 = _interopRequireDefault(_constructor);
    var _map2 = _interopRequireDefault(_map);
    var _list2 = _interopRequireDefault(_list);
    var _map4 = _interopRequireDefault(_map3);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _user2 = _interopRequireDefault(_user);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Comment = _map4.default.extend('passbolt.model.Comment', {
        id: 'string',
        parent_id: 'string',
        foreign_model: 'string',
        foreign_key: 'string',
        content: 'string',
        created: 'string',
        modified: 'string',
        creator: _user2.default,
        modifier: _user2.default
    });
    _map4.default.setReference('Comment', Comment);
    Comment.List = _list2.default.extend({ '#': { Type: Comment } });
    Comment.validationRules = {
        id: [{ rule: 'uuid' }],
        content: [
            {
                rule: 'required',
                message: __('A comment is required.')
            },
            {
                rule: [
                    'lengthBetween',
                    1,
                    255
                ],
                message: __('The comment should be between %s and %s characters.', 1, 255)
            },
            {
                rule: 'utf8Extended',
                message: __('The comment should be a valid utf8 string.')
            }
        ]
    };
    Comment.connection = (0, _canConnect2.default)([
        _parse2.default,
        _url2.default,
        _constructor2.default,
        _map2.default
    ], {
        Map: Comment,
        List: Comment.List,
        url: {
            resource: '/',
            createData: function createData(params) {
                return _ajax2.default.request({
                    url: 'comments/resource/{foreign_key}.json?api-version=v2',
                    type: 'POST',
                    params: params
                });
            },
            getListData: function getListData(params) {
                params = params || {};
                params['api-version'] = 'v2';
                return _ajax2.default.request({
                    url: 'comments/resource/{foreignKey}.json',
                    type: 'GET',
                    params: params
                });
            },
            destroyData: function destroyData(params) {
                return _ajax2.default.request({
                    url: 'comments/' + params.id + '.json?api-version=v2',
                    type: 'DELETE'
                });
            }
        }
    });
    exports.default = Comment;
});
/*app/view/template/form/comment/add.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/form/comment/add.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/form/comment/add.stache', [
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'comment-wrapper',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'form',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_comment_add_form',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form comment add',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'form',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'wrap-right-column',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'right-column',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form-content',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'data[comment][parent_id]',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_comment_parent_id required',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'hidden',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'data[comment][foreign_key]',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_comment_foreign_key required',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'hidden',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'data[comment][foreign_model]',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_comment_foreign_model required',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'hidden',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input textarea required',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                            ',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'for',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_comment_content',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'for',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Add a comment',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                            ',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'textarea',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_comment_content',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'data[comment][content]',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_comment_content required',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'maxlength',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '255',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'maxlength',
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                12
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'add a comment\' ',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'textarea',
                false,
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'textarea',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                            ',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_comment_content_feedback message',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'metadata',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                            ',
                15
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                16
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'author username',
                16
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                16
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                16
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                16
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'You\') ',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                            ',
                16
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                17
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modified',
                17
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                17
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'right now\') ',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                18
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'actions',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                            ',
                19
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'button',
                false,
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'submit',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button comment-submit',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'button',
                false,
                20
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                20
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                20
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'send\') ',
                20
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                20
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'button',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                        ',
                20
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                21
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                22
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                23
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                24
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                25
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                25
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'left-column',
                25
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                25
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                25
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(user.profile.avatar)',
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                26
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                27
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                27
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'author profile picture',
                27
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                27
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                27
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                27
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                27
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'img',
                true,
                27
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'src',
                27
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' user.profile.avatar.url.small ',
                27
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'src',
                27
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'alt',
                27
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' user.profile.first_name ',
                27
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' ',
                27
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' user.profile.last_name ',
                27
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                ' avatar',
                27
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'alt',
                27
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'img',
                true,
                27
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                27
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                27
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                27
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                28
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                28
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                29
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                29
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'form',
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                30
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                31
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                31
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                32
            ]
        },
        {
            'tokenType': 'done',
            'args': [32]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/form/comment/create*/
define('app/form/comment/create', [
    'exports',
    'passbolt-mad/form/feedback',
    'passbolt-mad/form/form',
    'passbolt-mad/form/element/textbox',
    'app/model/map/user',
    'app/view/template/form/comment/add.stache!'
], function (exports, _feedback, _form, _textbox, _user, _add) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _feedback2 = _interopRequireDefault(_feedback);
    var _form2 = _interopRequireDefault(_form);
    var _textbox2 = _interopRequireDefault(_textbox);
    var _user2 = _interopRequireDefault(_user);
    var _add2 = _interopRequireDefault(_add);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var CreateForm = _form2.default.extend('passbolt.form.comment.Create', {
        defaults: {
            foreignModel: null,
            foreignKey: null,
            template: _add2.default,
            commentContentField: null
        }
    }, {
        init: function init(el, options) {
            this._super(el, options);
            this.setViewData('user', _user2.default.getCurrent());
        },
        afterStart: function afterStart() {
            this.addElement(new _textbox2.default('#' + this.element.id + ' .js_comment_parent_id', { modelReference: 'Comment.parent_id' }).start());
            this.addElement(new _textbox2.default('#' + this.element.id + ' .js_comment_foreign_key', { modelReference: 'Comment.foreign_key' }).start().setValue(this.options.foreignKey));
            this.options.commentContentField = new _textbox2.default('#' + this.element.id + ' .js_comment_content', { modelReference: 'Comment.content' }).start();
            this.addElement(this.options.commentContentField, new _feedback2.default('#' + this.element.id + ' .js_comment_content_feedback', {}).start());
        },
        emptyContent: function emptyContent() {
            this.options.commentContentField.setValue('');
        },
        stateReady: function stateReady() {
            this.options.commentContentField.setValue('');
        },
        stateHidden: function stateHidden(go) {
            this._super(go);
            this.validations = 0;
        }
    });
    exports.default = CreateForm;
});
/*app/view/template/component/comment/comment_item.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/comment/comment_item.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/comment/comment_item.stache', [
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'comment-wrapper',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.id ',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'comment',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'wrap-right-column',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'right-column',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'content-wrapper',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.content ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'metadata',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'author username',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.creatorName ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modified',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                9
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' getTimeAgo(mappedItem.modified) ',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(mappedItem.isOwner)',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'actions',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t\t',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                14
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t\t\t',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_delete_comment',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t\t\t\t',
                15
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                16
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-trash',
                16
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t\t\t\t',
                16
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                17
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visuallyhidden',
                17
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'delete',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t\t\t',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t\t',
                18
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t\t',
                19
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                20
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                21
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                22
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                23
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                24
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                25
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                26
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                26
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'left-column',
                26
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                26
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                26
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                27
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                27
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'author profile picture',
                27
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                27
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                27
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                27
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                27
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                27
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'img',
                true,
                28
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'src',
                28
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.creatorAvatarPath ',
                28
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'src',
                28
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'alt',
                28
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'comment author picture',
                28
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'alt',
                28
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'img',
                true,
                28
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                28
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                29
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                29
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                29
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                30
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                31
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                31
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                32
            ]
        },
        {
            'tokenType': 'done',
            'args': [32]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/comment/comments_list*/
define('app/component/comment/comments_list', [
    'exports',
    'app/model/map/comment',
    'can-dom-data',
    'passbolt-mad/control/bus',
    'passbolt-mad/util/map/map',
    'passbolt-mad/component/tree',
    'app/model/map/user',
    'app/view/template/component/comment/comment_item.stache!'
], function (exports, _comment, _canDomData, _bus, _map, _tree, _user, _comment_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _comment2 = _interopRequireDefault(_comment);
    var _canDomData2 = _interopRequireDefault(_canDomData);
    var _bus2 = _interopRequireDefault(_bus);
    var _map2 = _interopRequireDefault(_map);
    var _tree2 = _interopRequireDefault(_tree);
    var _user2 = _interopRequireDefault(_user);
    var _comment_item2 = _interopRequireDefault(_comment_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var CommentsListComponent = _tree2.default.extend('passbolt.component.comment.CommentsList', {
        defaults: {
            label: 'Comments List Controller',
            itemClass: _comment2.default,
            itemTemplate: _comment_item2.default
        }
    }, {
        init: function init(el, options) {
            options.map = this._getMap();
            this._super(el, options);
        },
        _getMap: function _getMap() {
            return new _map2.default({
                id: 'id',
                content: 'content',
                modified: 'modified',
                creatorAvatarPath: {
                    key: 'creator',
                    func: function func(creator) {
                        return creator.profile.avatarPath('small');
                    }
                },
                creatorName: {
                    key: 'creator',
                    func: function func(creator) {
                        return creator.profile.fullName();
                    }
                },
                isOwner: {
                    key: 'created_by',
                    func: function func(createdBy) {
                        return createdBy == _user2.default.getCurrent().id;
                    }
                }
            });
        },
        '{element} .actions a.js_delete_comment click': function elementActionsAJs_delete_commentClick(el, ev) {
            ev.stopPropagation();
            ev.preventDefault();
            var $li = $(el).parents('li.comment-wrapper');
            var comment = _canDomData2.default.get($li[0], _comment2.default.shortName);
            _bus2.default.trigger('request_delete_comment', { comment: comment });
        }
    });
    exports.default = CommentsListComponent;
});
/*app/view/template/component/comment/comments_sidebar_section.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/comment/comments_sidebar_section.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/comment/comments_sidebar_section.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-header',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h4',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h4',
                false,
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-trigger',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Comments\') ',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h4',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-content',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_add_comment section-action',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-plus-circle',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visuallyhidden',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'create\') ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'processing-wrapper',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'processing-text',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Retrieving comments ',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_rs_details_comments_list',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                14
            ]
        },
        {
            'tokenType': 'done',
            'args': [14]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/comment/comments_sidebar_section*/
define('app/component/comment/comments_sidebar_section', [
    'exports',
    'app/model/map/comment',
    'app/form/comment/create',
    'app/component/comment/comments_list',
    'passbolt-mad/helper/component',
    'app/component/workspace/secondary_sidebar_section',
    'app/view/template/component/comment/comments_sidebar_section.stache!'
], function (exports, _comment, _create, _comments_list, _component, _secondary_sidebar_section, _comments_sidebar_section) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _comment2 = _interopRequireDefault(_comment);
    var _create2 = _interopRequireDefault(_create);
    var _comments_list2 = _interopRequireDefault(_comments_list);
    var _component2 = _interopRequireDefault(_component);
    var _secondary_sidebar_section2 = _interopRequireDefault(_secondary_sidebar_section);
    var _comments_sidebar_section2 = _interopRequireDefault(_comments_sidebar_section);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var CommentsSidebarSectionComponent = _secondary_sidebar_section2.default.extend('passbolt.component.comment.CommentsSidebarSection', {
        defaults: {
            label: 'Comments Controller',
            loadedOnStart: false,
            resource: null,
            foreignModel: null,
            foreignKey: null,
            template: _comments_sidebar_section2.default,
            Comment: _comment2.default
        }
    }, {
        afterStart: function afterStart() {
            this._initCommentsList();
            if (this.state.opened) {
                this.open();
            }
            this._super();
        },
        _initCommentsList: function _initCommentsList() {
            var component = new _comments_list2.default('#js_rs_details_comments_list', {
                resource: this.options.resource,
                foreignModel: this.options.foreignModel,
                foreignKey: this.options.foreignKey,
                state: 'loading'
            });
            component.start();
            this.commentsList = component;
        },
        open: function open() {
            var _this = this;
            $('.processing-wrapper', this.element).show();
            this.commentsList.reset();
            this._findComments().then(function (comments) {
                $('.processing-wrapper', _this.element).hide();
                _this._loadComments(comments);
            });
            this._super();
        },
        _findComments: function _findComments() {
            var findOptions = {
                foreignKey: this.options.foreignKey,
                contain: { creator: 1 }
            };
            return _comment2.default.findAll(findOptions);
        },
        _loadComments: function _loadComments(comments) {
            if (this.state.destroyed) {
                return;
            }
            this.commentsList.reset();
            if (comments.length) {
                this.commentsList.load(comments);
            } else {
                this._enableForm();
            }
            this.commentsList.state.loaded = true;
            this.state.loaded = true;
        },
        _enableForm: function _enableForm() {
            var _this2 = this;
            if (this.form) {
                return;
            }
            var formOptions = {
                id: 'js_rs_details_comments_add_form',
                foreignModel: this.options.foreignModel,
                foreignKey: this.options.foreignKey,
                tag: 'div',
                callbacks: {
                    submit: function submit(formData) {
                        _this2._saveComment(formData, form);
                    }
                }
            };
            var selector = $('.accordion-content #js_rs_details_comments_list', this.element);
            var form = _component2.default.create(selector, 'before', _create2.default, formOptions);
            form.start();
            this.form = form;
        },
        _saveComment: function _saveComment(formData) {
            var _this3 = this;
            var comment = new _comment2.default(formData['Comment']);
            comment.save().then(function () {
                $(_this3.form.destroyAndRemove());
                _this3.form = null;
            });
        },
        '{Comment} created': function CommentCreated(model, ev, comment) {
            var _this4 = this;
            if (comment.foreign_key == this.options.resource.id) {
                this.state.loaded = false;
                this._findComments().then(function (comments) {
                    return _this4._loadComments(comments);
                });
            }
        },
        '{Comment} destroyed': function CommentDestroyed(model, ev, comment) {
            this.commentsList.removeItem(comment);
            if (this.commentsList.options.items.length == 0) {
                this._enableForm();
            }
        },
        '{element} a.js_add_comment click': function elementAJs_add_commentClick() {
            this._enableForm();
        }
    });
    exports.default = CommentsSidebarSectionComponent;
});
/*app/view/template/form/resource/edit_description.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/form/resource/edit_description.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/form/resource/edit_description.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form-content resource-description-edit-wrapper',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'data[Resource][id]',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_resource_id required',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'hidden',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text required js_form_element_wrapper',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'textarea',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'data[Resource][description]',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_resource_description',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'maxlength',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '10000',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'maxlength',
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'enter a description\') ',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'textarea',
                false,
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'textarea',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_resource_description_feedback message',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'actions',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'submit',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button resource-submit',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value',
                11
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'save\') ',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_resource_description_edit_cancel',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button cancel tag-editor-cancel',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                12
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'cancel\')',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                14
            ]
        },
        {
            'tokenType': 'done',
            'args': [15]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/form/resource/edit_description*/
define('app/form/resource/edit_description', [
    'exports',
    'can-dom-events',
    'passbolt-mad/form/feedback',
    'passbolt-mad/form/form',
    'passbolt-mad/form/element/textbox',
    'app/view/template/form/resource/edit_description.stache!'
], function (exports, _canDomEvents, _feedback, _form, _textbox, _edit_description) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canDomEvents2 = _interopRequireDefault(_canDomEvents);
    var _feedback2 = _interopRequireDefault(_feedback);
    var _form2 = _interopRequireDefault(_form);
    var _textbox2 = _interopRequireDefault(_textbox);
    var _edit_description2 = _interopRequireDefault(_edit_description);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var EditDescriptionForm = _form2.default.extend('passbolt.form.resource.EditDescription', { defaults: { template: _edit_description2.default } }, {
        afterStart: function afterStart() {
            var _this = this;
            var idSelector = '#' + this.element.id + ' .js_resource_id';
            var idOptions = {
                modelReference: 'Resource.id',
                value: this.options.data.Resource.id
            };
            var idTextbox = new _textbox2.default(idSelector, idOptions);
            this.addElement(idTextbox).start();
            var descriptionSelector = '#' + this.element.id + ' .js_resource_description';
            var descriptionOptions = {
                modelReference: 'Resource.description',
                value: this.options.data.Resource.description
            };
            var descriptionTextbox = new _textbox2.default(descriptionSelector, descriptionOptions).start();
            var descriptionFeedback = new _feedback2.default('#' + this.element.id + ' .js_resource_description_feedback').start();
            this.addElement(descriptionTextbox, descriptionFeedback);
            $('.button.resource-submit').click(function () {
                _canDomEvents2.default.dispatch(_this.element, { type: 'submit' });
            });
        }
    });
    exports.default = EditDescriptionForm;
});
/*app/view/template/component/password/description_sidebar_section.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/password/description_sidebar_section.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/password/description_sidebar_section.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-header',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h4',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h4',
                false,
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-trigger',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Description\') ',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h4',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-content',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(canEdit)',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'edit_description_button section-action',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_edit_description_button',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-edit',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visuallyhidden',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '<%= __(\'edit\') %>',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                11
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(resource.description)',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'p',
                false,
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'description_content',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'p',
                false,
                14
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                'resource.description',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'p',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                14
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#else',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                15
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(canEdit)',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                16
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'em',
                false,
                17
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'empty-content',
                17
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'em',
                false,
                17
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'There is no description yet, click edit to add one\')',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'em',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                17
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#else',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                18
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'em',
                false,
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'empty-content',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'em',
                false,
                19
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'There is no description\')',
                19
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'em',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                19
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                20
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                21
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                22
            ]
        },
        {
            'tokenType': 'done',
            'args': [23]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/password/description_sidebar_section*/
define('app/component/password/description_sidebar_section', [
    'exports',
    'passbolt-mad/helper/component',
    'app/model/map/permission_type',
    'app/form/resource/edit_description',
    'app/component/workspace/secondary_sidebar_section',
    'app/view/template/component/password/description_sidebar_section.stache!'
], function (exports, _component, _permission_type, _edit_description, _secondary_sidebar_section, _description_sidebar_section) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _component2 = _interopRequireDefault(_component);
    var _permission_type2 = _interopRequireDefault(_permission_type);
    var _edit_description2 = _interopRequireDefault(_edit_description);
    var _secondary_sidebar_section2 = _interopRequireDefault(_secondary_sidebar_section);
    var _description_sidebar_section2 = _interopRequireDefault(_description_sidebar_section);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var DescriptionSidebarSectionComponent = _secondary_sidebar_section2.default.extend('passbolt.component.password.DescriptionSidebarSection', {
        defaults: {
            label: 'Sidebar Section Description Controller',
            template: _description_sidebar_section2.default,
            resource: null
        }
    }, {
        init: function init(el, options) {
            this._super(el, options);
            this.editing = false;
        },
        beforeRender: function beforeRender() {
            this._super();
            this.setViewData('resource', this.options.resource);
            this.setViewData('canEdit', this._canUpdate());
        },
        _canUpdate: function _canUpdate() {
            var resource = this.options.resource;
            return resource.permission.isAllowedTo(_permission_type2.default.UPDATE);
        },
        '{element} a#js_edit_description_button click': function elementAJs_edit_description_buttonClick() {
            if (!this._canUpdate()) {
                return;
            }
            if (!this.editing) {
                this.enableEditMode();
            } else {
                this.disableEditMode();
            }
        },
        '{element} p.description_content click': function elementPDescription_contentClick() {
            if (!this._canUpdate() || this._editing) {
                return;
            }
            this.enableEditMode();
        },
        '{element} em.empty-content click': function elementEmEmptyContentClick() {
            if (!this._canUpdate() || this._editing) {
                return;
            }
            this.enableEditMode();
        },
        '{element} #js_resource_description_edit_cancel click': function elementJs_resource_description_edit_cancelClick() {
            if (this.editing) {
                this.disableEditMode();
            }
        },
        '{window} click': function windowClick(el, ev) {
            if (!this.editing) {
                return;
            }
            var componentIsSrc = this.element.id == ev.target.id;
            var componentIsParent = $(ev.target).parents('#' + this.getId()).length;
            if (!componentIsSrc && !componentIsParent) {
                this.disableEditMode();
            }
        },
        enableEditMode: function enableEditMode() {
            var _this = this;
            this.editing = true;
            var resource = this.options.resource;
            var formOptions = {
                id: 'js_rs_details_edit_description',
                resource: resource,
                data: { Resource: resource },
                callbacks: {
                    submit: function submit(formData) {
                        _this._saveResource(resource, formData);
                    }
                }
            };
            $('.description_content, .empty-content', this.element).addClass('hidden');
            var selector = $('.accordion-content', this.element);
            var form = _component2.default.create(selector, 'last', _edit_description2.default, formOptions);
            form.start();
            this.form = form;
        },
        disableEditMode: function disableEditMode() {
            this.editing = false;
            this.form.destroyAndRemove();
            $('.description_content, .empty-content', this.element).removeClass('hidden');
        },
        _saveResource: function _saveResource(resource, formData) {
            resource.description = formData['Resource']['description'];
            resource.__FILTER_CASE__ = 'edit_description';
            resource.save();
            this.disableEditMode();
        }
    });
    exports.default = DescriptionSidebarSectionComponent;
});
/*app/view/template/component/password/information_sidebar_section.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/password/information_sidebar_section.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/password/information_sidebar_section.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-header',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h4',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h4',
                false,
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-trigger',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Information\') ',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h4',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-content',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'username',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                7
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Username\') ',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' resource.username ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'password',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                11
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Password\') ',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'secret-copy',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'sidebar_secret_copy_',
                14
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' resource.id ',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                14
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'copy password to clipboard',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                16
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'pre',
                false,
                17
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'pre',
                false,
                17
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' resource.secrets[0].data ',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'pre',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                18
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                19
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                20
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                21
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                21
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'uri',
                21
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                21
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                21
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                22
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                22
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                22
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                22
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                22
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'URL\') ',
                22
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                22
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                23
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                23
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                23
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(resource.safeUrl() != \'\')',
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                24
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                25
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'href',
                25
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' resource.safeUrl() ',
                25
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'href',
                25
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'target',
                25
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                '_blank',
                25
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'target',
                25
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'rel',
                25
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'noopener',
                25
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'rel',
                25
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                25
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' resource.uri ',
                25
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                25
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#else',
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                26
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' resource.uri ',
                27
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                27
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                28
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                28
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                29
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                29
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                30
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                31
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                31
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'created',
                31
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                31
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                31
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                31
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                32
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                32
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                32
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                32
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                32
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Created\') ',
                32
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                32
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                32
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                33
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                33
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                33
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                33
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                33
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' getTimeAgo(resource._data.created) ',
                33
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                33
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                33
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                34
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                34
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                35
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                35
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'created-by',
                35
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                35
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                35
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                35
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                36
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                36
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                36
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                36
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                36
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Created by\') ',
                36
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                36
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                36
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                37
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                37
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                37
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                37
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                37
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' resource.creator.username ',
                37
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                37
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                37
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                38
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                38
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                39
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                39
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modified',
                39
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                39
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                39
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                39
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                40
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                40
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                40
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                40
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                40
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Last modified\') ',
                40
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                40
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                40
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                41
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                41
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                41
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                41
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                41
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' getTimeAgo(resource.modified) ',
                41
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                41
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                41
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                42
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                42
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                43
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                43
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'modified-by',
                43
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                43
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                43
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                43
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                44
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                44
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'label',
                44
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                44
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                44
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Modified by\') ',
                44
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                44
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                44
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                45
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                45
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'value',
                45
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                45
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                45
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' resource.modifier.username ',
                45
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                45
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                45
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                46
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                46
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                47
            ]
        },
        {
            'tokenType': 'done',
            'args': [47]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/password/information_sidebar_section*/
define('app/component/password/information_sidebar_section', [
    'exports',
    'app/util/clipboard',
    'app/util/plugin',
    'app/model/map/resource',
    'app/component/workspace/secondary_sidebar_section',
    'app/view/template/component/password/information_sidebar_section.stache!'
], function (exports, _clipboard, _plugin, _resource, _secondary_sidebar_section, _information_sidebar_section) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _clipboard2 = _interopRequireDefault(_clipboard);
    var _plugin2 = _interopRequireDefault(_plugin);
    var _resource2 = _interopRequireDefault(_resource);
    var _secondary_sidebar_section2 = _interopRequireDefault(_secondary_sidebar_section);
    var _information_sidebar_section2 = _interopRequireDefault(_information_sidebar_section);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var InformationSidebarSectionComponent = _secondary_sidebar_section2.default.extend('passbolt.component.password.InformationSidebarSection', {
        defaults: {
            label: 'Sidebar Section Information Controller',
            template: _information_sidebar_section2.default,
            resource: null
        }
    }, {
        init: function init(el, options) {
            this._super(el, options);
            this._findResource();
        },
        beforeRender: function beforeRender() {
            this._super();
            this.setViewData('resource', this.options.resource);
        },
        _findResource: function _findResource() {
            var _this2 = this;
            var _this = this;
            var findOptions = {
                id: this.options.resource.id,
                contain: {
                    creator: 1,
                    modifier: 1
                }
            };
            _resource2.default.findOne(findOptions).then(function (resource) {
                _this.options.resource = resource;
                _this.refresh();
            }, function () {
                console.error('Resource not found ' + _this2.options.resource.id);
            });
        },
        '{element} li.password .secret-copy > a click': function elementLiPasswordSecretCopyAClick() {
            var resource = this.options.resource;
            _plugin2.default.decryptSecretAndCopyToClipboard(resource.id);
        },
        '{element} li.username .value > a click': function elementLiUsernameValueAClick() {
            var item = this.options.resource;
            _clipboard2.default.copy(item.username, 'username');
        }
    });
    exports.default = InformationSidebarSectionComponent;
});
/*app/view/template/component/permission/permissions_sidebar_section.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/permission/permissions_sidebar_section.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/permission/permissions_sidebar_section.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-header',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h4',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h4',
                false,
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-trigger',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Shared with\') ',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h4',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-content',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#if(canAdmin)',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'edit_permissions_button section-action',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_edit_permissions_button',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-edit',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visuallyhidden',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                9
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'edit\') ',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'processing-wrapper',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'processing-text',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Retrieving permissions ',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\n\t',
                15
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                17
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                17
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_rs_details_permissions_list',
                17
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                17
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'shared-with',
                17
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                18
            ]
        },
        {
            'tokenType': 'done',
            'args': [19]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/permission/permissions_sidebar_list_item.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/permission/permissions_sidebar_list_item.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/permission/permissions_sidebar_list_item.stache', [
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.id ',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'permission usercard-col-2 ',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' cssClasses.join(\' \') ',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'content-wrapper',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'content',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'name',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.acoLabel ',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' (',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.acoDetails ',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ')',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'subinfo',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.permLabel ',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'avatar',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'img',
                true,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'src',
                9
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.aroAvatarPath ',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'src',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'img',
                true,
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                11
            ]
        },
        {
            'tokenType': 'done',
            'args': [12]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/permission/permissions_sidebar_section*/
define('app/component/permission/permissions_sidebar_section', [
    'exports',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/control/bus',
    'passbolt-mad/util/map/map',
    'app/model/map/permission',
    'app/model/map/permission_type',
    'app/component/workspace/secondary_sidebar_section',
    'passbolt-mad/component/tree',
    'passbolt-mad/view/component/tree',
    'app/view/template/component/permission/permissions_sidebar_section.stache!',
    'app/view/template/component/permission/permissions_sidebar_list_item.stache!'
], function (exports, _i18n, _bus, _map, _permission, _permission_type, _secondary_sidebar_section, _tree, _tree3, _permissions_sidebar_section, _permissions_sidebar_list_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _i18n2 = _interopRequireDefault(_i18n);
    var _bus2 = _interopRequireDefault(_bus);
    var _map2 = _interopRequireDefault(_map);
    var _permission2 = _interopRequireDefault(_permission);
    var _permission_type2 = _interopRequireDefault(_permission_type);
    var _secondary_sidebar_section2 = _interopRequireDefault(_secondary_sidebar_section);
    var _tree2 = _interopRequireDefault(_tree);
    var _tree4 = _interopRequireDefault(_tree3);
    var _permissions_sidebar_section2 = _interopRequireDefault(_permissions_sidebar_section);
    var _permissions_sidebar_list_item2 = _interopRequireDefault(_permissions_sidebar_list_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PermissionsSidebarSectionComponent = _secondary_sidebar_section2.default.extend('passbolt.component.permission.PermissionsSidebarSection', {
        defaults: {
            label: 'Sidebar Section Permissions Component',
            template: _permissions_sidebar_section2.default,
            acoInstance: null
        }
    }, {
        permissionsList: null,
        beforeRender: function beforeRender() {
            this._super();
            var permission = this.options.acoInstance.permission;
            var canAdmin = permission.isAllowedTo(_permission_type2.default.ADMIN);
            this.setViewData('canAdmin', canAdmin);
        },
        afterStart: function afterStart() {
            this._initPermissionsList();
            if (this.state.opened) {
                this.open();
            }
            this._super();
        },
        open: function open() {
            this._showLoading();
            this._loadPermissions();
            this._super();
        },
        _initPermissionsList: function _initPermissionsList() {
            var map = this._getPermissionsListMap();
            var component = new _tree2.default('#js_rs_details_permissions_list', {
                cssClasses: [
                    'permissions',
                    'shared-with'
                ],
                viewClass: _tree4.default,
                itemClass: _permission2.default,
                itemTemplate: _permissions_sidebar_list_item2.default,
                map: map
            });
            component.start();
            this.permissionsList = component;
        },
        _getPermissionsListMap: function _getPermissionsListMap() {
            return new _map2.default({
                id: 'id',
                aroLabel: {
                    key: 'aro',
                    func: function func(aro) {
                        return aro.toLowerCase();
                    }
                },
                aroAvatarPath: {
                    key: 'id',
                    func: function func(user, map, obj) {
                        if (obj.aro == 'User') {
                            return obj.user.profile.avatarPath('small');
                        } else if (obj.aro == 'Group') {
                            return 'img/avatar/group_default.png';
                        }
                    }
                },
                permLabel: {
                    key: 'type',
                    func: function func(type) {
                        return _permission_type2.default.formatToString(type);
                    }
                },
                acoLabel: {
                    key: 'aco_foreign_key',
                    func: function func(aco_foreign_key, map, obj) {
                        if (obj.aro == 'User') {
                            return obj.user.profile.fullName();
                        } else if (obj.aro == 'Group') {
                            return obj.group.name;
                        }
                    }
                },
                acoDetails: {
                    key: 'aco_foreign_key',
                    func: function func(aco_foreign_key, map, obj) {
                        if (obj.aro == 'User') {
                            return obj.user.username;
                        } else if (obj.aro == 'Group') {
                            return __('group');
                        }
                    }
                }
            });
        },
        _showLoading: function _showLoading() {
        },
        _loadPermissions: function _loadPermissions() {
            var _this = this;
            var self = this;
            var aco_name = 'resource';
            var aco_foreign_key = this.options.acoInstance.id;
            $('.processing-wrapper', this.element).show();
            this.state.loaded = false;
            this.permissionsList.reset();
            return _permission2.default.findAll({
                aco: aco_name,
                aco_foreign_key: aco_foreign_key,
                contain: {
                    group: 1,
                    user: 1,
                    'user.profile': 1
                }
            }).then(function (permissions) {
                $('.processing-wrapper', _this.element).hide();
                self.permissionsList.load(permissions);
                _this.state.loaded = true;
            });
        },
        '{acoInstance} updated': function acoInstanceUpdated() {
            if ($(this.element).hasClass('closed')) {
                return;
            }
            this._loadPermissions();
        },
        '{element} a#js_edit_permissions_button click': function elementAJs_edit_permissions_buttonClick() {
            var resource = this.options.acoInstance;
            _bus2.default.trigger('request_resource_share', { resource: resource });
        }
    });
    exports.default = PermissionsSidebarSectionComponent;
});
/*app/model/map/tag*/
define('app/model/map/tag', [
    'exports',
    'app/net/ajax',
    'can-connect',
    'can-connect/data/url/url',
    'can-connect/data/parse/parse',
    'can-connect/constructor/constructor',
    'can-connect/can/map/map',
    'passbolt-mad/model/list/list',
    'passbolt-mad/model/map/map'
], function (exports, _ajax, _canConnect, _url, _parse, _constructor, _map, _list, _map3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _canConnect2 = _interopRequireDefault(_canConnect);
    var _url2 = _interopRequireDefault(_url);
    var _parse2 = _interopRequireDefault(_parse);
    var _constructor2 = _interopRequireDefault(_constructor);
    var _map2 = _interopRequireDefault(_map);
    var _list2 = _interopRequireDefault(_list);
    var _map4 = _interopRequireDefault(_map3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var Tag = _map4.default.extend('passbolt.model.Tag', {
        id: 'string',
        slug: 'string',
        user_id: 'string',
        is_shared: 'boolean'
    });
    _map4.default.setReference('Tag', Tag);
    Tag.List = _list2.default.extend({ '#': { Type: Tag } });
    Tag.updateResourceTags = function (resourceId, slugs) {
        return _ajax2.default.request({
            url: 'tags/{resourceId}.json?api-version=v2',
            type: 'POST',
            params: {
                Tags: slugs,
                resourceId: resourceId
            }
        }).then(function (data) {
            return Promise.resolve(new Tag.List(data));
        });
    };
    Tag.connection = (0, _canConnect2.default)([
        _parse2.default,
        _url2.default,
        _constructor2.default,
        _map2.default
    ], {
        Map: Tag,
        List: Tag.List,
        url: {
            resource: '/',
            getListData: function getListData(params) {
                params = params || {};
                params['api-version'] = 'v2';
                return _ajax2.default.request({
                    url: 'tags.json',
                    type: 'GET',
                    params: params
                });
            }
        }
    });
    exports.default = Tag;
});
/*lib/jquery.tag-editor*/
define('lib/jquery.tag-editor', [
    'module',
    '@loader',
    'require'
], function (module, loader, require) {
    loader.get('@@global-helpers').prepareGlobal({
        require: require,
        name: module.id,
        deps: []
    });
    var define = loader.global.define;
    var require = loader.global.require;
    var source = '/**\n * A simple tagEditor plugin for jQuery\n *\n * @copyright(c) 2018 Passbolt SARL\n * @licence MIT License\n */\n\n$(function() {\n  $.fn.tagEditor = function (userConfig) {\n\n    // Configuration\n    // we merge the default and the given data using \'deep\' extend feature\n    // see. http://api.jquery.com/jQuery.extend/\n    config = $.extend(true, {\n      checkDuplicates: true,\n      prefixSelectors: true,\n      startTags : [],\n      selector: {\n        tagEditorInput: \'.tag-editor-input\',\n        tagSubmit: \'.tag-editor-submit\',\n        tags: \'.tags\'\n      },\n      beforeDelete: function(slug) { return true },\n      beforeInsert: function(slug) { return true },\n      onSave : function() {\n        console.log(\'onSave callback is not defined\')\n      },\n      onChange : function () {}\n    }, userConfig || {});\n\n    // The plugin return itself so that you can chain\n    return this.each(function() {\n\n      /**\n       * Init the tag editor\n       * @param {string} tagEditorId\n       */\n      function main(tagEditorId) {\n        // Selector values helper\n        config.selector.main = tagEditorId;\n        if (config.prefixSelectors) {\n          config.selector.tagEditorInput = config.selector.main + \' \' + config.selector.tagEditorInput;\n          config.selector.tagSubmit = config.selector.main + \' \' + config.selector.tagSubmit;\n          config.selector.tags = config.selector.main + \' \' + config.selector.tags;\n          config.selector.tagDeleteButton = config.selector.main + \' .tag-delete\';\n          config.selector.tagContent = config.selector.main + \' .tag-content\';\n        }\n\n        if (config.startTags.length > 0) {\n          config.startTags.forEach(function (tag) {\n            createTag(tag, true);\n          });\n        }\n\n        // Bind click on tag editor event\n        $(config.selector.main).click(function () {\n          setFocus();\n        });\n\n        // Bind handle when pasting in input\n        $(config.selector.tagEditorInput).bind("paste", function (event) {\n          onPaste(event);\n        });\n\n        // Bind handle when typing in the input\n        $(config.selector.tagEditorInput).keyup(onKeyUp);\n        $(config.selector.tagEditorInput).keydown(onKeyDown);\n\n        // Bind focus events\n        $(config.selector.tagEditorInput).focusin(function() {\n          $(\'.tag-editor-input-wrapper\').addClass(\'input-focus\');\n        });\n        $(config.selector.tagEditorInput).blur(function() {\n          $(\'.tag-editor-input-wrapper\').removeClass(\'input-focus\');\n        });\n\n        $(config.selector.tagSubmit).click(onSubmit);\n\n        bindDeleteButtons();\n      }\n\n      /**\n       * Sanitize a user land string for tags\n       * @param {string} unsafe\n       * @returns {string} safe\n       */\n      function sanitize(unsafe) {\n        return unsafe\n          .replace(/<div><br><\\/div>/g, "")\n          .replace(/<br>/g, "")\n          .replace(/&/g, "&amp;")\n          .replace(/</g, "&lt;")\n          .replace(/>/g, "&gt;")\n          .replace(/"/g, "&quot;")\n          .replace(/\'/g, "&#039;")\n          .replace(/\\n/g, "")\n          .replace(/,/g, "")\n          .replace(/;/g, "")\n          .trim();\n      }\n\n      /**\n       * Place focus in input text field\n       */\n      function setFocus() {\n        $(config.selector.tagEditorInput).focus();\n      }\n\n      /**\n       * Add the tag to the existing list\n       * @param {string} tag\n       * @param {bool} skipOnChange skip onChange callback\n       */\n      function createTag(tag, skipOnChange) {\n        // Do not add if it\'s already there\n        if (config.checkDuplicates) {\n          var existingTags = getAllTags();\n          if (existingTags.indexOf(tag) > -1) {\n            flashTag(tag);\n            return;\n          }\n        }\n\n        // keep \\n in template for regular spacing\n        var html = \'<div class="tag">\\n\' +\n          \'<span class="tag-content">\' + sanitize(tag) + \'</span>\\n\' +\n          \'<span class="tag-delete"><i class="fa fa-times"></i></span>\\n\' +\n          \'</div>\';\n        $(config.selector.tags).append(html);\n\n        bindDeleteButtons();\n\n        // notify changes\n        if (!skipOnChange) {\n          config.onChange(getAllTags());\n        }\n      }\n\n      /**\n       * Get the current value of the text input\n       * @return {string|bool}\n       */\n      function getInputValue() {\n        var html = $(config.selector.tagEditorInput).html();\n        if (html === \'\' || html === \'<br>\' || html == \'<div><br></div>\') {\n          return false;\n        } else {\n          return html;\n        }\n        // return $(config.selector.tagEditorInput).val();\n      }\n\n      /**\n       * Reset the value of the tag text input\n       */\n      function resetInputValue() {\n        $(config.selector.tagEditorInput).empty();\n      }\n\n      /**\n       * When a key is pressed\n       * @param {jQuery.Event} event\n       */\n      function onKeyDown(event) {\n        if (event.which === 13 || event.which === 188 || event.which === 186) { /* on enter or , or ; */\n          onPressEnter(event);\n          return;\n        }\n        if (event.which === 8) { /* on delete */\n          onPressDelete(event);\n          return;\n        }\n      }\n\n      /**\n       * When a key is pressed and released\n       * @param {jQuery.Event} event\n       */\n      function onKeyUp(event) {\n        if (event.which === 0 && !event.shiftKey) { /* on tab move focus to save button */\n          $(config.selector.tagSubmit).focus();\n          event.preventDefault();\n        }\n      }\n\n      function deleteTag(el) {\n        var slug = $(\'.tag-content\', el).html();\n        if (!slug || !config.beforeDelete(slug)) {\n          flashTag(slug);\n          return;\n        }\n        el.remove();\n        config.onChange(getAllTags());\n      }\n\n      /**\n       * When user press backspace\n       * @param {jQuery.Event} event\n       */\n      function onPressDelete(event) {\n        if (!getInputValue()) {\n          var el = $(config.selector.tags + \' .tag\').last();\n          deleteTag(el);\n          event.preventDefault();\n        }\n      }\n\n      /**\n       * When user press enter(or , or ;)\n       * @param {jQuery.Event} event\n       */\n      function onPressEnter(event) {\n        var slug = getInputValue();\n        if (slug) {\n          var slug = sanitize(slug);\n          if (config.beforeInsert(slug)) {\n            createTag(slug);\n            resetInputValue();\n          }\n        }\n        event.preventDefault();\n      }\n\n      /**\n       * When user submit for save\n       * @param event\n       */\n      function onSubmit(event) {\n        if (getInputValue()) {\n          var slug = getInputValue();\n          if (config.beforeInsert(slug)) {\n            createTag(slug);\n          } else {\n            return;\n          }\n        }\n        config.onSave(getAllTags());\n        resetInputValue();\n        event.preventDefault();\n      }\n\n      /**\n       * When user paste in the field\n       * @param {jQuery.Event} event\n       */\n      function onPaste(event) {\n        var pastedData = event.originalEvent.clipboardData.getData(\'text\');\n        var tags = pastedData.split(new RegExp(\',|;\', \'g\'));\n        tags.forEach(function (tag) {\n          if (tag) {\n            if (config.beforeInsert(tag)) {\n              createTag(tag);\n            }\n          }\n        });\n        event.preventDefault();\n      }\n\n      /**\n       * Delete tag clicking on a tag \'x\'\n       */\n      function bindDeleteButtons() {\n        $(config.selector.tagDeleteButton).click(function () {\n          deleteTag($(this).parent());\n        });\n      }\n\n      /**\n       * Return all the tags currently set in editor\n       * @returns {Array}\n       */\n      function getAllTags() {\n        var tags = [];\n        $(config.selector.tagContent).each(function () {\n          tags.push($(this).html());\n        });\n        return tags;\n      }\n\n      /**\n       * Flash a given tag\n       * @param {string} tag\n       */\n      function flashTag(tag) {\n        $(config.selector.tagContent).each(function () {\n          if($(this).html() === tag) {\n            var _this = this;\n            $(_this).toggleClass(\'blink-fast\');\n            setTimeout(function(){ $(_this).toggleClass(\'blink-fast\'); }, 500);\n          }\n        });\n      }\n\n      // starts\n      main(\'#\' + this.id);\n\n    });\n  };\n});';
    loader.global.define = undefined;
    loader.global.module = undefined;
    loader.global.exports = undefined;
    loader.__exec({
        'source': source,
        'address': module.uri
    });
    loader.global.require = require;
    loader.global.define = define;
    return loader.get('@@global-helpers').retrieveGlobal(module.id, undefined);
});
/*lib/autocomplete*/
var autoComplete = function () {
    function autoComplete(options) {
        if (!document.querySelector)
            return;
        function hasClass(el, className) {
            return el.classList ? el.classList.contains(className) : new RegExp('\\b' + className + '\\b').test(el.className);
        }
        function addEvent(el, type, handler) {
            if (el.attachEvent)
                el.attachEvent('on' + type, handler);
            else
                el.addEventListener(type, handler);
        }
        function removeEvent(el, type, handler) {
            if (el.detachEvent)
                el.detachEvent('on' + type, handler);
            else
                el.removeEventListener(type, handler);
        }
        function live(elClass, event, cb, context) {
            addEvent(context || document, event, function (e) {
                var found, el = e.target || e.srcElement;
                while (el && !(found = hasClass(el, elClass)))
                    el = el.parentElement;
                if (found)
                    cb.call(el, e);
            });
        }
        var o = {
            selector: 0,
            source: 0,
            minChars: 3,
            delay: 150,
            offsetLeft: 0,
            offsetTop: 1,
            cache: 1,
            menuClass: '',
            renderItem: function (item, search) {
                search = search.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
                var re = new RegExp('(' + search.split(' ').join('|') + ')', 'gi');
                return '<div class="autocomplete-suggestion" data-val="' + item + '">' + item.replace(re, '<b>$1</b>') + '</div>';
            },
            onSelect: function (e, term, item) {
            }
        };
        for (var k in options) {
            if (options.hasOwnProperty(k))
                o[k] = options[k];
        }
        var elems = typeof o.selector == 'object' ? [o.selector] : document.querySelectorAll(o.selector);
        for (var i = 0; i < elems.length; i++) {
            var that = elems[i];
            that.sc = document.createElement('div');
            that.sc.className = 'autocomplete-suggestions ' + o.menuClass;
            that.autocompleteAttr = that.getAttribute('autocomplete');
            that.setAttribute('autocomplete', 'off');
            that.cache = {};
            that.last_val = '';
            that.getValue = function () {
                if (that.contentEditable === 'true') {
                    return that.innerHTML;
                } else {
                    return that.value;
                }
            };
            that.setValue = function (val) {
                if (that.contentEditable === 'true') {
                    that.innerHTML = val;
                } else {
                    that.value = val;
                }
            };
            that.updateSC = function (resize, next) {
                var rect = that.getBoundingClientRect();
                that.sc.style.left = Math.round(rect.left + (window.pageXOffset || document.documentElement.scrollLeft) + o.offsetLeft) + 'px';
                that.sc.style.top = Math.round(rect.bottom + (window.pageYOffset || document.documentElement.scrollTop) + o.offsetTop) + 'px';
                that.sc.style.width = Math.round(rect.right - rect.left) + 'px';
                if (!resize) {
                    that.sc.style.display = 'block';
                    if (!that.sc.maxHeight) {
                        that.sc.maxHeight = parseInt((window.getComputedStyle ? getComputedStyle(that.sc, null) : that.sc.currentStyle).maxHeight);
                    }
                    if (!that.sc.suggestionHeight)
                        that.sc.suggestionHeight = that.sc.querySelector('.autocomplete-suggestion').offsetHeight;
                    if (that.sc.suggestionHeight)
                        if (!next)
                            that.sc.scrollTop = 0;
                        else {
                            var scrTop = that.sc.scrollTop, selTop = next.getBoundingClientRect().top - that.sc.getBoundingClientRect().top;
                            if (selTop + that.sc.suggestionHeight - that.sc.maxHeight > 0)
                                that.sc.scrollTop = selTop + that.sc.suggestionHeight + scrTop - that.sc.maxHeight;
                            else if (selTop < 0)
                                that.sc.scrollTop = selTop + scrTop;
                        }
                }
            };
            addEvent(window, 'resize', that.updateSC);
            document.body.appendChild(that.sc);
            live('autocomplete-suggestion', 'mouseleave', function (e) {
                var sel = that.sc.querySelector('.autocomplete-suggestion.selected');
                if (sel)
                    setTimeout(function () {
                        sel.className = sel.className.replace('selected', '');
                    }, 20);
            }, that.sc);
            live('autocomplete-suggestion', 'mouseover', function (e) {
                var sel = that.sc.querySelector('.autocomplete-suggestion.selected');
                if (sel)
                    sel.className = sel.className.replace('selected', '');
                this.className += ' selected';
            }, that.sc);
            live('autocomplete-suggestion', 'mousedown', function (e) {
                if (hasClass(this, 'autocomplete-suggestion')) {
                    var v = this.getAttribute('data-val');
                    that.setValue(v);
                    o.onSelect(e, v, this);
                    that.sc.style.display = 'none';
                }
            }, that.sc);
            that.blurHandler = function () {
                try {
                    var over_sb = document.querySelector('.autocomplete-suggestions:hover');
                } catch (e) {
                    var over_sb = 0;
                }
                if (!over_sb) {
                    that.last_val = that.getValue();
                    that.sc.style.display = 'none';
                    setTimeout(function () {
                        that.sc.style.display = 'none';
                    }, 350);
                } else if (that !== document.activeElement)
                    setTimeout(function () {
                        that.focus();
                    }, 20);
            };
            addEvent(that, 'blur', that.blurHandler);
            var suggest = function (data) {
                var val = that.getValue();
                that.cache[val] = data;
                if (data.length && val.length >= o.minChars) {
                    var s = '';
                    for (var i = 0; i < data.length; i++)
                        s += o.renderItem(data[i], val);
                    that.sc.innerHTML = s;
                    that.updateSC(0);
                } else
                    that.sc.style.display = 'none';
            };
            that.keydownHandler = function (e) {
                var key = window.event ? e.keyCode : e.which;
                if ((key == 40 || key == 38) && that.sc.innerHTML) {
                    var next, sel = that.sc.querySelector('.autocomplete-suggestion.selected');
                    if (!sel) {
                        next = key == 40 ? that.sc.querySelector('.autocomplete-suggestion') : that.sc.childNodes[that.sc.childNodes.length - 1];
                        next.className += ' selected';
                        that.setValue(next.getAttribute('data-val'));
                    } else {
                        next = key == 40 ? sel.nextSibling : sel.previousSibling;
                        if (next) {
                            sel.className = sel.className.replace('selected', '');
                            next.className += ' selected';
                            that.setValue(next.getAttribute('data-val'));
                        } else {
                            sel.className = sel.className.replace('selected', '');
                            that.setValue(that.last_val);
                            next = 0;
                        }
                    }
                    that.updateSC(0, next);
                    return false;
                } else if (key == 27) {
                    that.setValue(that.last_val);
                    that.sc.style.display = 'none';
                } else if (key == 13 || key == 9) {
                    var sel = that.sc.querySelector('.autocomplete-suggestion.selected');
                    if (sel && that.sc.style.display != 'none') {
                        o.onSelect(e, sel.getAttribute('data-val'), sel);
                        setTimeout(function () {
                            that.sc.style.display = 'none';
                        }, 20);
                    }
                }
            };
            addEvent(that, 'keydown', that.keydownHandler);
            that.keyupHandler = function (e) {
                var key = window.event ? e.keyCode : e.which;
                if (!key || (key < 35 || key > 40) && key != 13 && key != 27) {
                    var val = that.getValue();
                    if (val.length >= o.minChars) {
                        if (val != that.last_val) {
                            that.last_val = val;
                            clearTimeout(that.timer);
                            if (o.cache) {
                                if (val in that.cache) {
                                    suggest(that.cache[val]);
                                    return;
                                }
                                for (var i = 1; i < val.length - o.minChars; i++) {
                                    var part = val.slice(0, val.length - i);
                                    if (part in that.cache && !that.cache[part].length) {
                                        suggest([]);
                                        return;
                                    }
                                }
                            }
                            that.timer = setTimeout(function () {
                                o.source(val, suggest);
                            }, o.delay);
                        }
                    } else {
                        that.last_val = val;
                        that.sc.style.display = 'none';
                    }
                }
            };
            addEvent(that, 'keyup', that.keyupHandler);
            that.focusHandler = function (e) {
                that.last_val = '\n';
                that.keyupHandler(e);
            };
            if (!o.minChars)
                addEvent(that, 'focus', that.focusHandler);
        }
        this.destroy = function () {
            for (var i = 0; i < elems.length; i++) {
                var that = elems[i];
                removeEvent(window, 'resize', that.updateSC);
                removeEvent(that, 'blur', that.blurHandler);
                removeEvent(that, 'focus', that.focusHandler);
                removeEvent(that, 'keydown', that.keydownHandler);
                removeEvent(that, 'keyup', that.keyupHandler);
                if (that.autocompleteAttr)
                    that.setAttribute('autocomplete', that.autocompleteAttr);
                else
                    that.removeAttribute('autocomplete');
                document.body.removeChild(that.sc);
                that = null;
            }
        };
    }
    return autoComplete;
}();
(function () {
    if (typeof define === 'function' && define.amd)
        define('lib/autocomplete', function () {
            return autoComplete;
        });
    else if (typeof module !== 'undefined' && module.exports)
        module.exports = autoComplete;
    else
        window.autoComplete = autoComplete;
}());
/*app/view/template/component/password/tag_sidebar_section.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/password/tag_sidebar_section.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/password/tag_sidebar_section.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-header',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h4',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h4',
                false,
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-trigger',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Tags\') ',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h4',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-content',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'edit_tags_button section-action',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_edit_tags_button',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-edit',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visuallyhidden',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'edit\') ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'em',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'empty-content hidden',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'em',
                false,
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'There is no tag, click edit to add one\') ',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'em',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_rs_details_tags_list',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'tags tags-list',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                13
            ]
        },
        {
            'tokenType': 'done',
            'args': [14]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/tag/tree_item.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/tag/tree_item.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/tag/tree_item.stache', [
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.id ',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'tag',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' mappedItem.label ',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                3
            ]
        },
        {
            'tokenType': 'done',
            'args': [4]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/form/tag/update.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/form/tag/update.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/form/tag/update.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_edit_tags_form',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'tags-edit-wrapper hidden form',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form-content',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_tags_editor',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input tag-editor',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'tag-editor-input-wrapper',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'tags',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_tag_editor_input_text',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'tag-editor-input',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'contenteditable',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'true',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'contenteditable',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message notice',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-info-circle',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'strong',
                false,
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'strong',
                false,
                11
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Pro tip\') ',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ':',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'strong',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' ',
                11
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Tags starting with # are shared with all users who have access. Separate tags using commas.\') ',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'actions',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_tags_editor_submit',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button tag-editor-submit',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                15
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                15
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'save\') ',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                15
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                16
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                16
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_tags_editor_cancel',
                16
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                16
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button cancel tag-editor-cancel',
                16
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'role',
                16
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                16
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'role',
                16
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                16
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                16
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                16
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'cancel\')',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                18
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                19
            ]
        },
        {
            'tokenType': 'done',
            'args': [20]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/password/tags_sidebar_section*/
define('app/component/password/tags_sidebar_section', [
    'exports',
    'can-dom-data',
    'app/model/filter',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/control/bus',
    'passbolt-mad/util/map/map',
    'app/model/map/permission_type',
    'app/component/workspace/secondary_sidebar_section',
    'app/model/map/tag',
    'passbolt-mad/component/tree',
    'passbolt-mad/view/view',
    'app/view/template/component/password/tag_sidebar_section.stache!',
    'app/view/template/component/tag/tree_item.stache!',
    'app/view/template/form/tag/update.stache!',
    'lib/jquery.tag-editor.js',
    'lib/autocomplete.js'
], function (exports, _canDomData, _filter, _i18n, _bus, _map, _permission_type, _secondary_sidebar_section, _tag, _tree, _view, _tag_sidebar_section, _tree_item, _update) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canDomData2 = _interopRequireDefault(_canDomData);
    var _filter2 = _interopRequireDefault(_filter);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _bus2 = _interopRequireDefault(_bus);
    var _map2 = _interopRequireDefault(_map);
    var _permission_type2 = _interopRequireDefault(_permission_type);
    var _secondary_sidebar_section2 = _interopRequireDefault(_secondary_sidebar_section);
    var _tag2 = _interopRequireDefault(_tag);
    var _tree2 = _interopRequireDefault(_tree);
    var _view2 = _interopRequireDefault(_view);
    var _tag_sidebar_section2 = _interopRequireDefault(_tag_sidebar_section);
    var _tree_item2 = _interopRequireDefault(_tree_item);
    var _update2 = _interopRequireDefault(_update);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                arr2[i] = arr[i];
            }
            return arr2;
        } else {
            return Array.from(arr);
        }
    }
    var TagSidebarSectionComponent = _secondary_sidebar_section2.default.extend('passbolt.component.password.TagSidebarSection', {
        defaults: {
            label: 'Sidebar Section Tag Controller',
            template: _tag_sidebar_section2.default,
            resource: null
        }
    }, {
        beforeRender: function beforeRender() {
            this._super();
            this._editing = false;
            this.setViewData('resource', this.options.resource);
        },
        afterStart: function afterStart() {
            var tree = this._initTree();
            this.options.tree = tree;
            this._loadTags(this.options.resource.tags);
        },
        _initTree: function _initTree() {
            var map = this._getTreeMap();
            var tree = new _tree2.default('#js_rs_details_tags_list', {
                cssClasses: [
                    'tags',
                    'tags-list'
                ],
                itemClass: _tag2.default,
                itemTemplate: _tree_item2.default,
                prefixItemId: 'js_rs_details_tags_list_',
                map: map
            });
            tree.start();
            return tree;
        },
        _getTreeMap: function _getTreeMap() {
            return new _map2.default({
                id: 'id',
                label: 'slug'
            });
        },
        enableEditMode: function enableEditMode() {
            var _this = this;
            this._editing = true;
            this.options.tree.state.hidden = true;
            this._hideEmptyMessage();
            var slugs = this.options.resource.tags.attr().reduce(function (accumulator, currentValue) {
                return [].concat(_toConsumableArray(accumulator), [currentValue.slug]);
            }, []);
            var formHtml = _view2.default.render(_update2.default);
            $('.accordion-content', this.element).append(formHtml);
            var tagEditorSelector = '#js_edit_tags_form';
            $(tagEditorSelector).tagEditor({
                startTags: slugs,
                onSave: function onSave(data) {
                    return _this._onFormSave(data);
                },
                beforeDelete: function beforeDelete(slug) {
                    return _this._beforeDeleteTag(slug);
                },
                beforeInsert: function beforeInsert(slug) {
                    return _this._beforeInsertTag(slug);
                }
            });
            $(tagEditorSelector).removeClass('hidden');
            var tagEditorInputText = '#js_tag_editor_input_text';
            $(tagEditorInputText).focus();
            _tag2.default.findAll().then(function (tags) {
                return _this._initAutocomplete(tags);
            });
        },
        disableEditMode: function disableEditMode() {
            this._editing = false;
            var tagEditorSelector = '#js_edit_tags_form';
            $(tagEditorSelector).remove();
            this.options.tree.state.hidden = false;
            this._showEmptyMessage();
        },
        _hideEmptyMessage: function _hideEmptyMessage() {
            $('.empty-content', this.element).addClass('hidden');
        },
        _showEmptyMessage: function _showEmptyMessage() {
            if (!this.options.resource.tags.length) {
                $('.empty-content', this.element).removeClass('hidden');
            }
        },
        _initAutocomplete: function _initAutocomplete(tags) {
            var isAdmin = this.options.resource.permission.isAllowedTo(_permission_type2.default.ADMIN);
            var slugs = this._extractTagSlugs(tags, isAdmin);
            new autoComplete({
                selector: '#js_tag_editor_input_text',
                minChars: 1,
                source: function source(term, suggest) {
                    term = term.toLowerCase();
                    var matches = slugs.filter(function (item) {
                        return item.toLowerCase().indexOf(term) != -1;
                    });
                    suggest(matches);
                }
            });
        },
        _extractTagSlugs: function _extractTagSlugs(tags, withIsShared) {
            withIsShared = withIsShared || false;
            return tags.attr().reduce(function (accumulator, currentValue) {
                if (/^#/.test(currentValue.slug) && !withIsShared) {
                    return accumulator;
                }
                return [].concat(_toConsumableArray(accumulator), [currentValue.slug]);
            }, []);
        },
        _onFormSave: function _onFormSave(slugs) {
            var _this2 = this;
            var tree = this.options.tree;
            return _tag2.default.updateResourceTags(this.options.resource.id, slugs).then(function (tags) {
                _this2.options.resource.tags = tags;
                _this2.disableEditMode();
                tree.reset();
                _this2._loadTags(tags);
                _bus2.default.trigger('resource_tags_updated', [_this2.options.resource]);
            });
        },
        _loadTags: function _loadTags(tags) {
            this._showEmptyMessage();
            if (tags.length) {
                this.options.tree.load(tags);
            }
        },
        _beforeDeleteTag: function _beforeDeleteTag(slug) {
            if (/^#/.test(slug) && !this.options.resource.permission.isAllowedTo(_permission_type2.default.ADMIN)) {
                var message = __('You do not have the permission to edit shared tags on this resource.');
                this._errorForm(message);
                return false;
            }
            return true;
        },
        _errorForm: function _errorForm(message) {
            var $feedback = $('#js_edit_tags_form .message');
            $feedback.text(message).removeClass('notice').addClass('error');
        },
        _beforeInsertTag: function _beforeInsertTag(slug) {
            if (/^#/.test(slug) && !this.options.resource.permission.isAllowedTo(_permission_type2.default.ADMIN)) {
                var message = __('You do not have the permission to edit shared tags on this resource.');
                this._errorForm(message);
                return false;
            }
            return true;
        },
        '{element} #js_tags_editor_cancel click': function elementJs_tags_editor_cancelClick() {
            this.disableEditMode();
        },
        '{element} #js_edit_tags_button click': function elementJs_edit_tags_buttonClick() {
            if (!this._editing) {
                this.enableEditMode();
            } else {
                this.disableEditMode();
            }
        },
        '{element} em.empty-content click': function elementEmEmptyContentClick() {
            if (!this._editing) {
                this.enableEditMode();
            } else {
                this.disableEditMode();
            }
        },
        '{element} a.tag click': function elementATagClick(el) {
            var li = el.closest('li');
            var tag = _canDomData2.default.get(li, _tag2.default.shortName);
            var filter = new _filter2.default({
                id: 'workspace_filter_tag_' + tag.id,
                type: 'tag',
                label: tag.slug + __(' (tag)'),
                rules: { 'has-tag': tag.slug },
                tag: tag
            });
            _bus2.default.trigger('filter_workspace', { filter: filter });
        },
        '{element} keydown': function elementKeydown(el, ev) {
            if (ev.which == 27) {
                this._destroyForm();
            }
        }
    });
    exports.default = TagSidebarSectionComponent;
});
/*app/view/template/component/password/password_secondary_sidebar.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/password/password_secondary_sidebar.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/password/password_secondary_sidebar.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'sidebar resource',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'sidebar-header',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'sidebar-header-title',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' resource.name ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'title-link',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'title',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'copy the link to this password\')',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'title',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-link',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visuallyhidden',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                5
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '__(\'copy the link to this password\')',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_sidebar_close dialog-close',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-close',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visuallyhidden',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'close',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                11
            ]
        },
        {
            'tokenType': 'comment',
            'args': [
                ' Information ',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'detailed-information accordion sidebar-section',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_rs_details_information',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                14
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                14
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                14
            ]
        },
        {
            'tokenType': 'comment',
            'args': [
                ' Description ',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                16
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                17
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'description accordion sidebar-section',
                17
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                17
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_rs_details_description',
                17
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                17
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                17
            ]
        },
        {
            'tokenType': 'comment',
            'args': [
                ' Tags ',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                19
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'tags accordion sidebar-section',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_rs_details_tags',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                20
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                20
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                20
            ]
        },
        {
            'tokenType': 'comment',
            'args': [
                ' Permissions ',
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                22
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                23
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'permissions accordion sidebar-section',
                23
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                23
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_rs_details_permissions',
                23
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                23
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                23
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                23
            ]
        },
        {
            'tokenType': 'comment',
            'args': [
                ' Comments  ',
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                25
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                26
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                26
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'comments accordion sidebar-section clearfix',
                26
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                26
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                26
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_rs_details_comments',
                26
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                26
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                26
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                26
            ]
        },
        {
            'tokenType': 'comment',
            'args': [
                ' Activity  ',
                28
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                28
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                29
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                29
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'resource-activity activity accordion sidebar-section clearfix',
                29
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                29
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                29
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_rs_details_activity',
                29
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                29
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                29
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                29
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                29
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                30
            ]
        },
        {
            'tokenType': 'done',
            'args': [32]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/password/password_secondary_sidebar*/
define('app/component/password/password_secondary_sidebar', [
    'exports',
    'app/component/activity/resource_activity_sidebar_section',
    'app/util/clipboard',
    'app/component/comment/comments_sidebar_section',
    'passbolt-mad/config/config',
    'app/component/password/description_sidebar_section',
    'app/component/password/information_sidebar_section',
    'app/component/permission/permissions_sidebar_section',
    'app/model/map/resource',
    'app/component/workspace/secondary_sidebar',
    'app/component/password/tags_sidebar_section',
    'app/view/template/component/password/password_secondary_sidebar.stache!'
], function (exports, _resource_activity_sidebar_section, _clipboard, _comments_sidebar_section, _config, _description_sidebar_section, _information_sidebar_section, _permissions_sidebar_section, _resource, _secondary_sidebar, _tags_sidebar_section, _password_secondary_sidebar) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _resource_activity_sidebar_section2 = _interopRequireDefault(_resource_activity_sidebar_section);
    var _clipboard2 = _interopRequireDefault(_clipboard);
    var _comments_sidebar_section2 = _interopRequireDefault(_comments_sidebar_section);
    var _config2 = _interopRequireDefault(_config);
    var _description_sidebar_section2 = _interopRequireDefault(_description_sidebar_section);
    var _information_sidebar_section2 = _interopRequireDefault(_information_sidebar_section);
    var _permissions_sidebar_section2 = _interopRequireDefault(_permissions_sidebar_section);
    var _resource2 = _interopRequireDefault(_resource);
    var _secondary_sidebar2 = _interopRequireDefault(_secondary_sidebar);
    var _tags_sidebar_section2 = _interopRequireDefault(_tags_sidebar_section);
    var _password_secondary_sidebar2 = _interopRequireDefault(_password_secondary_sidebar);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PasswordSecondarySidebarComponent = _secondary_sidebar2.default.extend('passbolt.component.password.PasswordSecondarySidebar', {
        defaults: {
            label: 'Resource Details',
            resource: null,
            template: _password_secondary_sidebar2.default,
            Resource: _resource2.default
        }
    }, {
        init: function init(el, options) {
            this._super(el, options);
            this.sectionsOpenedState = {
                description: false,
                tags: false,
                permissions: false,
                comments: false,
                activity: false
            };
        },
        beforeRender: function beforeRender() {
            this._super();
            this.setViewData('resource', this.options.resource);
        },
        afterStart: function afterStart() {
            this._initInformationSection();
            this._initDescriptionSection();
            this._initTagsSection();
            this._initPermissionsSection();
            this._initCommentsSection();
            this._initActivitySection();
            this._super();
        },
        _initInformationSection: function _initInformationSection() {
            var informationComponent = new _information_sidebar_section2.default('#js_rs_details_information', { resource: this.options.resource });
            informationComponent.start();
        },
        _initDescriptionSection: function _initDescriptionSection() {
            var _this = this;
            var descriptionComponent = new _description_sidebar_section2.default('#js_rs_details_description', {
                resource: this.options.resource,
                cssClasses: !this.sectionsOpenedState.description ? ['closed'] : [],
                state: { opened: this.sectionsOpenedState.description }
            });
            descriptionComponent.start();
            descriptionComponent.state.on('opened', function (ev, opened) {
                _this.sectionsOpenedState.description = opened;
            });
        },
        _initTagsSection: function _initTagsSection() {
            var _this2 = this;
            var plugins = _config2.default.read('server.passbolt.plugins');
            if (plugins && plugins.tags) {
                var tagsComponent = new _tags_sidebar_section2.default('#js_rs_details_tags', {
                    resource: this.options.resource,
                    cssClasses: !this.sectionsOpenedState.tags ? ['closed'] : [],
                    state: { opened: this.sectionsOpenedState.tags }
                });
                tagsComponent.start();
                tagsComponent.state.on('opened', function (ev, opened) {
                    _this2.sectionsOpenedState.tags = opened;
                });
            }
        },
        _initPermissionsSection: function _initPermissionsSection() {
            var _this3 = this;
            var permissionsComponent = new _permissions_sidebar_section2.default('#js_rs_details_permissions', {
                acoInstance: this.options.resource,
                cssClasses: !this.sectionsOpenedState.permissions ? ['closed'] : [],
                state: { opened: this.sectionsOpenedState.permissions }
            });
            permissionsComponent.start();
            permissionsComponent.state.on('opened', function (ev, opened) {
                _this3.sectionsOpenedState.permissions = opened;
            });
        },
        _initCommentsSection: function _initCommentsSection() {
            var _this4 = this;
            var commentsComponent = new _comments_sidebar_section2.default('#js_rs_details_comments', {
                resource: this.options.resource,
                foreignModel: 'Resource',
                foreignKey: this.options.resource.id,
                cssClasses: !this.sectionsOpenedState.comments ? ['closed'] : [],
                state: { opened: this.sectionsOpenedState.comments }
            });
            commentsComponent.start();
            commentsComponent.state.on('opened', function (ev, opened) {
                _this4.sectionsOpenedState.comments = opened;
            });
        },
        _initActivitySection: function _initActivitySection() {
            var _this5 = this;
            var plugins = _config2.default.read('server.passbolt.plugins');
            if (plugins && plugins.audit_log) {
                var activityComponent = new _resource_activity_sidebar_section2.default('#js_rs_details_activity', {
                    resource: this.options.resource,
                    foreignModel: 'Resource',
                    foreignKey: this.options.resource.id,
                    cssClasses: !this.sectionsOpenedState.activity ? ['closed'] : [],
                    state: { opened: this.sectionsOpenedState.activity }
                });
                activityComponent.start();
                activityComponent.state.on('opened', function (ev, opened) {
                    _this5.sectionsOpenedState.activity = opened;
                });
            }
        },
        '{Resource} updated': function ResourceUpdated(model, ev, resource) {
            if (resource.id == this.options.resource.id) {
                this.options.resource = resource;
                this.refresh();
            }
        },
        '{element} .title-link click': function elementTitleLinkClick() {
            _clipboard2.default.copy(this.options.resource.getPermalink(), 'permalink');
        }
    });
    exports.default = PasswordSecondarySidebarComponent;
});
/*app/view/template/component/password/workspace_primary_menu.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/password/workspace_primary_menu.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/password/workspace_primary_menu.stache', [
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wk_menu_secretcopy_button',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-clipboard',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'copy\') ',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wk_menu_edition_button',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-edit',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'edit\') ',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wk_menu_sharing_button',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-share',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                15
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                16
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                16
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'share\') ',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                18
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                19
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                19
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wk_menu_export_button',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button hidden',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                20
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                21
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                21
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-cloud-download',
                21
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                21
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                21
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                21
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                22
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                22
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'export\') ',
                22
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                22
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                23
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                24
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                25
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                25
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                26
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                26
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown',
                26
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                26
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                26
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                27
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                27
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wk_menu_more_button',
                27
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                27
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                27
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button',
                27
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                27
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                27
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                27
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                28
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                28
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'more\') ',
                28
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                28
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                28
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                29
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                29
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-caret-down',
                29
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                29
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                29
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                29
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                29
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                30
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                31
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                31
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                32
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                32
            ]
        },
        {
            'tokenType': 'done',
            'args': [33]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/password/workspace_primary_menu*/
define('app/component/password/workspace_primary_menu', [
    'exports',
    'passbolt-mad/model/map/action',
    'passbolt-mad/component/component',
    'app/util/clipboard',
    'passbolt-mad/config/config',
    'passbolt-mad/component/button',
    'passbolt-mad/component/button_dropdown',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/control/bus',
    'app/model/map/permission_type',
    'app/util/plugin',
    'app/model/map/resource',
    'app/view/template/component/password/workspace_primary_menu.stache!'
], function (exports, _action, _component, _clipboard, _config, _button, _button_dropdown, _i18n, _bus, _permission_type, _plugin, _resource, _workspace_primary_menu) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _component2 = _interopRequireDefault(_component);
    var _clipboard2 = _interopRequireDefault(_clipboard);
    var _config2 = _interopRequireDefault(_config);
    var _button2 = _interopRequireDefault(_button);
    var _button_dropdown2 = _interopRequireDefault(_button_dropdown);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _bus2 = _interopRequireDefault(_bus);
    var _permission_type2 = _interopRequireDefault(_permission_type);
    var _plugin2 = _interopRequireDefault(_plugin);
    var _resource2 = _interopRequireDefault(_resource);
    var _workspace_primary_menu2 = _interopRequireDefault(_workspace_primary_menu);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PasswordWorkspaceMenuComponent = _component2.default.extend('passbolt.component.PasswordWorkspaceMenu', {
        defaults: {
            label: 'Workspace Menu Controller',
            tag: 'ul',
            selectedResources: new _resource2.default.List(),
            template: _workspace_primary_menu2.default
        }
    }, {
        afterStart: function afterStart() {
            var _this = this;
            var copySecretButton = new _button2.default('#js_wk_menu_secretcopy_button', {
                state: { disabled: true },
                events: {
                    click: function click() {
                        return _this._copySecret();
                    }
                }
            });
            copySecretButton.start();
            this.secretCopyButton = copySecretButton;
            var editButton = new _button2.default('#js_wk_menu_edition_button', {
                state: { disabled: true },
                events: {
                    click: function click() {
                        return _this._edit();
                    }
                }
            });
            editButton.start();
            this.editButton = editButton;
            var shareButton = new _button2.default('#js_wk_menu_sharing_button', {
                state: { disabled: true },
                events: {
                    click: function click() {
                        return _this._share();
                    }
                }
            });
            shareButton.start();
            this.shareButton = shareButton;
            this._initExportButton();
            var moreButtonMenuItems = [];
            var copyLoginItem = new _action2.default({
                id: 'js_wk_menu_copy_login_action',
                label: __('copy username to clipboard'),
                cssClasses: [],
                action: function action() {
                    return _this._copyLogin();
                }
            });
            moreButtonMenuItems.push(copyLoginItem);
            var copySecretItem = new _action2.default({
                id: 'js_wk_menu_copy_secret_action',
                label: __('copy password to clipboard'),
                cssClasses: [],
                action: function action() {
                    return _this._copySecret();
                }
            });
            moreButtonMenuItems.push(copySecretItem);
            var deleteItem = new _action2.default({
                id: 'js_wk_menu_delete_action',
                label: __('delete'),
                cssClasses: [],
                action: function action() {
                    return _this._delete();
                }
            });
            moreButtonMenuItems.push(deleteItem);
            var copyPermalinkItem = new _action2.default({
                id: 'js_wk_menu_copy_permalink_action',
                label: __('copy permalink to clipboard'),
                cssClasses: [],
                action: function action() {
                    return _this._copyPermalink();
                }
            });
            moreButtonMenuItems.push(copyPermalinkItem);
            var moreButton = new _button_dropdown2.default('#js_wk_menu_more_button', {
                state: { disabled: true },
                items: moreButtonMenuItems,
                template: null
            });
            moreButton.start();
            this.moreButton = moreButton;
        },
        _initExportButton: function _initExportButton() {
            var _this2 = this;
            if (_config2.default.read('server.passbolt.plugins.export')) {
                var exportButtonSelector = '#js_wk_menu_export_button';
                $(exportButtonSelector).removeClass('hidden');
                var exportButton = new _button2.default(exportButtonSelector, {
                    state: { disabled: true },
                    events: {
                        click: function click() {
                            return _this2._export();
                        }
                    }
                });
                exportButton.start();
                this.exportButton = exportButton;
            }
        },
        _copyLogin: function _copyLogin() {
            var item = this.options.selectedResources[0];
            _clipboard2.default.copy(item.username, 'username');
        },
        _copySecret: function _copySecret() {
            var resource = this.options.selectedResources[0];
            _plugin2.default.decryptSecretAndCopyToClipboard(resource.id);
        },
        _copyPermalink: function _copyPermalink() {
            _clipboard2.default.copy(this.options.selectedResources[0].getPermalink(), 'permalink');
        },
        _delete: function _delete() {
            var resources = this.options.selectedResources.slice(0);
            _bus2.default.trigger('request_resources_delete', { resources: resources });
        },
        _edit: function _edit() {
            var resource = this.options.selectedResources[0];
            _bus2.default.trigger('request_resource_edit', { resource: resource });
        },
        _share: function _share() {
            var resources = this.options.selectedResources;
            if (resources.length > 1) {
                _bus2.default.trigger('request_resources_share', { resources: resources });
            } else {
                _bus2.default.trigger('request_resource_share', { resource: resources[0] });
            }
        },
        _export: function _export() {
            var type = 'csv';
            _bus2.default.trigger('request_export', { type: type });
        },
        '{selectedResources} length': function selectedResourcesLength() {
            var resources = this.options.selectedResources;
            switch (resources.length) {
            case 0: {
                    this.reset();
                    break;
                }
            case 1: {
                    this.reset();
                    this.resourceSelected();
                    break;
                }
            default: {
                    this.reset();
                    this.resourcesSelected();
                }
            }
        },
        '{selectedResources} remove': function selectedResourcesRemove() {
            var resources = this.options.selectedResources;
            switch (resources.length) {
            case 0: {
                    this.reset();
                    break;
                }
            case 1: {
                    this.reset();
                    this.resourceSelected();
                    break;
                }
            default: {
                    this.reset();
                    this.resourcesSelected();
                }
            }
        },
        resourceSelected: function resourceSelected() {
            var resource = this.options.selectedResources[0];
            var permission = resource.permission;
            var canEdit = permission.isAllowedTo(_permission_type2.default.UPDATE);
            var canAdmin = permission.isAllowedTo(_permission_type2.default.ADMIN);
            var moreButtonDeleteItemId = 'js_wk_menu_delete_action';
            var moreButtonCopyLoginItemId = 'js_wk_menu_copy_login_action';
            this.secretCopyButton.state.disabled = false;
            this.editButton.state.disabled = !canEdit;
            this.shareButton.state.disabled = !canAdmin;
            if (_config2.default.read('server.passbolt.plugins.export')) {
                this.exportButton.state.disabled = false;
            }
            this.moreButton.state.disabled = false;
            if (canEdit) {
                this.moreButton.enableItem(moreButtonDeleteItemId);
            } else {
                this.moreButton.disableItem(moreButtonDeleteItemId);
            }
            if (resource.username == null) {
                this.moreButton.disableItem(moreButtonCopyLoginItemId);
            } else {
                this.moreButton.enableItem(moreButtonCopyLoginItemId);
            }
        },
        resourcesSelected: function resourcesSelected() {
            var moreButtonDeleteItemId = 'js_wk_menu_delete_action';
            var moreButtonCopyLoginItemId = 'js_wk_menu_copy_login_action';
            var moreButtonCopySecretItemId = 'js_wk_menu_copy_secret_action';
            var moreButtonCopyPermalinkItemId = 'js_wk_menu_copy_permalink_action';
            var resources = this.options.selectedResources;
            var _resources$reduce = resources.reduce(function (carry, resource) {
                    return {
                        canDelete: resource.permission.isAllowedTo(_permission_type2.default.UPDATE) && carry.canDelete,
                        canShare: resource.permission.isAllowedTo(_permission_type2.default.ADMIN) && carry.canShare
                    };
                }, {
                    canDelete: true,
                    canShare: true
                }), canDelete = _resources$reduce.canDelete, canShare = _resources$reduce.canShare;
            if (resources.length > 1) {
                this.moreButton.disableItem(moreButtonCopyLoginItemId);
                this.moreButton.disableItem(moreButtonCopySecretItemId);
                this.moreButton.disableItem(moreButtonCopyPermalinkItemId);
            } else {
                this.moreButton.enableItem(moreButtonCopyLoginItemId);
                this.moreButton.enableItem(moreButtonCopySecretItemId);
                this.moreButton.enableItem(moreButtonCopyPermalinkItemId);
            }
            if (_config2.default.read('server.passbolt.plugins.export')) {
                this.exportButton.state.disabled = false;
            }
            if (canDelete) {
                this.moreButton.enableItem(moreButtonDeleteItemId);
            } else {
                this.moreButton.disableItem(moreButtonDeleteItemId);
            }
            if (canShare) {
                this.shareButton.state.disabled = false;
            } else {
                this.shareButton.state.disabled = true;
            }
            var enableMoreButtons = this.moreButton.options.items.reduce(function (carry, item) {
                carry = item.enabled || carry;
                return carry;
            }, false);
            this.moreButton.state.disabled = !enableMoreButtons;
        },
        reset: function reset() {
            var moreButtonCopyLoginItemId = 'js_wk_menu_copy_login_action';
            var moreButtonCopySecretItemId = 'js_wk_menu_copy_secret_action';
            var moreButtonCopyPermalinkItemId = 'js_wk_menu_copy_permalink_action';
            this.secretCopyButton.state.disabled = true;
            this.editButton.state.disabled = true;
            this.shareButton.state.disabled = true;
            this.moreButton.state.disabled = true;
            if (_config2.default.read('server.passbolt.plugins.export')) {
                this.exportButton.state.disabled = true;
            }
            this.moreButton.enableItem(moreButtonCopyLoginItemId);
            this.moreButton.enableItem(moreButtonCopySecretItemId);
            this.moreButton.enableItem(moreButtonCopyPermalinkItemId);
        }
    });
    exports.default = PasswordWorkspaceMenuComponent;
});
/*app/component/group/password_categories_groups_list*/
define('app/component/group/password_categories_groups_list', [
    'exports',
    'app/model/filter',
    'app/model/map/group',
    'app/component/group/groups_list',
    'app/view/component/group/groups_list',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/control/bus',
    'app/view/template/component/group/group_item.stache!'
], function (exports, _filter, _group, _groups_list, _groups_list3, _i18n, _bus, _group_item) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _filter2 = _interopRequireDefault(_filter);
    var _group2 = _interopRequireDefault(_group);
    var _groups_list2 = _interopRequireDefault(_groups_list);
    var _groups_list4 = _interopRequireDefault(_groups_list3);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _bus2 = _interopRequireDefault(_bus);
    var _group_item2 = _interopRequireDefault(_group_item);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PasswordCategoriesGroupsList = _groups_list2.default.extend('passbolt.component.PasswordCategoriesGroupsList', {
        defaults: {
            itemClass: _group2.default,
            itemTemplate: _group_item2.default,
            prefixItemId: 'group_',
            selectedGroups: new _group2.default.List(),
            selectedFilter: null,
            viewClass: _groups_list4.default
        }
    }, {
        _filterWorkspaceByGroup: function _filterWorkspaceByGroup(group) {
            this.selectedFilter = new _filter2.default({
                id: 'workspace_filter_group_' + group.id,
                type: 'group',
                label: __('%s (group)', group.name),
                rules: { 'is-shared-with-group': group.id },
                order: ['Resource.modified DESC']
            });
            _bus2.default.trigger('filter_workspace', { filter: this.selectedFilter });
        }
    });
    exports.default = PasswordCategoriesGroupsList;
});
/*app/view/template/component/password/groups_filter_sidebar_section.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/password/groups_filter_sidebar_section.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/password/groups_filter_sidebar_section.stache', [
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wsp_pwd_password_filter_group_selector',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-header',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'open node root',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'row title',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'main-cell-wrapper',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'main-cell',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-trigger',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Filter by groups\') ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-content',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wsp_password_categories_groups_list',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                12
            ]
        },
        {
            'tokenType': 'done',
            'args': [13]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/password/groups_filter_sidebar_section*/
define('app/component/password/groups_filter_sidebar_section', [
    'exports',
    'app/model/map/group',
    'app/component/group/password_categories_groups_list',
    'app/component/workspace/primary_sidebar_section',
    'app/model/map/user',
    'app/view/template/component/password/groups_filter_sidebar_section.stache!'
], function (exports, _group, _password_categories_groups_list, _primary_sidebar_section, _user, _groups_filter_sidebar_section) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _group2 = _interopRequireDefault(_group);
    var _password_categories_groups_list2 = _interopRequireDefault(_password_categories_groups_list);
    var _primary_sidebar_section2 = _interopRequireDefault(_primary_sidebar_section);
    var _user2 = _interopRequireDefault(_user);
    var _groups_filter_sidebar_section2 = _interopRequireDefault(_groups_filter_sidebar_section);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var GroupsFilterSidebarSectionComponent = _primary_sidebar_section2.default.extend('passbolt.component.password.GroupsFilterSidebarSection', {
        defaults: {
            template: _groups_filter_sidebar_section2.default,
            selectedGroups: new _group2.default.List(),
            state: { hidden: true }
        }
    }, {
        afterStart: function afterStart() {
            var _this = this;
            var groupList = new _password_categories_groups_list2.default('#js_wsp_password_categories_groups_list', {
                selectedGroups: this.options.selectedGroups,
                defaultGroupFilter: { 'has-users': _user2.default.getCurrent().id }
            });
            this.groupList = groupList;
            groupList.state.on('loaded', function (ev, loaded) {
                return _this._onGroupListLoadedChange(loaded);
            });
            groupList.start();
            this._super();
        },
        _onGroupListLoadedChange: function _onGroupListLoadedChange(loaded) {
            if (loaded) {
                var isEmpty = this.groupList.options.items.length == 0;
                this.state.hidden = isEmpty;
            }
        }
    });
    exports.default = GroupsFilterSidebarSectionComponent;
});
/*app/view/template/component/password/shortcuts_filter_sidebar_section.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/password/shortcuts_filter_sidebar_section.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/password/shortcuts_filter_sidebar_section.stache', [
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wsp_password_shortcuts_filter_list',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'clearfix',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                1
            ]
        },
        {
            'tokenType': 'done',
            'args': [2]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/password/shortcuts_filter_sidebar_section*/
define('app/component/password/shortcuts_filter_sidebar_section', [
    'exports',
    'passbolt-mad/model/map/action',
    'app/model/filter',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/control/bus',
    'passbolt-mad/component/menu',
    'app/component/workspace/primary_sidebar_section',
    'app/view/template/component/password/shortcuts_filter_sidebar_section.stache!'
], function (exports, _action, _filter, _i18n, _bus, _menu, _primary_sidebar_section, _shortcuts_filter_sidebar_section) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _filter2 = _interopRequireDefault(_filter);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _bus2 = _interopRequireDefault(_bus);
    var _menu2 = _interopRequireDefault(_menu);
    var _primary_sidebar_section2 = _interopRequireDefault(_primary_sidebar_section);
    var _shortcuts_filter_sidebar_section2 = _interopRequireDefault(_shortcuts_filter_sidebar_section);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var ShortcutsFilterSidebarSectionComponent = _primary_sidebar_section2.default.extend('passbolt.component.password.ShortcutsFilterSidebarSection', {
        defaults: {
            allFilter: null,
            template: _shortcuts_filter_sidebar_section2.default
        }
    }, {
        afterStart: function afterStart() {
            this.options.menu = this._initShortcutsList();
            this._super();
        },
        _initShortcutsList: function _initShortcutsList() {
            var menu = new _menu2.default('#js_wsp_password_shortcuts_filter_list');
            menu.start();
            var allItem = new _action2.default({
                id: 'js_pwd_wsp_filter_all',
                label: __('All items'),
                filter: this.options.allFilter
            });
            menu.insertItem(allItem);
            menu.selectItem(allItem);
            var favoriteItem = new _action2.default({
                id: 'js_pwd_wsp_filter_favorite',
                label: __('Favorite'),
                filter: new _filter2.default({
                    id: 'workspace_filter_favorite',
                    type: 'favorite',
                    label: __('Favorite'),
                    rules: { 'is-favorite': true },
                    order: ['Resource.modified DESC']
                })
            });
            menu.insertItem(favoriteItem);
            var modifiedItem = new _action2.default({
                id: 'js_pwd_wsp_filter_modified',
                label: __('Recently modified'),
                filter: new _filter2.default({
                    id: 'workspace_filter_modified',
                    type: 'modified',
                    label: __('Recently modified'),
                    order: ['Resource.modified DESC']
                })
            });
            menu.insertItem(modifiedItem);
            var sharedItem = new _action2.default({
                id: 'js_pwd_wsp_filter_share',
                label: __('Shared with me'),
                filter: new _filter2.default({
                    id: 'workspace_filter_shared',
                    type: 'shared_with_me',
                    label: __('Shared with me'),
                    rules: { 'is-shared-with-me': true },
                    order: ['Resource.modified DESC']
                })
            });
            menu.insertItem(sharedItem);
            var ownItem = new _action2.default({
                id: 'js_pwd_wsp_filter_own',
                label: __('Items I own'),
                filter: new _filter2.default({
                    id: 'workspace_filter_own',
                    type: 'owner',
                    label: __('Items I own'),
                    rules: { 'is-owned-by-me': true },
                    order: ['Resource.modified DESC']
                })
            });
            menu.insertItem(ownItem);
            return menu;
        },
        '{element} item_selected': function elementItem_selected(el, ev) {
            var item = ev.data.item;
            _bus2.default.trigger('filter_workspace', { filter: item.filter });
        },
        '{mad.bus.element} filter_workspace': function madBusElementFilter_workspace(el, ev) {
            var filter = ev.data.filter;
            var menu = this.options.menu;
            menu.unselectAll();
            menu.options.items.forEach(function (item) {
                if (item.filter.id == filter.id) {
                    menu.selectItem(item);
                } else if (filter.id == 'search' && item.filter.id == 'default') {
                    menu.selectItem(item);
                }
            });
        }
    });
    exports.default = ShortcutsFilterSidebarSectionComponent;
});
/*app/view/template/component/tag/tags_filter_sidebar_section.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/tag/tags_filter_sidebar_section.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/tag/tags_filter_sidebar_section.stache', [
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wsp_pwd_password_filter_tags_selector',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-header',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'open node root',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'row title',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'main-cell-wrapper',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'main-cell',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h3',
                false,
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h3',
                false,
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-trigger',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'All tags\') ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h3',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'right-cell more-ctrl',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wsp_pwd_password_filter_tags_more',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'filter',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                10
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'more\') ',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                12
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'accordion-content',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                15
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'em',
                false,
                16
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'hidden empty-content',
                16
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'em',
                false,
                16
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'empty\') ',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'em',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                16
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                17
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                17
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wsp_password_filter_tags_list',
                17
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                17
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                18
            ]
        },
        {
            'tokenType': 'done',
            'args': [19]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/tag/tags_filter_sidebar_section*/
define('app/component/tag/tags_filter_sidebar_section', [
    'exports',
    'passbolt-mad/model/map/action',
    'passbolt-mad/component/contextual_menu',
    'app/model/filter',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/control/bus',
    'passbolt-mad/util/map/map',
    'app/component/workspace/primary_sidebar_section',
    'app/model/map/tag',
    'passbolt-mad/component/tree',
    'app/view/template/component/tag/tags_filter_sidebar_section.stache!'
], function (exports, _action, _contextual_menu, _filter2, _i18n, _bus, _map, _primary_sidebar_section, _tag, _tree, _tags_filter_sidebar_section) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _contextual_menu2 = _interopRequireDefault(_contextual_menu);
    var _filter3 = _interopRequireDefault(_filter2);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _bus2 = _interopRequireDefault(_bus);
    var _map2 = _interopRequireDefault(_map);
    var _primary_sidebar_section2 = _interopRequireDefault(_primary_sidebar_section);
    var _tag2 = _interopRequireDefault(_tag);
    var _tree2 = _interopRequireDefault(_tree);
    var _tags_filter_sidebar_section2 = _interopRequireDefault(_tags_filter_sidebar_section);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var TagsFilterSidebarSectionComponent = _primary_sidebar_section2.default.extend('passbolt.component.tag.TagsFilterSidebarSection', {
        defaults: {
            template: _tags_filter_sidebar_section2.default,
            selectedTags: new _tag2.default.List(),
            silentLoading: false,
            loadedOnStart: false,
            tree: null,
            filter: null,
            treeFilter: 'all_tags',
            state: { disabled: true }
        }
    }, {
        afterStart: function afterStart() {
            var _this = this;
            this._initTree();
            this._findTags().then(function (tags) {
                return _this._loadTree(tags);
            });
        },
        _initTree: function _initTree() {
            var _this2 = this;
            var tree = new _tree2.default('#js_wsp_password_filter_tags_list', { map: this._getTreeMap() });
            tree.state.on('empty', function (ev, empty) {
                return _this2._onTagListEmptyChange(empty);
            });
            tree.start();
            this.options.tree = tree;
        },
        _onTagListEmptyChange: function _onTagListEmptyChange(empty) {
            this.state.empty = empty;
        },
        _findTags: function _findTags() {
            var _this3 = this;
            return _tag2.default.findAll().then(function (tags) {
                _this3.options.tags = tags;
                return tags;
            });
        },
        _filterTree: function _filterTree(scenario) {
            var _this4 = this;
            var tags = this.options.tags;
            this.options.treeFilter = scenario;
            if (scenario == 'my_tags') {
                tags = this.options.tags.filter(function (item) {
                    return !item.is_shared;
                });
            } else if (scenario == 'shared_tags') {
                tags = this.options.tags.filter(function (item) {
                    return item.is_shared;
                });
            }
            this._loadTree(tags);
            if (this.options.selectedTags.length) {
                var found = tags.filter(function (item) {
                    return item.id == _this4.options.selectedTags[0].id;
                });
                if (found.length) {
                    this.options.tree.view.selectItem(this.options.selectedTags[0]);
                } else {
                    var filter = new _filter3.default({
                        id: 'default',
                        type: 'default',
                        label: __('All items'),
                        order: ['Resource.modified DESC']
                    });
                    _bus2.default.trigger('filter_workspace', { filter: filter });
                }
            }
        },
        _getTreeMap: function _getTreeMap() {
            return new _map2.default({
                id: 'id',
                label: 'slug'
            });
        },
        _loadTree: function _loadTree(tags) {
            if (this.state.destroyed) {
                return;
            }
            this.options.tree.reset();
            this.options.tree.load(tags);
            this.state.loaded = true;
        },
        _showTreeFilterMenu: function _showTreeFilterMenu(x, y) {
            var _this5 = this;
            var contextualMenu = _contextual_menu2.default.instantiate({
                coordinates: {
                    x: x,
                    y: y
                }
            });
            contextualMenu.start();
            var allTagsFilter = new _action2.default({
                id: 'js_filter_tags_section_all_tags_options',
                label: __('All tags'),
                cssClasses: [],
                action: function action() {
                    _this5._setTitle(__('All tags'));
                    _this5._filterTree('all_tags');
                    contextualMenu.destroyAndRemove();
                }
            });
            contextualMenu.insertItem(allTagsFilter);
            var myTagsFilter = new _action2.default({
                id: 'js_filter_tags_section_my_tags_options',
                label: __('My tags'),
                cssClasses: [],
                action: function action() {
                    _this5._setTitle(__('My tags'));
                    _this5._filterTree('my_tags');
                    contextualMenu.destroyAndRemove();
                }
            });
            contextualMenu.insertItem(myTagsFilter);
            var sharedTagsFilter = new _action2.default({
                id: 'js_filter_tags_section_shared_tags_options',
                label: __('Shared tags'),
                cssClasses: [],
                action: function action() {
                    _this5._setTitle(__('Shared tags'));
                    _this5._filterTree('shared_tags');
                    contextualMenu.destroyAndRemove();
                }
            });
            contextualMenu.insertItem(sharedTagsFilter);
        },
        _setTitle: function _setTitle(title) {
            $('h3 a', this.element).text(title);
        },
        '{element} item_selected': function elementItem_selected(el, ev) {
            var tag = ev.data.item;
            this.options.selectedTags.splice(0, this.options.selectedTags.length);
            this.options.selectedTags.push(tag);
            var filter = new _filter3.default({
                id: 'workspace_filter_tag_' + tag.id,
                type: 'tag',
                label: tag.slug + __(' (tag)'),
                rules: { 'has-tag': tag.slug },
                tag: tag
            });
            this.options.filter = filter;
            _bus2.default.trigger('filter_workspace', { filter: filter });
        },
        '{mad.bus.element} filter_workspace': function madBusElementFilter_workspace(el, ev) {
            var filter = ev.data.filter;
            if (filter.type != 'tag') {
                this.options.filter = null;
                this.options.tree.unselectAll();
            } else {
                this.options.filter = filter;
                var treeItems = this.options.tree.options.items;
                var found = treeItems.filter(function (tag) {
                    return tag.id == filter.tag.id;
                });
                if (!found.length) {
                    this._setTitle(__('All tags'));
                    this._filterTree('all_tags');
                }
                this.options.tree.view.selectItem(filter.tag);
            }
        },
        '{mad.bus.element} resource_tags_updated': function madBusElementResource_tags_updated(model, ev, resource) {
            var _this6 = this;
            this._findTags().then(function (tags) {
                if (_this6.state.destroyed) {
                    return;
                }
                _this6._loadTree(tags);
                if (_this6.options.treeFilter) {
                    _this6._filterTree(_this6.options.treeFilter);
                }
                if (_this6.options.filter && _this6.options.filter.tag) {
                    var filter = _this6.options.filter;
                    var treeItems = _this6.options.tree.options.items;
                    var found = treeItems.filter(function (tag) {
                        return tag.id == filter.tag.id;
                    });
                    if (found.length) {
                        _this6.options.tree.view.selectItem(filter.tag);
                    } else {
                        var _filter = new _filter3.default({
                            id: 'default',
                            type: 'default',
                            label: __('All items'),
                            order: ['Resource.modified DESC'],
                            resource: resource
                        });
                        _bus2.default.trigger('filter_workspace', { filter: _filter });
                    }
                }
            });
        },
        '{mad.bus.element} tags_updated': function madBusElementTags_updated(model, ev, options) {
            var _this7 = this;
            this._findTags().then(function (tags) {
                if (_this7.state.destroyed) {
                    return;
                }
                _this7._loadTree(tags);
                if (options.selectTag !== undefined) {
                    var tag = Array.from(tags).find(function (tag) {
                        return tag.slug == options.selectTag;
                    });
                    var filter = new _filter3.default({
                        id: 'workspace_filter_tag_' + tag.id,
                        type: 'tag',
                        label: tag.slug + __(' (tag)'),
                        rules: { 'has-tag': tag.slug },
                        tag: tag
                    });
                    _this7.options.filter = filter;
                    _bus2.default.trigger('filter_workspace', { filter: filter });
                } else {
                    if (_this7.options.treeFilter) {
                        _this7._filterTree(_this7.options.treeFilter);
                    }
                }
            });
        },
        '{element} #js_wsp_pwd_password_filter_tags_more click': function elementJs_wsp_pwd_password_filter_tags_moreClick(el, ev) {
            ev.stopPropagation();
            ev.stopImmediatePropagation();
            ev.preventDefault();
            var p = $(el).offset();
            var x = p.left - 4;
            var y = p.top + 16;
            this._showTreeFilterMenu(x, y);
            return false;
        }
    });
    exports.default = TagsFilterSidebarSectionComponent;
});
/*app/view/template/component/password/primary_sidebar.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/password/primary_sidebar.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/password/primary_sidebar.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'navigation first shortcuts',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wsp_pwd_filter_shortcuts',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'navigation accordion',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wsp_pwd_password_categories',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'navigation accordion',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wsp_pwd_filter_tags_section',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                5
            ]
        },
        {
            'tokenType': 'done',
            'args': [6]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/password/primary_sidebar*/
define('app/component/password/primary_sidebar', [
    'exports',
    'passbolt-mad/config/config',
    'app/component/password/groups_filter_sidebar_section',
    'app/component/workspace/primary_sidebar',
    'app/component/password/shortcuts_filter_sidebar_section',
    'app/component/tag/tags_filter_sidebar_section',
    'app/view/template/component/password/primary_sidebar.stache!'
], function (exports, _config, _groups_filter_sidebar_section, _primary_sidebar, _shortcuts_filter_sidebar_section, _tags_filter_sidebar_section, _primary_sidebar3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _config2 = _interopRequireDefault(_config);
    var _groups_filter_sidebar_section2 = _interopRequireDefault(_groups_filter_sidebar_section);
    var _primary_sidebar2 = _interopRequireDefault(_primary_sidebar);
    var _shortcuts_filter_sidebar_section2 = _interopRequireDefault(_shortcuts_filter_sidebar_section);
    var _tags_filter_sidebar_section2 = _interopRequireDefault(_tags_filter_sidebar_section);
    var _primary_sidebar4 = _interopRequireDefault(_primary_sidebar3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var PrimarySidebarComponent = _primary_sidebar2.default.extend('passbolt.component.password.PrimarySidebar', {
        defaults: {
            label: 'Password Workspace Primary Sidebar',
            template: _primary_sidebar4.default,
            defaultFilter: null,
            selectedGroups: null
        }
    }, {
        afterStart: function afterStart() {
            this._initShortcutsFilterSection();
            this._initGroupsFilterSection();
            this._initTagsFilterSection();
            this._super();
        },
        _initShortcutsFilterSection: function _initShortcutsFilterSection() {
            var component = new _shortcuts_filter_sidebar_section2.default('#js_wsp_pwd_filter_shortcuts', { allFilter: this.options.defaultFilter });
            component.start();
        },
        _initGroupsFilterSection: function _initGroupsFilterSection() {
            var component = new _groups_filter_sidebar_section2.default('#js_wsp_pwd_password_categories', { selectedGroups: this.options.selectedGroups });
            component.start();
        },
        _initTagsFilterSection: function _initTagsFilterSection() {
            var plugins = _config2.default.read('server.passbolt.plugins');
            if (plugins && plugins.tags) {
                var component = new _tags_filter_sidebar_section2.default('#js_wsp_pwd_filter_tags_section');
                component.start();
            }
        }
    });
    exports.default = PrimarySidebarComponent;
});
/*app/form/secret/create*/
define('app/form/secret/create', [
    'exports',
    'passbolt-mad/form/form',
    'passbolt-mad/form/element/textbox'
], function (exports, _form, _textbox) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _form2 = _interopRequireDefault(_form);
    var _textbox2 = _interopRequireDefault(_textbox);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var CreateForm = _form2.default.extend('passbolt.form.secret.Create', {
        defaults: {
            action: 'create',
            secret_i: null
        }
    }, {
        afterStart: function afterStart() {
            this.addElement(new _textbox2.default('#js_field_secret_id_' + this.options.secret_i, {
                modelReference: 'Secret.id',
                validate: false
            }).start());
            this.addElement(new _textbox2.default('#js_field_secret_user_id_' + this.options.secret_i, {
                modelReference: 'Secret.user_id',
                validate: false
            }).start());
            this.addElement(new _textbox2.default('#js_field_secret_data_' + this.options.secret_i, {
                state: { hidden: true },
                modelReference: 'Secret.data',
                validate: false
            }).start());
            this.on();
        }
    });
    exports.default = CreateForm;
});
/*app/view/template/form/resource/create.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/form/resource/create.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/form/resource/create.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form-content',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'hidden',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'Resource.id',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_resource_id',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form_field',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text required js_form_element_wrapper',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'for',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_name',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'for',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                6
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Name\') ',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'Resource.name',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_name',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'name',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'autofocus',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'autofocus',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_name_feedback',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\n\t',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text js_form_element_wrapper',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'for',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_uri',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'for',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                13
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'URI\') ',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'Resource.uri',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_uri',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'https://example.com/login',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                14
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_uri_feedback',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                15
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                15
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\n\t',
                17
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text js_form_element_wrapper',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                19
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'for',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_username',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'for',
                20
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                20
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Username\') ',
                20
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                20
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                21
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                21
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'Resource.username',
                21
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                21
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                21
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'text',
                21
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                21
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                21
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_username',
                21
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                21
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                21
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'name',
                21
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                21
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                21
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                22
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                22
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_username_feedback',
                22
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                22
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                22
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                22
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                22
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                22
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                23
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                24
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                26
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                26
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input text required js_form_element_wrapper js_form_secret_wrapper',
                26
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                26
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                26
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                27
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'for',
                27
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_secret_data_0',
                27
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'for',
                27
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                27
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Password\') ',
                27
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                27
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n        ',
                27
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                29
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                29
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_secret_edit_0',
                29
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                29
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                29
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_secret_edit_form',
                29
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                29
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                29
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                29
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                30
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                30
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'hidden',
                30
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                30
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                30
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'passbolt.model.Secret.id',
                30
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                30
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                30
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_secret_id_0',
                30
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                30
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                30
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_secret_id form_field',
                30
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                30
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                30
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                30
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                31
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                31
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'hidden',
                31
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                31
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                31
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'passbolt.model.Secret.user_id',
                31
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                31
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                31
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_secret_user_id_0',
                31
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                31
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                31
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_secret_user_id form_field',
                31
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                31
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                31
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                31
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'textarea',
                false,
                32
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                32
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'passbolt.model.Secret.data',
                32
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                32
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                32
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_secret_data_0',
                32
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                32
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                32
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'form_field js_field_secret_data hidden',
                32
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                32
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'textarea',
                false,
                32
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'textarea',
                32
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                32
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                33
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                33
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                34
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                34
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                36
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                36
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'input textarea js_form_element_wrapper',
                36
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                36
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                36
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                36
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'label',
                false,
                37
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'for',
                37
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_description',
                37
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'for',
                37
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'label',
                false,
                37
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Description\') ',
                37
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'label',
                37
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                37
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'textarea',
                false,
                38
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'name',
                38
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'Resource.description',
                38
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'name',
                38
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                38
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'required',
                38
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                38
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                38
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_description',
                38
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                38
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'placeholder',
                38
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'add a description',
                38
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'placeholder',
                38
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'textarea',
                false,
                38
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                38
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'textarea',
                39
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                39
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                40
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                40
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_field_description_feedback',
                40
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                40
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                40
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'message',
                40
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                40
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                40
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                40
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                41
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                41
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                42
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                42
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                44
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                44
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                46
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                46
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-edit-feedbacks',
                46
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                46
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                46
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'feedbacks message hidden',
                46
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                46
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                46
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                46
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                46
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                48
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                48
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'submit-wrapper clearfix',
                48
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                48
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                48
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                48
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'input',
                true,
                49
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'type',
                49
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'submit',
                49
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'type',
                49
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                49
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'button primary',
                49
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                49
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'value',
                49
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'save\')',
                49
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'value',
                49
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'input',
                true,
                49
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                49
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                50
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                50
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-dialog-cancel cancel',
                50
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                50
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                50
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'cancel\')',
                50
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                50
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                50
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                51
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                51
            ]
        },
        {
            'tokenType': 'done',
            'args': [52]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/form/resource/create*/
define('app/form/resource/create', [
    'exports',
    'can-dom-events',
    'passbolt-mad/form/feedback',
    'passbolt-mad/form/form',
    'passbolt-mad/control/bus',
    'app/util/plugin',
    'app/form/secret/create',
    'passbolt-mad/form/element/textbox',
    'app/model/map/user',
    'app/view/template/form/resource/create.stache!'
], function (exports, _canDomEvents, _feedback, _form, _bus, _plugin, _create, _textbox, _user, _create3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _canDomEvents2 = _interopRequireDefault(_canDomEvents);
    var _feedback2 = _interopRequireDefault(_feedback);
    var _form2 = _interopRequireDefault(_form);
    var _bus2 = _interopRequireDefault(_bus);
    var _plugin2 = _interopRequireDefault(_plugin);
    var _create2 = _interopRequireDefault(_create);
    var _textbox2 = _interopRequireDefault(_textbox);
    var _user2 = _interopRequireDefault(_user);
    var _create4 = _interopRequireDefault(_create3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var CreateForm = _form2.default.extend('passbolt.form.resource.Create', {
        defaults: {
            secretField: null,
            action: 'create',
            secretsForms: [],
            resource: null,
            template: _create4.default,
            lastValidationResult: false
        }
    }, {
        beforeRender: function beforeRender() {
            this._super();
            this.setViewData('resource', this.options.data);
        },
        afterStart: function afterStart() {
            var self = this;
            this.options.data.Resource = this.options.data.Resource || {};
            this.addElement(new _textbox2.default('#js_field_resource_id', {
                modelReference: 'Resource.id',
                validate: false
            }).start());
            this.addElement(new _textbox2.default('#js_field_name', { modelReference: 'Resource.name' }).start(), new _feedback2.default('#js_field_name_feedback', {}).start());
            this.addElement(new _textbox2.default('#js_field_uri', { modelReference: 'Resource.uri' }).start(), new _feedback2.default('#js_field_uri_feedback', {}).start());
            this.addElement(new _textbox2.default('#js_field_username', { modelReference: 'Resource.username' }).start(), new _feedback2.default('#js_field_username_feedback', {}).start());
            var secrets = this.options.data.secrets;
            if (secrets) {
                var secret = secrets.filter(function (secret) {
                    return secret.user_id == _user2.default.getCurrent().id;
                })[0];
                var secretForm = new _create2.default('#js_secret_edit_0', {
                    data: secret,
                    secret_i: 0
                });
                secretForm.start();
                secretForm.load({ Secret: secret });
                self.options.secretsForms.push(secretForm);
            }
            this.addElement(new _textbox2.default('#js_field_description', { modelReference: 'Resource.description' }).start(), new _feedback2.default('#js_field_description_feedback', {}).start());
            if (this.options.data != null) {
                this.load({ Resource: this.options.data });
            }
            _plugin2.default.insertResourceEditframe(this.options.data.id);
            setTimeout(function () {
                self.setInitialFocus();
            }, 100);
        },
        setInitialFocus: function setInitialFocus() {
            var initialFocusEl = $('#js_field_name');
            initialFocusEl.focus();
            if (initialFocusEl.val() != '') {
                initialFocusEl.select();
            }
        },
        validate: function validate() {
            _bus2.default.trigger('passbolt.secret_edition.validate');
            this.lastValidationResult = this._super();
        },
        encrypt: function encrypt() {
            var usersIds = [];
            if (this.options.action == 'edit') {
                var findOptions = { filter: { 'has-access': this.options.data.id } };
                _user2.default.findAll(findOptions).then(function (users) {
                    var usersIds = [];
                    users.forEach(function (user) {
                        usersIds.push(user.id);
                    });
                    _bus2.default.triggerPlugin('passbolt.secret_edition.encrypt', usersIds);
                });
            } else {
                usersIds.push(_user2.default.getCurrent().id);
                _bus2.default.triggerPlugin('passbolt.secret_edition.encrypt', usersIds);
            }
        },
        '{element} submit': function elementSubmit(el, ev) {
            ev.preventDefault();
            this.validate();
        },
        '{mad.bus.element} secret_edition_secret_validated': function madBusElementSecret_edition_secret_validated(el, ev) {
            var secretValidated = ev.data[0];
            if (!secretValidated) {
                $('.js_form_secret_wrapper').addClass('error');
            } else {
                $('.js_form_secret_wrapper').removeClass('error');
            }
            if (!this.lastValidationResult || !secretValidated) {
                if (this.options.callbacks.error) {
                    this.options.callbacks.error();
                }
                return;
            }
            this.encrypt();
        },
        '{mad.bus.element} secret_edition_secret_encrypted': function madBusElementSecret_edition_secret_encrypted(el, ev) {
            var armoreds = ev.data;
            var data = this.getData();
            data['Resource'].secrets = [];
            for (var userId in armoreds) {
                data['Resource'].secrets.push({
                    user_id: userId,
                    data: armoreds[userId]
                });
            }
            if (this.options.callbacks.submit) {
                this.options.callbacks.submit(data);
            }
        },
        '{mad.bus.element} secret_edition_secret_changed': function madBusElementSecret_edition_secret_changed() {
            _canDomEvents2.default.dispatch(this.element, { type: 'changed' });
        },
        '{element} #js_field_username keydown': function elementJs_field_usernameKeydown(el, ev) {
            var code = ev.keyCode || ev.which;
            if (code == '9') {
                _bus2.default.trigger('passbolt.secret.focus');
            }
        },
        '{element} #js_field_description keydown': function elementJs_field_descriptionKeydown(el, ev) {
            var code = ev.keyCode || ev.which;
            if (code == '9' && ev.shiftKey) {
                _bus2.default.trigger('passbolt.secret.focus');
            }
        },
        '{mad.bus.element} secret_tab_pressed': function madBusElementSecret_tab_pressed() {
            $('#js_field_description').focus();
        },
        '{mad.bus.element} secret_backtab_pressed': function madBusElementSecret_backtab_pressed() {
            $('#js_field_username').focus();
        }
    });
    exports.default = CreateForm;
});
/*app/view/template/form/resource/edit.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/form/resource/edit.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/form/resource/edit.stache', [
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'tabs-nav menu',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-share-go-to-edit',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'row',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'main-cell-wrapper',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'main-cell',
                5
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                5
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                5
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'selected',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Edit',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                6
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                11
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js-share-go-to-share',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                11
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'row',
                12
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                12
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'main-cell-wrapper',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                14
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'main-cell',
                14
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                14
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                14
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                15
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Share',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t',
                15
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t',
                16
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                18
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                19
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                20
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                22
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                22
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'tab',
                22
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                22
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                22
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                23
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'tab-content',
                23
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                23
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'style',
                23
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'display:block',
                23
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'style',
                23
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                23
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '>createTemplate',
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                24
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                25
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                26
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                26
            ]
        },
        {
            'tokenType': 'done',
            'args': [27]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/form/resource/edit*/
define('app/form/resource/edit', [
    'exports',
    'passbolt-mad/component/confirm',
    'app/form/resource/create',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/control/bus',
    'app/view/template/form/resource/create.stache!',
    'app/view/template/form/resource/edit.stache!'
], function (exports, _confirm, _create, _i18n, _bus, _create3, _edit) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _confirm2 = _interopRequireDefault(_confirm);
    var _create2 = _interopRequireDefault(_create);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _bus2 = _interopRequireDefault(_bus);
    var _create4 = _interopRequireDefault(_create3);
    var _edit2 = _interopRequireDefault(_edit);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var EditForm = _create2.default.extend('passbolt.form.resource.Edit', {
        defaults: {
            secretField: null,
            action: 'edit',
            secretsForms: [],
            template: _edit2.default,
            lastValidationResult: false
        }
    }, {
        beforeRender: function beforeRender() {
            this._super();
            this.setViewData('createTemplate', _create4.default);
        },
        '{element} changed': function elementChanged() {
            this._hasChanged = true;
            var text = __('You need to save to apply the changes.');
            $('#js-edit-feedbacks', this.element).text(text).addClass('warning').removeClass('hidden');
        },
        _goToShareTab: function _goToShareTab() {
            _bus2.default.trigger('request_resource_share', { resource: this.options.data });
        },
        _confirmChangeTab: function _confirmChangeTab() {
            var _this = this;
            if (!this._hasChanged) {
                return this._goToShareTab();
            }
            var confirmDialog = _confirm2.default.instantiate({
                label: __('Do you really want to leave ?'),
                content: __('There are unsaved changes, you might want to save them before leaving.'),
                submitButton: {
                    label: __('Leave anyway'),
                    cssClasses: ['warning']
                },
                action: function action() {
                    return _this._goToShareTab();
                }
            });
            confirmDialog.start();
        },
        '{element} #js-share-go-to-share click': function elementJsShareGoToShareClick() {
            this._confirmChangeTab();
        }
    });
    exports.default = EditForm;
});
/*app/view/template/component/comment/delete_confirm.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/comment/delete_confirm.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/comment/delete_confirm.stache', [
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Please confirm you really want to delete the comment. After clicking ok, the comment will be\') ',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'strong',
                false,
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'strong',
                false,
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'deleted permanently\') ',
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'strong',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                1
            ]
        },
        {
            'tokenType': 'done',
            'args': [2]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/workspace/import_button.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/workspace/import_button.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/workspace/import_button.stache', [
        {
            'tokenType': 'start',
            'args': [
                'i',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'fa fa-fw fa-upload',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'i',
                false,
                1
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'i',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'visuallyhidden',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'upload',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                2
            ]
        },
        {
            'tokenType': 'done',
            'args': [2]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/password/delete_confirm.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/password/delete_confirm.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/password/delete_confirm.stache', [
        {
            'tokenType': 'special',
            'args': [
                '#if(multipleDelete)',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                1
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Please confirm you really want to delete the passwords. After clicking ok, the passwords will be\') ',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'strong',
                false,
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'strong',
                false,
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'deleted permanently\') ',
                2
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'strong',
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '.\n',
                2
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '#else',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'Please confirm you really want to delete the password. After clicking ok, the password will be\') ',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                ' ',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'strong',
                false,
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'strong',
                false,
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'deleted permanently\') ',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'strong',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '.\n',
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                '/if',
                5
            ]
        },
        {
            'tokenType': 'done',
            'args': [5]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/view/template/component/password/workspace.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/password/workspace.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/password/workspace.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_workspace',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_password_workspace_primary_sidebar',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'panel left',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                4
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                6
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'panel middle',
                6
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                6
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wsp_password_breadcrumb',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'breadcrumbs',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                7
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wsp_pwd_browser',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'tableview',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                13
            ]
        },
        {
            'tokenType': 'done',
            'args': [14]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/password/workspace*/
define('app/component/password/workspace', [
    'exports',
    'app/component/password/workspace_breadcrumb',
    'passbolt-mad/component/button',
    'passbolt-mad/component/component',
    'passbolt-mad/helper/component',
    'passbolt-mad/config/config',
    'passbolt-mad/component/confirm',
    'passbolt-mad/component/dialog',
    'app/component/password/grid',
    'passbolt-mad/util/lang/i18n',
    'passbolt-mad/control/bus',
    'app/component/password/password_secondary_sidebar',
    'app/util/plugin',
    'app/component/password/workspace_primary_menu',
    'app/component/password/primary_sidebar',
    'app/form/resource/create',
    'app/form/resource/edit',
    'can-route',
    'app/component/workspace/secondary_menu',
    'app/model/map/favorite',
    'app/model/filter',
    'app/model/map/group',
    'app/model/map/resource',
    'app/view/template/component/comment/delete_confirm.stache!',
    'app/view/template/component/workspace/create_button.stache!',
    'app/view/template/component/workspace/import_button.stache!',
    'app/view/template/component/password/delete_confirm.stache!',
    'app/view/template/component/password/workspace.stache!'
], function (exports, _workspace_breadcrumb, _button, _component, _component3, _config, _confirm, _dialog, _grid, _i18n, _bus, _password_secondary_sidebar, _plugin, _workspace_primary_menu, _primary_sidebar, _create, _edit, _canRoute, _secondary_menu, _favorite, _filter, _group, _resource, _delete_confirm, _create_button, _import_button, _delete_confirm3, _workspace) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _workspace_breadcrumb2 = _interopRequireDefault(_workspace_breadcrumb);
    var _button2 = _interopRequireDefault(_button);
    var _component2 = _interopRequireDefault(_component);
    var _component4 = _interopRequireDefault(_component3);
    var _config2 = _interopRequireDefault(_config);
    var _confirm2 = _interopRequireDefault(_confirm);
    var _dialog2 = _interopRequireDefault(_dialog);
    var _grid2 = _interopRequireDefault(_grid);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _bus2 = _interopRequireDefault(_bus);
    var _password_secondary_sidebar2 = _interopRequireDefault(_password_secondary_sidebar);
    var _plugin2 = _interopRequireDefault(_plugin);
    var _workspace_primary_menu2 = _interopRequireDefault(_workspace_primary_menu);
    var _primary_sidebar2 = _interopRequireDefault(_primary_sidebar);
    var _create2 = _interopRequireDefault(_create);
    var _edit2 = _interopRequireDefault(_edit);
    var _canRoute2 = _interopRequireDefault(_canRoute);
    var _secondary_menu2 = _interopRequireDefault(_secondary_menu);
    var _favorite2 = _interopRequireDefault(_favorite);
    var _filter2 = _interopRequireDefault(_filter);
    var _group2 = _interopRequireDefault(_group);
    var _resource2 = _interopRequireDefault(_resource);
    var _delete_confirm2 = _interopRequireDefault(_delete_confirm);
    var _create_button2 = _interopRequireDefault(_create_button);
    var _import_button2 = _interopRequireDefault(_import_button);
    var _delete_confirm4 = _interopRequireDefault(_delete_confirm3);
    var _workspace2 = _interopRequireDefault(_workspace);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                arr2[i] = arr[i];
            }
            return arr2;
        } else {
            return Array.from(arr);
        }
    }
    var PasswordWorkspaceComponent = _component2.default.extend('passbolt.component.password.Workspace', {
        defaults: {
            name: 'password_workspace',
            template: _workspace2.default,
            silentLoading: false,
            loadedOnStart: false,
            selectedResources: new _resource2.default.List(),
            selectedGroups: new _group2.default.List(),
            filter: null,
            Resource: _resource2.default
        },
        getDefaultFilterSettings: function getDefaultFilterSettings() {
            var filter = new _filter2.default({
                id: 'default',
                type: 'default',
                label: __('All items'),
                order: ['Resource.modified DESC']
            });
            return filter;
        }
    }, {
        afterStart: function afterStart() {
            var primaryMenu = this._initPrimaryMenu();
            var secondaryMenu = this._initSecondaryMenu();
            var mainActionButton = this._initMainActionButton();
            var importButton = this._initImportButton();
            var breadcrumb = this._initBreadcrumb();
            var primarySidebar = this._initPrimarySidebar();
            var grid = this._initGrid();
            primaryMenu.start();
            secondaryMenu.start();
            mainActionButton.start();
            if (importButton) {
                importButton.start();
            }
            breadcrumb.start();
            primarySidebar.start();
            grid.start();
            var filter = this.getFilter();
            _bus2.default.trigger('filter_workspace', { filter: filter });
            this.on();
            this._super();
        },
        getFilter: function getFilter() {
            var filter = PasswordWorkspaceComponent.getDefaultFilterSettings();
            filter.viewResourceId = null;
            var action = _canRoute2.default.data.action;
            switch (action) {
            case 'commentsView':
            case 'view': {
                    filter.viewResourceId = _canRoute2.default.data.id;
                }
            }
            return filter;
        },
        _initPrimaryMenu: function _initPrimaryMenu() {
            var $el = $('#js_wsp_primary_menu_wrapper');
            var options = { selectedResources: this.options.selectedResources };
            var component = _component4.default.create($el, 'last', _workspace_primary_menu2.default, options);
            this.addLoadedDependency(component);
            return component;
        },
        _initSecondaryMenu: function _initSecondaryMenu() {
            var component = _component4.default.create($('#js_wsp_secondary_menu_wrapper'), 'last', _secondary_menu2.default, { selectedItems: this.options.selectedResources });
            this.addLoadedDependency(component);
            return component;
        },
        _initMainActionButton: function _initMainActionButton() {
            var selector = $('.main-action-wrapper');
            var options = {
                id: 'js_wsp_create_button',
                template: _create_button2.default,
                tag: 'button',
                cssClasses: [
                    'button',
                    'primary'
                ]
            };
            var component = _component4.default.create(selector, 'last', _button2.default, options);
            this.options.mainButton = component;
            this.addLoadedDependency(component);
            return component;
        },
        _initImportButton: function _initImportButton() {
            if (_config2.default.read('server.passbolt.plugins.import')) {
                var selector = $('.main-action-wrapper');
                var options = {
                    id: 'js_wsp_pwd_import_button',
                    template: _import_button2.default,
                    tag: 'button',
                    cssClasses: ['button']
                };
                var component = _component4.default.create(selector, 'last', _button2.default, options);
                this.options.importButton = component;
                this.addLoadedDependency(component);
                return component;
            }
        },
        _initBreadcrumb: function _initBreadcrumb() {
            var component = new _workspace_breadcrumb2.default('#js_wsp_password_breadcrumb', { rootFilter: PasswordWorkspaceComponent.getDefaultFilterSettings() });
            this.addLoadedDependency(component);
            return component;
        },
        _initPrimarySidebar: function _initPrimarySidebar() {
            var component = new _primary_sidebar2.default('#js_password_workspace_primary_sidebar', {
                defaultFilter: PasswordWorkspaceComponent.getDefaultFilterSettings(),
                selectedResources: this.options.selectedResources,
                selectedGroups: this.options.selectedGroups
            });
            this.addLoadedDependency(component);
            return component;
        },
        _initGrid: function _initGrid() {
            if (this.options.grid) {
                $(this.options.grid.element).empty().removeClass();
                this.options.grid.destroy();
            }
            var component = new _grid2.default('#js_wsp_pwd_browser', {
                selectedResources: this.options.selectedResources,
                cssClasses: ['tableview']
            });
            this.options.grid = component;
            this.addLoadedDependency(component);
            return component;
        },
        _initSecondarySidebar: function _initSecondarySidebar() {
            this._destroySecondarySidebar();
            var showSidebar = _config2.default.read('ui.workspace.showSidebar');
            if (!showSidebar) {
                return;
            }
            var resource = this.options.selectedResources[0];
            var options = {
                id: 'js_pwd_details',
                resource: resource,
                cssClasses: [
                    'panel',
                    'aside',
                    'js_wsp_pwd_sidebar_second'
                ]
            };
            var component = _component4.default.create(this.element, 'last', _password_secondary_sidebar2.default, options);
            this.options.passwordSecondarySidebar = component;
            return component;
        },
        _destroySecondarySidebar: function _destroySecondarySidebar() {
            if (this.options.passwordSecondarySidebar) {
                this.options.passwordSecondarySidebar.destroyAndRemove();
                this.options.passwordSecondarySidebar = null;
            }
        },
        openCreateResourceDialog: function openCreateResourceDialog(resource) {
            var _this = this;
            var dialog = _dialog2.default.instantiate({
                label: __('Create Password'),
                cssClasses: [
                    'create-password-dialog',
                    'dialog-wrapper'
                ]
            }).start();
            var form = dialog.add(_create2.default, {
                data: resource,
                callbacks: {
                    submit: function submit(data) {
                        delete data['Resource']['id'];
                        var resourceToSave = new _resource2.default(data['Resource']);
                        _this._saveResource(resourceToSave, form, dialog);
                    }
                }
            });
            form.load(resource);
        },
        _saveResource: function _saveResource(resource, form, dialog) {
            var _this2 = this;
            this.state.loaded = false;
            dialog.remove();
            resource.save().then(function () {
                var filter = PasswordWorkspaceComponent.getDefaultFilterSettings();
                filter.forceReload = true;
                _bus2.default.trigger('filter_workspace', { filter: filter });
                _this2.state.loaded = true;
            }, function (v) {
                form.showErrors(JSON.parse(v.responseText)['body']);
            });
        },
        openEditResourceDialog: function openEditResourceDialog(resource) {
            var dialog = _dialog2.default.instantiate({
                label: __('Edit'),
                subtitle: resource.name,
                cssClasses: [
                    'edit-password-dialog',
                    'dialog-wrapper'
                ]
            }).start();
            dialog.add(_edit2.default, {
                id: 'js_rs_edit',
                label: __('Edit'),
                action: 'edit',
                data: resource,
                callbacks: {
                    submit: function submit(data) {
                        var resourceToUpdate = new _resource2.default(data['Resource']);
                        if (data['Resource'].secrets.length > 0) {
                            resourceToUpdate['__FILTER_CASE__'] = 'edit_with_secrets';
                        } else {
                            resourceToUpdate['__FILTER_CASE__'] = 'edit';
                        }
                        resourceToUpdate.save().then(function (savedResource) {
                            resource.assign(savedResource);
                        });
                        dialog.remove();
                    }
                }
            });
        },
        openShareResourcesDialog: function openShareResourcesDialog(resources) {
            _plugin2.default.insertShareIframe(resources.map(function (resource) {
                return resource.id;
            }));
        },
        openDeleteResourcesDialog: function openDeleteResourcesDialog(resources) {
            var _this3 = this;
            var multipleDelete = resources.length > 1;
            var dialog = _confirm2.default.instantiate({
                label: __('Do you really want to delete?'),
                content: _delete_confirm4.default,
                submitButton: {
                    label: multipleDelete ? __('delete passwords') : __('delete password'),
                    cssClasses: ['warning']
                },
                action: function action() {
                    return _this3._deleteResources(resources);
                }
            });
            dialog.setViewData('multipleDelete', multipleDelete);
            dialog.start();
        },
        _deleteResources: function _deleteResources(resources) {
            var _this4 = this;
            var multipleDelete = resources.length > 1;
            this.state.loaded = false;
            this.options.selectedResources.splice(0, this.options.selectedResources.length);
            if (multipleDelete) {
                _resource2.default.deleteAll(resources).then(function () {
                    _bus2.default.trigger('passbolt_notify', {
                        title: 'app_resources_delete_all_success',
                        status: 'success'
                    });
                    _this4.state.loaded = true;
                });
            } else {
                resources[0].destroy().then(function () {
                    _this4.state.loaded = true;
                });
            }
        },
        favoriteResource: function favoriteResource(resource) {
            var data = {
                foreign_model: 'resource',
                foreign_key: resource.id
            };
            var favorite = new _favorite2.default(data);
            favorite.save().then(function (favorite) {
                resource.favorite = favorite;
                _resource2.default.connection.hydrateInstance(resource);
            });
        },
        unfavoriteResource: function unfavoriteResource(resource) {
            var favorite = resource.favorite;
            favorite.destroy().then(function () {
                resource.favorite = null;
                _resource2.default.connection.hydrateInstance(resource);
            });
        },
        deleteComment: function deleteComment(comment) {
            var confirm = _confirm2.default.instantiate({
                label: __('Do you really want to delete?'),
                content: _delete_confirm2.default,
                submitButton: {
                    label: __('delete comment'),
                    cssClasses: ['warning']
                },
                action: function action() {
                    comment.destroy();
                }
            });
            confirm.start();
        },
        '{Resource} updated': function ResourceUpdated(model, ev, resource) {
            var resourceSelectedIndex = this.options.selectedResources.indexOf(resource);
            if (resourceSelectedIndex != -1) {
                this.options.selectedResources[resourceSelectedIndex].assign(resource);
            }
        },
        '{Resource} destroyed': function ResourceDestroyed(model, event, destroyedItem) {
            this.options.selectedResources.remove(destroyedItem);
        },
        '{selectedResources} length': function selectedResourcesLength() {
            var selectedResources = this.options.selectedResources;
            if (selectedResources.length == 1) {
                var component = this._initSecondarySidebar();
                if (component) {
                    component.start();
                }
                _canRoute2.default.data.update({
                    controller: 'Password',
                    action: 'view',
                    id: selectedResources[0].id
                });
            } else {
                this._destroySecondarySidebar();
                _canRoute2.default.data.update({
                    controller: 'Password',
                    action: 'index'
                });
            }
        },
        '{mad.bus.element} workspace_sidebar_state_change': function madBusElementWorkspace_sidebar_state_change() {
            var resource = this.options.selectedResources[0];
            if (resource) {
                var component = this._initSecondarySidebar(resource);
                if (component) {
                    component.start();
                }
            }
        },
        '{mainButton.element} click': function mainButtonElementClick() {
            _bus2.default.trigger('request_resource_create');
        },
        '{importButton.element} click': function importButtonElementClick() {
            _bus2.default.trigger('passbolt.import-passwords');
        },
        '{mad.bus.element} filter_workspace': function madBusElementFilter_workspace(el, ev) {
            var filter = ev.data.filter;
            this.options.selectedResources.splice(0, this.options.selectedResources.length);
            if (!filter.rules['is-shared-with-group']) {
                this.options.selectedGroups.splice(0, this.options.selectedGroups.length);
            }
            if (this.options.grid.filterSettings) {
                var wasSearchingAllItems = filter.id == 'default' && this.options.grid.filterSettings.id == 'search';
                var isSearchingAllItems = filter.id == 'search' && this.options.grid.filterSettings.id == 'default';
                var isUpdatingSearch = filter.id == 'search' && this.options.grid.filterSettings.id == 'search';
                if (!wasSearchingAllItems && !isSearchingAllItems && !isUpdatingSearch) {
                    var grid = this._initGrid();
                    grid.start();
                }
            }
            _bus2.default.trigger('filter_grid', { filter: filter });
        },
        '{mad.bus.element} request_resource_create': function madBusElementRequest_resource_create() {
            var resource = new _resource2.default({});
            this.openCreateResourceDialog(resource);
        },
        '{mad.bus.element} request_resource_edit': function madBusElementRequest_resource_edit(el, ev) {
            var resource = ev.data.resource;
            this.openEditResourceDialog(resource);
        },
        '{mad.bus.element} request_resource_delete': function madBusElementRequest_resource_delete(el, ev) {
            var resource = ev.data.resource;
            var resources = new _resource2.default.List([resource]);
            this.openDeleteResourcesDialog(resources);
        },
        '{mad.bus.element} request_resources_delete': function madBusElementRequest_resources_delete(el, ev) {
            var resources = ev.data.resources;
            this.openDeleteResourcesDialog(resources);
        },
        '{mad.bus.element} request_resource_share': function madBusElementRequest_resource_share(el, ev) {
            var resource = ev.data.resource;
            this.openShareResourcesDialog([resource]);
        },
        '{mad.bus.element} request_resources_share': function madBusElementRequest_resources_share(el, ev) {
            var resources = ev.data.resources;
            this.openShareResourcesDialog(resources);
        },
        '{mad.bus.element} request_resource_favorite': function madBusElementRequest_resource_favorite(el, ev) {
            var resource = ev.data.resource;
            this.favoriteResource(resource);
        },
        '{mad.bus.element} request_resource_unfavorite': function madBusElementRequest_resource_unfavorite(el, ev) {
            var resource = ev.data.resource;
            this.unfavoriteResource(resource);
        },
        '{mad.bus.element} request_export': function madBusElementRequest_export() {
            var resourcesIds = this.options.selectedResources.reduce(function (carry, resource) {
                return [].concat(_toConsumableArray(carry), [resource.id]);
            }, []);
            _plugin2.default.send('passbolt.plugin.export_resources', resourcesIds);
        },
        '{mad.bus.element} passbolt.plugin.import-passwords-complete': function madBusElementPassboltPluginImportPasswordsComplete(el, ev, options) {
            if (options !== undefined && options.tag !== undefined) {
                _bus2.default.trigger('tags_updated', { selectTag: options.tag });
            } else {
                var workspace = 'password';
                _bus2.default.trigger('request_workspace', { workspace: workspace });
            }
        },
        '{mad.bus.element} passbolt.share.complete': function madBusElementPassboltShareComplete() {
            var selectedResources = this.options.selectedResources;
            var selectedResourcesIds = selectedResources.map(function (resource) {
                return resource.id;
            }).get();
            this.updateResourcesAfterShare(selectedResourcesIds).then(function (updatedResources) {
                return selectedResources.replace(updatedResources);
            });
        },
        updateResourcesAfterShare: function updateResourcesAfterShare(updatedResourcesIds) {
            var originalResources = this.options.grid.options.items;
            return _resource2.default.findAllByIds(updatedResourcesIds).then(function (resources) {
                var deletedResourcesIds = updatedResourcesIds.filter(function (updatedResourceId) {
                    return resources.indexOf({ id: updatedResourceId }) === -1;
                });
                originalResources.filter(function (originalResource) {
                    return deletedResourcesIds.indexOf(originalResource.id) !== -1;
                }).forEach(function (deletedResource) {
                    _resource2.default.dispatch('destroyed', deletedResource);
                });
                _resource2.default.dispatch('updated', resources);
                return resources;
            });
        },
        '{mad.bus.element} passbolt.share.go-to-edit': function madBusElementPassboltShareGoToEdit() {
            var resource = this.options.selectedResources.get(0);
            _bus2.default.trigger('request_resource_edit', { resource: resource });
        },
        '{mad.bus.element} request_delete_comment': function madBusElementRequest_delete_comment(el, ev) {
            var comment = ev.data.comment;
            this.deleteComment(comment);
        }
    });
    exports.default = PasswordWorkspaceComponent;
});
/*app/view/template/component/profile/header_dropdown.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/component/profile/header_dropdown.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/component/profile/header_dropdown.stache', [
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'center-cell-wrapper',
                1
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                1
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'details center-cell',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'name',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                3
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' user.profile.fullName() ',
                3
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'email',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                4
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' user.username ',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'picture left-cell',
                7
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                7
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                7
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                7
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'img',
                true,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'src',
                8
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' user.profile.avatarPath(\'small\') ',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'src',
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'alt',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'your picture',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'alt',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'img',
                true,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                8
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                9
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'more right-cell',
                10
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                10
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                10
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                11
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'more',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                11
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                12
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                12
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'dropdown-content right',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                13
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                14
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                14
            ]
        },
        {
            'tokenType': 'done',
            'args': [15]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/profile/header_dropdown*/
define('app/component/profile/header_dropdown', [
    'exports',
    'passbolt-mad/model/map/action',
    'passbolt-mad/component/button_dropdown',
    'passbolt-mad/config/config',
    'passbolt-mad/util/lang/i18n',
    'can-route',
    'uuid/v4',
    'app/view/template/component/profile/header_dropdown.stache!'
], function (exports, _action, _button_dropdown, _config, _i18n, _canRoute, _v, _header_dropdown) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _action2 = _interopRequireDefault(_action);
    var _button_dropdown2 = _interopRequireDefault(_button_dropdown);
    var _config2 = _interopRequireDefault(_config);
    var _i18n2 = _interopRequireDefault(_i18n);
    var _canRoute2 = _interopRequireDefault(_canRoute);
    var _v2 = _interopRequireDefault(_v);
    var _header_dropdown2 = _interopRequireDefault(_header_dropdown);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var HeaderProfileDropdownComponent = _button_dropdown2.default.extend('passbolt.component.ProfileDropdown', {
        defaults: {
            label: null,
            cssClasses: [],
            template: _header_dropdown2.default,
            contentElement: '#js_app_profile_dropdown .dropdown-content',
            user: null
        }
    }, {
        afterStart: function afterStart() {
            this._super();
            this._initMenu();
        },
        _initMenu: function _initMenu() {
            var _this = this;
            var menu = this.options.menu;
            var profileItem = new _action2.default({
                id: (0, _v2.default)(),
                label: __('Profile'),
                action: function action() {
                    return _this._goToUserProfile();
                }
            });
            menu.insertItem(profileItem);
            var plugins = _config2.default.read('server.passbolt.plugins');
            if (plugins && plugins.accountSettings) {
                var keysItem = new _action2.default({
                    id: (0, _v2.default)(),
                    label: __('Theme'),
                    action: function action() {
                        return _this._goToTheme();
                    }
                });
                menu.insertItem(keysItem);
            }
            var logoutItem = new _action2.default({
                id: (0, _v2.default)(),
                label: __('Logout'),
                action: function action() {
                    return _this._logout();
                }
            });
            menu.insertItem(logoutItem);
        },
        _goToUserProfile: function _goToUserProfile() {
            var controller = 'Settings';
            var action = 'profile';
            _canRoute2.default.data.update({
                controller: controller,
                action: action
            });
            this.view.close();
        },
        _goToTheme: function _goToTheme() {
            var controller = 'Settings';
            var action = 'theme';
            _canRoute2.default.data.update({
                controller: controller,
                action: action
            });
            this.view.close();
        },
        _logout: function _logout() {
            document.location.href = APP_URL + '/auth/logout';
        },
        beforeRender: function beforeRender() {
            this._super();
            this.setViewData('user', this.options.user);
        },
        '{user} updated': function userUpdated() {
            this.refresh();
        }
    });
    exports.default = HeaderProfileDropdownComponent;
});
/*app/view/template/app.stache!steal-stache@4.1.2#steal-stache*/
define('app/view/template/app.stache!steal-stache@4.1.2#steal-stache', [
    'module',
    'can-stache',
    'can-stache/src/mustache_core',
    'can-view-import@4.1.0#can-view-import',
    'can-stache-bindings@4.3.0#can-stache-bindings'
], function (module, stache, mustacheCore) {
    var renderer = stache('app/view/template/app.stache', [
        {
            'tokenType': 'comment',
            'args': [
                ' app/view/template/app.ejs ',
                1
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                1
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_app_loading_bar',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                2
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'update-loading-bar',
                2
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                2
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                2
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                2
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'progress-bar',
                3
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                3
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                3
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                3
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                4
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'style',
                4
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'width:0%',
                4
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'style',
                4
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                4
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                4
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                5
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                5
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                6
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                6
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'notification-container',
                8
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                8
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                8
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                8
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_app_notificator',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                9
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'notification',
                9
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                9
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                9
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                9
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                10
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                10
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                11
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                11
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                13
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'header first',
                13
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                13
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                13
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                13
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'nav',
                false,
                15
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'nav',
                false,
                15
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                15
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                16
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'primary navigation top',
                16
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                16
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                16
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                16
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                17
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                17
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_app_navigation_left',
                17
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                17
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'left',
                17
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                17
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                17
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                17
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                18
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                18
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'ul',
                false,
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_app_navigation_right',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                19
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'right',
                19
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                19
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'ul',
                false,
                19
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                19
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'li',
                false,
                20
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'logout ready',
                20
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                20
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'li',
                false,
                20
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                    ',
                20
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'a',
                false,
                21
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'href',
                21
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' APP_URL ',
                21
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'auth/logout',
                21
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'href',
                21
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'a',
                false,
                21
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                21
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                21
            ]
        },
        {
            'tokenType': 'special',
            'args': [
                ' __(\'logout\') ',
                21
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                21
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'a',
                21
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n                ',
                21
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'li',
                22
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n            ',
                22
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'ul',
                23
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                23
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                24
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                24
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'nav',
                25
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                25
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                27
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                27
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                29
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                29
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'header second',
                29
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                29
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                29
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                29
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                31
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                31
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'col1',
                31
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                31
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                31
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                31
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                32
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                32
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'logo no-img',
                32
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                32
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                32
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t\t\t\t',
                32
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'h1',
                false,
                33
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'h1',
                false,
                33
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'span',
                false,
                33
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'span',
                false,
                33
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                'Passbolt',
                33
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'span',
                33
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'h1',
                33
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                33
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                34
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                34
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                35
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                35
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                37
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                37
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'col2 search-wrapper',
                37
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                37
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                37
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                37
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                38
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                38
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_app_filter',
                38
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                38
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                38
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                38
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                39
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                39
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                40
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                40
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                42
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                42
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'col3 profile-wrapper',
                42
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                42
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                42
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                42
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                43
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                43
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_app_profile_dropdown',
                43
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                43
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                43
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'user profile dropdown',
                43
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                43
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                43
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n        ',
                43
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                44
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                44
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                45
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                45
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                46
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                46
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                48
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                48
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'header third',
                48
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                48
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                48
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n    ',
                48
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                50
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                50
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'col1 main-action-wrapper',
                50
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                50
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                50
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n    ',
                50
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                51
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n\t',
                51
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                53
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                53
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'col2_3 actions-wrapper',
                53
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                53
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                53
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                53
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                54
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                54
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wsp_primary_menu_wrapper',
                54
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                54
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                54
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'actions',
                54
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                54
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                54
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                54
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                55
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                55
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                56
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                56
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_wsp_secondary_menu_wrapper',
                56
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                56
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                56
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'actions secondary',
                56
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                56
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                56
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t\t',
                56
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                57
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\t',
                57
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                58
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                58
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                60
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n\n',
                60
            ]
        },
        {
            'tokenType': 'start',
            'args': [
                'div',
                false,
                62
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'id',
                62
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'js_app_panel_main',
                62
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'id',
                62
            ]
        },
        {
            'tokenType': 'attrStart',
            'args': [
                'class',
                62
            ]
        },
        {
            'tokenType': 'attrValue',
            'args': [
                'panel main',
                62
            ]
        },
        {
            'tokenType': 'attrEnd',
            'args': [
                'class',
                62
            ]
        },
        {
            'tokenType': 'end',
            'args': [
                'div',
                false,
                62
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                62
            ]
        },
        {
            'tokenType': 'close',
            'args': [
                'div',
                63
            ]
        },
        {
            'tokenType': 'chars',
            'args': [
                '\n',
                63
            ]
        },
        {
            'tokenType': 'done',
            'args': [64]
        }
    ]);
    return function (scope, options, nodeList) {
        var moduleOptions = Object.assign({}, options);
        if (moduleOptions.helpers) {
            moduleOptions.helpers = Object.assign({ module: module }, moduleOptions.helpers);
        } else {
            moduleOptions.module = module;
        }
        return renderer(scope, moduleOptions, nodeList);
    };
});
/*app/component/app*/
define('app/component/app', [
    'exports',
    'app/component/administration/workspace',
    'app/net/ajax',
    'passbolt-mad/component/component',
    'passbolt-mad/helper/component',
    'passbolt-mad/component/contextual_menu',
    'app/component/navigation/filter',
    'app/component/footer/loading_bar',
    'passbolt-mad/control/bus',
    'app/component/navigation/left',
    'app/component/footer/notification',
    'app/component/password/workspace',
    'app/component/profile/header_dropdown',
    'can-route',
    'app/model/utility/session',
    'app/component/settings/workspace',
    'can-string',
    'app/model/map/user',
    'app/component/user/workspace',
    'app/view/template/app.stache!'
], function (exports, _workspace, _ajax, _component, _component3, _contextual_menu, _filter, _loading_bar, _bus, _left, _notification, _workspace3, _header_dropdown, _canRoute, _session, _workspace5, _canString, _user, _workspace7, _app) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _workspace2 = _interopRequireDefault(_workspace);
    var _ajax2 = _interopRequireDefault(_ajax);
    var _component2 = _interopRequireDefault(_component);
    var _component4 = _interopRequireDefault(_component3);
    var _contextual_menu2 = _interopRequireDefault(_contextual_menu);
    var _filter2 = _interopRequireDefault(_filter);
    var _loading_bar2 = _interopRequireDefault(_loading_bar);
    var _bus2 = _interopRequireDefault(_bus);
    var _left2 = _interopRequireDefault(_left);
    var _notification2 = _interopRequireDefault(_notification);
    var _workspace4 = _interopRequireDefault(_workspace3);
    var _header_dropdown2 = _interopRequireDefault(_header_dropdown);
    var _canRoute2 = _interopRequireDefault(_canRoute);
    var _session2 = _interopRequireDefault(_session);
    var _workspace6 = _interopRequireDefault(_workspace5);
    var _canString2 = _interopRequireDefault(_canString);
    var _user2 = _interopRequireDefault(_user);
    var _workspace8 = _interopRequireDefault(_workspace7);
    var _app2 = _interopRequireDefault(_app);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var App = _component2.default.extend('passbolt.component.App', {
        defaults: {
            template: _app2.default,
            loadedOnStart: false
        }
    }, {
        init: function init(el, options) {
            this._sessionCheckTimeout = null;
            this._initRouteListener();
            return this._super(el, options);
        },
        _initRouteListener: function _initRouteListener() {
            var _this = this;
            _canRoute2.default.data.on('controller', function () {
                _this._dispatchRoute();
            });
        },
        _dispatchRoute: function _dispatchRoute() {
            var controller = _canRoute2.default.data.controller;
            var workspaceName = _canString2.default.underscore(controller);
            this._enableWorkspace(workspaceName);
        },
        beforeRender: function beforeRender() {
            this.setViewData('APP_URL', APP_URL);
            this._super();
        },
        afterStart: function afterStart() {
            this._firstLoad = true;
            this._workspace = null;
            this._initFooter();
            this._initHeader();
            this._initSessionCheck();
            this._dispatchRoute();
            this._super();
            $('html').removeClass('launching');
        },
        onLoadedChange: function onLoadedChange(loaded) {
            if (loaded) {
                $('html').removeClass('loading').addClass('loaded');
            } else {
                $('html').removeClass('loaded').addClass('loading');
            }
            this._super(loaded);
        },
        _initHeader: function _initHeader() {
            var navigationLeftComponent = new _left2.default('#js_app_navigation_left');
            navigationLeftComponent.start();
            var filterComponent = new _filter2.default('#js_app_filter');
            filterComponent.start();
            var profileHeaderDropdownComponent = new _header_dropdown2.default('#js_app_profile_dropdown', { user: _user2.default.getCurrent() });
            profileHeaderDropdownComponent.start();
        },
        _initSessionCheck: function _initSessionCheck() {
            var _this2 = this;
            _ajax2.default._requests.on('length', function (ev, length) {
                if (!length) {
                    _this2._scheduleSessionCheck();
                }
            });
        },
        _scheduleSessionCheck: function _scheduleSessionCheck() {
            var timeout = _session2.default.getTimeout();
            if (this._sessionCheckTimeout != null) {
                clearTimeout(this._sessionCheckTimeout);
                this._sessionCheckTimeout = null;
            }
            this._sessionCheckTimeout = setTimeout(function () {
                $('html').one('mousemove mousedown keypress mousewheel', function () {
                    return _session2.default.check();
                });
            }, timeout);
        },
        _initFooter: function _initFooter() {
            var loadingBarComponent = new _loading_bar2.default('#js_app_loading_bar');
            loadingBarComponent.start();
            new _notification2.default('#js_app_notificator');
        },
        _enableWorkspace: function _enableWorkspace(name, options) {
            var _this3 = this;
            this._destroyWorkspace().then(function () {
                return _this3._initWorkspace(name, options);
            });
        },
        _getWorkspaceClassByName: function _getWorkspaceClassByName(name) {
            var WorkspaceClass = null;
            switch (name) {
            case 'administration':
                WorkspaceClass = _workspace2.default;
                break;
            case 'password':
                WorkspaceClass = _workspace4.default;
                break;
            case 'settings':
                WorkspaceClass = _workspace6.default;
                break;
            case 'user':
                WorkspaceClass = _workspace8.default;
                break;
            }
            return WorkspaceClass;
        },
        _destroyWorkspace: function _destroyWorkspace() {
            var _this4 = this;
            $('#js_wsp_primary_menu_wrapper').empty();
            $('#js_wsp_secondary_menu_wrapper').empty();
            $('.main-action-wrapper').empty();
            $('#container').removeClass();
            $('#js_app_panel_main').empty();
            if (_contextual_menu2.default._instance) {
                _contextual_menu2.default._instance.destroyAndRemove();
            }
            return new Promise(function (resolve) {
                var checkInterval = setInterval(function () {
                    if (!_this4._workspace || _this4._workspace.state.destroyed) {
                        clearInterval(checkInterval);
                        _this4._workspace = null;
                        resolve();
                    }
                }, 200);
            });
        },
        _initWorkspace: function _initWorkspace(name, options) {
            this.state.loaded = false;
            var workspaceOptions = {
                id: 'js_passbolt_' + name + '_workspace_controller',
                label: name
            };
            $.extend(workspaceOptions, options);
            var selector = $('#js_app_panel_main');
            var WorkspaceComponent = this._getWorkspaceClassByName(name);
            var workspace = _component4.default.create(selector, 'last', WorkspaceComponent, workspaceOptions);
            this._workspace = workspace;
            this.addLoadedDependency(workspace);
            workspace.start();
            $('#container').addClass('page ' + name);
            _bus2.default.trigger('workspace_enabled', { workspace: workspace });
        },
        '{mad.bus.element} request_workspace': function madBusElementRequest_workspace(el, ev) {
            var workspaceName = ev.data.workspace;
            var options = ev.data.options || {};
            this._enableWorkspace(workspaceName, options);
        },
        '{mad.bus.element} remove_all_focuses': function madBusElementRemove_all_focuses() {
            var $focused = $(':focus');
            $focused.blur();
        },
        '{window} p3_narrow_checked': function windowP3_narrow_checked() {
            _bus2.default.trigger('passbolt.html_helper.window_resized');
        }
    });
    exports.default = App;
});
/*app/config/notification.json*/
define('app/config/notification.json', [], function () {
    return {
        'notification': {
            'timeout': 10000,
            'displaySeverity': [
                'success',
                'error'
            ],
            'messages': {
                'app_resources_index_success': {
                    'msg': 'The passwords have been loaded',
                    'severity': 'notice'
                },
                'app_resources_add_success': { 'msg': 'The password has been added successfully' },
                'app_resources_delete_success': { 'msg': 'The password has been deleted' },
                'app_resources_delete_all_success': { 'msg': 'The passwords have been deleted' },
                'app_resources_update_success': { 'msg': 'The password has been updated successfully' },
                'app_users_addPost_success': { 'msg': 'The user has been added successfully' },
                'app_users_delete_success': { 'msg': 'The user has been deleted' },
                'app_users_delete_error_not_found': { 'msg': 'The user does not exist' },
                'app_users_editPost_success': { 'msg': 'The user has been updated successfully' },
                'app_users_editavatar_success': { 'msg': 'The picture of the user has been updated successfully' },
                'app_users_editavatar_error': { 'msg': '%header.message%' },
                'app_users_edit_error_not_found': { 'msg': 'The user does not exist' },
                'app_users_view_error_not_found': { 'msg': 'The user does not exist' },
                'plugin_secret_copy_success': { 'msg': 'The password has been copied to clipboard' },
                'plugin_clipboard_copy_success': { 'msg': 'The %name% has been copied to clipboard' },
                'app_favorites_add_success': { 'msg': 'The password has been added as a favorite' },
                'app_favorites_delete_success': { 'msg': 'The password has been removed from favorites' },
                'app_comments_addPost_success': { 'msg': 'The comment has been added successfully' },
                'app_comments_delete_success': { 'msg': 'The comment has been deleted' },
                'app_share_share_success': { 'msg': 'The permissions have been updated successfully' },
                'app_groups_add_success': { 'msg': 'The group has been added successfully' },
                'app_groups_edit_success': { 'msg': 'The group has been edited successfully' },
                'app_groups_add_error': { 'msg': 'The group could not be saved. %header.message%' },
                'app_groups_delete_success': { 'msg': 'The group has been deleted' },
                'secret_decrypt_error': { 'msg': 'The secret cannot be decrypted. %message%' },
                'app_passwords_edit_error_not_found': { 'msg': 'The password does not exist' },
                'app_passwords_delete_error_not_found': { 'msg': 'The password does not exist' },
                'app_passwords_view_error_not_found': { 'msg': 'The password does not exist' },
                'export_passwords_success': { 'msg': 'The passwords were exported successfully' },
                'app_orgsettings_post_success': { 'msg': 'The multi factor authentication settings for the organization were updated.' },
                'app_directorysync_settings_update_success': { 'msg': 'The users directory settings for the organization were updated.' },
                'app_notificationorgsettings_post_success': { 'msg': 'The email notification settings were updated.' }
            }
        }
    };
});
/*app/config/config.json*/
define('app/config/config.json', [], function () {
    return {
        'app': {
            'controllerElt': '#js_app_controller',
            'namespace': 'passbolt',
            'ControllerClassName': 'passbolt.component.App'
        },
        'ui': { 'workspace': { 'showSidebar': true } },
        'notification': { 'timeout': 6000 },
        'error': { 'ErrorHandlerClassName': 'passbolt.error.ErrorHandler' },
        'event': { 'eventBusControllerElt': '#js_bus_controller' },
        'secret': {
            'generator': {
                'masks': [
                    'alpha',
                    'uppercase',
                    'digit',
                    'special'
                ],
                'length': 13
            }
        },
        'net': { 'ResponseHandlerClassName': 'passbolt.net.ResponseHandler' }
    };
});
/*app/bootstrap*/
define('app/bootstrap', [
    'exports',
    'app/net/ajax',
    'browser-cookies/src/browser-cookies',
    'app/model/map/accountSetting',
    'passbolt-mad/bootstrap',
    'passbolt-mad/config/config',
    'app/component/app',
    'app/model/map/role',
    'app/model/map/user',
    'app/config/notification.json',
    'app/config/config.json',
    'app/config/routes.js'
], function (exports, _ajax, _browserCookies, _accountSetting, _bootstrap, _config, _app, _role, _user, _notification, _config3) {
    'use strict';
    Object.defineProperty(exports, '__esModule', { value: true });
    var _ajax2 = _interopRequireDefault(_ajax);
    var _browserCookies2 = _interopRequireDefault(_browserCookies);
    var _accountSetting2 = _interopRequireDefault(_accountSetting);
    var _bootstrap2 = _interopRequireDefault(_bootstrap);
    var _config2 = _interopRequireDefault(_config);
    var _app2 = _interopRequireDefault(_app);
    var _role2 = _interopRequireDefault(_role);
    var _user2 = _interopRequireDefault(_user);
    var _notification2 = _interopRequireDefault(_notification);
    var _config4 = _interopRequireDefault(_config3);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    var AppBootstrap = _bootstrap2.default.extend('passbolt.Bootstrap', {}, {
        init: function init(options) {
            var _this = this;
            this._super(options);
            this._csrfToken();
            Promise.all([
                this._loadSettings(),
                this._loadUser(),
                this._loadRoles()
            ]).then(function () {
                return _this._loadAccountSettings();
            }).then(function () {
                return _this._loadApp();
            }).then(null, function (e) {
                throw e;
            });
        },
        _csrfToken: function _csrfToken() {
            var csrfToken = _browserCookies2.default.get('csrfToken');
            _config2.default.write('app.csrfToken', csrfToken);
        },
        _loadSettings: function _loadSettings() {
            var url = 'settings.json?contain[header]=0';
            var silentNotify = true;
            return _ajax2.default.request({
                url: url,
                silentNotify: silentNotify
            }).then(function (data) {
                _config2.default.load({ server: data });
                _config2.default.load(_config4.default);
                _config2.default.load(_notification2.default);
            });
        },
        _loadUser: function _loadUser() {
            return _user2.default.findOne({ id: 'me' }).then(function (user) {
                _user2.default.setCurrent(user);
            });
        },
        _loadRoles: function _loadRoles() {
            return _role2.default.findAll().then(function (roles) {
                _role2.default.setCache(roles);
            });
        },
        _loadAccountSettings: function _loadAccountSettings() {
            var plugins = _config2.default.read('server.passbolt.plugins');
            if (plugins && plugins.accountSettings) {
                return _accountSetting2.default.findAll().then(function (accountSettings) {
                    _accountSetting2.default.saveInConfig(accountSettings);
                });
            }
            return null;
        },
        _loadApp: function _loadApp() {
            var app = new _app2.default('#js_app_controller');
            app.start();
        }
    });
    exports.default = AppBootstrap;
});
/*passbolt-appjs@2.10.0#passbolt*/
define('passbolt-appjs@2.10.0#passbolt', [
    'app/bootstrap',
    'jquery'
], function (_bootstrap, _jquery) {
    'use strict';
    var _bootstrap2 = _interopRequireDefault(_bootstrap);
    var _jquery2 = _interopRequireDefault(_jquery);
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
    }
    (0, _jquery2.default)(document).ready(function () {
        new _bootstrap2.default();
    });
});